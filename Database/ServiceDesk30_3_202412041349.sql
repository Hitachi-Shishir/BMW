<<<<<<< HEAD
ï»¿--
-- Script was generated by Devart dbForge Studio for SQL Server, Version 7.0.210.0
-- Product home page: https://www.devart.com/dbforge/sql/studio
-- Script date 04-12-2024 13:49:26
-- Server version: 15.00.2000
--

SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO
USE master
GO

IF DB_NAME() <> N'master' SET NOEXEC ON

--
-- Create database [ServiceDesk30_3]
--
PRINT (N'Create database [ServiceDesk30_3]')
GO
IF DB_ID('ServiceDesk30_3') IS NULL
CREATE DATABASE ServiceDesk30_3
ON PRIMARY(
    NAME = N'ServiceDesk30_3',
    FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ServiceDesk30_3.mdf',
    SIZE = 139264KB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 65536KB
)
LOG ON(
    NAME = N'ServiceDesk30_3_log',
    FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ServiceDesk30_3_log.ldf',
    SIZE = 204800KB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 65536KB
)
GO

--
-- Alter database
--
PRINT (N'Alter database')
GO
ALTER DATABASE ServiceDesk30_3
  SET
    ANSI_NULL_DEFAULT OFF,
    ANSI_NULLS OFF,
    ANSI_PADDING OFF,
    ANSI_WARNINGS OFF,
    ARITHABORT OFF,
    AUTO_CLOSE OFF,
    AUTO_CREATE_STATISTICS ON,
    AUTO_SHRINK OFF,
    AUTO_UPDATE_STATISTICS ON,
    AUTO_UPDATE_STATISTICS_ASYNC OFF,
    COMPATIBILITY_LEVEL = 150,
    CONCAT_NULL_YIELDS_NULL OFF,
    CURSOR_CLOSE_ON_COMMIT OFF,
    CURSOR_DEFAULT GLOBAL,
    DATE_CORRELATION_OPTIMIZATION OFF,
    DB_CHAINING OFF,
    HONOR_BROKER_PRIORITY OFF,
    MULTI_USER,
    NESTED_TRIGGERS = ON,
    NUMERIC_ROUNDABORT OFF,
    PAGE_VERIFY CHECKSUM,
    PARAMETERIZATION SIMPLE,
    QUOTED_IDENTIFIER OFF,
    READ_COMMITTED_SNAPSHOT OFF,
    RECOVERY FULL,
    RECURSIVE_TRIGGERS OFF,
    TRANSFORM_NOISE_WORDS = OFF,
    TRUSTWORTHY OFF
    WITH ROLLBACK IMMEDIATE
GO

ALTER DATABASE ServiceDesk30_3
  COLLATE SQL_Latin1_General_CP1_CI_AS
GO

ALTER DATABASE ServiceDesk30_3
  SET DISABLE_BROKER
GO

ALTER DATABASE ServiceDesk30_3
  SET ALLOW_SNAPSHOT_ISOLATION OFF
GO

ALTER DATABASE ServiceDesk30_3
  SET FILESTREAM (NON_TRANSACTED_ACCESS = OFF)
GO

ALTER DATABASE ServiceDesk30_3
  SET QUERY_STORE = OFF
GO

USE ServiceDesk30_3
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

--
-- Alter authorization on database [ServiceDesk30_3]
--
PRINT (N'Alter authorization on database [ServiceDesk30_3]')
GO
IF DB_ID('ServiceDesk30_3') IS NOT NULL
ALTER AUTHORIZATION ON DATABASE :: ServiceDesk30_3 TO [EC2AMAZ-G25T1EO\Administrator]
GO

USE ServiceDesk30_3
GO

IF DB_NAME() <> N'ServiceDesk30_3' SET NOEXEC ON
GO

--
-- Create table [dbo].[VSA_MonitorSerialNumber]
--
PRINT (N'Create table [dbo].[VSA_MonitorSerialNumber]')
GO
IF OBJECT_ID(N'dbo.VSA_MonitorSerialNumber', 'U') IS NULL
CREATE TABLE dbo.VSA_MonitorSerialNumber (
  ID int IDENTITY,
  MonitorID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MonitorSerialNumber varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Agent_Guid numeric(26) NULL,
  ComputerName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter procedure [dbo].[VSAsp_MonitorSerialNumber]
--
GO
PRINT (N'Create or alter procedure [dbo].[VSAsp_MonitorSerialNumber]')
GO
IF OBJECT_ID(N'dbo.VSAsp_MonitorSerialNumber', 'P') IS NULL
EXEC sp_executesql N'Create OR ALTER PROC dbo.VSAsp_MonitorSerialNumber
(	
	@MonitorID varchar(100),
	@MonitorSerialNumber varchar(100),
	@Agent_Guid	numeric(26,0),
	@ComputerName varchar(100)
)
AS
BEGIN
 
    Delete from VSA_MonitorSerialNumber where InsertDt<=DATEADD(MINUTE,-5,GETDATE()) and Agent_Guid=@Agent_Guid

	INSERT INTO VSA_MonitorSerialNumber
							 ( MonitorID, MonitorSerialNumber, Agent_Guid, ComputerName, InsertDt)
	           VALUES        (@MonitorID, @MonitorSerialNumber, @Agent_Guid, @ComputerName, GETDATE())


END
'
GO

--
-- Create table [dbo].[TechLeave]
--
PRINT (N'Create table [dbo].[TechLeave]')
GO
IF OBJECT_ID(N'dbo.TechLeave', 'U') IS NULL
CREATE TABLE dbo.TechLeave (
  id int IDENTITY,
  TechId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TechName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LeaveFromdate datetime NULL,
  LeaveTodate datetime NULL,
  ApplyDate datetime NULL DEFAULT (getdate()),
  AppliedbyUserid varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertTechLeave]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertTechLeave]')
GO
IF OBJECT_ID(N'dbo.SP_InsertTechLeave', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_InsertTechLeave  
(  
@TechId varchar(50),  
@TechName varchar(50),   
@LeaveFromdate DATETIME,   
@LeaveTodate DATETIME,   
@AppliedbyUserid varchar(50)  
)  
AS  
BEGIN  
INSERT INTO TechLeave(TechId,TechName,LeaveFromdate,LeaveTodate,ApplyDate,AppliedbyUserid)  
VALUES(@TechId,@TechName,@LeaveFromdate,@LeaveTodate,GETDATE(),@AppliedbyUserid)  
END
'
GO

--
-- Create table [dbo].[SR_Cloud]
--
PRINT (N'Create table [dbo].[SR_Cloud]')
GO
IF OBJECT_ID(N'dbo.SR_Cloud', 'U') IS NULL
CREATE TABLE dbo.SR_Cloud (
  ID int IDENTITY,
  Grade varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  M2Approval varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SelfService]
--
PRINT (N'Create table [dbo].[SelfService]')
GO
IF OBJECT_ID(N'dbo.SelfService', 'U') IS NULL
CREATE TABLE dbo.SelfService (
  id int IDENTITY,
  agentguid varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  departmentname varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  username varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  useremail varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertedTime datetime NULL DEFAULT (getdate()),
  Active bit NULL DEFAULT (1),
  Reqtype varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SDTicketInsertHistory]
--
PRINT (N'Create table [dbo].[SDTicketInsertHistory]')
GO
IF OBJECT_ID(N'dbo.SDTicketInsertHistory', 'U') IS NULL
CREATE TABLE dbo.SDTicketInsertHistory (
  noteid int IDENTITY,
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDateTime datetime NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateBy nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDTicketHistory]
--
PRINT (N'Create table [dbo].[SDTicketHistory]')
GO
IF OBJECT_ID(N'dbo.SDTicketHistory', 'U') IS NULL
CREATE TABLE dbo.SDTicketHistory (
  noteid int IDENTITY,
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDateTime datetime NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateBy nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncidentdeleted]
--
PRINT (N'Create table [dbo].[SDIncidentdeleted]')
GO
IF OBJECT_ID(N'dbo.SDIncidentdeleted', 'U') IS NULL
CREATE TABLE dbo.SDIncidentdeleted (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncidentBulkUpdate]
--
PRINT (N'Create table [dbo].[SDIncidentBulkUpdate]')
GO
IF OBJECT_ID(N'dbo.SDIncidentBulkUpdate', 'U') IS NULL
CREATE TABLE dbo.SDIncidentBulkUpdate (
  id int IDENTITY,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  prevSDstatusFK numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncident_InsertLog]
--
PRINT (N'Create table [dbo].[SDIncident_InsertLog]')
GO
IF OBJECT_ID(N'dbo.SDIncident_InsertLog', 'U') IS NULL
CREATE TABLE dbo.SDIncident_InsertLog (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStatusFK numeric NULL,
  prevSDstatusFK numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncident]
--
PRINT (N'Create table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.SDIncident', 'U') IS NULL
CREATE TABLE dbo.SDIncident (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStatusFK numeric NULL,
  prevSDstatusFK numeric NULL,
  Email_FromInboxID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SentEsclation bit NULL,
  CurrentEscalationLevel int NULL,
  CONSTRAINT PKSDIncident PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create index [IX_SDIncident_Ticketref] on table [dbo].[SDIncident]
--
PRINT (N'Create index [IX_SDIncident_Ticketref] on table [dbo].[SDIncident]')
GO
IF NOT EXISTS (
  SELECT 1 FROM sys.indexes WITH (NOLOCK)
  WHERE name = N'IX_SDIncident_Ticketref' AND object_id = OBJECT_ID(N'dbo.SDIncident'))
  AND EXISTS (
  SELECT 1 FROM sys.columns WITH (NOLOCK)
  WHERE name = N'Ticketref' AND object_id = OBJECT_ID(N'dbo.SDIncident'))
CREATE INDEX IX_SDIncident_Ticketref
  ON dbo.SDIncident (Ticketref)
  ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_AssignAndEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AssignAndEsclation]')
GO
IF OBJECT_ID(N'dbo.SP_AssignAndEsclation', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AssignAndEsclation
AS
BEGIN
declare @lvl varchar(20)
select @lvl =Ticketref from SDIncident where 
sdStatusFK=''738442562'' and DATEDIFF(MINUTE,creationDateTime,GETDATE())>=30 and DATEDIFF(HOUR,creationDateTime,GETDATE())<=2
if(@lvl!='''')
begin
select Ticketref,''30'' as OpenTime from SDIncident where
sdStatusFK=''738442562'' and DATEDIFF(MINUTE,creationDateTime,GETDATE())>=30 and DATEDIFF(HOUR,creationDateTime,GETDATE())<=2
end
else 
begin
select Ticketref,''120'' as OpenTime from SDIncident where sdStatusFK=''738442562'' and  DATEDIFF(HOUR,creationDateTime,GETDATE())>2
end
END
'
GO

--
-- Create or alter procedure [dbo].[SD_AutoAssignTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_AutoAssignTicket]')
GO
IF OBJECT_ID(N'dbo.SD_AutoAssignTicket', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER Proc dbo.SD_AutoAssignTicket
(
	


      @category varchar(500)= null
	  ,	 @location1 varchar(50)= null
	     ,@Department1 varchar(max)= null
   ,@Ticketref nvarchar(100)=null
   ,@OrgId numeric(18,0)=null
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''TicketAssignHirel'')
  BEGIN
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')
	BEGIN
		if(@location1=''Gandhinagar'' or @department1=''Customer Support'')
			BEGIN

					--------ticket assign to chintan
				 update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@OrgId
			END

 
		if(@location1!=''gandhinagar'' and @department1!=''Customer Support'')
			BEGIN 
				---------------- ticket assign to krunal
				update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@OrgId
			END
 
 
		END
			else if(@category like ''%Incident - Business Application%'')
				BEGIN
						-----------  ticket assign to nalin
				update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@OrgId
				END
		else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')
				BEGIN
			-------------- ticket assign to anand
				update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@OrgId
				END
  END


	
	END

'
GO

--
-- Create or alter procedure [dbo].[GetUniqueTicketRef]
--
GO
PRINT (N'Create or alter procedure [dbo].[GetUniqueTicketRef]')
GO
IF OBJECT_ID(N'dbo.GetUniqueTicketRef', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.GetUniqueTicketRef
    @TicketNo NVARCHAR(50),
    @organizationFK INT,
    @NewTicketref NVARCHAR(50) OUTPUT
AS
BEGIN
    DECLARE @Increment INT = 1;
    DECLARE @BaseTicketref NVARCHAR(50);
    SET @BaseTicketref = LEFT(@TicketNo, LEN(@TicketNo) - LEN(CAST(CAST(SUBSTRING(@TicketNo, PATINDEX(''%[0-9]%'', @TicketNo), LEN(@TicketNo)) AS INT) AS NVARCHAR(50))));
    WHILE EXISTS (SELECT 1 FROM SDIncident WHERE Ticketref = @TicketNo AND organizationFK = @organizationFK)
    BEGIN
	SET @TicketNo = @BaseTicketref + CAST(CAST(SUBSTRING(@TicketNo, PATINDEX(''%[0-9]%'', @TicketNo), LEN(@TicketNo)) AS INT) + @Increment AS NVARCHAR(50));
        SET @Increment = @Increment + 1;
    END
    SET @NewTicketref = @TicketNo;
END
'
GO

--
-- Create table [dbo].[SD_UserScope]
--
PRINT (N'Create table [dbo].[SD_UserScope]')
GO
IF OBJECT_ID(N'dbo.SD_UserScope', 'U') IS NULL
CREATE TABLE dbo.SD_UserScope (
  ScopeID numeric NULL,
  ScopeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ScopeDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddUserScope]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddUserScope]')
GO
IF OBJECT_ID(N'dbo.SD_spAddUserScope', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddUserScope
(
	@ScopeID numeric(18,0) = NULL,
	@ScopeName varchar(50) =NULL,
	@ScopeDesc varchar(max) =NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddUserScope'')
	
	BEGIN
	INSERT INTO	SD_UserScope(ScopeID
     ,ScopeName
     ,ScopeDesc
     ,IsActive)
	values(@ScopeID
      ,@ScopeName
      ,@ScopeDesc
      ,@IsActive)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_UserScope
	END

		if(@Option=''UpdateUserScope'')
	
	BEGIN
	update 	SD_UserScope set 

     ScopeName=@ScopeName
     ,ScopeDesc=@ScopeDesc
     ,IsActive=@IsActive
	 where ScopeID=@ScopeID
	END
		if(@Option=''DeleteUserScope'')
	
	BEGIN
	Delete  from 	SD_UserScope
 where ScopeID=@ScopeID
	END
	END



'
GO

--
-- Create table [dbo].[SD_User_SRApproval_SRDesk_New]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval_SRDesk_New]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval_SRDesk_New', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval_SRDesk_New (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL DEFAULT (1),
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_Insert_SD_User_SRApproval_SRDesk_New]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_Insert_SD_User_SRApproval_SRDesk_New]')
GO
IF OBJECT_ID(N'dbo.SP_Insert_SD_User_SRApproval_SRDesk_New', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_Insert_SD_User_SRApproval_SRDesk_New
    @UserID varchar(50),
    @EmpID VARCHAR(50),
    @LoginName VARCHAR(100),
    @Approval1Name VARCHAR(100) = NULL,
    @Approval1Email VARCHAR(100) = NULL,
    @Approval1Active BIT = 1, -- Default value set to 1
    @Approval2Name VARCHAR(100) = NULL,
    @Approval2Email VARCHAR(100) = NULL,
    @Approval2Active BIT = NULL,
    @Approval3Name VARCHAR(100) = NULL,
    @Approval3Email VARCHAR(100) = NULL,
    @Approval3Active BIT = NULL,
    @Approval4Name VARCHAR(100) = NULL,
    @Approval4Email VARCHAR(100) = NULL,
    @Approval4Active BIT = NULL,
    @Approval4Status NUMERIC(18, 0) = NULL,
    @Approval4Level VARCHAR(100) = NULL,
    @Approval4RejectStatus NUMERIC(18, 0) = NULL,
    @Approval5Name VARCHAR(100) = NULL,
    @Approval5Email VARCHAR(100) = NULL,
    @Approval5Active BIT = NULL,
    @Approval5Status NUMERIC(18, 0) = NULL,
    @Approval5Level VARCHAR(100) = NULL,
    @Approval5RejectStatus NUMERIC(18, 0) = NULL,
    @InsertBy VARCHAR(50) = NULL,
    @InsertDt DATETIME = NULL,
    @UpdateBy VARCHAR(50) = NULL,
    @UpdateDt DATETIME = NULL
AS
BEGIN
    INSERT INTO [dbo].[SD_User_SRApproval_SRDesk_New]
    (
        [UserID], 
        [EmpID], 
        [LoginName], 
        [Approval1Name], 
        [Approval1Email], 
        [Approval1Active], 
        [Approval2Name], 
        [Approval2Email], 
        [Approval2Active], 
        [Approval3Name], 
        [Approval3Email], 
        [Approval3Active], 
        [Approval4Name], 
        [Approval4Email], 
        [Approval4Active], 
        [Approval4Status], 
        [Approval4Level], 
        [Approval4RejectStatus], 
        [Approval5Name], 
        [Approval5Email], 
        [Approval5Active], 
        [Approval5Status], 
        [Approval5Level], 
        [Approval5RejectStatus], 
        [InsertBy], 
        [InsertDt], 
        [UpdateBy], 
        [UpdateDt]
    )
    VALUES 
    (
        @UserID, 
        @EmpID, 
        @LoginName, 
        @Approval1Name, 
        @Approval1Email, 
        @Approval1Active, 
        @Approval2Name, 
        @Approval2Email, 
        @Approval2Active, 
        @Approval3Name, 
        @Approval3Email, 
        @Approval3Active, 
        @Approval4Name, 
        @Approval4Email, 
        @Approval4Active, 
        @Approval4Status, 
        @Approval4Level, 
        @Approval4RejectStatus, 
        @Approval5Name, 
        @Approval5Email, 
        @Approval5Active, 
        @Approval5Status, 
        @Approval5Level, 
        @Approval5RejectStatus, 
        @InsertBy, 
        ISNULL(@InsertDt, GETDATE()), 
        @UpdateBy, 
        @UpdateDt
    );
END;
'
GO

--
-- Create table [dbo].[SD_User_SRApproval_SRDesk]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval_SRDesk]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval_SRDesk', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval_SRDesk (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL,
  Approval1Status numeric NULL,
  Approval1Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1RejectStatus numeric NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval2Status numeric NULL,
  Approval2Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2RejectStatus numeric NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval3Status numeric NULL,
  Approval3Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3RejectStatus numeric NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (UserID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_User_SRApproval]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL,
  Approval1Status numeric NULL,
  Approval1Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1RejectStatus numeric NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval2Status numeric NULL,
  Approval2Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2RejectStatus numeric NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval3Status numeric NULL,
  Approval3Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3RejectStatus numeric NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (UserID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_User_Master]
--
PRINT (N'Create table [dbo].[SD_User_Master]')
GO
IF OBJECT_ID(N'dbo.SD_User_Master', 'U') IS NULL
CREATE TABLE dbo.SD_User_Master (
  SD_UID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  FirstName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LastName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmailID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Pass varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserScope varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserRole varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LocCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Manager_UserID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Designation varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContactNo varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRemarks varchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  AccountCreatnDt datetime NULL,
  LastLoginDt datetime NULL,
  LastPassChngDt datetime NULL,
  LoginAttempts int NULL,
  Accontlock int NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  Status varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DomainType varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Org_ID varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  ISMfa bit NULL,
  UserType nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDRole nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LoginStatus bit NULL,
  LoginSessionID varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RememberISMfa bit NULL DEFAULT (0),
  RememberISMfaTime datetime NULL,
  Serialno varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Theme varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT DF_SD_User_Master_Theme DEFAULT ('blue-theme'),
  ThemeModify bit NOT NULL DEFAULT (0),
  PRIMARY KEY CLUSTERED (LoginName)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create index [IX_SD_User_Master_LoginName] on table [dbo].[SD_User_Master]
--
PRINT (N'Create index [IX_SD_User_Master_LoginName] on table [dbo].[SD_User_Master]')
GO
IF NOT EXISTS (
  SELECT 1 FROM sys.indexes WITH (NOLOCK)
  WHERE name = N'IX_SD_User_Master_LoginName' AND object_id = OBJECT_ID(N'dbo.SD_User_Master'))
  AND EXISTS (
  SELECT 1 FROM sys.columns WITH (NOLOCK)
  WHERE name = N'LoginName' AND object_id = OBJECT_ID(N'dbo.SD_User_Master'))
CREATE INDEX IX_SD_User_Master_LoginName
  ON dbo.SD_User_Master (LoginName)
  ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_UpdateGrade]
--
PRINT (N'Create table [dbo].[SD_UpdateGrade]')
GO
IF OBJECT_ID(N'dbo.SD_UpdateGrade', 'U') IS NULL
CREATE TABLE dbo.SD_UpdateGrade (
  Email nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Grade nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  agentguid numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TrackEsclationTicketMailForResol]
--
PRINT (N'Create table [dbo].[SD_TrackEsclationTicketMailForResol]')
GO
IF OBJECT_ID(N'dbo.SD_TrackEsclationTicketMailForResol', 'U') IS NULL
CREATE TABLE dbo.SD_TrackEsclationTicketMailForResol (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Eventdt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TrackEsclationTicketMail]
--
PRINT (N'Create table [dbo].[SD_TrackEsclationTicketMail]')
GO
IF OBJECT_ID(N'dbo.SD_TrackEsclationTicketMail', 'U') IS NULL
CREATE TABLE dbo.SD_TrackEsclationTicketMail (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Eventdt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketNotes]
--
PRINT (N'Create table [dbo].[SD_TicketNotes]')
GO
IF OBJECT_ID(N'dbo.SD_TicketNotes', 'U') IS NULL
CREATE TABLE dbo.SD_TicketNotes (
  ID bigint IDENTITY (548342, 2592),
  TicketID numeric NULL,
  Ticketref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EdityBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EditedDt datetime NULL,
  NoteDesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  organizationFK numeric NULL,
  EngineerNote nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketIncrementRef]
--
PRINT (N'Create table [dbo].[SD_TicketIncrementRef]')
GO
IF OBJECT_ID(N'dbo.SD_TicketIncrementRef', 'U') IS NULL
CREATE TABLE dbo.SD_TicketIncrementRef (
  ID int IDENTITY,
  ReqRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReqPrefix nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LastUpdatedID varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketFileUpload]
--
PRINT (N'Create table [dbo].[SD_TicketFileUpload]')
GO
IF OBJECT_ID(N'dbo.SD_TicketFileUpload', 'U') IS NULL
CREATE TABLE dbo.SD_TicketFileUpload (
  ID int IDENTITY (539264, 29146),
  TicketID numeric NULL,
  Ticketref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Filepath nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EntryDt datetime NULL,
  Filename varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spTicketFileupload]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spTicketFileupload]')
GO
IF OBJECT_ID(N'dbo.SD_spTicketFileupload', 'P') IS NULL
EXEC sp_executesql N'  
  
  
CREATE OR ALTER Proc dbo.SD_spTicketFileupload  
(  
 @ID int =null  
      ,@TicketID numeric(18,0)=null  
      ,@Ticketref nvarchar(100)=null  
      ,@Filepath nvarchar(max)=null  
      ,@EntryDt datetime=null  
 ,@InsertDt datetime =NULL  
 ,@UpdateBy int =NULL  
 ,@UpdateDt datetime =NULL  
 ,@Filename nvarchar(100) = NULL  
 ,@OrgRef numeric(18,0)=NULL  
   
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicketAttach'')  
   
 BEGIN  
 Declare @SDTicketID numeric(18,0);  
 Declare @SDTicketFile nvarchar(max);  
 set @SDTicketID=(select id  from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgRef)  
-- set @SDTicketFile=Convert(varchar,(@Filepath + ''''+@Ticketref+'''') );  
 INSERT INTO SD_TicketFileUpload(TicketID  
      ,Ticketref  
      ,Filepath  
      ,EntryDt,Filename,OrgRef)values(@SDTicketID  
      ,@Ticketref  
      ,@Filepath  
      ,GETDATE(),@Filename,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
  
   select   * from SD_TicketFileUpload where Ticketref=@Ticketref and OrgRef=@OrgRef  order by Entrydt desc  
 END  
  
  
 END  
  
   
   '
GO

--
-- Create table [dbo].[SD_TicketColumnViewUserwise]
--
PRINT (N'Create table [dbo].[SD_TicketColumnViewUserwise]')
GO
IF OBJECT_ID(N'dbo.SD_TicketColumnViewUserwise', 'U') IS NULL
CREATE TABLE dbo.SD_TicketColumnViewUserwise (
  ID int IDENTITY (1, 2345678),
  ColumnView nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketColumnView]
--
PRINT (N'Create table [dbo].[SD_TicketColumnView]')
GO
IF OBJECT_ID(N'dbo.SD_TicketColumnView', 'U') IS NULL
CREATE TABLE dbo.SD_TicketColumnView (
  ID int IDENTITY (1, 2345678),
  ColumnName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  VisibleStatus nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Technician]
--
PRINT (N'Create table [dbo].[SD_Technician]')
GO
IF OBJECT_ID(N'dbo.SD_Technician', 'U') IS NULL
CREATE TABLE dbo.SD_Technician (
  TechID int IDENTITY (529362, 1),
  RefUserID numeric NULL,
  TechLoginName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RequstTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryFK nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CreatedDt datetime NULL,
  CreatedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL,
  UpdatedDt datetime NULL,
  UpdatedBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  TicketCount numeric NULL DEFAULT (0),
  TechLevel varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_StatusRestriction]
--
PRINT (N'Create table [dbo].[SD_StatusRestriction]')
GO
IF OBJECT_ID(N'dbo.SD_StatusRestriction', 'U') IS NULL
CREATE TABLE dbo.SD_StatusRestriction (
  id int IDENTITY,
  StatusId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Reqtype varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  Active bit NULL DEFAULT (1),
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_StatusRestrict]
--
PRINT (N'Create table [dbo].[SD_StatusRestrict]')
GO
IF OBJECT_ID(N'dbo.SD_StatusRestrict', 'U') IS NULL
CREATE TABLE dbo.SD_StatusRestrict (
  ID int IDENTITY (638273, 1323),
  StatusID numeric NULL,
  StatusScope nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  deskref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusName nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Status]
--
PRINT (N'Create table [dbo].[SD_Status]')
GO
IF OBJECT_ID(N'dbo.SD_Status', 'U') IS NULL
CREATE TABLE dbo.SD_Status (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  StatusColorCode varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sd_stageFK numeric(26) NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddTicketNotes]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddTicketNotes]')
GO
IF OBJECT_ID(N'dbo.SD_spAddTicketNotes', 'P') IS NULL
EXEC sp_executesql N'







CREATE OR ALTER Proc dbo.SD_spAddTicketNotes
(
	
	@TicketID numeric(18,0)=null,
      @Ticketref varchar(100)=null,
      @EdityBy varchar(100)=null,
     @EditedDt datetime=null,
      @NoteDesc nvarchar(max)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@sdStatusFK numeric(18,0) =null,
	@sdPrevStatus varchar(100) =null,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@organizationFK numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddNotes'')
	
	BEGIN
		 Declare @PrevStage varchar(100)=null;
		  Declare @TicketRefID numeric(18,0)=null;
		    Declare @sdstatus nvarchar(100)=null;		
		 set @PrevStage=(select StatusCodeRef from SDIncident a inner join SD_Status
		 b on a.previousStageFK=b.ID  where Ticketref=@Ticketref and organizationFK=@organizationFK)
		  set @TicketRefID=(select id from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
		   set @sdstatus=(select StatusCodeRef from SD_Status where id=@sdStatusFK and OrgDeskRef=@organizationFK)
		  Declare @TicketNotes nvarchar(max);

			
				
				 if(@NoteDesc is null  or @NoteDesc ='''')
				 BEGIN
					--		 set @TicketNotes=						''<p>Auto Generated : Previous Status was ''''''+@PrevStage+'''''' Now ''''''+@sdstatus+''''''<br/> status was updated by : ''''''+@EdityBy+''''''<br/> Engineer Notes :''''''+@NoteDesc+''''
									set @TicketNotes= CONCAT( ''<p>Auto Generated : Previous Status was'' ,@PrevStage,'' Now '',@sdstatus,''<br/> status was updated by : '',@EdityBy,''TicketId'',@Ticketref,''<br/> Engineer Notes :'',@NoteDesc)

							
									INSERT INTO	SD_TicketNotes(TicketID
											  ,Ticketref
											  ,EdityBy
											  ,EditedDt
											  ,NoteDesc,organizationFK,EngineerNote)
											values(@TicketRefID
											  ,@Ticketref
											  ,@EdityBy
											  ,getdate()
											  ,@TicketNotes,@organizationFK,@NoteDesc)	
					END
				else 
						BEGIN
										  Declare @TicketNotes1 nvarchar(max);
										  										 
				set @TicketNotes1= CONCAT( ''<p>Auto Generated :'',''TicketID'',@Ticketref,''<br/> Changes was updated by : '',@EdityBy,''<br/> Engineer Notes :'',@NoteDesc)

										 
										 INSERT INTO	SD_TicketNotes(TicketID
							  ,Ticketref
							  ,EdityBy
							  ,EditedDt
							  ,NoteDesc,organizationFK,EngineerNote)
							values(@TicketRefID
							  ,@Ticketref
							  ,@EdityBy
							  ,getdate()
							  ,@TicketNotes1,@organizationFK,@NoteDesc)	
							  print (''ss'');
						END
			
				
		
	END


	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spAddSRApproval]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSRApproval]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSRApproval', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spAddSRApproval
(
@UserID numeric(18, 0) = NULL,
@EmpID varchar(50) = NULL,
@LoginName varchar(100) = NULL,
@Approval1Name varchar(100)= NULL,
@Approval1Email varchar(100)= NULL,
@Approval1Active bit=NULL,
@Approval1Status numeric(18,0) =NULL,
 @Approval1Level nvarchar(10)=NULL,
      @Approval1RejectStatus numeric(18,0) =NULL,
@Approval2Name varchar(100)= NULL,
@Approval2Email varchar(100)= NULL,
@Approval2Active bit=NULL,
@Approval2Status numeric(18,0) =NULL,
 @Approval2Level nvarchar(10)=NULL,
      @Approval2RejectStatus numeric(18,0) =NULL,
@Approval3Name varchar (100) =NULL,
@Approval3Email  varchar (100) =NULL,
@Approval3Active bit=NULL,
@Approval3Status numeric(18,0) =NULL,
 @Approval3Level nvarchar(10)=NULL,
      @Approval3RejectStatus numeric(18,0) =NULL,
@Approval4Name varchar (100) =NULL,
@Approval4Email varchar(100)= NULL,
@Approval4Active bit=NULL,
@Approval4Status numeric(18,0) =NULL,
@Approval4Level nvarchar(10)=NULL,
@Approval4RejectStatus numeric(18,0) =NULL,
@Approval5Name varchar (100)= NULL,
@Approval5Email varchar (100) =NULL,
@Approval5Active bit=NULL,
@Approval5Status numeric(18,0) =NULL,
@Approval5Level nvarchar(10)=NULL,
 @Approval5RejectStatus numeric(18,0) =NULL,
@InsertBy varchar(50)= NULL,
@InsertDt datetime =NULL,
@UpdateBy nvarchar(50) =NULL,
@UpdateDt datetime =NULL,
@Status nvarchar(10) = NULL,
@ID  int =NULL,
@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddSrApproval'')
	
	BEGIN
	INSERT INTO	SD_User_SRApproval(UserID
      ,EmpID
      ,LoginName
      ,Approval1Name
      ,Approval1Email
	  ,Approval1Active
      ,Approval1Status
	  ,Approval1Level
      ,Approval1RejectStatus
      ,Approval2Name
      ,Approval2Email
	   ,Approval2Active
      ,Approval2Status
	   ,Approval2Level
      ,Approval2RejectStatus
      ,Approval3Name
      ,Approval3Email
	   ,Approval3Active
      ,Approval3Status
	   ,Approval3Level
      ,Approval3RejectStatus
      ,Approval4Name
      ,Approval4Email
	   ,Approval4Active
      ,Approval4Status
	   ,Approval4Level
      ,Approval4RejectStatus
      ,Approval5Name
      ,Approval5Email
	   ,Approval5Active
      ,Approval5Status
	   ,Approval5Level
      ,Approval5RejectStatus
      ,InsertBy
      ,InsertDt)
	values(@UserID
      ,@EmpID
      ,@LoginName
      ,@Approval1Name
      ,@Approval1Email
	  ,@Approval1Active
      ,@Approval1Status
	 , @Approval1Level 
     , @Approval1RejectStatus 
      ,@Approval2Name
      ,@Approval2Email
	    ,@Approval2Active
      ,@Approval2Status
	  , @Approval2Level 
     ,@Approval2RejectStatus 
      ,@Approval3Name
      ,@Approval3Email
	  ,@Approval3Active
      ,@Approval3Status
	  ,@Approval3Level 
     ,@Approval3RejectStatus 
      ,@Approval4Name
      ,@Approval4Email
	  ,@Approval4Active
      ,@Approval4Status
	   , @Approval4Level 
     , @Approval4RejectStatus 
      ,@Approval5Name
      ,@Approval5Email
	    ,@Approval5Active
		  	   , @Approval5Level 
     , @Approval5RejectStatus 
      ,@Approval5Status
      ,@InsertBy
      ,GETDATE())	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_Status
	END

		if(@Option=''UpdateSrApproval'')
	
	BEGIN
	update SD_User_SRApproval set
	   Approval1Name=@Approval1Name
      ,Approval1Email=@Approval1Email
	  	    ,Approval1Active=@Approval1Active
      ,Approval1Status=@Approval1Status
	  ,Approval1Level=@Approval1Level
  ,Approval1RejectStatus=@Approval1RejectStatus
      ,Approval2Name=@Approval2Name
      ,Approval2Email=@Approval2Email
	   ,Approval2Active=@Approval2Active
      ,Approval2Status=@Approval2Status
	   ,Approval2Level=@Approval2Level
  ,Approval2RejectStatus=@Approval2RejectStatus

      ,Approval3Name=@Approval3Name
      ,Approval3Email=@Approval3Email
	   ,Approval3Active=@Approval3Active
      ,Approval3Status=@Approval3Status
	     ,Approval3Level=@Approval3Level
  ,Approval3RejectStatus=@Approval3RejectStatus

      ,Approval4Name=@Approval4Name
      ,Approval4Email=@Approval4Email
	   ,Approval4Active=@Approval4Active
      ,Approval4Status=@Approval4Status
	  	     ,Approval4Level=@Approval4Level
  ,Approval4RejectStatus=@Approval4RejectStatus

      ,Approval5Name=@Approval5Name
      ,Approval5Email=@Approval5Email
	   ,Approval5Active=@Approval5Active
      ,Approval5Status=@Approval5Status
	      ,Approval5Level=@Approval5Level
  ,Approval5RejectStatus=@Approval5RejectStatus
	  ,UpdateBy=@UpdateBy,
	  UpdateDt=GETDATE()
	  
	  
	  
	  where ID=@ID
	
	END
		if(@Option=''DeleteApproval'')
	
	BEGIN
	Delete from SD_User_SRApproval where   ID=@ID
	END
	if(@Option=''AddSrApprovalBulk'')
	
	BEGIN
	INSERT INTO	SD_User_SRApproval(UserID
      ,EmpID
      ,LoginName
      ,Approval1Name
      ,Approval1Email
      ,Approval1Status
      ,Approval2Name
      ,Approval2Email
      ,Approval2Status
      ,Approval3Name
      ,Approval3Email
      ,Approval3Status
      ,Approval4Name
      ,Approval4Email
      ,Approval4Status
      ,Approval5Name
      ,Approval5Email
      ,Approval5Status
      ,InsertBy
      ,InsertDt)
	values(@UserID
      ,@EmpID
      ,@LoginName
      ,@Approval1Name
      ,@Approval1Email
      ,@Approval1Status
      ,@Approval2Name
      ,@Approval2Email
      ,@Approval2Status
      ,@Approval3Name
      ,@Approval3Email
      ,@Approval3Status
      ,@Approval4Name
      ,@Approval4Email
      ,@Approval4Status
      ,@Approval5Name
      ,@Approval5Email
      ,@Approval5Status
      ,@InsertBy
      ,GETDATE())	
	END

	END



'
GO

--
-- Create table [dbo].[SD_Stage]
--
PRINT (N'Create table [dbo].[SD_Stage]')
GO
IF OBJECT_ID(N'dbo.SD_Stage', 'U') IS NULL
CREATE TABLE dbo.SD_Stage (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StageCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StageDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovers]
--
PRINT (N'Create table [dbo].[SD_SRApprovers]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovers', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovers (
  ID int IDENTITY (1456754, 1),
  ApproverLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  Status bit NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovalStatus_SRDesk]
--
PRINT (N'Create table [dbo].[SD_SRApprovalStatus_SRDesk]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovalStatus_SRDesk', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovalStatus_SRDesk (
  ID int IDENTITY (284305, 1),
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserID numeric NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovalStatus]
--
PRINT (N'Create table [dbo].[SD_SRApprovalStatus]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovalStatus', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovalStatus (
  ID int IDENTITY (284305, 1),
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserID numeric NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UATAccept nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UATAcceptRemarks nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketRejectStatus_SR]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketRejectStatus_SR]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketRejectStatus_SR', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketRejectStatus_SR
(            
@userName varchar(100)=null,            
@Subject nvarchar(1000)=NULL,            
@EmailBody nvarchar(max)=NULL,                  
@UserID nvarchar(100) = NULL,            
@Ticketref  varchar(100) = NULL,            
@Approval1Name varchar(100)= NULL,            
@Approval1Email varchar(100)= NULL,            
@Approval1Status varchar(50)=NULL,            
@Approval1Remarks varchar(max)=NULL,            
@Approval1Grade varchar(20)=NULL,               
@Approval2Remarks varchar(max)=NULL,           
@Approval3Name varchar (100) =NULL,             
@Approval3Remarks varchar(max)=NULL,           
@Approval5Name varchar (100)= NULL,            
@Approval5Email varchar (100) =NULL,           
@Remarks varchar(max)=NULL,            
@ApproverLevel varchar(10)=NULL,            
@StatusFk numeric(18,0)=NULL,             
@Approval4IsActive bit=NULL,            
@Approval5IsActive bit=NULL,            
@PrevStage numeric(18,0)=null,            
@ToEmail nvarchar(100)=null,            
@assigneeParticipantFK numeric(18,0) =null,            
 @HODApproval nvarchar(200)=null,            
 @OrgId varchar(50)=NULL,
 @ApprovalBy varchar(50)=NULL,          
@Options varchar(50) =NULL
             
 )            
 AS            
 BEGIN             
           declare @location nvarchar(100);            
  declare @M2Status nvarchar(100);            
  declare @EmpCode nvarchar(40);            
  declare @StatusFk1 numeric(18,0);            
  declare @PrevStatus numeric(18,0);            
  declare @sdStageFk numeric(18,0);            
  declare @FromEmail nvarchar(100);   
  --update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus 
		--	where Ticketref=@Ticketref  and organizationFK=@OrgId            
            
            update SD_SRApprovalStatus set Approval1Status=''Rejected''             
         ,Approval1Remarks=@Remarks            
       where TicketRef=@Ticketref  and orgid=@OrgId            
     --        set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     --set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     --   SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')      
  
 -- set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
            
 --      set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
 --      set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
    
 --      if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)            
 --      BEGIN-- reject by manager            
 --           set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
            
                     
 --           set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                        
                   
            
            
 --    -----------now ticket will visible to pool  according to location of ticket             
 --    set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
 --    set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and orgid=@OrgId)            
                     
 --          ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
 --  @organizationFK=@OrgId          
             
 --    if(@ToEmail is not null)            
 --      BEGIN            
 --       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
 --       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
 --      END            
 --      END            
                    
 --             if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
 --              BEGIN            
 --              --Rejected by IT manager             
 --               set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --                set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId            
 --                update SD_SRApprovalStatus set Approval2Status=''Rejected''             
 --                  ,Approval2Remarks=@Remarks            
 --                  where TicketRef=@Ticketref  and orgid=@OrgId            
 --                   -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
 --      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
 --    set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
 --      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
 --   ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --  exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
 --  @organizationFK=@OrgId          
            
 --    -----------now ticket will visible to pool  according to location of ticket             
 --    set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )            
 --    set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)            
                     
                     
 --    if(@ToEmail is not null)            
 --      BEGIN            
 --       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
 --       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
 --      END            
 -- END          
                  
 --         if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
 --            BEGIN            
 --             set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --      set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --            update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId            
 --             update SD_SRApprovalStatus set Approval3Status=''Rejected''             
 --             ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId            
 ----               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
                    
 --               ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --           END           
 --          if(@Approval4IsActive=''1'')            
 --           BEGIN            
 --            if(@ApproverLevel=''L4'')            
 --             BEGIN            
 --               set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
 --             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
 --               update SD_SRApprovalStatus set Approval4Status=''Rejected''             
 --               ,Approval4Remarks=@Remarks            
 --                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
          
 --       ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --             END            
 --           END          
 --        if(@Approval5IsActive=''1'')            
 --         BEGIN            
                          
 --          if(@ApproverLevel=''L5'')            
 --           BEGIN            
 --             set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
 --         update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
 --              update SD_SRApprovalStatus set Approval5Status=''Rejected''             
 --              ,Approval5Remarks=@Remarks            
 --                update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref          
 --set  @ApprovalBy =(select top 1 approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --            END            
 --         END   
		  END'
GO

--
-- Create table [dbo].[SD_SLAForResol]
--
PRINT (N'Create table [dbo].[SD_SLAForResol]')
GO
IF OBJECT_ID(N'dbo.SD_SLAForResol', 'U') IS NULL
CREATE TABLE dbo.SD_SLAForResol (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResponseSLA nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseDate datetime NULL,
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EsclationFlag int NULL,
  NextEsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SLAConfig]
--
PRINT (N'Create table [dbo].[SD_SLAConfig]')
GO
IF OBJECT_ID(N'dbo.SD_SLAConfig', 'U') IS NULL
CREATE TABLE dbo.SD_SLAConfig (
  ID numeric NOT NULL,
  SlaName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  SLADesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SLA]
--
PRINT (N'Create table [dbo].[SD_SLA]')
GO
IF OBJECT_ID(N'dbo.SD_SLA', 'U') IS NULL
CREATE TABLE dbo.SD_SLA (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResponseSLA nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseDate datetime NULL,
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EsclationFlag int NULL,
  NextEsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscDt datetime NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Severity]
--
PRINT (N'Create table [dbo].[SD_Severity]')
GO
IF OBJECT_ID(N'dbo.SD_Severity', 'U') IS NULL
CREATE TABLE dbo.SD_Severity (
  ID numeric NOT NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Serverityref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Serveritycoderef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  SeverityDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_ServDeskDefn]
--
PRINT (N'Create table [dbo].[SD_ServDeskDefn]')
GO
IF OBJECT_ID(N'dbo.SD_ServDeskDefn', 'U') IS NULL
CREATE TABLE dbo.SD_ServDeskDefn (
  id numeric(26) NOT NULL,
  Deskref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  DeskDesc varchar(80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdPrefix varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  templateName varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdRolePermissionFK numeric(26) NULL,
  autoArchiveTime int NOT NULL,
  SLA varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CoverageSch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgFk numeric NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_roles]
--
PRINT (N'Create table [dbo].[SD_roles]')
GO
IF OBJECT_ID(N'dbo.SD_roles', 'U') IS NULL
CREATE TABLE dbo.SD_roles (
  ID int IDENTITY,
  MenuID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRole varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_RolePreference]
--
PRINT (N'Create table [dbo].[SD_RolePreference]')
GO
IF OBJECT_ID(N'dbo.SD_RolePreference', 'U') IS NULL
CREATE TABLE dbo.SD_RolePreference (
  ID int IDENTITY,
  FieldID numeric NULL,
  CustomFieldName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDRole varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Role]
--
PRINT (N'Create table [dbo].[SD_Role]')
GO
IF OBJECT_ID(N'dbo.SD_Role', 'U') IS NULL
CREATE TABLE dbo.SD_Role (
  RoleID int IDENTITY,
  RoleName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  InsertBy varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  CONSTRAINT PK_RoleName PRIMARY KEY CLUSTERED (RoleName)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_ResponseReminder]
--
PRINT (N'Create table [dbo].[SD_ResponseReminder]')
GO
IF OBJECT_ID(N'dbo.SD_ResponseReminder', 'U') IS NULL
CREATE TABLE dbo.SD_ResponseReminder (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReminderTo nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Resolution]
--
PRINT (N'Create table [dbo].[SD_Resolution]')
GO
IF OBJECT_ID(N'dbo.SD_Resolution', 'U') IS NULL
CREATE TABLE dbo.SD_Resolution (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionRef nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResolutionCodeRef nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResolutionDesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_RequestType]
--
PRINT (N'Create table [dbo].[SD_RequestType]')
GO
IF OBJECT_ID(N'dbo.SD_RequestType', 'U') IS NULL
CREATE TABLE dbo.SD_RequestType (
  id numeric NULL,
  ReqTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReqTypeDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_AllServiceDesks]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_AllServiceDesks]')
GO
IF OBJECT_ID(N'dbo.SD_AllServiceDesks', 'P') IS NULL
EXEC sp_executesql N'

Create OR ALTER PROCEDURE dbo.SD_AllServiceDesks
(

@Orgid numeric(18,0)=NUll,
 @Option varchar(50)	


)
AS
BEGIN
IF(@Option=''ALL'')
BEGIN
	SELECT  distinct ReqTypeRef  as Desk  FROM SD_RequestType where OrgRef=@Orgid order by ReqTypeRef
END
END
'
GO

--
-- Create table [dbo].[SD_Priority]
--
PRINT (N'Create table [dbo].[SD_Priority]')
GO
IF OBJECT_ID(N'dbo.SD_Priority', 'U') IS NULL
CREATE TABLE dbo.SD_Priority (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  PriorityCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  PriorityDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Pool]
--
PRINT (N'Create table [dbo].[SD_Pool]')
GO
IF OBJECT_ID(N'dbo.SD_Pool', 'U') IS NULL
CREATE TABLE dbo.SD_Pool (
  ID int IDENTITY,
  PoolName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Location nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Engineer nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddEngineerPool]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddEngineerPool]')
GO
IF OBJECT_ID(N'dbo.SD_spAddEngineerPool', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddEngineerPool
(
	@ID numeric(18,0)=null
      ,@PoolName nvarchar(100)=null
      ,@Location nvarchar(200)=null
      ,@Engineer nvarchar(max)=null
     
	
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddEngPool'')
	
	BEGIN
	INSERT INTO	SD_Pool(
      
      PoolName
      ,Location
      ,Engineer
   )
	values(@PoolName
      ,@Location
      ,@Engineer)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_Pool
	END

		if(@Option=''UpdateEngPool'')
	
	BEGIN
	update 	SD_Pool set 

  --  PoolName=@PoolName
  --    ,
	 Location=@Location
      ,Engineer=@Engineer
    
	 where ID=@ID
	END
		if(@Option=''DeleteEngPool'')
	
	BEGIN
	Delete  from 	SD_Pool
 where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_PCVOrgMapping]
--
PRINT (N'Create table [dbo].[SD_PCVOrgMapping]')
GO
IF OBJECT_ID(N'dbo.SD_PCVOrgMapping', 'U') IS NULL
CREATE TABLE dbo.SD_PCVOrgMapping (
  ID int IDENTITY,
  PCV_OrgID numeric(26) NULL,
  OrgID numeric NULL,
  OrgName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_SDPageAutomation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDPageAutomation]')
GO
IF OBJECT_ID(N'dbo.SD_SDPageAutomation', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_SDPageAutomation
(   @machName  varchar(100)=null,
	@agentGuid numeric(26,0)=null,
	@MachineID  varchar(100)=null,
	@ServiceDesk varchar(100)=null,
	@Pass varchar(500)=null,
	@sdCategoryFK varchar(100)=null,
	@Option varchar(100)
)
AS
BEGIN
      SET  @ServiceDesk=@ServiceDesk;

	  if(@Option=''MachineDetails'')
		BEGIN		
			
	select a.agentGuid,displayName,machGroupGuid,a.groupName,a.id as InventoryAssetID,
				value18 as UserName,value06 as EmailID ,value22 as ''EmpCode'' 
				,value08 as ''Location'',ee.OrgID,vm.IpAddress,vm.SysSerialNumber as ''SerialNo'' from ksubscribers.Inventory.asset a 
				left join ksubscribers.dbo.VMachCustFields b on a.agentGuid=b.agentGuid
				left Join ksubscribers.dbo.users c  on a.agentGuid=c.agentGuid
				left join ksubscribers.dbo.DenormalizedOrgToMach d on b.agentGuid=d.AgentGuid
				left join ksubscribers.dbo.vMachine vm on vm.agentGuid=b.agentGuid
				left join  sd_pcvOrgmapping ee on d.OrgId=ee.PCV_OrgID
				where  a.agentGuid=@agentGuid 
		END

	



END
'
GO

--
-- Create table [dbo].[SD_OrgMaster]
--
PRINT (N'Create table [dbo].[SD_OrgMaster]')
GO
IF OBJECT_ID(N'dbo.SD_OrgMaster', 'U') IS NULL
CREATE TABLE dbo.SD_OrgMaster (
  ID int IDENTITY,
  OrgName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDesc nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Org_ID numeric NOT NULL,
  CntctPrsnName nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnMob nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnNameII nchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnMobII nchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnEmailII nchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PK_SD_OrgMaster PRIMARY KEY CLUSTERED (Org_ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spRequestType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spRequestType]')
GO
IF OBJECT_ID(N'dbo.SD_spRequestType', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spRequestType      
(      
 @StatusID int = NULL,      
 @ReqTypeRef varchar(50) =NULL,      
 @ReqTypeDef varchar(1000) =NULL,      
 @OrgRef varchar(50) =NULL,      
 @InsertBy int =NULL,      
 @ReqPrefix varchar(3)=null,      
 @InsertDt datetime =NULL,      
 @UpdateBy int =NULL,      
 @UpdateDt datetime =NULL,      
 @Status nvarchar(10) = NULL,      
       
 @ID numeric(18,0)=NULL,      
@Error varchar(50)=null output,    
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddRequestType'')      
 BEGIN      
    if not exists(select * from SD_RequestType where OrgRef=@OrgRef and ReqTypeRef=@ReqTypeRef )     
 begin     
 INSERT INTO SD_RequestType(ID,ReqTypeRef,ReqTypeDef,OrgRef)values(@ID,@ReqTypeRef,@ReqTypeDef,@OrgRef)       
 insert into SD_TicketIncrementRef  (ReqRef      
      ,ReqPrefix      
      ,LastUpdatedID,OrgRef) Values(@ReqTypeRef,UPPER(Left(@ReqTypeRef,3)),''0000000'',@OrgRef)    
   end    
   else     
 begin    
 set @Error=''Request Type already exists.''    
 end    
 END      
  if(@Option=''see'')      
      
 BEGIN      
select a.*,b.OrgName,b.Org_ID from SD_RequestType a left join sd_orgmaster b       
on a.OrgRef=b.Org_ID      
 END      
      
 if(@Option=''UpdateRequestType'')      
       
 BEGIN   
 update SD_RequestType set ReqTypeRef=@ReqTypeRef,ReqTypeDef=@ReqTypeDef,OrgRef=@OrgRef where id=@ID   
 END      
 if(@Option=''DelRequestType'')      
       
 BEGIN      
  Delete from SD_RequestType  where id=@ID       
 END      
 END      
      '
GO

--
-- Create or alter procedure [dbo].[SD_spAddStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddStatus]')
GO
IF OBJECT_ID(N'dbo.SD_spAddStatus', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddStatus      
(      
 @StatusID int = NULL,      
 @DeskRef varchar(50) =NULL,      
 @StatusRef varchar(50) =NULL,      
 @StatusDesc varchar(500) =NULL,      
 @OrgDeskRef numeric(18,0) =NULL,      
 @StatusCodeRef varchar(50)=NULL,      
 @StatusColorCode varchar(20)=NULL,      
 @sd_stageFK numeric(18,0)=NULL,      
 @InsertBy int =NULL,      
 @ID numeric(18,0)=NULL,      
 @InsertDt datetime =NULL,      
 @UpdateBy int =NULL,      
 @UpdateDt datetime =NULL,      
 @Status nvarchar(10) = NULL,  
 @Error varchar(50)=null output,  
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddStatus'')      
 BEGIN      
  if not exists(select * from SD_Status where OrgDeskRef=@OrgDeskRef and StatusCodeRef=@StatusCodeRef and DeskRef=@DeskRef and sd_stageFK=@sd_stageFK)   
 begin   
 INSERT INTO SD_Status(ID,DeskRef,StatusRef,StatusCodeRef,StatusDesc,StatusColorCode,OrgDeskRef,sd_stageFK)      
 values(@ID,@DeskRef,@StatusRef,@StatusCodeRef,@StatusDesc,@StatusColorCode,@OrgDeskRef,@sd_stageFK)       
 end  
 else   
 begin  
 set @Error='' Status already exists for this Organization.''  
 end  
 END      
  if(@Option=''see'')      
       
 BEGIN      
       
select a.*,b.OrgName,b.Org_ID,c.StageCodeRef from SD_Status a      
left join sd_orgmaster b       
on a.OrgDeskRef=b.Org_ID      
left join SD_Stage c       
on a.sd_stageFK=c.ID      
where a.OrgDeskRef=CASE WHEN ISNULL(@OrgDeskRef,''0'')=''0'' THEN a.OrgDeskRef else @OrgDeskRef END    
 END     
  if(@Option=''UpdateStatus'')      
       
 BEGIN    
 update  SD_Status set StatusRef=@StatusRef,StatusCodeRef=@StatusCodeRef,StatusDesc=@StatusDesc,      
 StatusColorCode=@StatusColorCode,OrgDeskRef=@OrgDeskRef,sd_stageFK=@sd_stageFK where DeskRef=@DeskRef and ID=@ID  
 END      
  if(@Option=''DeleteStatus'')      
       
 BEGIN      
 Delete from SD_Status where DeskRef=@DeskRef and ID=@ID      
 END      
      
 END      
      
      '
GO

--
-- Create or alter procedure [dbo].[SD_spAddStage]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddStage]')
GO
IF OBJECT_ID(N'dbo.SD_spAddStage', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER Proc dbo.SD_spAddStage    
(    
 @StageID int = NULL,    
 @DeskRef varchar(50) =NULL,    
 @StageRef varchar(50) =NULL,    
 @StageDesc varchar(500) =NULL,    
 @OrgDeskRef numeric(18,0) =NULL,    
 @StageCodeRef varchar(50)=NULL,    
 @StageColorCode varchar(20)=NULL,    
 @InsertBy int =NULL,    
 @ID numeric(18,0)=NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Stage nvarchar(10) = NULL,    
 @Error varchar(100)=null output,  
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddStage'')    
     
 BEGIN    
  
  if not exists(select * from SD_Stage where OrgDeskRef=@OrgDeskRef and StageCodeRef=@StageCodeRef and DeskRef=@DeskRef)   
 begin   
 INSERT INTO SD_Stage(ID,DeskRef,StageRef,StageCodeRef,StageDesc,OrgDeskRef)    
 values(@ID,@DeskRef,@StageRef,@StageCodeRef,@StageDesc,@OrgDeskRef)     
 end  
 else   
 begin  
 set @Error=''Stage already exists for this Organisation.''  
 end  
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Stage a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
 END    
    
  if(@Option=''UpdateStage'')    
     
 BEGIN   
 update  SD_Stage set StageRef=@StageRef,StageCodeRef=@StageCodeRef,StageDesc=@StageDesc,    
 OrgDeskRef=@OrgDeskRef where DeskRef=@DeskRef and ID=@ID    
 END    
  if(@Option=''DeleteStage'')    
     
 BEGIN    
 Delete from SD_Stage where DeskRef=@DeskRef and ID=@ID    
 END    
    
 END    
    
    
     '
GO

--
-- Create or alter procedure [dbo].[SD_spAddSeverity]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSeverity]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSeverity', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddSeverity    
(    
 @StatusID int = NULL,    
 @DeskRef varchar(50) =NULL,    
 @Serverityref varchar(50) =NULL,    
 @SeverityDesc varchar(500) =NULL,    
 @OrgDeskRef numeric(18,0) =NULL,    
 @Serveritycoderef varchar(50)=NULL,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @ID numeric(18,0) =null,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @ResponseTime int =NULL,    
 @ResolutionTime int =NULL,  
 @Error varchar(50)=null output,  
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddSeverity'')    
 BEGIN    
if not exists(select * from SD_Severity where OrgDeskRef=@OrgDeskRef and Serveritycoderef=@Serveritycoderef and DeskRef=@DeskRef)   
 begin   
 INSERT INTO SD_Severity(ID,DeskRef,Serverityref,Serveritycoderef,SeverityDesc,OrgDeskRef,ResponseTime,ResolutionTime)    
 values(@ID,@DeskRef,@Serverityref,@Serveritycoderef,@SeverityDesc,@OrgDeskRef,@ResponseTime,@ResolutionTime)     
 end  
 else   
 begin  
 set @Error=''Severity For this Organisation already exists.''  
 end  
 END    
 if(@Option=''UpdateSeverity'')    
     
 BEGIN    
   
 update SD_Severity set Serveritycoderef=@Serveritycoderef,SeverityDesc=@SeverityDesc,OrgDeskRef=@OrgDeskRef,    
 ResolutionTime=@ResolutionTime,ResponseTime=@ResponseTime    
 where ID=@ID and DeskRef=@DeskRef  
 END    
 if(@Option=''DeleteSeverity'')    
     
 BEGIN    
Delete from SD_Severity where ID=@ID and DeskRef=@DeskRef    
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Severity a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
     
 END    
    
  if(@Option=''CustomerWise'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Severity a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
where a.OrgDeskRef=@OrgDeskRef    
     
 END    
    
 END    
    
    
    '
GO

--
-- Create or alter procedure [dbo].[SD_spAddResolution]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddResolution]')
GO
IF OBJECT_ID(N'dbo.SD_spAddResolution', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddResolution  
(  
 @StatusID int = NULL,  
 @DeskRef varchar(50) =NULL,  
 @ResolutionRef varchar(400) =NULL,  
 @ResolutionDesc varchar(max) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @ResolutionCodeRef varchar(400)=NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddResolution'')  
   
 BEGIN  
  if not exists(select * from SD_Resolution where OrgDeskRef=@OrgDeskRef and ResolutionCodeRef=@ResolutionCodeRef and DeskRef=@DeskRef) 
 begin 
 INSERT INTO SD_Resolution(ID,DeskRef,ResolutionRef,ResolutionCodeRef,ResolutionDesc,OrgDeskRef)  
 values(@ID,@DeskRef,@ResolutionRef,@ResolutionCodeRef,@ResolutionDesc,@OrgDeskRef) 
 end
  else 
 begin
 set @Error=''Resolution already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Resolution a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
 END  
  
   if(@Option=''CustomerWise'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Resolution a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
where a.OrgDeskRef=@OrgDeskRef  
 END  
  
  if(@Option=''UpdateResolution'')  
   
 BEGIN  
  
 update  SD_Resolution set   
 ResolutionCodeRef=@ResolutionCodeRef,ResolutionDesc=@ResolutionDesc,OrgDeskRef=@OrgDeskRef  
 where deskref=@DeskRef and ResolutionRef=@ResolutionRef
 END  
  if(@Option=''DeleteResolution'')  
   
 BEGIN  
 Delete  from  SD_Resolution  
 where deskref=@DeskRef and ResolutionRef=@ResolutionRef  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddPriority]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddPriority]')
GO
IF OBJECT_ID(N'dbo.SD_spAddPriority', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddPriority  
(  
 @StatusID int = NULL,  
 @DeskRef varchar(50) =NULL,  
 @PriorityRef varchar(50) =NULL,  
 @PriorityDesc varchar(500) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @PriorityCodeRef varchar(50)=NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL, 
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddPriority'')  
   
 BEGIN  
  if not exists(select * from SD_Priority where OrgDeskRef=@OrgDeskRef and DeskRef=@DeskRef and PriorityCodeRef=@PriorityCodeRef) 
 begin 
 INSERT INTO SD_Priority(ID,DeskRef,PriorityRef,PriorityCodeRef,PriorityDesc,OrgDeskRef)  
 values(@ID,@DeskRef,@PriorityRef,@PriorityCodeRef,@PriorityDesc,@OrgDeskRef)  
 end
 else 
 begin
 set @Error=''Priority already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Priority a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
 END  
  if(@Option=''CustomerWise'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Priority a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
where a.OrgDeskRef=@OrgDeskRef  
 END  
  
  if(@Option=''UpdatePriority'')  
   
 BEGIN  

 update  SD_Priority set   
 PriorityCodeRef=@PriorityCodeRef,PriorityDesc=@PriorityDesc,OrgDeskRef=@OrgDeskRef  
 where deskref=@DeskRef and PriorityRef=@PriorityRef 
 END  
  if(@Option=''DeletePriority'')  
   
 BEGIN  
 Delete  from  SD_Priority  
 where deskref=@DeskRef and PriorityRef=@PriorityRef  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddOrganization]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddOrganization]')
GO
IF OBJECT_ID(N'dbo.SD_spAddOrganization', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddOrganization  
(  
 @OrgName nvarchar(100)= NULL,  
 @OrgDesc nvarchar(500) =NULL,  
 @Org_ID numeric(18, 0)=  NULL,  
 @CntctPrsnName nvarchar(200)= NULL,  
 @CntctPrsnMob nvarchar(20)= NULL,  
 @CntctPrsnEmail nvarchar(100)= NULL,  
 @CntctPrsnNameII nchar(100) =NULL,  
 @CntctPrsnMobII nchar(20) =NULL,  
 @CntctPrsnEmailII nchar(100)= NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddOrg'')  
   
 BEGIN  
 if not exists(select * from SD_OrgMaster where OrgName=@OrgName) 
 begin 
 INSERT INTO SD_OrgMaster(OrgName  
      ,OrgDesc  
      ,Org_ID  
      ,CntctPrsnName  
      ,CntctPrsnMob  
      ,CntctPrsnEmail  
      ,CntctPrsnNameII  
      ,CntctPrsnMobII  
      ,CntctPrsnEmailII)  
 values(@OrgName  
      ,@OrgDesc  
      ,@Org_ID  
      ,@CntctPrsnName  
      ,@CntctPrsnMob  
      ,@CntctPrsnEmail  
      ,@CntctPrsnNameII  
      ,@CntctPrsnMobII  
      ,@CntctPrsnEmailII) 
	  end
 else 
 begin
 set @Error=''Organization already exists.''
 end
 END  
 
  if(@Option=''see'')  
   
 BEGIN  
select * from SD_Priority  
 END  
  
  if(@Option=''UpdateOrg'')  
   
 BEGIN  
 
 update  SD_OrgMaster set   
 OrgName=@OrgName  
 ,OrgDesc=@OrgDesc  
        
      ,CntctPrsnName=@CntctPrsnName  
      ,CntctPrsnMob=@CntctPrsnMob  
      ,CntctPrsnEmail=@CntctPrsnEmail  
      ,CntctPrsnNameII=@CntctPrsnNameII  
      ,CntctPrsnMobII=@CntctPrsnMobII  
      ,CntctPrsnEmailII=@CntctPrsnEmailII  
   where Org_ID=@Org_ID 
 END  
  if(@Option=''DeleteOrg'')  
   
 BEGIN  
 Delete  from  SD_OrgMaster  
   where Org_ID=@Org_ID  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddDeskSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddDeskSLA]')
GO
IF OBJECT_ID(N'dbo.SD_spAddDeskSLA', 'P') IS NULL
EXEC sp_executesql N'
  
  
CREATE OR ALTER Proc dbo.SD_spAddDeskSLA  
(  
 @ID numeric(18,0)=null  
      ,@SlaName nvarchar(50)=null  
      ,@SLADesc nvarchar(100)=null  
      ,@ResponseTime int=null  
      ,@ResolutionTime int =null  
   ,@OrgID numeric(18,0)=NULL 
   ,@Error varchar(50)=null output
   
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddDeskSLA'')  
   
 BEGIN  
  if not exists(select * from SD_SLAConfig where OrgRef=@OrgID and SlaName=@SlaName) 
 begin 
 INSERT INTO SD_SLAConfig(ID  
      ,SlaName  
      ,SLADesc  
      ,OrgRef)  
 values(@ID  
      ,@SlaName  
      ,@SLADesc  
      ,@OrgID)   
	  end
	  else 
 begin
 set @Error=''SLA already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_SLAConfig a   
inner join  SD_OrgMaster b   
on a.OrgRef=b.Org_ID  
 END  
  
  if(@Option=''UpdateDeskSLA'')  
   
 BEGIN 

 update  SD_SLAConfig set   
  
     SlaName=@SlaName  
      ,SLADesc=@SLADesc  
      ,OrgRef=@OrgID  
  where ID=@ID 
 END  
  if(@Option=''DeleteDeskSLA'')  
   
 BEGIN  
 Delete  from  SD_SLAConfig  
 where ID=@ID  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter view [dbo].[tab]
--
GO
PRINT (N'Create or alter view [dbo].[tab]')
GO
IF OBJECT_ID(N'dbo.tab', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.tab
as
(
select a.UserID,a.EmpID,a.UserName,b.ScopeName,c.RoleName from SD_User_Master a 
inner join SD_UserScope b on a.UserScope=b.ScopeID
inner join SD_Role c on a.UserRole=c.RoleName
inner join SD_OrgMaster  d on a.Org_ID=d.Org_ID
)
'
GO

--
-- Create table [dbo].[SD_OrgLogo]
--
PRINT (N'Create table [dbo].[SD_OrgLogo]')
GO
IF OBJECT_ID(N'dbo.SD_OrgLogo', 'U') IS NULL
CREATE TABLE dbo.SD_OrgLogo (
  ID int IDENTITY,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  Org_ID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spOrgLogo]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spOrgLogo]')
GO
IF OBJECT_ID(N'dbo.SD_spOrgLogo', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_spOrgLogo

(
--@userName varchar(100)=null,
@FileName nvarchar(500)=null,
@FileType nvarchar(500)=null,
@FileData varbinary (max) = NULL,
@Orgid nvarchar(max)=NULL,
@MailBody  varchar (max) =NULL,
@Option varchar(50)=null
)

AS
BEGIN

		if(@Option=''UploadLogo'')
		BEGIN
			IF exists(select * from SD_OrgLogo where Org_ID=@Orgid)
				BEGIN
					update  SD_OrgLogo set FileName=@FileName,FileType=@FileType,FileData=@FileData where Org_ID=@Orgid
				END
				else 
				BEGIN
					insert into SD_OrgLogo (FileName,FileType,FileData,Org_ID)values(@FileName,@FileType,@FileData,@Orgid) 
			
				END
		END
		if(@Option=''GetLogo'')
		BEGIN
		Select top 1  b.* from SD_User_Master a inner join 
                                                            SD_OrgLogo b 
                                                            on a.Org_ID=b.Org_ID
                                                            where a.Org_ID=@Orgid
		END
	
	END
'
GO

--
-- Create table [dbo].[SD_Options]
--
PRINT (N'Create table [dbo].[SD_Options]')
GO
IF OBJECT_ID(N'dbo.SD_Options', 'U') IS NULL
CREATE TABLE dbo.SD_Options (
  id int IDENTITY,
  QuestionId int NULL,
  Question_Option varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Navigation]
--
PRINT (N'Create table [dbo].[SD_Navigation]')
GO
IF OBJECT_ID(N'dbo.SD_Navigation', 'U') IS NULL
CREATE TABLE dbo.SD_Navigation (
  ID int IDENTITY,
  MenuID int NOT NULL,
  MenuName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuLocation varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentID int NULL,
  UserName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentIDOrder int NULL,
  ChildIDOrder int NULL,
  MenuIcon nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IconName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Mfa]
--
PRINT (N'Create table [dbo].[SD_Mfa]')
GO
IF OBJECT_ID(N'dbo.SD_Mfa', 'U') IS NULL
CREATE TABLE dbo.SD_Mfa (
  MFAID int IDENTITY (139238, 2342),
  UserID numeric NULL,
  MFAStatus bit NULL,
  SecretKey nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spMFA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spMFA]')
GO
IF OBJECT_ID(N'dbo.SD_spMFA', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spMFA
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@UserID numeric(18,0)= NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''GetUserWiseSecretKey'')
	
	BEGIN
	select top 1 * from SD_Mfa where UserID=@UserID order by InsertDt desc
	END
if(@Option=''InsertKey'')
	
	BEGIN
	if exists(select * from SD_Mfa where UserID=@UserID and SecretKey is not null )
	BEGIN
	print(''user id exists'')
		update SD_User_Master set ISMfa=''1'' where UserID=@UserID
	END
	ELSE
	BEGIN
	 if exists (select * from SD_Mfa  where  UserID=@UserID and SecretKey is  null)
	 BEGIN
		
		update SD_Mfa set SecretKey=@SecretKey where UserID=@UserID
			update SD_User_Master set ISMfa=''1'' where UserID=@UserID
		END

		else 
		BEGIN
			Insert into SD_Mfa(UserID,MFAStatus,SecretKey,InsertDt)values(@UserID,''1'',@SecretKey,GETDATE())
			update SD_User_Master set ISMfa=''1'' where UserID=@UserID
		
		END
		END
	END
	END



'
GO

--
-- Create table [dbo].[SD_Mapping_Check]
--
PRINT (N'Create table [dbo].[SD_Mapping_Check]')
GO
IF OBJECT_ID(N'dbo.SD_Mapping_Check', 'U') IS NULL
CREATE TABLE dbo.SD_Mapping_Check (
  ID numeric IDENTITY,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  OrgDeskRef numeric NULL,
  ScopeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Location]
--
PRINT (N'Create table [dbo].[SD_Location]')
GO
IF OBJECT_ID(N'dbo.SD_Location', 'U') IS NULL
CREATE TABLE dbo.SD_Location (
  ID int IDENTITY,
  LocCode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LocName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy numeric NULL,
  InsertDt datetime NULL,
  UpdateBy numeric NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spLocation_Master]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spLocation_Master]')
GO
IF OBJECT_ID(N'dbo.SD_spLocation_Master', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spLocation_Master    
  (    
   @StateID int =NULL,    
   @LocCode varchar(100) = NULL,    
   @OrgID numeric(18,0)=null,    
   @LocName varchar(100) = NULL,    
   @InsertBy numeric(18,0) =NULL,    
   @InsertDt datetime =NULL,    
   @UpdateBy numeric(18,0) =NULL,    
   @UpdateDt datetime =NULL,    
   @IsActive bit  =NULL,  
   @ID varchar(50)=NULL,  
   @Option varchar(50)    
  )    
  AS    
   BEGIN    
  if(@Option=''Insert'')    
       BEGIN    
     
        INSERT INTO SD_Location(LocCode,LocName, InsertBy, InsertDt, IsActive,OrgID) VALUES (@LocCode,@LocName,@InsertBy, GETDATE(), ''True'',@OrgID)    
  
  select * from SD_Location  
    
  END    
  if(@Option=''Update'')    
       BEGIN    
    
        UPDATE SD_Location SET LocName=@LocCode, UpdateBy=@UpdateBy, UpdateDt=GETDATE(), IsActive=''True''    
  where ID=@ID  
    
  END    
  if(@Option=''SelectAll'')    
       BEGIN    
    
      select a.*,b.Org_ID,b.OrgName from SD_Location a     
    
left join SD_OrgMaster b     
on a.OrgID=b.Org_ID    
    
  END    
    
   if(@Option=''see'')    
       BEGIN    
    
 Select * from SD_Location    
where  OrgID=@OrgID    
    
  END    
  if(@Option=''Delete'')    
       BEGIN    
    
        Delete from SD_Location where ID=@ID and OrgID=@OrgID    
    
  END    
  END    '
GO

--
-- Create table [dbo].[SD_KnowledgeBase]
--
PRINT (N'Create table [dbo].[SD_KnowledgeBase]')
GO
IF OBJECT_ID(N'dbo.SD_KnowledgeBase', 'U') IS NULL
CREATE TABLE dbo.SD_KnowledgeBase (
  ID int IDENTITY,
  KBNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Issue nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionDetail nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ViewToUser nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ViewToTech nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  KBSubmiitedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitDt datetime NULL,
  UpdateBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddKnowledgeBase]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddKnowledgeBase]')
GO
IF OBJECT_ID(N'dbo.SD_spAddKnowledgeBase', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddKnowledgeBase      
(      
 @ID int = NULL,      
 @DeskRef varchar(50) =NULL,      
 @KBNumber  nvarchar(50) =NULL,      
 @Issue  nvarchar(max) =NULL,      
 @ResolutionDetail  nvarchar(max) =NULL,      
 @ViewToUser  nvarchar(50)= NULL,      
 @ViewToTech  nvarchar(50)= NULL,      
 @KBSubmiitedBy  nvarchar(50) =NULL,      
 @SubmitDt  datetime= NULL,      
 @OrgDeskRef numeric(18,0)=NULL,      
 @UpdateBy  nvarchar(50)= NULL,      
 @UpdateDt  datetime= NULL,   
 @FieldScope nvarchar(100) =null,
 @Ticketref nvarchar(100) =null out , 
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddKB'')      
       
 BEGIN      
 if exists (select * from  SD_KnowledgeBase where issue like ''%''+@Issue+''%'' and OrgDeskRef=@OrgDeskRef)      
 Begin      
 print(''hh'')      
 end      
 else       
 begin      
     Set @KBNumber=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=''Knowledge Base'' and OrgRef=@OrgDeskRef)      
 INSERT INTO SD_KnowledgeBase( KBNumber , Issue , ResolutionDetail , ViewToUser , ViewToTech , KBSubmiitedBy , SubmitDt ,OrgDeskRef)      
                   values(@KBNumber ,@Issue ,@ResolutionDetail ,@ViewToUser ,@ViewToTech ,@KBSubmiitedBy ,GETDATE(),@OrgDeskRef )       
       
   SET @Ticketref=(select KBNumber from SD_KnowledgeBase where ID=SCOPE_IDENTITY())      
          ---------------------------this will auto increment ticket ID, after ticket inseretion      
         if(@Ticketref is not null)      
           BEGIN      
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)       
              where ReqRef=''Knowledge Base'' and OrgRef=@OrgDeskRef      
          END      
      
    End      
       
 END      
 if(@Option=''UpdateKB'')      
       
 BEGIN      
 update SD_KnowledgeBase set Issue=@Issue,      
 ResolutionDetail=@ResolutionDetail,ViewToUser=@ViewToUser,ViewToTech=@ViewToTech,      
 UpdateBy=@UpdateBy,UpdateDt=GETDate()
 where ID=@ID   
 END      
 if(@Option=''DeleteKB'')      
       
 BEGIN      
Delete from SD_KnowledgeBase where ID=@ID      
 END      
  if(@Option=''see'')      
       
 BEGIN      
select a.*,b.OrgName,b.Org_ID from SD_KnowledgeBase a left join sd_orgmaster b       
on a.OrgDeskRef=b.Org_ID      
        Where b.Org_ID=CASE WHEN ISNULL(@OrgDeskRef,''0'')=''0'' then b.Org_ID else @OrgDeskRef end
		AND ViewToUser=CASE WHEN ISNULL(@ViewToUser,'''')='''' then ViewToUser else @ViewToUser end
AND ViewToTech=CASE WHEN ISNULL(@ViewToTech,'''')='''' then ViewToTech else @ViewToTech end
 END      
      
      
 END      


      

'
GO

--
-- Create table [dbo].[SD_Holidays]
--
PRINT (N'Create table [dbo].[SD_Holidays]')
GO
IF OBJECT_ID(N'dbo.SD_Holidays', 'U') IS NULL
CREATE TABLE dbo.SD_Holidays (
  ID numeric NOT NULL,
  HolidayName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HolidayDate date NULL,
  OrgID numeric NULL,
  CONSTRAINT PK_SD_Holidays PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[test1]
--
GO
PRINT (N'Create or alter function [dbo].[test1]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.test1') AND type IN ('IF', 'FN', 'TF'))
=======
ï»¿--
-- Script was generated by Devart dbForge Studio for SQL Server, Version 7.0.210.0
-- Product home page: https://www.devart.com/dbforge/sql/studio
-- Script date 04-12-2024 13:49:26
-- Server version: 15.00.2000
--

SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO
USE master
GO

IF DB_NAME() <> N'master' SET NOEXEC ON

--
-- Create database [ServiceDesk30_3]
--
PRINT (N'Create database [ServiceDesk30_3]')
GO
IF DB_ID('ServiceDesk30_3') IS NULL
CREATE DATABASE ServiceDesk30_3
ON PRIMARY(
    NAME = N'ServiceDesk30_3',
    FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ServiceDesk30_3.mdf',
    SIZE = 139264KB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 65536KB
)
LOG ON(
    NAME = N'ServiceDesk30_3_log',
    FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\ServiceDesk30_3_log.ldf',
    SIZE = 204800KB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 65536KB
)
GO

--
-- Alter database
--
PRINT (N'Alter database')
GO
ALTER DATABASE ServiceDesk30_3
  SET
    ANSI_NULL_DEFAULT OFF,
    ANSI_NULLS OFF,
    ANSI_PADDING OFF,
    ANSI_WARNINGS OFF,
    ARITHABORT OFF,
    AUTO_CLOSE OFF,
    AUTO_CREATE_STATISTICS ON,
    AUTO_SHRINK OFF,
    AUTO_UPDATE_STATISTICS ON,
    AUTO_UPDATE_STATISTICS_ASYNC OFF,
    COMPATIBILITY_LEVEL = 150,
    CONCAT_NULL_YIELDS_NULL OFF,
    CURSOR_CLOSE_ON_COMMIT OFF,
    CURSOR_DEFAULT GLOBAL,
    DATE_CORRELATION_OPTIMIZATION OFF,
    DB_CHAINING OFF,
    HONOR_BROKER_PRIORITY OFF,
    MULTI_USER,
    NESTED_TRIGGERS = ON,
    NUMERIC_ROUNDABORT OFF,
    PAGE_VERIFY CHECKSUM,
    PARAMETERIZATION SIMPLE,
    QUOTED_IDENTIFIER OFF,
    READ_COMMITTED_SNAPSHOT OFF,
    RECOVERY FULL,
    RECURSIVE_TRIGGERS OFF,
    TRANSFORM_NOISE_WORDS = OFF,
    TRUSTWORTHY OFF
    WITH ROLLBACK IMMEDIATE
GO

ALTER DATABASE ServiceDesk30_3
  COLLATE SQL_Latin1_General_CP1_CI_AS
GO

ALTER DATABASE ServiceDesk30_3
  SET DISABLE_BROKER
GO

ALTER DATABASE ServiceDesk30_3
  SET ALLOW_SNAPSHOT_ISOLATION OFF
GO

ALTER DATABASE ServiceDesk30_3
  SET FILESTREAM (NON_TRANSACTED_ACCESS = OFF)
GO

ALTER DATABASE ServiceDesk30_3
  SET QUERY_STORE = OFF
GO

USE ServiceDesk30_3
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

--
-- Alter authorization on database [ServiceDesk30_3]
--
PRINT (N'Alter authorization on database [ServiceDesk30_3]')
GO
IF DB_ID('ServiceDesk30_3') IS NOT NULL
ALTER AUTHORIZATION ON DATABASE :: ServiceDesk30_3 TO [EC2AMAZ-G25T1EO\Administrator]
GO

USE ServiceDesk30_3
GO

IF DB_NAME() <> N'ServiceDesk30_3' SET NOEXEC ON
GO

--
-- Create table [dbo].[VSA_MonitorSerialNumber]
--
PRINT (N'Create table [dbo].[VSA_MonitorSerialNumber]')
GO
IF OBJECT_ID(N'dbo.VSA_MonitorSerialNumber', 'U') IS NULL
CREATE TABLE dbo.VSA_MonitorSerialNumber (
  ID int IDENTITY,
  MonitorID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MonitorSerialNumber varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Agent_Guid numeric(26) NULL,
  ComputerName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter procedure [dbo].[VSAsp_MonitorSerialNumber]
--
GO
PRINT (N'Create or alter procedure [dbo].[VSAsp_MonitorSerialNumber]')
GO
IF OBJECT_ID(N'dbo.VSAsp_MonitorSerialNumber', 'P') IS NULL
EXEC sp_executesql N'Create OR ALTER PROC dbo.VSAsp_MonitorSerialNumber
(	
	@MonitorID varchar(100),
	@MonitorSerialNumber varchar(100),
	@Agent_Guid	numeric(26,0),
	@ComputerName varchar(100)
)
AS
BEGIN
 
    Delete from VSA_MonitorSerialNumber where InsertDt<=DATEADD(MINUTE,-5,GETDATE()) and Agent_Guid=@Agent_Guid

	INSERT INTO VSA_MonitorSerialNumber
							 ( MonitorID, MonitorSerialNumber, Agent_Guid, ComputerName, InsertDt)
	           VALUES        (@MonitorID, @MonitorSerialNumber, @Agent_Guid, @ComputerName, GETDATE())


END
'
GO

--
-- Create table [dbo].[TechLeave]
--
PRINT (N'Create table [dbo].[TechLeave]')
GO
IF OBJECT_ID(N'dbo.TechLeave', 'U') IS NULL
CREATE TABLE dbo.TechLeave (
  id int IDENTITY,
  TechId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TechName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LeaveFromdate datetime NULL,
  LeaveTodate datetime NULL,
  ApplyDate datetime NULL DEFAULT (getdate()),
  AppliedbyUserid varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertTechLeave]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertTechLeave]')
GO
IF OBJECT_ID(N'dbo.SP_InsertTechLeave', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_InsertTechLeave  
(  
@TechId varchar(50),  
@TechName varchar(50),   
@LeaveFromdate DATETIME,   
@LeaveTodate DATETIME,   
@AppliedbyUserid varchar(50)  
)  
AS  
BEGIN  
INSERT INTO TechLeave(TechId,TechName,LeaveFromdate,LeaveTodate,ApplyDate,AppliedbyUserid)  
VALUES(@TechId,@TechName,@LeaveFromdate,@LeaveTodate,GETDATE(),@AppliedbyUserid)  
END
'
GO

--
-- Create table [dbo].[SR_Cloud]
--
PRINT (N'Create table [dbo].[SR_Cloud]')
GO
IF OBJECT_ID(N'dbo.SR_Cloud', 'U') IS NULL
CREATE TABLE dbo.SR_Cloud (
  ID int IDENTITY,
  Grade varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  M2Approval varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SelfService]
--
PRINT (N'Create table [dbo].[SelfService]')
GO
IF OBJECT_ID(N'dbo.SelfService', 'U') IS NULL
CREATE TABLE dbo.SelfService (
  id int IDENTITY,
  agentguid varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  departmentname varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  username varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  useremail varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertedTime datetime NULL DEFAULT (getdate()),
  Active bit NULL DEFAULT (1),
  Reqtype varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SDTicketInsertHistory]
--
PRINT (N'Create table [dbo].[SDTicketInsertHistory]')
GO
IF OBJECT_ID(N'dbo.SDTicketInsertHistory', 'U') IS NULL
CREATE TABLE dbo.SDTicketInsertHistory (
  noteid int IDENTITY,
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDateTime datetime NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateBy nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDTicketHistory]
--
PRINT (N'Create table [dbo].[SDTicketHistory]')
GO
IF OBJECT_ID(N'dbo.SDTicketHistory', 'U') IS NULL
CREATE TABLE dbo.SDTicketHistory (
  noteid int IDENTITY,
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDateTime datetime NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateBy nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncidentdeleted]
--
PRINT (N'Create table [dbo].[SDIncidentdeleted]')
GO
IF OBJECT_ID(N'dbo.SDIncidentdeleted', 'U') IS NULL
CREATE TABLE dbo.SDIncidentdeleted (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncidentBulkUpdate]
--
PRINT (N'Create table [dbo].[SDIncidentBulkUpdate]')
GO
IF OBJECT_ID(N'dbo.SDIncidentBulkUpdate', 'U') IS NULL
CREATE TABLE dbo.SDIncidentBulkUpdate (
  id int IDENTITY,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  prevSDstatusFK numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncident_InsertLog]
--
PRINT (N'Create table [dbo].[SDIncident_InsertLog]')
GO
IF OBJECT_ID(N'dbo.SDIncident_InsertLog', 'U') IS NULL
CREATE TABLE dbo.SDIncident_InsertLog (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStatusFK numeric NULL,
  prevSDstatusFK numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SDIncident]
--
PRINT (N'Create table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.SDIncident', 'U') IS NULL
CREATE TABLE dbo.SDIncident (
  id numeric(26) NOT NULL,
  Ticketref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  orgServDeskDefnFK numeric(26) NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  creationDateTime datetime NULL,
  closedDateTime datetime NULL,
  TicketSummary varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  submitterName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterEmailAddr varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  submitterPhone varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  assigneeType varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  assigneePoolFK numeric(26) NULL,
  assigneeParticipantFK numeric(26) NULL,
  actualCompletedDate datetime NULL,
  expectedDueDate datetime NULL,
  actualResolutionDate datetime NULL,
  organizationFK numeric(26) NULL,
  orgStaffFK numeric(26) NULL,
  sdErrorMessage varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  solutionNote varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sourceType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStageFK numeric(26) NULL,
  categoryFullText nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DueByDate datetime NULL,
  SID int IDENTITY (325642, 1),
  SubmitterID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  location nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Department nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TickResolvedDt datetime NULL,
  EditedBy nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  previousStatusFK numeric NULL,
  prevSDstatusFK numeric NULL,
  Email_FromInboxID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SentEsclation bit NULL,
  CurrentEscalationLevel int NULL,
  CONSTRAINT PKSDIncident PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create index [IX_SDIncident_Ticketref] on table [dbo].[SDIncident]
--
PRINT (N'Create index [IX_SDIncident_Ticketref] on table [dbo].[SDIncident]')
GO
IF NOT EXISTS (
  SELECT 1 FROM sys.indexes WITH (NOLOCK)
  WHERE name = N'IX_SDIncident_Ticketref' AND object_id = OBJECT_ID(N'dbo.SDIncident'))
  AND EXISTS (
  SELECT 1 FROM sys.columns WITH (NOLOCK)
  WHERE name = N'Ticketref' AND object_id = OBJECT_ID(N'dbo.SDIncident'))
CREATE INDEX IX_SDIncident_Ticketref
  ON dbo.SDIncident (Ticketref)
  ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_AssignAndEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AssignAndEsclation]')
GO
IF OBJECT_ID(N'dbo.SP_AssignAndEsclation', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AssignAndEsclation
AS
BEGIN
declare @lvl varchar(20)
select @lvl =Ticketref from SDIncident where 
sdStatusFK=''738442562'' and DATEDIFF(MINUTE,creationDateTime,GETDATE())>=30 and DATEDIFF(HOUR,creationDateTime,GETDATE())<=2
if(@lvl!='''')
begin
select Ticketref,''30'' as OpenTime from SDIncident where
sdStatusFK=''738442562'' and DATEDIFF(MINUTE,creationDateTime,GETDATE())>=30 and DATEDIFF(HOUR,creationDateTime,GETDATE())<=2
end
else 
begin
select Ticketref,''120'' as OpenTime from SDIncident where sdStatusFK=''738442562'' and  DATEDIFF(HOUR,creationDateTime,GETDATE())>2
end
END
'
GO

--
-- Create or alter procedure [dbo].[SD_AutoAssignTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_AutoAssignTicket]')
GO
IF OBJECT_ID(N'dbo.SD_AutoAssignTicket', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER Proc dbo.SD_AutoAssignTicket
(
	


      @category varchar(500)= null
	  ,	 @location1 varchar(50)= null
	     ,@Department1 varchar(max)= null
   ,@Ticketref nvarchar(100)=null
   ,@OrgId numeric(18,0)=null
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''TicketAssignHirel'')
  BEGIN
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')
	BEGIN
		if(@location1=''Gandhinagar'' or @department1=''Customer Support'')
			BEGIN

					--------ticket assign to chintan
				 update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@OrgId
			END

 
		if(@location1!=''gandhinagar'' and @department1!=''Customer Support'')
			BEGIN 
				---------------- ticket assign to krunal
				update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@OrgId
			END
 
 
		END
			else if(@category like ''%Incident - Business Application%'')
				BEGIN
						-----------  ticket assign to nalin
				update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@OrgId
				END
		else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')
				BEGIN
			-------------- ticket assign to anand
				update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@OrgId
				END
  END


	
	END

'
GO

--
-- Create or alter procedure [dbo].[GetUniqueTicketRef]
--
GO
PRINT (N'Create or alter procedure [dbo].[GetUniqueTicketRef]')
GO
IF OBJECT_ID(N'dbo.GetUniqueTicketRef', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.GetUniqueTicketRef
    @TicketNo NVARCHAR(50),
    @organizationFK INT,
    @NewTicketref NVARCHAR(50) OUTPUT
AS
BEGIN
    DECLARE @Increment INT = 1;
    DECLARE @BaseTicketref NVARCHAR(50);
    SET @BaseTicketref = LEFT(@TicketNo, LEN(@TicketNo) - LEN(CAST(CAST(SUBSTRING(@TicketNo, PATINDEX(''%[0-9]%'', @TicketNo), LEN(@TicketNo)) AS INT) AS NVARCHAR(50))));
    WHILE EXISTS (SELECT 1 FROM SDIncident WHERE Ticketref = @TicketNo AND organizationFK = @organizationFK)
    BEGIN
	SET @TicketNo = @BaseTicketref + CAST(CAST(SUBSTRING(@TicketNo, PATINDEX(''%[0-9]%'', @TicketNo), LEN(@TicketNo)) AS INT) + @Increment AS NVARCHAR(50));
        SET @Increment = @Increment + 1;
    END
    SET @NewTicketref = @TicketNo;
END
'
GO

--
-- Create table [dbo].[SD_UserScope]
--
PRINT (N'Create table [dbo].[SD_UserScope]')
GO
IF OBJECT_ID(N'dbo.SD_UserScope', 'U') IS NULL
CREATE TABLE dbo.SD_UserScope (
  ScopeID numeric NULL,
  ScopeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ScopeDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddUserScope]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddUserScope]')
GO
IF OBJECT_ID(N'dbo.SD_spAddUserScope', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddUserScope
(
	@ScopeID numeric(18,0) = NULL,
	@ScopeName varchar(50) =NULL,
	@ScopeDesc varchar(max) =NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddUserScope'')
	
	BEGIN
	INSERT INTO	SD_UserScope(ScopeID
     ,ScopeName
     ,ScopeDesc
     ,IsActive)
	values(@ScopeID
      ,@ScopeName
      ,@ScopeDesc
      ,@IsActive)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_UserScope
	END

		if(@Option=''UpdateUserScope'')
	
	BEGIN
	update 	SD_UserScope set 

     ScopeName=@ScopeName
     ,ScopeDesc=@ScopeDesc
     ,IsActive=@IsActive
	 where ScopeID=@ScopeID
	END
		if(@Option=''DeleteUserScope'')
	
	BEGIN
	Delete  from 	SD_UserScope
 where ScopeID=@ScopeID
	END
	END



'
GO

--
-- Create table [dbo].[SD_User_SRApproval_SRDesk_New]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval_SRDesk_New]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval_SRDesk_New', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval_SRDesk_New (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL DEFAULT (1),
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_Insert_SD_User_SRApproval_SRDesk_New]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_Insert_SD_User_SRApproval_SRDesk_New]')
GO
IF OBJECT_ID(N'dbo.SP_Insert_SD_User_SRApproval_SRDesk_New', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_Insert_SD_User_SRApproval_SRDesk_New
    @UserID varchar(50),
    @EmpID VARCHAR(50),
    @LoginName VARCHAR(100),
    @Approval1Name VARCHAR(100) = NULL,
    @Approval1Email VARCHAR(100) = NULL,
    @Approval1Active BIT = 1, -- Default value set to 1
    @Approval2Name VARCHAR(100) = NULL,
    @Approval2Email VARCHAR(100) = NULL,
    @Approval2Active BIT = NULL,
    @Approval3Name VARCHAR(100) = NULL,
    @Approval3Email VARCHAR(100) = NULL,
    @Approval3Active BIT = NULL,
    @Approval4Name VARCHAR(100) = NULL,
    @Approval4Email VARCHAR(100) = NULL,
    @Approval4Active BIT = NULL,
    @Approval4Status NUMERIC(18, 0) = NULL,
    @Approval4Level VARCHAR(100) = NULL,
    @Approval4RejectStatus NUMERIC(18, 0) = NULL,
    @Approval5Name VARCHAR(100) = NULL,
    @Approval5Email VARCHAR(100) = NULL,
    @Approval5Active BIT = NULL,
    @Approval5Status NUMERIC(18, 0) = NULL,
    @Approval5Level VARCHAR(100) = NULL,
    @Approval5RejectStatus NUMERIC(18, 0) = NULL,
    @InsertBy VARCHAR(50) = NULL,
    @InsertDt DATETIME = NULL,
    @UpdateBy VARCHAR(50) = NULL,
    @UpdateDt DATETIME = NULL
AS
BEGIN
    INSERT INTO [dbo].[SD_User_SRApproval_SRDesk_New]
    (
        [UserID], 
        [EmpID], 
        [LoginName], 
        [Approval1Name], 
        [Approval1Email], 
        [Approval1Active], 
        [Approval2Name], 
        [Approval2Email], 
        [Approval2Active], 
        [Approval3Name], 
        [Approval3Email], 
        [Approval3Active], 
        [Approval4Name], 
        [Approval4Email], 
        [Approval4Active], 
        [Approval4Status], 
        [Approval4Level], 
        [Approval4RejectStatus], 
        [Approval5Name], 
        [Approval5Email], 
        [Approval5Active], 
        [Approval5Status], 
        [Approval5Level], 
        [Approval5RejectStatus], 
        [InsertBy], 
        [InsertDt], 
        [UpdateBy], 
        [UpdateDt]
    )
    VALUES 
    (
        @UserID, 
        @EmpID, 
        @LoginName, 
        @Approval1Name, 
        @Approval1Email, 
        @Approval1Active, 
        @Approval2Name, 
        @Approval2Email, 
        @Approval2Active, 
        @Approval3Name, 
        @Approval3Email, 
        @Approval3Active, 
        @Approval4Name, 
        @Approval4Email, 
        @Approval4Active, 
        @Approval4Status, 
        @Approval4Level, 
        @Approval4RejectStatus, 
        @Approval5Name, 
        @Approval5Email, 
        @Approval5Active, 
        @Approval5Status, 
        @Approval5Level, 
        @Approval5RejectStatus, 
        @InsertBy, 
        ISNULL(@InsertDt, GETDATE()), 
        @UpdateBy, 
        @UpdateDt
    );
END;
'
GO

--
-- Create table [dbo].[SD_User_SRApproval_SRDesk]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval_SRDesk]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval_SRDesk', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval_SRDesk (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL,
  Approval1Status numeric NULL,
  Approval1Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1RejectStatus numeric NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval2Status numeric NULL,
  Approval2Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2RejectStatus numeric NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval3Status numeric NULL,
  Approval3Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3RejectStatus numeric NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (UserID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_User_SRApproval]
--
PRINT (N'Create table [dbo].[SD_User_SRApproval]')
GO
IF OBJECT_ID(N'dbo.SD_User_SRApproval', 'U') IS NULL
CREATE TABLE dbo.SD_User_SRApproval (
  ID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Active bit NULL,
  Approval1Status numeric NULL,
  Approval1Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1RejectStatus numeric NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Active bit NULL,
  Approval2Status numeric NULL,
  Approval2Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2RejectStatus numeric NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Active bit NULL,
  Approval3Status numeric NULL,
  Approval3Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3RejectStatus numeric NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Active bit NULL,
  Approval4Status numeric NULL,
  Approval4Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4RejectStatus numeric NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Active bit NULL,
  Approval5Status numeric NULL,
  Approval5Level varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5RejectStatus numeric NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  PRIMARY KEY CLUSTERED (UserID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_User_Master]
--
PRINT (N'Create table [dbo].[SD_User_Master]')
GO
IF OBJECT_ID(N'dbo.SD_User_Master', 'U') IS NULL
CREATE TABLE dbo.SD_User_Master (
  SD_UID int IDENTITY (284305, 1),
  UserID numeric NOT NULL,
  EmpID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  FirstName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LastName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmailID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LoginName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Pass varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserScope varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserRole varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LocCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Manager_UserID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Designation varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContactNo varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRemarks varchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  AccountCreatnDt datetime NULL,
  LastLoginDt datetime NULL,
  LastPassChngDt datetime NULL,
  LoginAttempts int NULL,
  Accontlock int NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  Status varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DomainType varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Org_ID varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  ISMfa bit NULL,
  UserType nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDRole nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LoginStatus bit NULL,
  LoginSessionID varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RememberISMfa bit NULL DEFAULT (0),
  RememberISMfaTime datetime NULL,
  Serialno varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Theme varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT DF_SD_User_Master_Theme DEFAULT ('blue-theme'),
  ThemeModify bit NOT NULL DEFAULT (0),
  PRIMARY KEY CLUSTERED (LoginName)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create index [IX_SD_User_Master_LoginName] on table [dbo].[SD_User_Master]
--
PRINT (N'Create index [IX_SD_User_Master_LoginName] on table [dbo].[SD_User_Master]')
GO
IF NOT EXISTS (
  SELECT 1 FROM sys.indexes WITH (NOLOCK)
  WHERE name = N'IX_SD_User_Master_LoginName' AND object_id = OBJECT_ID(N'dbo.SD_User_Master'))
  AND EXISTS (
  SELECT 1 FROM sys.columns WITH (NOLOCK)
  WHERE name = N'LoginName' AND object_id = OBJECT_ID(N'dbo.SD_User_Master'))
CREATE INDEX IX_SD_User_Master_LoginName
  ON dbo.SD_User_Master (LoginName)
  ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_UpdateGrade]
--
PRINT (N'Create table [dbo].[SD_UpdateGrade]')
GO
IF OBJECT_ID(N'dbo.SD_UpdateGrade', 'U') IS NULL
CREATE TABLE dbo.SD_UpdateGrade (
  Email nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Grade nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  agentguid numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TrackEsclationTicketMailForResol]
--
PRINT (N'Create table [dbo].[SD_TrackEsclationTicketMailForResol]')
GO
IF OBJECT_ID(N'dbo.SD_TrackEsclationTicketMailForResol', 'U') IS NULL
CREATE TABLE dbo.SD_TrackEsclationTicketMailForResol (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Eventdt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TrackEsclationTicketMail]
--
PRINT (N'Create table [dbo].[SD_TrackEsclationTicketMail]')
GO
IF OBJECT_ID(N'dbo.SD_TrackEsclationTicketMail', 'U') IS NULL
CREATE TABLE dbo.SD_TrackEsclationTicketMail (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Eventdt datetime NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketNotes]
--
PRINT (N'Create table [dbo].[SD_TicketNotes]')
GO
IF OBJECT_ID(N'dbo.SD_TicketNotes', 'U') IS NULL
CREATE TABLE dbo.SD_TicketNotes (
  ID bigint IDENTITY (548342, 2592),
  TicketID numeric NULL,
  Ticketref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EdityBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EditedDt datetime NULL,
  NoteDesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  organizationFK numeric NULL,
  EngineerNote nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketIncrementRef]
--
PRINT (N'Create table [dbo].[SD_TicketIncrementRef]')
GO
IF OBJECT_ID(N'dbo.SD_TicketIncrementRef', 'U') IS NULL
CREATE TABLE dbo.SD_TicketIncrementRef (
  ID int IDENTITY,
  ReqRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReqPrefix nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LastUpdatedID varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketFileUpload]
--
PRINT (N'Create table [dbo].[SD_TicketFileUpload]')
GO
IF OBJECT_ID(N'dbo.SD_TicketFileUpload', 'U') IS NULL
CREATE TABLE dbo.SD_TicketFileUpload (
  ID int IDENTITY (539264, 29146),
  TicketID numeric NULL,
  Ticketref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Filepath nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EntryDt datetime NULL,
  Filename varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spTicketFileupload]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spTicketFileupload]')
GO
IF OBJECT_ID(N'dbo.SD_spTicketFileupload', 'P') IS NULL
EXEC sp_executesql N'  
  
  
CREATE OR ALTER Proc dbo.SD_spTicketFileupload  
(  
 @ID int =null  
      ,@TicketID numeric(18,0)=null  
      ,@Ticketref nvarchar(100)=null  
      ,@Filepath nvarchar(max)=null  
      ,@EntryDt datetime=null  
 ,@InsertDt datetime =NULL  
 ,@UpdateBy int =NULL  
 ,@UpdateDt datetime =NULL  
 ,@Filename nvarchar(100) = NULL  
 ,@OrgRef numeric(18,0)=NULL  
   
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicketAttach'')  
   
 BEGIN  
 Declare @SDTicketID numeric(18,0);  
 Declare @SDTicketFile nvarchar(max);  
 set @SDTicketID=(select id  from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgRef)  
-- set @SDTicketFile=Convert(varchar,(@Filepath + ''''+@Ticketref+'''') );  
 INSERT INTO SD_TicketFileUpload(TicketID  
      ,Ticketref  
      ,Filepath  
      ,EntryDt,Filename,OrgRef)values(@SDTicketID  
      ,@Ticketref  
      ,@Filepath  
      ,GETDATE(),@Filename,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
  
   select   * from SD_TicketFileUpload where Ticketref=@Ticketref and OrgRef=@OrgRef  order by Entrydt desc  
 END  
  
  
 END  
  
   
   '
GO

--
-- Create table [dbo].[SD_TicketColumnViewUserwise]
--
PRINT (N'Create table [dbo].[SD_TicketColumnViewUserwise]')
GO
IF OBJECT_ID(N'dbo.SD_TicketColumnViewUserwise', 'U') IS NULL
CREATE TABLE dbo.SD_TicketColumnViewUserwise (
  ID int IDENTITY (1, 2345678),
  ColumnView nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_TicketColumnView]
--
PRINT (N'Create table [dbo].[SD_TicketColumnView]')
GO
IF OBJECT_ID(N'dbo.SD_TicketColumnView', 'U') IS NULL
CREATE TABLE dbo.SD_TicketColumnView (
  ID int IDENTITY (1, 2345678),
  ColumnName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  VisibleStatus nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Technician]
--
PRINT (N'Create table [dbo].[SD_Technician]')
GO
IF OBJECT_ID(N'dbo.SD_Technician', 'U') IS NULL
CREATE TABLE dbo.SD_Technician (
  TechID int IDENTITY (529362, 1),
  RefUserID numeric NULL,
  TechLoginName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RequstTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryFK nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CreatedDt datetime NULL,
  CreatedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL,
  UpdatedDt datetime NULL,
  UpdatedBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  TicketCount numeric NULL DEFAULT (0),
  TechLevel varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_StatusRestriction]
--
PRINT (N'Create table [dbo].[SD_StatusRestriction]')
GO
IF OBJECT_ID(N'dbo.SD_StatusRestriction', 'U') IS NULL
CREATE TABLE dbo.SD_StatusRestriction (
  id int IDENTITY,
  StatusId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Reqtype varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageId varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  Active bit NULL DEFAULT (1),
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_StatusRestrict]
--
PRINT (N'Create table [dbo].[SD_StatusRestrict]')
GO
IF OBJECT_ID(N'dbo.SD_StatusRestrict', 'U') IS NULL
CREATE TABLE dbo.SD_StatusRestrict (
  ID int IDENTITY (638273, 1323),
  StatusID numeric NULL,
  StatusScope nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  deskref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusName nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Status]
--
PRINT (N'Create table [dbo].[SD_Status]')
GO
IF OBJECT_ID(N'dbo.SD_Status', 'U') IS NULL
CREATE TABLE dbo.SD_Status (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  StatusColorCode varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sd_stageFK numeric(26) NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddTicketNotes]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddTicketNotes]')
GO
IF OBJECT_ID(N'dbo.SD_spAddTicketNotes', 'P') IS NULL
EXEC sp_executesql N'







CREATE OR ALTER Proc dbo.SD_spAddTicketNotes
(
	
	@TicketID numeric(18,0)=null,
      @Ticketref varchar(100)=null,
      @EdityBy varchar(100)=null,
     @EditedDt datetime=null,
      @NoteDesc nvarchar(max)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@sdStatusFK numeric(18,0) =null,
	@sdPrevStatus varchar(100) =null,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@organizationFK numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddNotes'')
	
	BEGIN
		 Declare @PrevStage varchar(100)=null;
		  Declare @TicketRefID numeric(18,0)=null;
		    Declare @sdstatus nvarchar(100)=null;		
		 set @PrevStage=(select StatusCodeRef from SDIncident a inner join SD_Status
		 b on a.previousStageFK=b.ID  where Ticketref=@Ticketref and organizationFK=@organizationFK)
		  set @TicketRefID=(select id from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
		   set @sdstatus=(select StatusCodeRef from SD_Status where id=@sdStatusFK and OrgDeskRef=@organizationFK)
		  Declare @TicketNotes nvarchar(max);

			
				
				 if(@NoteDesc is null  or @NoteDesc ='''')
				 BEGIN
					--		 set @TicketNotes=						''<p>Auto Generated : Previous Status was ''''''+@PrevStage+'''''' Now ''''''+@sdstatus+''''''<br/> status was updated by : ''''''+@EdityBy+''''''<br/> Engineer Notes :''''''+@NoteDesc+''''
									set @TicketNotes= CONCAT( ''<p>Auto Generated : Previous Status was'' ,@PrevStage,'' Now '',@sdstatus,''<br/> status was updated by : '',@EdityBy,''TicketId'',@Ticketref,''<br/> Engineer Notes :'',@NoteDesc)

							
									INSERT INTO	SD_TicketNotes(TicketID
											  ,Ticketref
											  ,EdityBy
											  ,EditedDt
											  ,NoteDesc,organizationFK,EngineerNote)
											values(@TicketRefID
											  ,@Ticketref
											  ,@EdityBy
											  ,getdate()
											  ,@TicketNotes,@organizationFK,@NoteDesc)	
					END
				else 
						BEGIN
										  Declare @TicketNotes1 nvarchar(max);
										  										 
				set @TicketNotes1= CONCAT( ''<p>Auto Generated :'',''TicketID'',@Ticketref,''<br/> Changes was updated by : '',@EdityBy,''<br/> Engineer Notes :'',@NoteDesc)

										 
										 INSERT INTO	SD_TicketNotes(TicketID
							  ,Ticketref
							  ,EdityBy
							  ,EditedDt
							  ,NoteDesc,organizationFK,EngineerNote)
							values(@TicketRefID
							  ,@Ticketref
							  ,@EdityBy
							  ,getdate()
							  ,@TicketNotes1,@organizationFK,@NoteDesc)	
							  print (''ss'');
						END
			
				
		
	END


	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spAddSRApproval]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSRApproval]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSRApproval', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spAddSRApproval
(
@UserID numeric(18, 0) = NULL,
@EmpID varchar(50) = NULL,
@LoginName varchar(100) = NULL,
@Approval1Name varchar(100)= NULL,
@Approval1Email varchar(100)= NULL,
@Approval1Active bit=NULL,
@Approval1Status numeric(18,0) =NULL,
 @Approval1Level nvarchar(10)=NULL,
      @Approval1RejectStatus numeric(18,0) =NULL,
@Approval2Name varchar(100)= NULL,
@Approval2Email varchar(100)= NULL,
@Approval2Active bit=NULL,
@Approval2Status numeric(18,0) =NULL,
 @Approval2Level nvarchar(10)=NULL,
      @Approval2RejectStatus numeric(18,0) =NULL,
@Approval3Name varchar (100) =NULL,
@Approval3Email  varchar (100) =NULL,
@Approval3Active bit=NULL,
@Approval3Status numeric(18,0) =NULL,
 @Approval3Level nvarchar(10)=NULL,
      @Approval3RejectStatus numeric(18,0) =NULL,
@Approval4Name varchar (100) =NULL,
@Approval4Email varchar(100)= NULL,
@Approval4Active bit=NULL,
@Approval4Status numeric(18,0) =NULL,
@Approval4Level nvarchar(10)=NULL,
@Approval4RejectStatus numeric(18,0) =NULL,
@Approval5Name varchar (100)= NULL,
@Approval5Email varchar (100) =NULL,
@Approval5Active bit=NULL,
@Approval5Status numeric(18,0) =NULL,
@Approval5Level nvarchar(10)=NULL,
 @Approval5RejectStatus numeric(18,0) =NULL,
@InsertBy varchar(50)= NULL,
@InsertDt datetime =NULL,
@UpdateBy nvarchar(50) =NULL,
@UpdateDt datetime =NULL,
@Status nvarchar(10) = NULL,
@ID  int =NULL,
@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddSrApproval'')
	
	BEGIN
	INSERT INTO	SD_User_SRApproval(UserID
      ,EmpID
      ,LoginName
      ,Approval1Name
      ,Approval1Email
	  ,Approval1Active
      ,Approval1Status
	  ,Approval1Level
      ,Approval1RejectStatus
      ,Approval2Name
      ,Approval2Email
	   ,Approval2Active
      ,Approval2Status
	   ,Approval2Level
      ,Approval2RejectStatus
      ,Approval3Name
      ,Approval3Email
	   ,Approval3Active
      ,Approval3Status
	   ,Approval3Level
      ,Approval3RejectStatus
      ,Approval4Name
      ,Approval4Email
	   ,Approval4Active
      ,Approval4Status
	   ,Approval4Level
      ,Approval4RejectStatus
      ,Approval5Name
      ,Approval5Email
	   ,Approval5Active
      ,Approval5Status
	   ,Approval5Level
      ,Approval5RejectStatus
      ,InsertBy
      ,InsertDt)
	values(@UserID
      ,@EmpID
      ,@LoginName
      ,@Approval1Name
      ,@Approval1Email
	  ,@Approval1Active
      ,@Approval1Status
	 , @Approval1Level 
     , @Approval1RejectStatus 
      ,@Approval2Name
      ,@Approval2Email
	    ,@Approval2Active
      ,@Approval2Status
	  , @Approval2Level 
     ,@Approval2RejectStatus 
      ,@Approval3Name
      ,@Approval3Email
	  ,@Approval3Active
      ,@Approval3Status
	  ,@Approval3Level 
     ,@Approval3RejectStatus 
      ,@Approval4Name
      ,@Approval4Email
	  ,@Approval4Active
      ,@Approval4Status
	   , @Approval4Level 
     , @Approval4RejectStatus 
      ,@Approval5Name
      ,@Approval5Email
	    ,@Approval5Active
		  	   , @Approval5Level 
     , @Approval5RejectStatus 
      ,@Approval5Status
      ,@InsertBy
      ,GETDATE())	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_Status
	END

		if(@Option=''UpdateSrApproval'')
	
	BEGIN
	update SD_User_SRApproval set
	   Approval1Name=@Approval1Name
      ,Approval1Email=@Approval1Email
	  	    ,Approval1Active=@Approval1Active
      ,Approval1Status=@Approval1Status
	  ,Approval1Level=@Approval1Level
  ,Approval1RejectStatus=@Approval1RejectStatus
      ,Approval2Name=@Approval2Name
      ,Approval2Email=@Approval2Email
	   ,Approval2Active=@Approval2Active
      ,Approval2Status=@Approval2Status
	   ,Approval2Level=@Approval2Level
  ,Approval2RejectStatus=@Approval2RejectStatus

      ,Approval3Name=@Approval3Name
      ,Approval3Email=@Approval3Email
	   ,Approval3Active=@Approval3Active
      ,Approval3Status=@Approval3Status
	     ,Approval3Level=@Approval3Level
  ,Approval3RejectStatus=@Approval3RejectStatus

      ,Approval4Name=@Approval4Name
      ,Approval4Email=@Approval4Email
	   ,Approval4Active=@Approval4Active
      ,Approval4Status=@Approval4Status
	  	     ,Approval4Level=@Approval4Level
  ,Approval4RejectStatus=@Approval4RejectStatus

      ,Approval5Name=@Approval5Name
      ,Approval5Email=@Approval5Email
	   ,Approval5Active=@Approval5Active
      ,Approval5Status=@Approval5Status
	      ,Approval5Level=@Approval5Level
  ,Approval5RejectStatus=@Approval5RejectStatus
	  ,UpdateBy=@UpdateBy,
	  UpdateDt=GETDATE()
	  
	  
	  
	  where ID=@ID
	
	END
		if(@Option=''DeleteApproval'')
	
	BEGIN
	Delete from SD_User_SRApproval where   ID=@ID
	END
	if(@Option=''AddSrApprovalBulk'')
	
	BEGIN
	INSERT INTO	SD_User_SRApproval(UserID
      ,EmpID
      ,LoginName
      ,Approval1Name
      ,Approval1Email
      ,Approval1Status
      ,Approval2Name
      ,Approval2Email
      ,Approval2Status
      ,Approval3Name
      ,Approval3Email
      ,Approval3Status
      ,Approval4Name
      ,Approval4Email
      ,Approval4Status
      ,Approval5Name
      ,Approval5Email
      ,Approval5Status
      ,InsertBy
      ,InsertDt)
	values(@UserID
      ,@EmpID
      ,@LoginName
      ,@Approval1Name
      ,@Approval1Email
      ,@Approval1Status
      ,@Approval2Name
      ,@Approval2Email
      ,@Approval2Status
      ,@Approval3Name
      ,@Approval3Email
      ,@Approval3Status
      ,@Approval4Name
      ,@Approval4Email
      ,@Approval4Status
      ,@Approval5Name
      ,@Approval5Email
      ,@Approval5Status
      ,@InsertBy
      ,GETDATE())	
	END

	END



'
GO

--
-- Create table [dbo].[SD_Stage]
--
PRINT (N'Create table [dbo].[SD_Stage]')
GO
IF OBJECT_ID(N'dbo.SD_Stage', 'U') IS NULL
CREATE TABLE dbo.SD_Stage (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StageCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StageDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovers]
--
PRINT (N'Create table [dbo].[SD_SRApprovers]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovers', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovers (
  ID int IDENTITY (1456754, 1),
  ApproverLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  Status bit NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovalStatus_SRDesk]
--
PRINT (N'Create table [dbo].[SD_SRApprovalStatus_SRDesk]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovalStatus_SRDesk', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovalStatus_SRDesk (
  ID int IDENTITY (284305, 1),
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserID numeric NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SRApprovalStatus]
--
PRINT (N'Create table [dbo].[SD_SRApprovalStatus]')
GO
IF OBJECT_ID(N'dbo.SD_SRApprovalStatus', 'U') IS NULL
CREATE TABLE dbo.SD_SRApprovalStatus (
  ID int IDENTITY (284305, 1),
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  UserID numeric NOT NULL,
  Approval1Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval1Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval2Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval3Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval4Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Name varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Email varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Approval5Remarks varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UATAccept nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UATAcceptRemarks nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketRejectStatus_SR]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketRejectStatus_SR]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketRejectStatus_SR', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketRejectStatus_SR
(            
@userName varchar(100)=null,            
@Subject nvarchar(1000)=NULL,            
@EmailBody nvarchar(max)=NULL,                  
@UserID nvarchar(100) = NULL,            
@Ticketref  varchar(100) = NULL,            
@Approval1Name varchar(100)= NULL,            
@Approval1Email varchar(100)= NULL,            
@Approval1Status varchar(50)=NULL,            
@Approval1Remarks varchar(max)=NULL,            
@Approval1Grade varchar(20)=NULL,               
@Approval2Remarks varchar(max)=NULL,           
@Approval3Name varchar (100) =NULL,             
@Approval3Remarks varchar(max)=NULL,           
@Approval5Name varchar (100)= NULL,            
@Approval5Email varchar (100) =NULL,           
@Remarks varchar(max)=NULL,            
@ApproverLevel varchar(10)=NULL,            
@StatusFk numeric(18,0)=NULL,             
@Approval4IsActive bit=NULL,            
@Approval5IsActive bit=NULL,            
@PrevStage numeric(18,0)=null,            
@ToEmail nvarchar(100)=null,            
@assigneeParticipantFK numeric(18,0) =null,            
 @HODApproval nvarchar(200)=null,            
 @OrgId varchar(50)=NULL,
 @ApprovalBy varchar(50)=NULL,          
@Options varchar(50) =NULL
             
 )            
 AS            
 BEGIN             
           declare @location nvarchar(100);            
  declare @M2Status nvarchar(100);            
  declare @EmpCode nvarchar(40);            
  declare @StatusFk1 numeric(18,0);            
  declare @PrevStatus numeric(18,0);            
  declare @sdStageFk numeric(18,0);            
  declare @FromEmail nvarchar(100);   
  --update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus 
		--	where Ticketref=@Ticketref  and organizationFK=@OrgId            
            
            update SD_SRApprovalStatus set Approval1Status=''Rejected''             
         ,Approval1Remarks=@Remarks            
       where TicketRef=@Ticketref  and orgid=@OrgId            
     --        set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     --set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     --   SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')      
  
 -- set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
            
 --      set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
 --      set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
    
 --      if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)            
 --      BEGIN-- reject by manager            
 --           set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
            
                     
 --           set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                        
                   
            
            
 --    -----------now ticket will visible to pool  according to location of ticket             
 --    set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
 --    set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and orgid=@OrgId)            
                     
 --          ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
 --  @organizationFK=@OrgId          
             
 --    if(@ToEmail is not null)            
 --      BEGIN            
 --       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
 --       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
 --      END            
 --      END            
                    
 --             if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
 --              BEGIN            
 --              --Rejected by IT manager             
 --               set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --                set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId            
 --                update SD_SRApprovalStatus set Approval2Status=''Rejected''             
 --                  ,Approval2Remarks=@Remarks            
 --                  where TicketRef=@Ticketref  and orgid=@OrgId            
 --                   -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
 --      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
 --    set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
 --      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
 --   ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --  exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
 --  @organizationFK=@OrgId          
            
 --    -----------now ticket will visible to pool  according to location of ticket             
 --    set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )            
 --    set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)            
                     
                     
 --    if(@ToEmail is not null)            
 --      BEGIN            
 --       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
 --       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
 --      END            
 -- END          
                  
 --         if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
 --            BEGIN            
 --             set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --      set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
 --            update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId            
 --             update SD_SRApprovalStatus set Approval3Status=''Rejected''             
 --             ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId            
 ----               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
                    
 --               ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --           END           
 --          if(@Approval4IsActive=''1'')            
 --           BEGIN            
 --            if(@ApproverLevel=''L4'')            
 --             BEGIN            
 --               set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
 --             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
 --               update SD_SRApprovalStatus set Approval4Status=''Rejected''             
 --               ,Approval4Remarks=@Remarks            
 --                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
          
 --       ---------Add Notes-------------          
 --set  @ApprovalBy =(select top 1 approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --             END            
 --           END          
 --        if(@Approval5IsActive=''1'')            
 --         BEGIN            
                          
 --          if(@ApproverLevel=''L5'')            
 --           BEGIN            
 --             set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
 --         update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
 --              update SD_SRApprovalStatus set Approval5Status=''Rejected''             
 --              ,Approval5Remarks=@Remarks            
 --                update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref          
 --set  @ApprovalBy =(select top 1 approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 --   exec  SD_spAddTicketNotes          
 --  @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
 --  @organizationFK=@OrgId          
 --            END            
 --         END   
		  END'
GO

--
-- Create table [dbo].[SD_SLAForResol]
--
PRINT (N'Create table [dbo].[SD_SLAForResol]')
GO
IF OBJECT_ID(N'dbo.SD_SLAForResol', 'U') IS NULL
CREATE TABLE dbo.SD_SLAForResol (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResponseSLA nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseDate datetime NULL,
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EsclationFlag int NULL,
  NextEsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SLAConfig]
--
PRINT (N'Create table [dbo].[SD_SLAConfig]')
GO
IF OBJECT_ID(N'dbo.SD_SLAConfig', 'U') IS NULL
CREATE TABLE dbo.SD_SLAConfig (
  ID numeric NOT NULL,
  SlaName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  SLADesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_SLA]
--
PRINT (N'Create table [dbo].[SD_SLA]')
GO
IF OBJECT_ID(N'dbo.SD_SLA', 'U') IS NULL
CREATE TABLE dbo.SD_SLA (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResponseSLA nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseDate datetime NULL,
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EsclationFlag int NULL,
  NextEsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EscDt datetime NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Severity]
--
PRINT (N'Create table [dbo].[SD_Severity]')
GO
IF OBJECT_ID(N'dbo.SD_Severity', 'U') IS NULL
CREATE TABLE dbo.SD_Severity (
  ID numeric NOT NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Serverityref nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Serveritycoderef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  SeverityDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_ServDeskDefn]
--
PRINT (N'Create table [dbo].[SD_ServDeskDefn]')
GO
IF OBJECT_ID(N'dbo.SD_ServDeskDefn', 'U') IS NULL
CREATE TABLE dbo.SD_ServDeskDefn (
  id numeric(26) NOT NULL,
  Deskref varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  partitionid numeric(26) NOT NULL,
  DeskDesc varchar(80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdPrefix varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdStageFK numeric(26) NULL,
  sdStatusFK numeric(26) NULL,
  sdPriorityFK numeric(26) NULL,
  sdSeverityFK numeric(26) NULL,
  sdSolutionTypeFK numeric(26) NULL,
  sdCategoryFK numeric(26) NULL,
  templateName varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdRolePermissionFK numeric(26) NULL,
  autoArchiveTime int NOT NULL,
  SLA varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CoverageSch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgFk numeric NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_roles]
--
PRINT (N'Create table [dbo].[SD_roles]')
GO
IF OBJECT_ID(N'dbo.SD_roles', 'U') IS NULL
CREATE TABLE dbo.SD_roles (
  ID int IDENTITY,
  MenuID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRole varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_RolePreference]
--
PRINT (N'Create table [dbo].[SD_RolePreference]')
GO
IF OBJECT_ID(N'dbo.SD_RolePreference', 'U') IS NULL
CREATE TABLE dbo.SD_RolePreference (
  ID int IDENTITY,
  FieldID numeric NULL,
  CustomFieldName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDRole varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Role]
--
PRINT (N'Create table [dbo].[SD_Role]')
GO
IF OBJECT_ID(N'dbo.SD_Role', 'U') IS NULL
CREATE TABLE dbo.SD_Role (
  RoleID int IDENTITY,
  RoleName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  InsertBy varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  CONSTRAINT PK_RoleName PRIMARY KEY CLUSTERED (RoleName)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_ResponseReminder]
--
PRINT (N'Create table [dbo].[SD_ResponseReminder]')
GO
IF OBJECT_ID(N'dbo.SD_ResponseReminder', 'U') IS NULL
CREATE TABLE dbo.SD_ResponseReminder (
  ID int IDENTITY (1456754, 1),
  TicketID numeric NULL,
  TicketNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReminderTo nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Resolution]
--
PRINT (N'Create table [dbo].[SD_Resolution]')
GO
IF OBJECT_ID(N'dbo.SD_Resolution', 'U') IS NULL
CREATE TABLE dbo.SD_Resolution (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionRef nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResolutionCodeRef nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ResolutionDesc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_RequestType]
--
PRINT (N'Create table [dbo].[SD_RequestType]')
GO
IF OBJECT_ID(N'dbo.SD_RequestType', 'U') IS NULL
CREATE TABLE dbo.SD_RequestType (
  id numeric NULL,
  ReqTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReqTypeDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_AllServiceDesks]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_AllServiceDesks]')
GO
IF OBJECT_ID(N'dbo.SD_AllServiceDesks', 'P') IS NULL
EXEC sp_executesql N'

Create OR ALTER PROCEDURE dbo.SD_AllServiceDesks
(

@Orgid numeric(18,0)=NUll,
 @Option varchar(50)	


)
AS
BEGIN
IF(@Option=''ALL'')
BEGIN
	SELECT  distinct ReqTypeRef  as Desk  FROM SD_RequestType where OrgRef=@Orgid order by ReqTypeRef
END
END
'
GO

--
-- Create table [dbo].[SD_Priority]
--
PRINT (N'Create table [dbo].[SD_Priority]')
GO
IF OBJECT_ID(N'dbo.SD_Priority', 'U') IS NULL
CREATE TABLE dbo.SD_Priority (
  ID numeric NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  PriorityCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  PriorityDesc nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDeskRef numeric NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Pool]
--
PRINT (N'Create table [dbo].[SD_Pool]')
GO
IF OBJECT_ID(N'dbo.SD_Pool', 'U') IS NULL
CREATE TABLE dbo.SD_Pool (
  ID int IDENTITY,
  PoolName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Location nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Engineer nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddEngineerPool]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddEngineerPool]')
GO
IF OBJECT_ID(N'dbo.SD_spAddEngineerPool', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddEngineerPool
(
	@ID numeric(18,0)=null
      ,@PoolName nvarchar(100)=null
      ,@Location nvarchar(200)=null
      ,@Engineer nvarchar(max)=null
     
	
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddEngPool'')
	
	BEGIN
	INSERT INTO	SD_Pool(
      
      PoolName
      ,Location
      ,Engineer
   )
	values(@PoolName
      ,@Location
      ,@Engineer)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_Pool
	END

		if(@Option=''UpdateEngPool'')
	
	BEGIN
	update 	SD_Pool set 

  --  PoolName=@PoolName
  --    ,
	 Location=@Location
      ,Engineer=@Engineer
    
	 where ID=@ID
	END
		if(@Option=''DeleteEngPool'')
	
	BEGIN
	Delete  from 	SD_Pool
 where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_PCVOrgMapping]
--
PRINT (N'Create table [dbo].[SD_PCVOrgMapping]')
GO
IF OBJECT_ID(N'dbo.SD_PCVOrgMapping', 'U') IS NULL
CREATE TABLE dbo.SD_PCVOrgMapping (
  ID int IDENTITY,
  PCV_OrgID numeric(26) NULL,
  OrgID numeric NULL,
  OrgName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_SDPageAutomation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDPageAutomation]')
GO
IF OBJECT_ID(N'dbo.SD_SDPageAutomation', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_SDPageAutomation
(   @machName  varchar(100)=null,
	@agentGuid numeric(26,0)=null,
	@MachineID  varchar(100)=null,
	@ServiceDesk varchar(100)=null,
	@Pass varchar(500)=null,
	@sdCategoryFK varchar(100)=null,
	@Option varchar(100)
)
AS
BEGIN
      SET  @ServiceDesk=@ServiceDesk;

	  if(@Option=''MachineDetails'')
		BEGIN		
			
	select a.agentGuid,displayName,machGroupGuid,a.groupName,a.id as InventoryAssetID,
				value18 as UserName,value06 as EmailID ,value22 as ''EmpCode'' 
				,value08 as ''Location'',ee.OrgID,vm.IpAddress,vm.SysSerialNumber as ''SerialNo'' from ksubscribers.Inventory.asset a 
				left join ksubscribers.dbo.VMachCustFields b on a.agentGuid=b.agentGuid
				left Join ksubscribers.dbo.users c  on a.agentGuid=c.agentGuid
				left join ksubscribers.dbo.DenormalizedOrgToMach d on b.agentGuid=d.AgentGuid
				left join ksubscribers.dbo.vMachine vm on vm.agentGuid=b.agentGuid
				left join  sd_pcvOrgmapping ee on d.OrgId=ee.PCV_OrgID
				where  a.agentGuid=@agentGuid 
		END

	



END
'
GO

--
-- Create table [dbo].[SD_OrgMaster]
--
PRINT (N'Create table [dbo].[SD_OrgMaster]')
GO
IF OBJECT_ID(N'dbo.SD_OrgMaster', 'U') IS NULL
CREATE TABLE dbo.SD_OrgMaster (
  ID int IDENTITY,
  OrgName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDesc nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Org_ID numeric NOT NULL,
  CntctPrsnName nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnMob nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnNameII nchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnMobII nchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CntctPrsnEmailII nchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PK_SD_OrgMaster PRIMARY KEY CLUSTERED (Org_ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spRequestType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spRequestType]')
GO
IF OBJECT_ID(N'dbo.SD_spRequestType', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spRequestType      
(      
 @StatusID int = NULL,      
 @ReqTypeRef varchar(50) =NULL,      
 @ReqTypeDef varchar(1000) =NULL,      
 @OrgRef varchar(50) =NULL,      
 @InsertBy int =NULL,      
 @ReqPrefix varchar(3)=null,      
 @InsertDt datetime =NULL,      
 @UpdateBy int =NULL,      
 @UpdateDt datetime =NULL,      
 @Status nvarchar(10) = NULL,      
       
 @ID numeric(18,0)=NULL,      
@Error varchar(50)=null output,    
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddRequestType'')      
 BEGIN      
    if not exists(select * from SD_RequestType where OrgRef=@OrgRef and ReqTypeRef=@ReqTypeRef )     
 begin     
 INSERT INTO SD_RequestType(ID,ReqTypeRef,ReqTypeDef,OrgRef)values(@ID,@ReqTypeRef,@ReqTypeDef,@OrgRef)       
 insert into SD_TicketIncrementRef  (ReqRef      
      ,ReqPrefix      
      ,LastUpdatedID,OrgRef) Values(@ReqTypeRef,UPPER(Left(@ReqTypeRef,3)),''0000000'',@OrgRef)    
   end    
   else     
 begin    
 set @Error=''Request Type already exists.''    
 end    
 END      
  if(@Option=''see'')      
      
 BEGIN      
select a.*,b.OrgName,b.Org_ID from SD_RequestType a left join sd_orgmaster b       
on a.OrgRef=b.Org_ID      
 END      
      
 if(@Option=''UpdateRequestType'')      
       
 BEGIN   
 update SD_RequestType set ReqTypeRef=@ReqTypeRef,ReqTypeDef=@ReqTypeDef,OrgRef=@OrgRef where id=@ID   
 END      
 if(@Option=''DelRequestType'')      
       
 BEGIN      
  Delete from SD_RequestType  where id=@ID       
 END      
 END      
      '
GO

--
-- Create or alter procedure [dbo].[SD_spAddStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddStatus]')
GO
IF OBJECT_ID(N'dbo.SD_spAddStatus', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddStatus      
(      
 @StatusID int = NULL,      
 @DeskRef varchar(50) =NULL,      
 @StatusRef varchar(50) =NULL,      
 @StatusDesc varchar(500) =NULL,      
 @OrgDeskRef numeric(18,0) =NULL,      
 @StatusCodeRef varchar(50)=NULL,      
 @StatusColorCode varchar(20)=NULL,      
 @sd_stageFK numeric(18,0)=NULL,      
 @InsertBy int =NULL,      
 @ID numeric(18,0)=NULL,      
 @InsertDt datetime =NULL,      
 @UpdateBy int =NULL,      
 @UpdateDt datetime =NULL,      
 @Status nvarchar(10) = NULL,  
 @Error varchar(50)=null output,  
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddStatus'')      
 BEGIN      
  if not exists(select * from SD_Status where OrgDeskRef=@OrgDeskRef and StatusCodeRef=@StatusCodeRef and DeskRef=@DeskRef and sd_stageFK=@sd_stageFK)   
 begin   
 INSERT INTO SD_Status(ID,DeskRef,StatusRef,StatusCodeRef,StatusDesc,StatusColorCode,OrgDeskRef,sd_stageFK)      
 values(@ID,@DeskRef,@StatusRef,@StatusCodeRef,@StatusDesc,@StatusColorCode,@OrgDeskRef,@sd_stageFK)       
 end  
 else   
 begin  
 set @Error='' Status already exists for this Organization.''  
 end  
 END      
  if(@Option=''see'')      
       
 BEGIN      
       
select a.*,b.OrgName,b.Org_ID,c.StageCodeRef from SD_Status a      
left join sd_orgmaster b       
on a.OrgDeskRef=b.Org_ID      
left join SD_Stage c       
on a.sd_stageFK=c.ID      
where a.OrgDeskRef=CASE WHEN ISNULL(@OrgDeskRef,''0'')=''0'' THEN a.OrgDeskRef else @OrgDeskRef END    
 END     
  if(@Option=''UpdateStatus'')      
       
 BEGIN    
 update  SD_Status set StatusRef=@StatusRef,StatusCodeRef=@StatusCodeRef,StatusDesc=@StatusDesc,      
 StatusColorCode=@StatusColorCode,OrgDeskRef=@OrgDeskRef,sd_stageFK=@sd_stageFK where DeskRef=@DeskRef and ID=@ID  
 END      
  if(@Option=''DeleteStatus'')      
       
 BEGIN      
 Delete from SD_Status where DeskRef=@DeskRef and ID=@ID      
 END      
      
 END      
      
      '
GO

--
-- Create or alter procedure [dbo].[SD_spAddStage]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddStage]')
GO
IF OBJECT_ID(N'dbo.SD_spAddStage', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER Proc dbo.SD_spAddStage    
(    
 @StageID int = NULL,    
 @DeskRef varchar(50) =NULL,    
 @StageRef varchar(50) =NULL,    
 @StageDesc varchar(500) =NULL,    
 @OrgDeskRef numeric(18,0) =NULL,    
 @StageCodeRef varchar(50)=NULL,    
 @StageColorCode varchar(20)=NULL,    
 @InsertBy int =NULL,    
 @ID numeric(18,0)=NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Stage nvarchar(10) = NULL,    
 @Error varchar(100)=null output,  
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddStage'')    
     
 BEGIN    
  
  if not exists(select * from SD_Stage where OrgDeskRef=@OrgDeskRef and StageCodeRef=@StageCodeRef and DeskRef=@DeskRef)   
 begin   
 INSERT INTO SD_Stage(ID,DeskRef,StageRef,StageCodeRef,StageDesc,OrgDeskRef)    
 values(@ID,@DeskRef,@StageRef,@StageCodeRef,@StageDesc,@OrgDeskRef)     
 end  
 else   
 begin  
 set @Error=''Stage already exists for this Organisation.''  
 end  
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Stage a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
 END    
    
  if(@Option=''UpdateStage'')    
     
 BEGIN   
 update  SD_Stage set StageRef=@StageRef,StageCodeRef=@StageCodeRef,StageDesc=@StageDesc,    
 OrgDeskRef=@OrgDeskRef where DeskRef=@DeskRef and ID=@ID    
 END    
  if(@Option=''DeleteStage'')    
     
 BEGIN    
 Delete from SD_Stage where DeskRef=@DeskRef and ID=@ID    
 END    
    
 END    
    
    
     '
GO

--
-- Create or alter procedure [dbo].[SD_spAddSeverity]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSeverity]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSeverity', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddSeverity    
(    
 @StatusID int = NULL,    
 @DeskRef varchar(50) =NULL,    
 @Serverityref varchar(50) =NULL,    
 @SeverityDesc varchar(500) =NULL,    
 @OrgDeskRef numeric(18,0) =NULL,    
 @Serveritycoderef varchar(50)=NULL,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @ID numeric(18,0) =null,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @ResponseTime int =NULL,    
 @ResolutionTime int =NULL,  
 @Error varchar(50)=null output,  
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddSeverity'')    
 BEGIN    
if not exists(select * from SD_Severity where OrgDeskRef=@OrgDeskRef and Serveritycoderef=@Serveritycoderef and DeskRef=@DeskRef)   
 begin   
 INSERT INTO SD_Severity(ID,DeskRef,Serverityref,Serveritycoderef,SeverityDesc,OrgDeskRef,ResponseTime,ResolutionTime)    
 values(@ID,@DeskRef,@Serverityref,@Serveritycoderef,@SeverityDesc,@OrgDeskRef,@ResponseTime,@ResolutionTime)     
 end  
 else   
 begin  
 set @Error=''Severity For this Organisation already exists.''  
 end  
 END    
 if(@Option=''UpdateSeverity'')    
     
 BEGIN    
   
 update SD_Severity set Serveritycoderef=@Serveritycoderef,SeverityDesc=@SeverityDesc,OrgDeskRef=@OrgDeskRef,    
 ResolutionTime=@ResolutionTime,ResponseTime=@ResponseTime    
 where ID=@ID and DeskRef=@DeskRef  
 END    
 if(@Option=''DeleteSeverity'')    
     
 BEGIN    
Delete from SD_Severity where ID=@ID and DeskRef=@DeskRef    
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Severity a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
     
 END    
    
  if(@Option=''CustomerWise'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_Severity a left join sd_orgmaster b     
on a.OrgDeskRef=b.Org_ID    
where a.OrgDeskRef=@OrgDeskRef    
     
 END    
    
 END    
    
    
    '
GO

--
-- Create or alter procedure [dbo].[SD_spAddResolution]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddResolution]')
GO
IF OBJECT_ID(N'dbo.SD_spAddResolution', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddResolution  
(  
 @StatusID int = NULL,  
 @DeskRef varchar(50) =NULL,  
 @ResolutionRef varchar(400) =NULL,  
 @ResolutionDesc varchar(max) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @ResolutionCodeRef varchar(400)=NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddResolution'')  
   
 BEGIN  
  if not exists(select * from SD_Resolution where OrgDeskRef=@OrgDeskRef and ResolutionCodeRef=@ResolutionCodeRef and DeskRef=@DeskRef) 
 begin 
 INSERT INTO SD_Resolution(ID,DeskRef,ResolutionRef,ResolutionCodeRef,ResolutionDesc,OrgDeskRef)  
 values(@ID,@DeskRef,@ResolutionRef,@ResolutionCodeRef,@ResolutionDesc,@OrgDeskRef) 
 end
  else 
 begin
 set @Error=''Resolution already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Resolution a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
 END  
  
   if(@Option=''CustomerWise'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Resolution a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
where a.OrgDeskRef=@OrgDeskRef  
 END  
  
  if(@Option=''UpdateResolution'')  
   
 BEGIN  
  
 update  SD_Resolution set   
 ResolutionCodeRef=@ResolutionCodeRef,ResolutionDesc=@ResolutionDesc,OrgDeskRef=@OrgDeskRef  
 where deskref=@DeskRef and ResolutionRef=@ResolutionRef
 END  
  if(@Option=''DeleteResolution'')  
   
 BEGIN  
 Delete  from  SD_Resolution  
 where deskref=@DeskRef and ResolutionRef=@ResolutionRef  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddPriority]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddPriority]')
GO
IF OBJECT_ID(N'dbo.SD_spAddPriority', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddPriority  
(  
 @StatusID int = NULL,  
 @DeskRef varchar(50) =NULL,  
 @PriorityRef varchar(50) =NULL,  
 @PriorityDesc varchar(500) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @PriorityCodeRef varchar(50)=NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL, 
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddPriority'')  
   
 BEGIN  
  if not exists(select * from SD_Priority where OrgDeskRef=@OrgDeskRef and DeskRef=@DeskRef and PriorityCodeRef=@PriorityCodeRef) 
 begin 
 INSERT INTO SD_Priority(ID,DeskRef,PriorityRef,PriorityCodeRef,PriorityDesc,OrgDeskRef)  
 values(@ID,@DeskRef,@PriorityRef,@PriorityCodeRef,@PriorityDesc,@OrgDeskRef)  
 end
 else 
 begin
 set @Error=''Priority already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Priority a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
 END  
  if(@Option=''CustomerWise'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_Priority a left join sd_orgmaster b   
on a.OrgDeskRef=b.Org_ID  
where a.OrgDeskRef=@OrgDeskRef  
 END  
  
  if(@Option=''UpdatePriority'')  
   
 BEGIN  

 update  SD_Priority set   
 PriorityCodeRef=@PriorityCodeRef,PriorityDesc=@PriorityDesc,OrgDeskRef=@OrgDeskRef  
 where deskref=@DeskRef and PriorityRef=@PriorityRef 
 END  
  if(@Option=''DeletePriority'')  
   
 BEGIN  
 Delete  from  SD_Priority  
 where deskref=@DeskRef and PriorityRef=@PriorityRef  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddOrganization]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddOrganization]')
GO
IF OBJECT_ID(N'dbo.SD_spAddOrganization', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddOrganization  
(  
 @OrgName nvarchar(100)= NULL,  
 @OrgDesc nvarchar(500) =NULL,  
 @Org_ID numeric(18, 0)=  NULL,  
 @CntctPrsnName nvarchar(200)= NULL,  
 @CntctPrsnMob nvarchar(20)= NULL,  
 @CntctPrsnEmail nvarchar(100)= NULL,  
 @CntctPrsnNameII nchar(100) =NULL,  
 @CntctPrsnMobII nchar(20) =NULL,  
 @CntctPrsnEmailII nchar(100)= NULL,  
 @ID numeric(18,0)=null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,
 @Error varchar(50)=null output,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddOrg'')  
   
 BEGIN  
 if not exists(select * from SD_OrgMaster where OrgName=@OrgName) 
 begin 
 INSERT INTO SD_OrgMaster(OrgName  
      ,OrgDesc  
      ,Org_ID  
      ,CntctPrsnName  
      ,CntctPrsnMob  
      ,CntctPrsnEmail  
      ,CntctPrsnNameII  
      ,CntctPrsnMobII  
      ,CntctPrsnEmailII)  
 values(@OrgName  
      ,@OrgDesc  
      ,@Org_ID  
      ,@CntctPrsnName  
      ,@CntctPrsnMob  
      ,@CntctPrsnEmail  
      ,@CntctPrsnNameII  
      ,@CntctPrsnMobII  
      ,@CntctPrsnEmailII) 
	  end
 else 
 begin
 set @Error=''Organization already exists.''
 end
 END  
 
  if(@Option=''see'')  
   
 BEGIN  
select * from SD_Priority  
 END  
  
  if(@Option=''UpdateOrg'')  
   
 BEGIN  
 
 update  SD_OrgMaster set   
 OrgName=@OrgName  
 ,OrgDesc=@OrgDesc  
        
      ,CntctPrsnName=@CntctPrsnName  
      ,CntctPrsnMob=@CntctPrsnMob  
      ,CntctPrsnEmail=@CntctPrsnEmail  
      ,CntctPrsnNameII=@CntctPrsnNameII  
      ,CntctPrsnMobII=@CntctPrsnMobII  
      ,CntctPrsnEmailII=@CntctPrsnEmailII  
   where Org_ID=@Org_ID 
 END  
  if(@Option=''DeleteOrg'')  
   
 BEGIN  
 Delete  from  SD_OrgMaster  
   where Org_ID=@Org_ID  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddDeskSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddDeskSLA]')
GO
IF OBJECT_ID(N'dbo.SD_spAddDeskSLA', 'P') IS NULL
EXEC sp_executesql N'
  
  
CREATE OR ALTER Proc dbo.SD_spAddDeskSLA  
(  
 @ID numeric(18,0)=null  
      ,@SlaName nvarchar(50)=null  
      ,@SLADesc nvarchar(100)=null  
      ,@ResponseTime int=null  
      ,@ResolutionTime int =null  
   ,@OrgID numeric(18,0)=NULL 
   ,@Error varchar(50)=null output
   
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddDeskSLA'')  
   
 BEGIN  
  if not exists(select * from SD_SLAConfig where OrgRef=@OrgID and SlaName=@SlaName) 
 begin 
 INSERT INTO SD_SLAConfig(ID  
      ,SlaName  
      ,SLADesc  
      ,OrgRef)  
 values(@ID  
      ,@SlaName  
      ,@SLADesc  
      ,@OrgID)   
	  end
	  else 
 begin
 set @Error=''SLA already exists for this Organization.''
 end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_SLAConfig a   
inner join  SD_OrgMaster b   
on a.OrgRef=b.Org_ID  
 END  
  
  if(@Option=''UpdateDeskSLA'')  
   
 BEGIN 

 update  SD_SLAConfig set   
  
     SlaName=@SlaName  
      ,SLADesc=@SLADesc  
      ,OrgRef=@OrgID  
  where ID=@ID 
 END  
  if(@Option=''DeleteDeskSLA'')  
   
 BEGIN  
 Delete  from  SD_SLAConfig  
 where ID=@ID  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter view [dbo].[tab]
--
GO
PRINT (N'Create or alter view [dbo].[tab]')
GO
IF OBJECT_ID(N'dbo.tab', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.tab
as
(
select a.UserID,a.EmpID,a.UserName,b.ScopeName,c.RoleName from SD_User_Master a 
inner join SD_UserScope b on a.UserScope=b.ScopeID
inner join SD_Role c on a.UserRole=c.RoleName
inner join SD_OrgMaster  d on a.Org_ID=d.Org_ID
)
'
GO

--
-- Create table [dbo].[SD_OrgLogo]
--
PRINT (N'Create table [dbo].[SD_OrgLogo]')
GO
IF OBJECT_ID(N'dbo.SD_OrgLogo', 'U') IS NULL
CREATE TABLE dbo.SD_OrgLogo (
  ID int IDENTITY,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  Org_ID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spOrgLogo]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spOrgLogo]')
GO
IF OBJECT_ID(N'dbo.SD_spOrgLogo', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_spOrgLogo

(
--@userName varchar(100)=null,
@FileName nvarchar(500)=null,
@FileType nvarchar(500)=null,
@FileData varbinary (max) = NULL,
@Orgid nvarchar(max)=NULL,
@MailBody  varchar (max) =NULL,
@Option varchar(50)=null
)

AS
BEGIN

		if(@Option=''UploadLogo'')
		BEGIN
			IF exists(select * from SD_OrgLogo where Org_ID=@Orgid)
				BEGIN
					update  SD_OrgLogo set FileName=@FileName,FileType=@FileType,FileData=@FileData where Org_ID=@Orgid
				END
				else 
				BEGIN
					insert into SD_OrgLogo (FileName,FileType,FileData,Org_ID)values(@FileName,@FileType,@FileData,@Orgid) 
			
				END
		END
		if(@Option=''GetLogo'')
		BEGIN
		Select top 1  b.* from SD_User_Master a inner join 
                                                            SD_OrgLogo b 
                                                            on a.Org_ID=b.Org_ID
                                                            where a.Org_ID=@Orgid
		END
	
	END
'
GO

--
-- Create table [dbo].[SD_Options]
--
PRINT (N'Create table [dbo].[SD_Options]')
GO
IF OBJECT_ID(N'dbo.SD_Options', 'U') IS NULL
CREATE TABLE dbo.SD_Options (
  id int IDENTITY,
  QuestionId int NULL,
  Question_Option varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Navigation]
--
PRINT (N'Create table [dbo].[SD_Navigation]')
GO
IF OBJECT_ID(N'dbo.SD_Navigation', 'U') IS NULL
CREATE TABLE dbo.SD_Navigation (
  ID int IDENTITY,
  MenuID int NOT NULL,
  MenuName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuLocation varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentID int NULL,
  UserName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentIDOrder int NULL,
  ChildIDOrder int NULL,
  MenuIcon nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IconName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Mfa]
--
PRINT (N'Create table [dbo].[SD_Mfa]')
GO
IF OBJECT_ID(N'dbo.SD_Mfa', 'U') IS NULL
CREATE TABLE dbo.SD_Mfa (
  MFAID int IDENTITY (139238, 2342),
  UserID numeric NULL,
  MFAStatus bit NULL,
  SecretKey nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spMFA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spMFA]')
GO
IF OBJECT_ID(N'dbo.SD_spMFA', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spMFA
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@UserID numeric(18,0)= NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''GetUserWiseSecretKey'')
	
	BEGIN
	select top 1 * from SD_Mfa where UserID=@UserID order by InsertDt desc
	END
if(@Option=''InsertKey'')
	
	BEGIN
	if exists(select * from SD_Mfa where UserID=@UserID and SecretKey is not null )
	BEGIN
	print(''user id exists'')
		update SD_User_Master set ISMfa=''1'' where UserID=@UserID
	END
	ELSE
	BEGIN
	 if exists (select * from SD_Mfa  where  UserID=@UserID and SecretKey is  null)
	 BEGIN
		
		update SD_Mfa set SecretKey=@SecretKey where UserID=@UserID
			update SD_User_Master set ISMfa=''1'' where UserID=@UserID
		END

		else 
		BEGIN
			Insert into SD_Mfa(UserID,MFAStatus,SecretKey,InsertDt)values(@UserID,''1'',@SecretKey,GETDATE())
			update SD_User_Master set ISMfa=''1'' where UserID=@UserID
		
		END
		END
	END
	END



'
GO

--
-- Create table [dbo].[SD_Mapping_Check]
--
PRINT (N'Create table [dbo].[SD_Mapping_Check]')
GO
IF OBJECT_ID(N'dbo.SD_Mapping_Check', 'U') IS NULL
CREATE TABLE dbo.SD_Mapping_Check (
  ID numeric IDENTITY,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  StatusCodeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  OrgDeskRef numeric NULL,
  ScopeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Location]
--
PRINT (N'Create table [dbo].[SD_Location]')
GO
IF OBJECT_ID(N'dbo.SD_Location', 'U') IS NULL
CREATE TABLE dbo.SD_Location (
  ID int IDENTITY,
  LocCode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  LocName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy numeric NULL,
  InsertDt datetime NULL,
  UpdateBy numeric NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spLocation_Master]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spLocation_Master]')
GO
IF OBJECT_ID(N'dbo.SD_spLocation_Master', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spLocation_Master    
  (    
   @StateID int =NULL,    
   @LocCode varchar(100) = NULL,    
   @OrgID numeric(18,0)=null,    
   @LocName varchar(100) = NULL,    
   @InsertBy numeric(18,0) =NULL,    
   @InsertDt datetime =NULL,    
   @UpdateBy numeric(18,0) =NULL,    
   @UpdateDt datetime =NULL,    
   @IsActive bit  =NULL,  
   @ID varchar(50)=NULL,  
   @Option varchar(50)    
  )    
  AS    
   BEGIN    
  if(@Option=''Insert'')    
       BEGIN    
     
        INSERT INTO SD_Location(LocCode,LocName, InsertBy, InsertDt, IsActive,OrgID) VALUES (@LocCode,@LocName,@InsertBy, GETDATE(), ''True'',@OrgID)    
  
  select * from SD_Location  
    
  END    
  if(@Option=''Update'')    
       BEGIN    
    
        UPDATE SD_Location SET LocName=@LocCode, UpdateBy=@UpdateBy, UpdateDt=GETDATE(), IsActive=''True''    
  where ID=@ID  
    
  END    
  if(@Option=''SelectAll'')    
       BEGIN    
    
      select a.*,b.Org_ID,b.OrgName from SD_Location a     
    
left join SD_OrgMaster b     
on a.OrgID=b.Org_ID    
    
  END    
    
   if(@Option=''see'')    
       BEGIN    
    
 Select * from SD_Location    
where  OrgID=@OrgID    
    
  END    
  if(@Option=''Delete'')    
       BEGIN    
    
        Delete from SD_Location where ID=@ID and OrgID=@OrgID    
    
  END    
  END    '
GO

--
-- Create table [dbo].[SD_KnowledgeBase]
--
PRINT (N'Create table [dbo].[SD_KnowledgeBase]')
GO
IF OBJECT_ID(N'dbo.SD_KnowledgeBase', 'U') IS NULL
CREATE TABLE dbo.SD_KnowledgeBase (
  ID int IDENTITY,
  KBNumber nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Issue nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionDetail nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ViewToUser nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ViewToTech nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  KBSubmiitedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitDt datetime NULL,
  UpdateBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  OrgDeskRef numeric NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddKnowledgeBase]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddKnowledgeBase]')
GO
IF OBJECT_ID(N'dbo.SD_spAddKnowledgeBase', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spAddKnowledgeBase      
(      
 @ID int = NULL,      
 @DeskRef varchar(50) =NULL,      
 @KBNumber  nvarchar(50) =NULL,      
 @Issue  nvarchar(max) =NULL,      
 @ResolutionDetail  nvarchar(max) =NULL,      
 @ViewToUser  nvarchar(50)= NULL,      
 @ViewToTech  nvarchar(50)= NULL,      
 @KBSubmiitedBy  nvarchar(50) =NULL,      
 @SubmitDt  datetime= NULL,      
 @OrgDeskRef numeric(18,0)=NULL,      
 @UpdateBy  nvarchar(50)= NULL,      
 @UpdateDt  datetime= NULL,   
 @FieldScope nvarchar(100) =null,
 @Ticketref nvarchar(100) =null out , 
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AddKB'')      
       
 BEGIN      
 if exists (select * from  SD_KnowledgeBase where issue like ''%''+@Issue+''%'' and OrgDeskRef=@OrgDeskRef)      
 Begin      
 print(''hh'')      
 end      
 else       
 begin      
     Set @KBNumber=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=''Knowledge Base'' and OrgRef=@OrgDeskRef)      
 INSERT INTO SD_KnowledgeBase( KBNumber , Issue , ResolutionDetail , ViewToUser , ViewToTech , KBSubmiitedBy , SubmitDt ,OrgDeskRef)      
                   values(@KBNumber ,@Issue ,@ResolutionDetail ,@ViewToUser ,@ViewToTech ,@KBSubmiitedBy ,GETDATE(),@OrgDeskRef )       
       
   SET @Ticketref=(select KBNumber from SD_KnowledgeBase where ID=SCOPE_IDENTITY())      
          ---------------------------this will auto increment ticket ID, after ticket inseretion      
         if(@Ticketref is not null)      
           BEGIN      
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)       
              where ReqRef=''Knowledge Base'' and OrgRef=@OrgDeskRef      
          END      
      
    End      
       
 END      
 if(@Option=''UpdateKB'')      
       
 BEGIN      
 update SD_KnowledgeBase set Issue=@Issue,      
 ResolutionDetail=@ResolutionDetail,ViewToUser=@ViewToUser,ViewToTech=@ViewToTech,      
 UpdateBy=@UpdateBy,UpdateDt=GETDate()
 where ID=@ID   
 END      
 if(@Option=''DeleteKB'')      
       
 BEGIN      
Delete from SD_KnowledgeBase where ID=@ID      
 END      
  if(@Option=''see'')      
       
 BEGIN      
select a.*,b.OrgName,b.Org_ID from SD_KnowledgeBase a left join sd_orgmaster b       
on a.OrgDeskRef=b.Org_ID      
        Where b.Org_ID=CASE WHEN ISNULL(@OrgDeskRef,''0'')=''0'' then b.Org_ID else @OrgDeskRef end
		AND ViewToUser=CASE WHEN ISNULL(@ViewToUser,'''')='''' then ViewToUser else @ViewToUser end
AND ViewToTech=CASE WHEN ISNULL(@ViewToTech,'''')='''' then ViewToTech else @ViewToTech end
 END      
      
      
 END      


      

'
GO

--
-- Create table [dbo].[SD_Holidays]
--
PRINT (N'Create table [dbo].[SD_Holidays]')
GO
IF OBJECT_ID(N'dbo.SD_Holidays', 'U') IS NULL
CREATE TABLE dbo.SD_Holidays (
  ID numeric NOT NULL,
  HolidayName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HolidayDate date NULL,
  OrgID numeric NULL,
  CONSTRAINT PK_SD_Holidays PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[test1]
--
GO
PRINT (N'Create or alter function [dbo].[test1]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.test1') AND type IN ('IF', 'FN', 'TF'))
>>>>>>> 756a97e87291978847dfcfffc27dd8f5a26b524c
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.test1 (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId NUMERIC(18,0)
)
RETURNS INT
AS
BEGIN
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    DECLARE @CurrentDate DATETIME = @TicketCreated;
    DECLARE @HolidayDates VARCHAR(MAX);
 
    -- Fetch holiday dates
    SELECT @HolidayDates = COALESCE((
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    ), '''');
 
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
           AND NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN
            DECLARE @DayStart DATETIME = CAST(CAST(@CurrentDate AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);
            DECLARE @DayEnd DATETIME = CAST(CAST(@CurrentDate AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);
            IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                SET @DayStart = CASE WHEN @TicketCreated > @DayStart THEN @TicketCreated ELSE @DayStart END;
            IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                SET @DayEnd = CASE WHEN @TicketResolved < @DayEnd THEN @TicketResolved ELSE @DayEnd END;
            SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @DayStart, @DayEnd);
        END
 
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END
 
    RETURN @TotalResolutionMinutes;
<<<<<<< HEAD
END;
'
GO

--
-- Create or alter function [dbo].[test]
--
GO
PRINT (N'Create or alter function [dbo].[test]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.test') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.test (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(MAX),
    @OrgId NUMERIC(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT STUFF((
            SELECT '','' + CAST(HolidayDate AS NVARCHAR(10))
            FROM SD_Holidays
            WHERE OrgID = @OrgId
            FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, '''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If ticket creation and resolution are on the same day
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketCreated AS TIME) <= @BusinessEndTime
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter function [dbo].[Shishir]
--
GO
PRINT (N'Create or alter function [dbo].[Shishir]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.Shishir') AND type IN ('IF', 'FN', 'TF'))
=======
END;
'
GO

--
-- Create or alter function [dbo].[test]
--
GO
PRINT (N'Create or alter function [dbo].[test]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.test') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.test (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(MAX),
    @OrgId NUMERIC(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT STUFF((
            SELECT '','' + CAST(HolidayDate AS NVARCHAR(10))
            FROM SD_Holidays
            WHERE OrgID = @OrgId
            FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)''), 1, 1, '''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If ticket creation and resolution are on the same day
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketCreated AS TIME) <= @BusinessEndTime
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter function [dbo].[Shishir]
--
GO
PRINT (N'Create or alter function [dbo].[Shishir]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.Shishir') AND type IN ('IF', 'FN', 'TF'))
>>>>>>> 756a97e87291978847dfcfffc27dd8f5a26b524c
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.Shishir (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId NUMERIC(18,0)
)
RETURNS INT
AS
BEGIN
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    DECLARE @CurrentDate DATETIME = @TicketCreated;
    DECLARE @HolidayDates VARCHAR(MAX);
 
    -- Fetch holiday dates
    SELECT @HolidayDates = COALESCE((
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    ), '''');
 
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
           AND NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN
            DECLARE @DayStart DATETIME = CAST(CAST(@CurrentDate AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);
            DECLARE @DayEnd DATETIME = CAST(CAST(@CurrentDate AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);
            IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                SET @DayStart = CASE WHEN @TicketCreated > @DayStart THEN @TicketCreated ELSE @DayStart END;
            IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                SET @DayEnd = CASE WHEN @TicketResolved < @DayEnd THEN @TicketResolved ELSE @DayEnd END;
            SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @DayStart, @DayEnd);
        END
 
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END
 
    RETURN @TotalResolutionMinutes;
<<<<<<< HEAD
END;
'
GO

--
-- Create or alter function [dbo].[ResolTimeBuisneInMin]
--
GO
PRINT (N'Create or alter function [dbo].[ResolTimeBuisneInMin]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ResolTimeBuisneInMin') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.ResolTimeBuisneInMin (
    @TicketCreated1 NVARCHAR(100),
    @TicketResolved1 NVARCHAR(100),
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(MAX),
    @OrgId NUMERIC(18,0)
)
RETURNS int
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);
    DECLARE @TicketCreated DATETIME;
    DECLARE @TicketResolved DATETIME;

    -- Safe conversion of input parameters to datetime
    SET @TicketCreated = TRY_CONVERT(datetime, @TicketCreated1, 120);
    SET @TicketResolved = TRY_CONVERT(datetime, @TicketResolved1, 120);

    -- Validate the conversion result


    -- Fetch holiday dates as a comma-separated string
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays 
        WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);

    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- Same-day ticket creation and resolution handling
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- First day: from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- Resolution day: from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- Full working day calculation
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    RETURN CAST(@TotalResolutionMinutes AS NVARCHAR(100));
END;
'
GO

--
-- Create or alter function [dbo].[ResolTimeBuisne]
--
GO
PRINT (N'Create or alter function [dbo].[ResolTimeBuisne]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ResolTimeBuisne') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.ResolTimeBuisne (
    @TicketCreated1 DATETIME,
    @TicketResolved1 DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId NUMERIC(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);
	    DECLARE @TicketCreated DATETIME;
    DECLARE @TicketResolved DATETIME;

    -- Safe conversion of input parameters to datetime
    SET @TicketCreated = TRY_CONVERT(datetime, @TicketCreated1, 120);
    SET @TicketResolved = TRY_CONVERT(datetime, @TicketResolved1, 120);
    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If ticket creation and resolution are on the same day
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
   -- DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes  / 60);
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
      --  CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTimeInMin]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTimeInMin]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTimeInMin') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.GetTicketResolutionTimeInMin (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,

    @WorkingDays VARCHAR(max),
	@OrgID numeric(18,0)

)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100)
-- Initialize variables
DECLARE @TotalResolutionMinutes INT = 0

  DECLARE @HolidayDates VARCHAR(MAX);
SELECT @HolidayDates = (
    SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
    FROM SD_Holidays where OrgID=@OrgID
    FOR XML PATH('''')
);
-- Calculate the total elapsed time in minutes
DECLARE @ElapsedMinutes INT = DATEDIFF(MINUTE, @TicketCreated, @TicketResolved)

-- Calculate the total business minutes per day
DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime)

-- Calculate the remaining business minutes for the first day
DECLARE @RemainingBusinessMinutesFirstDay INT = 0
IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
    SET @RemainingBusinessMinutesFirstDay = @BusinessMinutesPerDay
ELSE IF CAST(@TicketCreated AS TIME) >= @BusinessEndTime
    SET @RemainingBusinessMinutesFirstDay = 0
ELSE
    SET @RemainingBusinessMinutesFirstDay =DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME),@BusinessEndTime)
--	print @RemainingBusinessMinutesFirstDay
	 
-- Calculate the total business minutes for each day until the resolution date
DECLARE @CurrentDate DATETIME = @TicketCreated
declare @counter int=0;
--------------------------------------- working under sla till resolved of ticket
WHILE @CurrentDate < @TicketResolved
BEGIN
	
    -- Check if the current day is a working day and not a holiday
  IF  EXISTS (SELECT top 1 * FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
   -- IF CHARINDEX(DATENAME(WEEKDAY, @CurrentDate), @WorkingDays) > 0
    BEGIN
--	print @CurrentDate
        IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN


           if( Cast(@TicketCreated as date)=cast(@CurrentDate as date))
			  BEGIN
			--  print @counter
					  if(Cast(@TicketCreated as date)=cast(@TicketResolved as date))
						  begin
								  set @TotalResolutionMinutes=0
							  end
					  else
							  begin
									set @TotalResolutionMinutes+=@RemainingBusinessMinutesFirstDay
										--	 print(''IN IF-- same date'')
							           --   print @TotalResolutionMinutes
								 end
				
			END
			else 
				  BEGIN
				--  print(''In else'')
				  set @TotalResolutionMinutes +=@BusinessMinutesPerDay
				  END
        END
    END

    -- Move to the next day
    SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate)
	set @counter+=1

    -- Subtract the minutes accounted for
  --  SET @ElapsedMinutes -= @BusinessMinutesPerDay
END

-- Check if the resolution day is a working day and not a holiday
IF CHARINDEX(DATENAME(WEEKDAY, @TicketResolved), @WorkingDays) > 0
BEGIN
--print(''in resolution'')
    IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @TicketResolved, 23))
    BEGIN
--	print(''in resolution2'')
	if(cast(@TicketCreated as date)=cast(@TicketResolved as date))
		BEGIN
		--	print(''in resolution4'')
		--	print CAST(@TicketResolved AS TIME) 
			 if(CAST(@TicketResolved AS TIME) >= @BusinessEndTime)
				BEGIN
				--	print(''in resolution5'')
			  DECLARE @RemainingBusinessMinutesafterwork INT =datediff(minute, CAST(@BusinessEndTime AS TIME) ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutesafterwork
				END
				IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
				BEGIN
				--	print(''in resolution5'')
					  DECLARE @Remaining INT =Datediff(MINUTE, @TicketCreated  ,@TicketResolved)
					set @TotalResolutionMinutes+= @Remaining
					--	print @Remaining
				END
		END
        -- Calculate the remaining business minutes for the resolution day
      else  IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
        BEGIN
		--	print(''in resolution3'')
            DECLARE @RemainingBusinessMinutes INT =datediff(minute, @BusinessStartTime ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutes
      
			--print(''in resol'')
			--print @TotalResolutionMinutes
        END

		
    END
END


return @TotalResolutionMinutes
END
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_new]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_new]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_new') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.GetTicketResolutionTime_new (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
	@OrgId numeric(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100)
-- Initialize variables
DECLARE @TotalResolutionMinutes INT = 0

  DECLARE @HolidayDates VARCHAR(MAX);
SELECT @HolidayDates = (
    SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
    FROM SD_Holidays where OrgID=@OrgId
    FOR XML PATH('''')
);
-- Calculate the total elapsed time in minutes
DECLARE @ElapsedMinutes INT = DATEDIFF(MINUTE, @TicketCreated, @TicketResolved)

-- Calculate the total business minutes per day
DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime)

-- Calculate the remaining business minutes for the first day
DECLARE @RemainingBusinessMinutesFirstDay INT = 0
IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
    SET @RemainingBusinessMinutesFirstDay = @BusinessMinutesPerDay
ELSE IF CAST(@TicketCreated AS TIME) >= @BusinessEndTime
    SET @RemainingBusinessMinutesFirstDay = 0
ELSE
    SET @RemainingBusinessMinutesFirstDay =DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME),@BusinessEndTime)
--	print @RemainingBusinessMinutesFirstDay
	 
-- Calculate the total business minutes for each day until the resolution date
DECLARE @CurrentDate DATETIME = @TicketCreated
declare @counter int=0;
--------------------------------------- working under sla till resolved of ticket
WHILE @CurrentDate < @TicketResolved
BEGIN
	
    -- Check if the current day is a working day and not a holiday
  IF  EXISTS (SELECT top 1 * FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
   -- IF CHARINDEX(DATENAME(WEEKDAY, @CurrentDate), @WorkingDays) > 0
    BEGIN
--	print @CurrentDate
        IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN

            -- Calculate the total business minutes for the current day
   --         IF @RemainingBusinessMinutesFirstDay > 0
   --         BEGIN
   --             SET @TotalResolutionMinutes += CASE
   --                 WHEN @ElapsedMinutes > @RemainingBusinessMinutesFirstDay THEN @RemainingBusinessMinutesFirstDay
   --                 ELSE @ElapsedMinutes
   --             END
			--	print(''IN if'')
			--	print(@TotalResolutionMinutes)
   --             SET @RemainingBusinessMinutesFirstDay = 0
   --         END
   --         ELSE
   --         BEGIN
			--print(''In else'')
   --             SET @TotalResolutionMinutes += CASE
   --                 WHEN @ElapsedMinutes > @BusinessMinutesPerDay THEN @BusinessMinutesPerDay
   --                 ELSE @ElapsedMinutes
			
   --             END
			--			print(@TotalResolutionMinutes)
   --         END
           if( Cast(@TicketCreated as date)=cast(@CurrentDate as date))
			  BEGIN
			--  print @counter
					  if(Cast(@TicketCreated as date)=cast(@TicketResolved as date))
						  begin
								  set @TotalResolutionMinutes=0
							  end
					  else
							  begin
									set @TotalResolutionMinutes+=@RemainingBusinessMinutesFirstDay
										--	 print(''IN IF-- same date'')
							           --   print @TotalResolutionMinutes
								 end
				
			END
			else 
				  BEGIN
				--  print(''In else'')
				  set @TotalResolutionMinutes +=@BusinessMinutesPerDay
				  END
        END
    END

    -- Move to the next day
    SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate)
	set @counter+=1

    -- Subtract the minutes accounted for
  --  SET @ElapsedMinutes -= @BusinessMinutesPerDay
END

-- Check if the resolution day is a working day and not a holiday
IF CHARINDEX(DATENAME(WEEKDAY, @TicketResolved), @WorkingDays) > 0
BEGIN
--print(''in resolution'')
    IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @TicketResolved, 23))
    BEGIN
--	print(''in resolution2'')
	if(cast(@TicketCreated as date)=cast(@TicketResolved as date))
		BEGIN
		--	print(''in resolution4'')
		--	print CAST(@TicketResolved AS TIME) 
			 if(CAST(@TicketResolved AS TIME) >= @BusinessEndTime)
				BEGIN
				--	print(''in resolution5'')
			  DECLARE @RemainingBusinessMinutesafterwork INT =datediff(minute, CAST(@BusinessEndTime AS TIME) ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutesafterwork
				END
				IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
				BEGIN
				--	print(''in resolution5'')
					  DECLARE @Remaining INT =Datediff(MINUTE, @TicketCreated  ,@TicketResolved)
					set @TotalResolutionMinutes+= @Remaining
					--	print @Remaining
				END
		END
        -- Calculate the remaining business minutes for the resolution day
      else  IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
        BEGIN
		--	print(''in resolution3'')
            DECLARE @RemainingBusinessMinutes INT =datediff(minute, @BusinessStartTime ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutes
      
			--print(''in resol'')
			--print @TotalResolutionMinutes
        END

		
    END
END

-- Calculate the total resolution time
--SET @TotalResolutionMinutes += @ResolutionMinutes

-- Calculate days, hours, and minutes
DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24)
DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60
DECLARE @Minutes INT = @TotalResolutionMinutes % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '' 0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '' 0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)

return @ResolutionTime
END
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_HIREL_IN_Min]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_HIREL_IN_Min]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_HIREL_IN_Min') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.GetTicketResolutionTime_HIREL_IN_Min (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId numeric(18,0)
)
RETURNS int
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE IF CAST(@TicketCreated AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME), @BusinessEndTime);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @BusinessStartTime, CAST(@TicketResolved AS TIME));
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    --DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    --DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    --DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    ---- Format the resolution time
    --SET @ResolutionTime = CONCAT(
    --    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
    --    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
    --    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    --);

    RETURN @TotalResolutionMinutes;
END;
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_HIREL]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_HIREL]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_HIREL') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.GetTicketResolutionTime_HIREL (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId numeric(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE IF CAST(@TicketCreated AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME), @BusinessEndTime);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @BusinessStartTime, CAST(@TicketResolved AS TIME));
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddHoliday]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddHoliday]')
GO
IF OBJECT_ID(N'dbo.SD_spAddHoliday', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddHoliday
(
	@StatusID int = NULL,
@HolidayName varchar(50)=null,
      @HolidayDate date=null,
	@ID numeric(18,0)=NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgID numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddHoliday'')
	
	BEGIN
	INSERT INTO	SD_Holidays(ID
      ,HolidayName
      ,HolidayDate,OrgID)
	values(@ID
      ,@HolidayName
      ,@HolidayDate,@OrgID)	
	END
		if(@Option=''see'')
	
	BEGIN
select a.*,b.Org_ID,b.OrgName from	SD_Holidays a 
inner join SD_OrgMaster b
on a.OrgID=b.Org_ID
	END

		if(@Option=''UpdateHoliday'')
	
	BEGIN
	update 	SD_Holidays set HolidayName=@HolidayName
      ,HolidayDate=@HolidayDate where ID=@ID and OrgID=@OrgID
	
	END
		if(@Option=''DeleteHoliday'')
	
	BEGIN
	Delete from SD_Holidays where   ID=@ID 
	END
	if(@Option=''AddHolidayBulk'')
	
	BEGIN
	INSERT INTO	SD_Holidays(ID
      ,HolidayName
      ,HolidayDate,OrgID)
	values(@ID
      ,@HolidayName
      ,@HolidayDate,@OrgID)	
	END

	END





'
GO

--
-- Create table [dbo].[SD_HODApproval]
--
PRINT (N'Create table [dbo].[SD_HODApproval]')
GO
IF OBJECT_ID(N'dbo.SD_HODApproval', 'U') IS NULL
CREATE TABLE dbo.SD_HODApproval (
  ID int IDENTITY,
  Name nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmailID nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_History]
--
PRINT (N'Create table [dbo].[SD_History]')
GO
IF OBJECT_ID(N'dbo.SD_History', 'U') IS NULL
CREATE TABLE dbo.SD_History (
  ID int IDENTITY,
  PageName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionBy nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDate datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_FeedQuestions]
--
PRINT (N'Create table [dbo].[SD_FeedQuestions]')
GO
IF OBJECT_ID(N'dbo.SD_FeedQuestions', 'U') IS NULL
CREATE TABLE dbo.SD_FeedQuestions (
  QuestionId int IDENTITY,
  Question varchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Feedback]
--
PRINT (N'Create table [dbo].[SD_Feedback]')
GO
IF OBJECT_ID(N'dbo.SD_Feedback', 'U') IS NULL
CREATE TABLE dbo.SD_Feedback (
  FeedbackID int NULL,
  Feedback varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_FeedAnswers]
--
PRINT (N'Create table [dbo].[SD_FeedAnswers]')
GO
IF OBJECT_ID(N'dbo.SD_FeedAnswers', 'U') IS NULL
CREATE TABLE dbo.SD_FeedAnswers (
  ID int IDENTITY,
  FeedbackID int NULL,
  TicketID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  QuestionId int NULL,
  Answer varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterEmail varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Insertdt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[CSATsp_Details]
--
GO
PRINT (N'Create or alter procedure [dbo].[CSATsp_Details]')
GO
IF OBJECT_ID(N'dbo.CSATsp_Details', 'P') IS NULL
EXEC sp_executesql N'
			create OR ALTER procedure dbo.CSATsp_Details

			(
					@ID int =NULL,
					@QuestionId int =NULL,
					@Question_option varchar(250) =NULL,
					@Question varchar(250) =NULL,
					@Status varchar(10) =NULL,
					@FeedbackID int =NULL,
					@TicketID varchar(10)=NULL,
					@Answer varchar(10) =NULL,
					@Date_Time datetime =NULL,
					@Feedback varchar(500) =NULL,
					@Option varchar(50) =NULL,
					@smileysANS varchar(50) =NULL,

					@SubmitterName varchar(50) =NULL,
					@SubmitterEmail varchar(100) =NULL,
					@tempStr varchar(500)=null
			)

			AS

			BEGIN
			if(@Option=''CustomerValidation'')
			BEGIN

			select * from SD_FeedAnswers  where TicketID=@TicketID

			END

			if(@Option=''SelectAllFeedbacks'')
			BEGIN

			select distinct TOP 100 feedbackid,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time from [dbo].[pcv_FeedAnswers] order by feedbackid desc

			END

			if(@Option=''SelectFeedback'')
			BEGIN

			select distinct  Feedback from pcv_Feedback where  feedbackid=@FeedbackID

			END


			if(@Option=''SelectFeedbackDetail'')
			BEGIN

			select   FeedbackID as ID,TicketID,Question,Answer, FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time 
			from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on [dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId   
			where  feedbackid=@FeedbackID order by FeedbackID desc

			END

			if(@Option=''SelectAllQues'')
			BEGIN


			select * from CSAT_Questions order by QuestionId asc

			END

			if(@Option=''SelectAllQuesStatus'')
			BEGIN

			select count(Answer) as Counts,Answer ,Question from (select   FeedbackID,TicketID,Question,Answer,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time,Status from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId  and pcv_FeedQuestions.Status=''Active''   )
			 as ABC  --where Answer=''Very Good''
			group by Answer,Question

			END

			if(@Option=''SelectQues'')
			BEGIN

			select * from pcv_FeedQuestions where Status=''Active''

			END

			if(@Option=''SelectDashboardDet'')
			BEGIN

			select * from (select   distinct TicketID,kasadmin.vSDTicket.SubmitterName,pcv_FeedQuestions.QuestionId,Question,Answer,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId 
			join kasadmin.vSDTicket on  [pcv_FeedAnswers].TicketID=kasadmin.vSDTicket.TicketNumber
			  where pcv_FeedQuestions.Status=''Active''   ) as DASHBOARD
			where DASHBOARD.QuestionId=@QuestionId and Answer=@Answer  order by TicketID desc
			END

			if(@Option=''QuesInsert'')
			BEGIN

			Insert into pcv_FeedQuestions(Question,Status)values(@Question,@Status)

			END

			if(@Option=''QuesUpdate'')
			BEGIN

			Update pcv_FeedQuestions  SET Question=@Question,Status=@Status where QuestionId=@QuestionId

			END

			if(@Option=''FeedbackInsert'')
			BEGIN

			DECLARE @TotalCounts int; 
			SET @TotalCounts = (SELECT COUNT(*)  TotalCounts FROM  SD_FeedAnswers where  TicketID=@TicketID);
			

			IF(@TotalCounts=5 )
				BEGIN
					SET @tempStr=''Error: Survey already completed'';
			    RAISERROR (@tempStr, 11, 1)
						
			    END
				ELSE
				BEGIN

			INSERT INTO SD_FeedAnswers
							 ( FeedbackID,TicketID, QuestionId, Answer, SubmitterName, SubmitterEmail, Insertdt)
					   VALUES(@FeedbackID,@TicketID, @QuestionId, @Answer, @SubmitterName, @SubmitterEmail, Getdate())

				END
					
				IF NOT EXISTS (select * from SD_Feedback where FeedbackID=@FeedbackID )
				BEGIN
						insert into SD_Feedback (FeedbackID,Feedback)values(@FeedbackID,@Feedback)
				END
			END

			if(@Option=''FeedbackComment'')
			BEGIN

			INSERT INTO SD_FeedAnswers
                         ( FeedbackID,TicketID, QuestionId, Answer, SubmitterName, SubmitterEmail, Insertdt)
				   VALUES(@FeedbackID,@TicketID, @QuestionId, @Answer, @SubmitterName, @SubmitterEmail, Getdate())

			END

			if(@Option=''OptionAdd'')
			BEGIN

			Insert into pcv_FeedQuestionsOptions(QuestionId,Question_option)
			values(@QuestionId,@Question_option)

			END

			if(@Option=''OptionUpdate'')
			BEGIN

			Update pcv_FeedQuestionsOptions SET Question_option=@Question_option
			 where ID=@ID and QuestionId=@QuestionId

			END

			if(@Option=''OptionDelete'')
			BEGIN
			delete from pcv_FeedQuestionsOptions  
			where ID=@ID and QuestionId=@QuestionId and Question_option=@Question_option

			END

			if(@Option=''TicketIDValidation'')
			BEGIN
			select ref from kasadmin.SDIncident where ref=@TicketID
			
			END

			if(@Option=''FeedbackValidation'')
			BEGIN
			select TicketID from pcv_FeedAnswers where TicketID=@TicketID
			
			END

			if(@Option=''LoadSurvey'')
			BEGIN
			
				
						select QuestionId,Question from SD_FeedQuestions where Status=''Active''
			  
				
			END

			if(@Option=''FillOptions'')
			BEGIN
			SELECT   * from SD_Options where QuestionId = @QuestionId
			END

			if(@Option=''FillQuesOptions'')
			BEGIN
			select pcv_FeedQuestionsOptions.id,Question,[pcv_FeedQuestions].QuestionId,Question_option from [dbo].[pcv_FeedQuestions] join pcv_FeedQuestionsOptions on  pcv_FeedQuestionsOptions.[QuestionId] =[pcv_FeedQuestions].QuestionId where [pcv_FeedQuestions].QuestionId = @QuestionId
			END

			if(@Option=''SurveyChart'')
			BEGIN
			select  QuestionId,Question from pcv_FeedQuestions where Status=''Active''
			END
			--Survey Dashboard
			if(@Option=''SurveyPieChart'')
			BEGIN
			select  distinct Answer ,count(Answer) as Counts,Question from 
			(select   FeedbackID,TICKETID,Question,Answer,Date_Time,Status from [dbo].[pcv_FeedAnswers] 
			join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId  
			and pcv_FeedQuestions.Status = ''Active''   )as ABC 
			WHERE Question = @Question  group by Answer,Question
			END

			
END


'
GO

--
-- Create table [dbo].[SD_EsclateMaster]
--
PRINT (N'Create table [dbo].[SD_EsclateMaster]')
GO
IF OBJECT_ID(N'dbo.SD_EsclateMaster', 'U') IS NULL
CREATE TABLE dbo.SD_EsclateMaster (
  ID int IDENTITY (1456754, 1),
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TimeForEsclatn int NULL,
  OrgRef numeric NULL,
  Status bit NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddUserEcslevel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddUserEcslevel]')
GO
IF OBJECT_ID(N'dbo.SD_spAddUserEcslevel', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddUserEcslevel
(
	@StatusID int = NULL,
@EsclationLevel nvarchar(50)=null,
      @UserName nvarchar(50)=null,
      @UserEmail nvarchar(50)=null,
      @Mobile nvarchar(50)=null,
	@ID numeric(18,0)=null,
	@TimeForEsclatn int=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgRef numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddEsclationUser'')
	
	BEGIN
	INSERT INTO	SD_EsclateMaster(EsclationLevel
      ,UserName
      ,UserEmail
      ,Mobile
	  ,TimeForEsclatn,OrgRef)
	values(@EsclationLevel
      ,@UserName
      ,@UserEmail
      ,@Mobile
	  ,@TimeForEsclatn,@OrgRef)	
	END
		if(@Option=''see'')
	
	BEGIN
select a.*,b.OrgName,b.Org_ID from	SD_EsclateMaster a left join sd_orgmaster b 
on a.OrgRef=b.Org_ID
order by EsclationLevel,TimeForEsclatn asc


	END

		if(@Option=''UpdateUserEcslevel'')
	
	BEGIN
	update 	SD_EsclateMaster set 
	EsclationLevel=@EsclationLevel
      ,UserName=@UserName
      ,UserEmail=@UserEmail
      ,Mobile=@Mobile,TimeForEsclatn=@TimeForEsclatn,OrgRef=@OrgRef where ID=@ID
	END
		if(@Option=''DeleteEcslevel'')
	
	BEGIN
	delete  from 	SD_EsclateMaster
	where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_ErrorLog]
--
PRINT (N'Create table [dbo].[SD_ErrorLog]')
GO
IF OBJECT_ID(N'dbo.SD_ErrorLog', 'U') IS NULL
CREATE TABLE dbo.SD_ErrorLog (
  ID numeric NOT NULL,
  adminName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  eventTime datetime NULL,
  description varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddLogs]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddLogs]')
GO
IF OBJECT_ID(N'dbo.SD_spAddLogs', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddLogs
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@eventTime datetime =NULL,
	@description varchar(2000)= NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''InsertErrorLogs'')
	
	BEGIN
	INSERT INTO	SD_ErrorLog(ID,adminName ,eventTime,description
     )
	values(@Id,@adminName
      ,GETDATE()
      ,@description)	
	END

	END



'
GO

--
-- Create table [dbo].[SD_EmailTemplate]
--
PRINT (N'Create table [dbo].[SD_EmailTemplate]')
GO
IF OBJECT_ID(N'dbo.SD_EmailTemplate', 'U') IS NULL
CREATE TABLE dbo.SD_EmailTemplate (
  ID int IDENTITY (1583, 176),
  TemplateName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Summary nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBasicCode nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBody nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DefaultEmailBody nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBodyEncode nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  ReqRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[SD_EmailBodyOther]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBodyOther]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBodyOther') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SD_EmailBodyOther
(
    @UserName nvarchar(200),
	@Otp int ,
	@TemplateName nvarchar(200),
	@OrgID numeric(18,0)

)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
Declare @TicketNumber nvarchar(max);
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(500);
	Declare @SubmitterName nvarchar(100);

   
  set @EmailBody=  (SELECT  top 1
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreationDate}'', COALESCE(@CreationDate, ''{CreationDate}'')),
                        ''{Category}'', COALESCE(ISNULL(@Category,''1900-01-01''), ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{OTP}'', COALESCE(@Otp, ''{OTP}'')),
			  ''{UserName}'', COALESCE(@UserName, ''{UserName}''))
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and OrgRef=@OrgID)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName and OrgRef=@OrgId )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter procedure [dbo].[SD_spEmailTemplate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spEmailTemplate]')
GO
IF OBJECT_ID(N'dbo.SD_spEmailTemplate', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spEmailTemplate
(
	@TemplateBodyEncode varchar(max) =NULL,
	@TemplateName varchar(100) =NULL,
	@TemplateUpdtName varchar(100) =NULL,
	@TemplateBody varchar(max) =NULL,
	@DefaultEmailBody varchar(max) =NULL,
	@OrgRef numeric(18,0) =NULL,
	@PriorityCodeRef varchar(50)=NULL,
	@ID numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Summary nvarchar(1000) = NULL,
	@ReqRef nvarchar(100)=NULL,
	@TemplateBasicCode varchar(max) =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''GetTemplate'')
	
	BEGIN
	select distinct TemplateName from SD_EmailTemplate 	where ReqRef=@ReqRef  and OrgRef=@OrgRef
	END
	if(@Option=''GetTemplateBody'')
	
	BEGIN
	select distinct  * from SD_EmailTemplate 	 where TemplateName=@TemplateName and OrgRef=@OrgRef
	END

	if(@Option=''UpdateTemplateBody'')
	
	BEGIN
	declare @emailheader nvarchar(max);

set @emailheader=''<!DOCTYPE html>  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>      <title></title>   
<style>         
@font-face {  
font-family: "Cambria Math"; 
panose-1: 2 4 5 3 5 4 6 3 2 4;  
}    
@font-face { 
font-family: Calibri; 
panose-1: 2 15 5 2 2 2 4 3 2 4; 
}     
/* Style Definitions */  
p.MsoNormal, li.MsoNormal, div.MsoNormal {              margin: 0in;              margin-bottom: .0001pt;              font-size: 11.0pt;              font-family: "Calibri",sans-serif;          }            h1 {              mso-style-priority: 9;              mso-style-link: "Heading 1 Char";              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 24.0pt;              font-family: "Calibri",sans-serif;              font-weight: bold;          }            h4 {              mso-style-priority: 9;              mso-style-link: "Heading 4 Char";              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 12.0pt;              font-family: "Calibri",sans-serif;              font-weight: bold;          }            a:link, span.MsoHyperlink {              mso-style-priority: 99;              color: blue;              text-decoration: underline;          }            a:visited, span.MsoHyperlinkFollowed {              mso-style-priority: 99;              color: purple;              text-decoration: underline;          }            p.msonormal0, li.msonormal0, div.msonormal0 {              mso-style-name: msonormal;              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 11.0pt;              font-family: "Calibri",sans-serif;          }            span.Heading1Char {              mso-style-name: "Heading 1 Char";              mso-style-priority: 9;              mso-style-link: "Heading 1";              font-family: "Calibri Light",sans-serif;              color: #2F5496;          }            span.Heading4Char {              mso-style-name: "Heading 4 Char";              mso-style-priority: 9;              mso-style-link: "Heading 4";              font-family: "Calibri Light",sans-serif;              color: #2F5496;              font-style: italic;          }            span.EmailStyle21 {              mso-style-type: personal-reply;              font-family: "Calibri",sans-serif;              color: windowtext;          }            .MsoChpDefault {              mso-style-type: export-only;              font-size: 10.0pt;          }          .TdHead{              width: 120.0pt; border: solid #CCCCCC 1.0pt;font-weight:bold;  padding: 3.75pt 7.5pt 3.75pt 7.5pt; text-align:right          }          @page WordSection1 {              size: 8.5in 11.0in;              margin: 1.0in 1.0in 1.0in 1.0in;          }            div.WordSection1 {              page: WordSection1;          }      </style>  </head> <body>@body</body></html>''
 if Exists(select * from SD_EmailTemplate where  TemplateName=@TemplateName and ReqRef=@ReqRef and OrgRef=@OrgRef)
 BEGIN
	update SD_EmailTemplate 	 set 
	TemplateBody=@TemplateBody, TemplateBodyEncode=@TemplateBodyEncode,Summary=@Summary where TemplateName=@TemplateUpdtName
 and	OrgRef=@OrgRef and ReqRef=@ReqRef;
	END
	ELSE
	BEGIN
	insert into SD_EmailTemplate (TemplateName
      ,Summary
      ,TemplateBasicCode
      ,TemplateBody
      ,DefaultEmailBody
      ,TemplateBodyEncode
      ,OrgRef,ReqRef)values(@TemplateName
      ,@Summary
      ,@emailheader
      ,@TemplateBody
      ,@DefaultEmailBody
      ,@TemplateBodyEncode
      ,@OrgRef,@ReqRef)
	END
	END

	END
	


'
GO

--
-- Create table [dbo].[SD_EmailConfig]
--
PRINT (N'Create table [dbo].[SD_EmailConfig]')
GO
IF OBJECT_ID(N'dbo.SD_EmailConfig', 'U') IS NULL
CREATE TABLE dbo.SD_EmailConfig (
  ID numeric NOT NULL,
  Hostname nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Port int NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Email nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Password nvarchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Retry int NULL,
  ClientID nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientSecretKey nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TenantID nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  MailType nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DeskRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PK_SD_EmailConfig PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Department]
--
PRINT (N'Create table [dbo].[SD_Department]')
GO
IF OBJECT_ID(N'dbo.SD_Department', 'U') IS NULL
CREATE TABLE dbo.SD_Department (
  ID int IDENTITY,
  DepartmentCode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepartmentName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (DepartmentCode)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spDepartment_Master]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDepartment_Master]')
GO
IF OBJECT_ID(N'dbo.SD_spDepartment_Master', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spDepartment_Master    
  (    
   @StateID int =NULL,    
   @DepartmentCode varchar(50) = NULL,   
   @DepartmentName varchar(50) = NULL,    
   @InsertBy numeric(18,0) =NULL,    
   @InsertDt datetime =NULL,    
   @UpdateBy numeric(18,0) =NULL,    
   @UpdateDt datetime =NULL,    
   @OrgID varchar(50)=null,    
   @IsActive bit  =NULL,  
   @ID varchar(50)  =NULL,  
   @Option varchar(50)    
  )    
  AS    
  BEGIN    
  if(@Option=''Insert'')    
       BEGIN    
    
        INSERT INTO SD_Department (DepartmentCode,DepartmentName, InsertBy, InsertDt, IsActive,OrgID)   
  VALUES (@DepartmentCode,@DepartmentName,@InsertBy, GETDATE(), ''True'',@OrgID)    
  END    
  if(@Option=''Update'')    
       BEGIN    
    
        UPDATE SD_Department SET DepartmentCode=@DepartmentCode,DepartmentName=@DepartmentName, UpdateBy=@UpdateBy, UpdateDt=GETDATE(), IsActive=''True''    
  where ID=@ID 
    
    
  END    
  if(@Option=''SelectAll'')    
       BEGIN    
    
      select a.*,b.Org_ID,b.OrgName from SD_Department a     
    
inner join SD_OrgMaster b     
on a.OrgID=b.Org_ID    
    
  END    
    
   if(@Option=''see'')    
       BEGIN    
    
 Select * from SD_Department    
where  OrgID=@OrgID    
    
  END    
  if(@Option=''Delete'')    
       BEGIN    
    
        Delete from SD_Department where ID=@ID 
    
  END    
  END    


  '
GO

--
-- Create or alter view [dbo].[SD_vUser]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vUser]')
GO
IF OBJECT_ID(N'dbo.SD_vUser', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vUser
as 
(
select a.SD_UID
      ,a.UserID
      ,a.EmpID
      ,a.UserName
      ,a.FirstName
      ,a.LastName
      ,a.EmailID
      ,a.LoginName
      ,a.Pass
      ,a.UserScope as ''UserScopeID''
      ,a.UserRole
      ,a.DepCode
      ,a.Manager_UserID
      ,a.Designation
      ,a.ContactNo
      ,a.UserRemarks
      ,a.AccountCreatnDt
      ,a.LastLoginDt
      ,a.LastPassChngDt
      ,a.LoginAttempts
      ,a.Accontlock
      ,a.InsertBy
      ,a.InsertDt
      ,a.UpdateBy
      ,a.UpdateDt
      ,a.Status
      ,a.DomainType
	  ,a.ISMfa,a.UserType 
      ,a.Org_ID,sdscop.ScopeName as ''UserScope'',ScopeDesc,sdrol.RoleName,
	  sdmfa.MFAStatus,sdmfa.SecretKey,sdloc.LocCode,sdloc.LocName,a.SDRole
	  ,sddep.DepartmentName,sdorg.OrgName,
	  a.LoginStatus,a.LoginSessionID,a.RememberISMfa, a.RememberISMfaTime,a.Serialno,a.Theme,a.ThemeModify
	  from SD_User_Master a 
left join SD_Role sdrol on a.UserRole=sdrol.RoleName
left join SD_UserScope sdscop on a.UserScope=sdscop.ScopeID
left join SD_Department sddep on a.DepCode=sddep.DepartmentCode and a.Org_ID=sddep.OrgID
left join  SD_orgmaster sdorg on sdorg.Org_ID=a.Org_ID
left join SD_Mfa sdmfa on sdmfa.UserID=a.UserID
left join SD_Location sdloc on sdloc.LocCode=a.LocCode and sdloc.OrgID=a.Org_ID 


)
'
GO

--
-- Create or alter procedure [dbo].[SD_getCustomField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_getCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_getCustomField', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_getCustomField
AS
BEGIN
select * from SD_vUser
END
'
GO

--
-- Create table [dbo].[SD_DeleteTicketLog]
--
PRINT (N'Create table [dbo].[SD_DeleteTicketLog]')
GO
IF OBJECT_ID(N'dbo.SD_DeleteTicketLog', 'U') IS NULL
CREATE TABLE dbo.SD_DeleteTicketLog (
  ID int IDENTITY (3867245, 1),
  TicketID numeric NULL,
  TicketNumber varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDStatusFK numeric NULL,
  SDCategoryFK numeric NULL,
  AssigneFK numeric NULL,
  CreationDate datetime NULL,
  SubmitterEmail nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EventDt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_DeletedTechnician]
--
PRINT (N'Create table [dbo].[SD_DeletedTechnician]')
GO
IF OBJECT_ID(N'dbo.SD_DeletedTechnician', 'U') IS NULL
CREATE TABLE dbo.SD_DeletedTechnician (
  DelTechID int IDENTITY,
  TechID int NULL,
  RefUserID numeric NULL,
  TechLoginName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RequstTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryFK nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CreatedDt datetime NULL,
  CreatedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL,
  UpdatedDt datetime NULL,
  UpdatedBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddTechnician]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddTechnician]')
GO
IF OBJECT_ID(N'dbo.SD_spAddTechnician', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Proc dbo.SD_spAddTechnician
(
	
     @RefUserID numeric(18,0)=null
     ,@TechLoginName varchar(50)=null
     ,@RequstTypeRef varchar(50)=null
     ,@CategoryFK varchar(50)=null
	,@CreatedDt datetime =NULL
	,@CreatedBy nvarchar(50) =NULL
	,@OrgRef numeric(18,0)=NULL
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	    if(@Option=''AddTechnician'')
	
		BEGIN
		if exists (select * from SD_Technician where RefUserID=@RefUserID)
		BEGIN
		print (''hello'');
		END 
		ELSE 
		BEGIN
				INSERT INTO	SD_Technician( RefUserID ,TechLoginName
      ,RequstTypeRef
      ,CategoryFK
      ,CreatedDt
      ,CreatedBy
      ,IsActive,OrgRef)
	values(
      @RefUserID
      ,@TechLoginName
      ,@RequstTypeRef
      ,@CategoryFK
      ,GETDATE()
      ,@CreatedBy
      ,''1'',@OrgRef)	
		END
		END

    	if(@Option=''UpdateTechnician'')
	
	BEGIN
	Update SD_Technician set 
      TechLoginName=@TechLoginName
      ,RequstTypeRef=@RequstTypeRef
      ,CategoryFK=@CategoryFK
      ,UpdatedDt=GETDATE()
      ,UpdatedBy=''''
      ,IsActive=''1'',OrgRef=@OrgRef
	  where RefUserID=@RefUserID
	
	END
		if(@Option=''see'')	
		BEGIN
			select * from	SD_Technician
		END

		if(@Option=''DeleteTechnician'')
		BEGIN

		----------------------when user delete than add in backup table so that assigne ticket will visible under his mail---
		insert into SD_DeletedTechnician  ([TechID],[RefUserID],[TechLoginName] ,[RequstTypeRef],[CategoryFK],[CreatedDt]
      ,[CreatedBy],[IsActive] ,[OrgRef])
		select [TechID],[RefUserID],[TechLoginName] ,[RequstTypeRef],[CategoryFK],[CreatedDt]
      ,[CreatedBy],[IsActive] ,[OrgRef] from SD_Technician where RefUserID=@RefUserID

	  -------------------delte from technician table -----------------
			Delete from SD_Technician where RefUserID=@RefUserID
		END
	
		if(@Option=''GetTech'')
	BEGIN
	select a.*,b.Org_ID from	SD_Technician a
	inner join SD_User_Master b 
	on a.RefUserID=b.UserID 
	and a.OrgRef=b.Org_ID
	where a.OrgRef=@OrgRef
	
	END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spAddRequester]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddRequester]')
GO
IF OBJECT_ID(N'dbo.SD_spAddRequester', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_spAddRequester  
(  
@UserID numeric(18,0) =null  
  ,@EmpID nvarchar(50) =null  
      ,@UserName nvarchar(50) =null  
      ,@FirstName nvarchar(50) =null  
      ,@LastName nvarchar(50) =null  
      ,@EmailID nvarchar(50) =null  
      ,@LoginName nvarchar(50) =null  
      ,@Pass nvarchar(1000) =null  
      ,@UserScope nvarchar(50) =null  
      ,@UserRole nvarchar(50) =null  
      ,@LocCode nvarchar(50) =null  
      ,@DepCode nvarchar(50) =null  
      ,@Manager_UserID nvarchar(50) =null  
      ,@Designation nvarchar(50) =null  
      ,@ContactNo nvarchar(50) =null  
      ,@UserRemarks nvarchar(50) =null  
      ,@InsertBy  int =null  
      ,@InsertDt datetime =null  
      ,@UpdateBy nvarchar(100) =null  
      ,@UpdateDt datetime=null  
      ,@Status  varchar(10)=null  
      ,@DomainType varchar(10)=null  
      ,@Org_ID  numeric(18,0)=null  
   ,@UserRefid numeric(18,0)=null  
   ,@ReqRef varchar(50)=null  
   ,@IsTechnicianLogin int =null  
   ,@CategoryFK varchar(50)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Error varchar(200) =null out  
     
     
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequester'')  
   
 BEGIN  
 if(@IsTechnicianLogin=1)  
 BEGIN  
 INSERT INTO SD_User_Master(UserID, EmpID  
      ,UserName  
      ,FirstName  
      ,LastName  
      ,EmailID  
      ,LoginName  
      ,Pass  
      ,UserScope  
      ,UserRole  
      ,LocCode  
      ,DepCode  
      ,Manager_UserID  
      ,Designation  
      ,ContactNo  
      ,UserRemarks  
      ,Status  
      ,DomainType,Org_ID,ISMfa,InsertDt,SDRole  
      )  
 values(  
 @UserID  
,@EmpID  
      ,@UserName  
      ,@FirstName  
      ,@LastName  
      ,@EmailID  
      ,@LoginName  
      ,@Pass  
      ,@UserScope  
      ,@UserRole  
      ,@LocCode  
      ,@DepCode  
      ,''''  
      ,@Designation  
      ,@ContactNo  
      ,''''  
       
      ,''1''  
      ,@DomainType,@Org_ID,''0'',GETDATE(),@SDRole  
      )   
   SET @UserRefid=(select UserID from SD_User_Master where SD_UID=SCOPE_IDENTITY())  
   exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
      ,@RequstTypeRef=@ReqRef  
      ,@CategoryFK=@CategoryFK  
    
      ,@CreatedBy='''',@OrgRef=@Org_ID  
      insert into SD_Mfa (UserID,MFAStatus,InsertDt)values(@UserRefid,''1'',GETDATE())  
   END  
   else   
   BEGIN   
   INSERT INTO SD_User_Master(UserID, EmpID  
      ,UserName  
      ,FirstName  
      ,LastName  
      ,EmailID  
      ,LoginName  
      ,Pass  
      ,UserScope  
      ,UserRole  
      ,LocCode  
      ,DepCode  
      ,Manager_UserID  
      ,Designation  
      ,ContactNo  
      ,UserRemarks  
      ,Status  
      ,DomainType,Org_ID,ISMfa,InsertDt,SDRole  
      )  
 values(  
 @UserID  
,@EmpID  
      ,@UserName  
      ,@FirstName  
      ,@LastName  
      ,@EmailID  
      ,@LoginName  
      ,@Pass  
      ,@UserScope  
      ,@UserRole  
      ,@LocCode  
      ,@DepCode  
      ,''''  
      ,@Designation  
      ,@ContactNo  
      ,''''  
       
      ,''1''  
      ,@DomainType,@Org_ID,''0'',GETDATE(),@SDRole  
      )   
        insert into SD_Mfa (UserID,MFAStatus,InsertDt)values(@UserRefid,''1'',GETDATE())  
   END  
 END  
 if(@Option=''see'')  
   
 BEGIN  
  select * from SD_User_Master  
  
  
 END  
  
 if(@Option=''UpdateRequestorWithPass'')  
   
  BEGIN  
   if(@IsTechnicianLogin=1)  
  BEGIN  
   SET @UserRefid=@UserID  
  update  SD_User_Master set   
  EmpID=@EmpID  
    ,UserName=@UserName  
    ,FirstName=@FirstName  
    ,LastName=@LastName  
    ,EmailID=@EmailID  
    ,LoginName=@LoginName  
    ,Pass=@Pass  
    ,UserScope=@UserScope  
    ,UserRole=@UserRole  
    ,LocCode=@LocCode  
    ,DepCode=@DepCode  
    ,Manager_UserID=''''  
    ,Designation=@Designation  
    ,ContactNo=@ContactNo  
    ,UserRemarks=''''  
    ,Status=@Status  
    ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
    where UserID=@UserID  
    if EXISTS(select * from SD_Technician where RefUserID=@UserID)  
    BEGIN  
       exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''UpdateTechnician'',@TechLoginName=@LoginName  
    ,@RequstTypeRef=@ReqRef  
    ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
    END  
    else  
    BEGIn  
   exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
    ,@RequstTypeRef=@ReqRef  
    ,@CategoryFK=@CategoryFK  
    
    ,@CreatedBy='''',@OrgRef=@Org_ID  
        
    END  
  
   END  
   Else   
   BEGIN  
    update  SD_User_Master set   
  EmpID=@EmpID  
    ,UserName=@UserName  
    ,FirstName=@FirstName  
    ,LastName=@LastName  
    ,EmailID=@EmailID  
    ,LoginName=@LoginName  
    ,Pass=@Pass  
    ,UserScope=@UserScope  
    ,UserRole=@UserRole  
    ,LocCode=@LocCode  
    ,DepCode=@DepCode  
    ,Manager_UserID=@Manager_UserID  
    ,Designation=@Designation  
    ,ContactNo=@ContactNo  
    ,UserRemarks=@UserRemarks  
    ,Status=@Status  
    ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
    where UserID=@UserID  
   END  
   
  END  
  
 if(@Option=''UpdateRequestorWithoutPass'')  
   
  BEGIN  
  
   if(@IsTechnicianLogin=1)  
   BEGIN  
    SET @UserRefid=@UserID  
   update  SD_User_Master set   
   EmpID=@EmpID  
     ,UserName=@UserName  
     ,FirstName=@FirstName  
     ,LastName=@LastName  
     ,EmailID=@EmailID  
     ,LoginName=@LoginName  
       
     ,UserScope=@UserScope  
     ,UserRole=@UserRole  
     ,LocCode=@LocCode  
     ,DepCode=@DepCode  
     ,Manager_UserID=''''  
     ,Designation=@Designation  
     ,ContactNo=@ContactNo  
     ,UserRemarks=''''  
     ,Status=@Status  
     ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
     where UserID=@UserID  
    
    if EXISTS(select * from SD_Technician where RefUserID=@UserID)  
     BEGIN  
        exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''UpdateTechnician'',@TechLoginName=@LoginName  
     ,@RequstTypeRef=@ReqRef  
     ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
     END  
     else  
     BEGIn  
    exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
     ,@RequstTypeRef=@ReqRef  
     ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
    
     
        
     END  
    END  
    Else   
    BEGIN  
     update  SD_User_Master set   
   EmpID=@EmpID  
     ,UserName=@UserName  
     ,FirstName=@FirstName  
     ,LastName=@LastName  
     ,EmailID=@EmailID  
     ,LoginName=@LoginName  
     
     ,UserScope=@UserScope  
     ,UserRole=@UserRole  
     ,LocCode=@LocCode  
     ,DepCode=@DepCode  
     ,Manager_UserID=@Manager_UserID  
     ,Designation=@Designation  
     ,ContactNo=@ContactNo  
     ,UserRemarks=@UserRemarks  
     ,Status=@Status  
     ,DomainType=@DomainType,SDRole=@SDRole  
     where UserID=@UserID  
    END  
   
  END  
 if(@Option=''AddRequesterBulk'')  
   
  BEGIN  
   
    if exists (select * from SD_User_Master where EmpID=@EmpID and EmailID=@EmailID )  
  BEGIN   
 set @Error=@EmpID +''Already Exist''  
  END  
  ELSE  
  BEGIN  
  INSERT INTO SD_User_Master(UserID, EmpID  
    ,UserName  
    ,FirstName  
    ,LastName  
    ,EmailID  
    ,LoginName  
    ,Pass  
    ,UserScope  
    ,UserRole  
    ,LocCode  
    ,DepCode  
    ,Manager_UserID  
    ,Designation  
    ,ContactNo  
    ,UserRemarks  
    ,Status  
    ,DomainType,SDRole  
    )  
  values(  
  @UserID  
   ,@EmpID  
    ,@UserName  
    ,@FirstName  
    ,@LastName  
    ,@EmailID  
    ,@LoginName  
    ,@Pass  
    ,@UserScope  
    ,@UserRole  
    ,@LocCode  
    ,@DepCode  
    ,''''  
    ,@Designation  
    ,@ContactNo  
    ,''''  
       
    ,''1''  
    ,@DomainType,@SDRole  
    )   
  END  
        
    
   
  END  
 if(@Option=''DeleteRequestor'')  
   
  BEGIN  
   Delete  from  SD_User_Master  
    where  UserID=@UserID  
  
    exec SD_spAddTechnician @RefUserID=@UserID,@Option=''DeleteTechnician''  
    delete from SD_Mfa where UserID=@UserID  
  
  END  
   
 if(@Option=''AssignTechnician'')  
 BEGIN  
 select *from SD_Technician  
 END  
  
 if(@Option=''UpdatePassword'')  
 BEGIN  
 update SD_User_Master set Pass=@Pass,LastPassChngDt=GETDATE() where LoginName=@LoginName and EmailID=@EmailID  
 END  
  if(@Option=''UpdatePassFromPortal'')  
 BEGIN  
 update SD_User_Master set Pass=@Pass,LastPassChngDt=GETDATE() where LoginName=@LoginName   
 END  
 END  
  
  
  '
GO

--
-- Create or alter view [dbo].[SD_vOldnNewTech]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vOldnNewTech]')
GO
IF OBJECT_ID(N'dbo.SD_vOldnNewTech', 'V') IS NULL
EXEC sp_executesql N'

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE OR ALTER view dbo.SD_vOldnNewTech as
(
select * from
(
SELECT   [TechID],[RefUserID],[TechLoginName],[RequstTypeRef]
          ,[CategoryFK],[IsActive] ,[OrgRef]
  FROM [dbo].[SD_Technician]

  union
  SELECT   [TechID],[RefUserID],[TechLoginName],[RequstTypeRef]
          ,[CategoryFK],[IsActive] ,[OrgRef]
  FROM [dbo].[SD_DeletedTechnician]
  )alltech
  
  )
'
GO

--
-- Create table [dbo].[SD_CustomFldRole]
--
PRINT (N'Create table [dbo].[SD_CustomFldRole]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFldRole', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFldRole (
  ID int IDENTITY,
  MenuID varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuName varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRole varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_CustomFieldValues]
--
PRINT (N'Create table [dbo].[SD_CustomFieldValues]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldValues', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldValues (
  ID int IDENTITY (63954211, 1),
  RequestRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddSDCustomFieldValue]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSDCustomFieldValue]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSDCustomFieldValue', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spAddSDCustomFieldValue
(
	
	@ColumnName nvarchar(50)=null,
	@ColumnValue nvarchar(50)=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomFieldValue'')
	
	BEGIN
	IF exists (SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = N''SD_CustomFieldValues'' and COLUMN_NAME=@ColumnName)
BEGIN
	DECLARE @doit NVARCHAR(max);
	DECLARE @ColumnName1 NVARCHAR(max);
	DECLARE @ColumnValue1 NVARCHAR(max);
	SET @ColumnName1=@ColumnName;
	SET @ColumnValue1=@ColumnValue;
set @doit = (''INSERT INTO SD_CustomFieldValues (''+@ColumnName1+'') VALUES (''''''+@ColumnValue1+'''''')'');
PRINT (@doit);
EXEC (@doit);
--INSERT INTO SD_CustomFieldValues (Location) VALUES (@ColumnValue);
	END
	END
	
		if(@Option=''see'')
	
	BEGIN
		select * from	SD_CustomFieldValues
	END

	
	END



'
GO

--
-- Create table [dbo].[SD_CustomFieldTicketValues]
--
PRINT (N'Create table [dbo].[SD_CustomFieldTicketValues]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldTicketValues', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldTicketValues (
  ID int IDENTITY,
  TicketNo nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldValue nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spCustomFieldPivot]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomFieldPivot]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomFieldPivot', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spCustomFieldPivot
AS
BEGIN
    DECLARE @columns NVARCHAR(MAX), @sql NVARCHAR(MAX);

    -- Get distinct fieldnames for dynamic column creation
    SELECT @columns = COALESCE(@columns + '', '', '''') + QUOTENAME(fieldname)
    FROM SD_CustomFieldTicketValues
    GROUP BY fieldname;

    -- Dynamic SQL for pivoting
    SET @sql = N''
    SELECT ticketno, '' + @columns + ''
    FROM (
        SELECT ticketno, fieldname, fieldvalue
        FROM SD_CustomFieldTicketValues
    ) AS SourceTable
    PIVOT (
        MAX(fieldvalue)
        FOR fieldname IN ('' + @columns + '')
    ) AS PivotTable;'';

    -- Execute the dynamic SQL
    EXEC sp_executesql @sql;
END;
'
GO

--
-- Create or alter view [dbo].[vResponsetime]
--
GO
PRINT (N'Create or alter view [dbo].[vResponsetime]')
GO
IF OBJECT_ID(N'dbo.vResponsetime', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.vResponsetime
as
select CASE
 WHEN FieldValue IS NOT NULL THEN
 Datediff(MINUTE, creationDateTime, cast( FieldValue as datetime))
ELSE
Datediff(MINUTE, creationDateTime, expectedDueDate)
 END AS response_time ,
 a.Ticketref
 from SDIncident a
left join SD_CustomFieldTicketValues b on a.Ticketref=b.TicketNo and a.organizationFK=b.OrgID
where FieldName like ''%openend%''


		'
GO

--
-- Create or alter view [dbo].[SD_vTickCustomField]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vTickCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_vTickCustomField', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view  dbo.SD_vTickCustomField

as
(
select *
from 
(
  select TicketNo, Fieldname, FieldValue
  from SD_CustomFieldTicketValues 
) src
pivot
(
  max(FieldValue)
   FOR Fieldname IN (Access_Type,Customer_Name)
) piv)
'
GO

--
-- Create or alter view [dbo].[SD_vGetTotalHoldDuration]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vGetTotalHoldDuration]')
GO
IF OBJECT_ID(N'dbo.SD_vGetTotalHoldDuration', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.SD_vGetTotalHoldDuration
as
(

SELECT  TicketNo, HoldStart, HoldEnd, ISNULL( DATEDIFF(minute, HoldStart, HoldEnd) ,0) 

 

AS TotalHoldMin,OrgId
FROM 
(
    SELECT TicketNo,FieldName,FieldValue,OrgId FROM SD_CustomFieldTicketValues WITH(NOLOCK)
     where FieldName in (''HoldStart'',''HoldEnd'')
  and FieldValue is not null
) AS SourceTable
PIVOT 
(
    MAX(FieldValue) FOR FieldName IN ([HoldStart], [HoldEnd])
) AS PivotTable );
'
GO

--
-- Create table [dbo].[SD_CustomFieldControl]
--
PRINT (N'Create table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldControl', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldControl (
  ID numeric NOT NULL,
  Deskref varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldID nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldValue nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldMode nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status bit NULL,
  IsFieldReq bit NULL,
  FieldScope nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TextboxCount int NULL,
  DropDownCount int NULL,
  ReqFldValidID varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  SDRole nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spSDCustomField_View]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDCustomField_View]')
GO
IF OBJECT_ID(N'dbo.SD_spSDCustomField_View', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spSDCustomField_View
(
	@StatusID int = NULL,
  	@DeskRef varchar(50) =NULL,
    @TicketNo varchar(100)=Null,
    @FieldName varchar(100)=null,
    @FieldValue varchar(100)=null,
	@ID numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgRef numeric(18,0)=NULL,
	@SDRole nvarchar(100)=NULL,
	@OrgId numeric(18,0)=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''ShowOddTxtCustomFld'')
	
	BEGIN
	Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 1 
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	and Deskref=@DeskRef and OrgRef=@OrgId

--and OrgRef=@OrgRef
	END
	
	if(@Option=''ShowOddDdlCustomFld'')
	
	BEGIN
	Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 1  and
( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	and Deskref=@DeskRef and OrgRef=@OrgId


--and OrgRef=@OrgRef
	END
		if(@Option=''ShowOddTxtCustomFldTech'')
	
			BEGIN
				Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.* ,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
				oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 1 and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''
					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
				if(@Option=''ShowOddDDlCustomFldTech'')
	
			BEGIN
		Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.* ,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 1  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END


			if(@Option=''ShowEvenTxtCustomFld'')
	
	BEGIN
Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 0 
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	
and Deskref=@DeskRef and OrgRef=@OrgId
--and OrgRef=@OrgRef
	END
	
	if(@Option=''ShowEvenDdlCustomFld'')
	
	BEGIN
Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 0
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''
and Deskref=@DeskRef and OrgRef=@OrgId
--and OrgRef=@OrgRef
	END
		if(@Option=''ShowEvenTxtCustomFldTech'')
	
			BEGIN
			Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,UserRole as''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 0  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
				if(@Option=''ShowEvenDDlCustomFldTech'')
	
			BEGIN
		Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName
		)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 0  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomFieldCntl]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomFieldCntl]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomFieldCntl', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER   Proc dbo.SD_spCustomFieldCntl  
(  
 @StatusID int = NULL  
 ,@DeskRef varchar(50) =NULL  
 ,@ColumnName varchar(50)=null  
 ,@OrgDeskRef numeric(18,0) =NULl  
 ,@ReqFldValidID varchar(200)=null  
 , @TicketRef varchar(200)=null  
 ,@ID numeric(18,0)=null  
     , @FieldID  varchar(200) = null  
      ,@FieldName  text = null  
      ,@FieldMode  text= null  
      ,@Status bit  = null  
      ,@IsFieldReq  bit = null  
      ,@FieldScope  varchar(50) = null  
      ,@TextboxCount int = null  
      ,@DropDownCount int  = null  
   ,@FieldType varchar(50)=null  
   ,@OrgRef numeric(18,0)=null  
   ,@FieldValue nvarchar(200)=null  
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddCustomField'')  
  
 BEGIN  
 INSERT INTO SD_CustomFieldControl(ID  
 ,[Deskref]  
      ,[FieldID]  
      ,[FieldName]  
      ,[FieldMode]  
      ,[Status]  
      ,[IsFieldReq]  
      ,[FieldScope]  
      ,[TextboxCount]  
      ,[DropDownCount]  
   ,[ReqFldValidID],[FieldType],[OrgRef],FieldValue)  
 values(@ID  
 ,@DeskRef  
      ,@FieldID  
      ,@FieldName  
      ,@FieldMode  
      ,@Status  
      ,@IsFieldReq  
      ,@FieldScope  
      ,@TextboxCount  
      ,@DropDownCount  
   ,''rfv''+@FieldID ,@FieldType,@OrgRef,@FieldValue)   
 END  
  if(@Option=''see'')  
   
 BEGIN  
Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,b.OrgName,b.Org_ID  from SD_CustomFieldControl a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
)  
oddSDCust   
  
 END  
  
  if(@Option=''CustomerWsie'')  
   
 BEGIN  
Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,b.OrgName,b.Org_ID  from SD_CustomFieldControl a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
)  
oddSDCust  where  Org_ID=@OrgRef  
  
 END  
  if(@Option=''UpdateCustomField'')  
   
 BEGIN  
 update  SD_CustomFieldControl set   
   DeskRef=@DeskRef  
  
     
      ,Status=@Status  
      ,IsFieldReq=@IsFieldReq  
      ,FieldScope=@FieldScope  
     ,OrgRef=@OrgRef  
 where ID=@ID   
 END  
  if(@Option=''GetCustomFldVal'')  
   
 BEGIN  
Declare @ColName varchar(50)=@ColumnName;  
Declare @str varchar(max);  
set @str= ''Select distinct ''+@ColName+'' from  SD_CustomFieldValues where ''+@ColName+'' is not null ''  
 exec(@str);  
 END  
  
  if(@Option=''DeleteCustomField'')  
   
 BEGIN  
Delete from SD_CustomFieldControl where ID=@ID and Deskref=@DeskRef and OrgRef=@OrgRef  
  
 END  
  if(@Option=''TicketWiseCustomField'')  
   
 BEGIN  
Declare @CustFieldName varchar(50)=@ColumnName;  
Declare @TicketNumber varchar(50)=@TicketRef;  
Declare @OrgID numeric(18,0)=Convert(numeric(18,0),@OrgRef);  
--Declare @str1 varchar(max);  
--set @str1= ''select fieldvalue from SD_CustomFieldTicketValues where ticketno=''''''+@TicketNumber+'''''' and fieldname=''''''+@CustFieldName+''''''''  
-- exec(@str1);  
 DECLARE @sql NVARCHAR(MAX);  
  
SET @sql = ''SELECT fieldvalue FROM SD_CustomFieldTicketValues WHERE ticketno = @TicketNumber AND fieldname = @CustFieldName AND OrgID = @OrgID'';  
  
EXEC sp_executesql @sql,   
     N''@TicketNumber NVARCHAR(50), @CustFieldName NVARCHAR(50), @OrgID numeric(18,0)'',   
     @TicketNumber, @CustFieldName, @OrgID;  
  
 END  
 END  
  
  
  
   
'
GO

--
-- Create or alter procedure [dbo].[SD_spCreateCustomField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCreateCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_spCreateCustomField', 'P') IS NULL
EXEC sp_executesql N'







CREATE OR ALTER Proc dbo.SD_spCreateCustomField
(
	

       @Ticketref nvarchar(100)=null
   ,@Desk nvarchar(100)=null
   ,@OrgId numeric(18,0)=null
   	  ,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomField'')
	
	BEGIN
	declare   @FieldName nvarchar(max)=null   
  --(select distinct @FieldName =FieldName from SD_CustomFieldControl)
insert into SD_CustomFieldTicketValues (TicketNo,FieldName,OrgId)
select @Ticketref,FieldValue,OrgRef from SD_CustomFieldControl  where Deskref=@Desk  and OrgRef=@OrgId


	END
		
	
	END


'
GO

--
-- Create table [dbo].[SD_CoverageSchedule]
--
PRINT (N'Create table [dbo].[SD_CoverageSchedule]')
GO
IF OBJECT_ID(N'dbo.SD_CoverageSchedule', 'U') IS NULL
CREATE TABLE dbo.SD_CoverageSchedule (
  ID numeric NULL,
  ScdhuleName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DaysCovered nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HoursCovered nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BeginHour time NULL,
  EndHour time NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddCoverageSch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddCoverageSch]')
GO
IF OBJECT_ID(N'dbo.SD_spAddCoverageSch', 'P') IS NULL
EXEC sp_executesql N'










CREATE OR ALTER Proc dbo.SD_spAddCoverageSch
(
	@ID numeric(18,0)=null
      ,@ScdhuleName nvarchar(50)=null
      ,@DaysCovered nvarchar(max)=null
      ,@HoursCovered nvarchar(200)=null
      ,@BeginHour time(7)=null
      ,@EndHour time(7)=null
	
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddDeskCvrgSch'')
	
	BEGIN
	INSERT INTO	SD_CoverageSchedule(ID
      
      ,ScdhuleName
      ,DaysCovered
      ,HoursCovered
      ,BeginHour
      ,EndHour)
	values(@ID
      ,@ScdhuleName
      ,@DaysCovered
      ,@HoursCovered
      ,@BeginHour
      ,@EndHour)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_CoverageSchedule
	END

		if(@Option=''UpdateDeskCvrgSch'')
	
	BEGIN
	update 	SD_CoverageSchedule set 

    ScdhuleName=@ScdhuleName
      ,DaysCovered=@DaysCovered
      ,HoursCovered=@HoursCovered
      ,BeginHour=@BeginHour
      ,EndHour=@EndHour
	 where ID=@ID
	END
		if(@Option=''DeleteDeskCvrgSch'')
	
	BEGIN
	Delete  from 	SD_CoverageSchedule
 where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_CloudTickDetails]
--
PRINT (N'Create table [dbo].[SD_CloudTickDetails]')
GO
IF OBJECT_ID(N'dbo.SD_CloudTickDetails', 'U') IS NULL
CREATE TABLE dbo.SD_CloudTickDetails (
  ID int IDENTITY,
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Agentguid numeric NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  AccountID nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Permisssions nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DurationFrom datetime NULL,
  DurationTo datetime NULL,
  EmailChangeReason nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketForSelf nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  UserEmpCode nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SerialNo nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spCloudTickDetails1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCloudTickDetails1]')
GO
IF OBJECT_ID(N'dbo.SD_spCloudTickDetails1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spCloudTickDetails1    
(    
 @StatusID int = NULL,    
   @TicketRef nvarchar(100)=null,    
      @Agentguid numeric(18,0)=null,    
      @UserEmail nvarchar(100)=null,    
      @AccountID varchar(500)=null,    
      @Permisssions nvarchar(500)=null,    
      @DurationFrom datetime =null,    
      @DurationTo  datetime=null,    
 @ID numeric(18,0)=null,    
 @EmailChangeReason nvarchar(max)=null,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @OrgRef numeric(18,0)=NULL,    
  @TicketForSelf nvarchar(100)=null,    
  @SerialNo nvarchar(100)=null,    
 @UserEmpCode nvarchar(50)=null,    
       
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddTickDetails'')    
     
 BEGIN    
insert into SD_CloudTickDetails ( TicketRef    
      ,Agentguid    
      ,UserEmail    
      ,AccountID    
      ,Permisssions    
      ,DurationFrom    
      ,DurationTo,EmailChangeReason,SerialNo, OrgID) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@AccountID    
      ,@Permisssions    
      ,@DurationFrom    
      ,@DurationTo,@EmailChangeReason, @SerialNo, @OrgRef)    
 END    
    
 if(@Option=''AddTickImsplDetails'')    
     
 BEGIN    
  insert into SD_CloudTickDetails ( TicketRef    
    ,Agentguid    
   ,UserEmail              
       ,EmailChangeReason    
    ,TicketForSelf    
    ,UserEmpCode    
    ,OrgID,SerialNo    
    ) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@EmailChangeReason    
   ,@TicketForSelf    
   ,@UserEmpCode    
   ,@OrgRef,@SerialNo    
   )    
 END    
    
    
    
 END    
    
    
     
'
GO

--
-- Create or alter procedure [dbo].[SD_spCloudTickDetails]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCloudTickDetails]')
GO
IF OBJECT_ID(N'dbo.SD_spCloudTickDetails', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spCloudTickDetails    
(    
 @StatusID int = NULL,    
   @TicketRef nvarchar(100)=null,    
      @Agentguid numeric(18,0)=null,    
      @UserEmail nvarchar(100)=null,    
      @AccountID varchar(500)=null,    
      @Permisssions nvarchar(500)=null,    
      @DurationFrom datetime =null,    
      @DurationTo  datetime=null,    
 @ID numeric(18,0)=null,    
 @EmailChangeReason nvarchar(max)=null,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @OrgRef numeric(18,0)=NULL,    
  @TicketForSelf nvarchar(100)=null,    
  @SerialNo nvarchar(100)=null,    
 @UserEmpCode nvarchar(50)=null,    
       
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddTickDetails'')    
     
 BEGIN    
insert into SD_CloudTickDetails ( TicketRef    
      ,Agentguid    
     ,SerialNo, OrgID) values(@TicketRef    
      ,@Agentguid ,   
      @SerialNo, @OrgRef)    
 END    
    
 if(@Option=''AddTickImsplDetails'')    
     
 BEGIN    
  insert into SD_CloudTickDetails ( TicketRef    
    ,Agentguid    
   ,UserEmail              
       ,EmailChangeReason    
    ,TicketForSelf    
    ,UserEmpCode    
    ,OrgID,SerialNo    
    ) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@EmailChangeReason    
   ,@TicketForSelf    
   ,@UserEmpCode    
   ,@OrgRef,@SerialNo    
   )    
 END    
    
    
    
 END    
    
    
     
'
GO

--
-- Create table [dbo].[SD_ChangeType]
--
PRINT (N'Create table [dbo].[SD_ChangeType]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeType', 'U') IS NULL
CREATE TABLE dbo.SD_ChangeType (
  id numeric NULL,
  ChangeTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ChangeTypeDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spChangeType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spChangeType]')
GO
IF OBJECT_ID(N'dbo.SD_spChangeType', 'P') IS NULL
EXEC sp_executesql N'  
  
  
  
  
  
create OR ALTER Proc dbo.SD_spChangeType  
(  
 @StatusID int = NULL,  
 @ChangeTypeRef varchar(50) =NULL,  
 @ChangeTypeDef varchar(1000) =NULL,  
 @OrgRef varchar(50) =NULL,  
 @InsertBy int =NULL,  
 @ReqPrefix varchar(3)=null,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
   
 @ID numeric(18,0)=NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequestType'')  
   
 BEGIN  
   
 INSERT INTO SD_ChangeType(ID,ChangeTypeRef,ChangeTypeDef,OrgRef)values(@ID,@ChangeTypeRef,@ChangeTypeDef,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_ChangeType a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
 END  
  
 if(@Option=''UpdateRequestType'')  
   
 BEGIN  
 update SD_ChangeType set ChangeTypeRef=@ChangeTypeRef,ChangeTypeDef=@ChangeTypeDef,OrgRef=@OrgRef where id=@ID   
 END  
 if(@Option=''DelRequestType'')  
   
 BEGIN  
  Delete from SD_ChangeType  where id=@ID   
 END  
 END  
  
  
'
GO

--
-- Create table [dbo].[SD_ChangeReasonType]
--
PRINT (N'Create table [dbo].[SD_ChangeReasonType]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeReasonType', 'U') IS NULL
CREATE TABLE dbo.SD_ChangeReasonType (
  id numeric NULL,
  ReasonTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReasonDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spReasonType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spReasonType]')
GO
IF OBJECT_ID(N'dbo.SD_spReasonType', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER Proc dbo.SD_spReasonType  
(  
 @StatusID int = NULL,  
 @ReasonTypeRef varchar(50) =NULL,  
 @ReasonDef varchar(1000) =NULL,  
 @OrgRef varchar(50) =NULL,  
 @InsertBy int =NULL,  
 @ReqPrefix varchar(3)=null,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
   
 @ID numeric(18,0)=NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequestType'')  
   
 BEGIN  
   
 INSERT INTO SD_ChangeReasonType(ID,ReasonTypeRef,ReasonDef,OrgRef)values(@ID,@ReasonTypeRef,@ReasonDef,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_ChangeReasonType a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
 END  
  
 if(@Option=''UpdateRequestType'')  
   
 BEGIN  
 update SD_ChangeReasonType set ReasonTypeRef=@ReasonTypeRef,ReasonDef=@ReasonDef,OrgRef=@OrgRef where id=@ID   
 END  
 if(@Option=''DelRequestType'')  
   
 BEGIN  
  Delete from SD_ChangeReasonType  where id=@ID   
 END  
 END  
'
GO

--
-- Create table [dbo].[SD_CategorySLA]
--
PRINT (N'Create table [dbo].[SD_CategorySLA]')
GO
IF OBJECT_ID(N'dbo.SD_CategorySLA', 'U') IS NULL
CREATE TABLE dbo.SD_CategorySLA (
  ID int IDENTITY,
  DeskRef nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentCategoryRef nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Category_FullPath]
--
PRINT (N'Create table [dbo].[SD_Category_FullPath]')
GO
IF OBJECT_ID(N'dbo.SD_Category_FullPath', 'U') IS NULL
CREATE TABLE dbo.SD_Category_FullPath (
  id int IDENTITY,
  sdCategoryFK numeric(26) NOT NULL,
  CategoryLevel int NULL,
  CategoryPath varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Category]
--
PRINT (N'Create table [dbo].[SD_Category]')
GO
IF OBJECT_ID(N'dbo.SD_Category', 'U') IS NULL
CREATE TABLE dbo.SD_Category (
  ID numeric(26) NOT NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Categoryref varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  CategoryCodeRef varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  rowDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdCategoryFK numeric(26) NULL,
  OrgDeskRef numeric NULL,
  inUse bit NOT NULL,
  partitionid int NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[fnGetCategoryFullPathForPartition]
--
GO
PRINT (N'Create or alter function [dbo].[fnGetCategoryFullPathForPartition]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fnGetCategoryFullPathForPartition') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.fnGetCategoryFullPathForPartition 
(
	@PartitionId NUMERIC(26,0),
	@OrgId numeric(18,0)
)

RETURNS @CategoryParents TABLE
 (
  id numeric(26,0),
  sdCategoryFK numeric(26,0),
  Categoryref varchar(100),
  CategoryCodeRef varchar(100),
  [Level] int,
 
  CategoryPath varchar(650)
 )
 AS
 BEGIN
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], categoryPath) 
	AS 
		( 
		SELECT id, sdCategoryFK, Categoryref, CategoryCodeRef, 1 AS [Level], CAST(c.CategoryCodeRef AS varchar(1000)) ''CategoryPath''
		FROM SD_Category c  
		WHERE c.partitionid = ''1'' and OrgDeskRef=@OrgId and c.sdCategoryFK is null

		UNION ALL 

		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1, CAST(ch.CategoryPath+'' - ''+c.CategoryCodeRef AS varchar(1000))
		FROM SD_Category c 
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
		) 
	
	INSERT INTO @CategoryParents
		SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level],  categoryPath
		FROM Hierarchy 
		ORDER BY [LEVEL], CategoryCodeRef
		
	RETURN 
	
END	
'
GO

--
-- Create or alter function [dbo].[fnGetCategoryFullPathForDesk]
--
GO
PRINT (N'Create or alter function [dbo].[fnGetCategoryFullPathForDesk]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fnGetCategoryFullPathForDesk') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.fnGetCategoryFullPathForDesk 
(
	@DeskREF VARCHAR(100), 
	@OrgId numeric(18,0),
	@PartitionId NUMERIC(26,0)
)

RETURNS @CategoryParents TABLE
 (
  id numeric(26,0),
    sdCategoryFK numeric(26,0),
  Categoryref varchar(100),
  CategoryCodeRef varchar(100),
  [Level] int,
  Processed bit, 
  CategoryPath varchar(650),

  inUse bit 
   
 )
 AS
 BEGIN
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], categoryPath, inUse) 
	AS 
		( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, CategoryCodeRef, 1 AS [Level], CAST(c.CategoryCodeRef AS varchar(1000)) ''CategoryPath'', inUse 
		FROM [dbo].[SD_Category] c 
		--WITH (INDEX(IX_SDCategory_orgServDeskDefnFK), NOLOCK)
		--JOIN [kasadmin].[orgServDeskDefn] o  WITH (NOLOCK) ON c.orgServDeskDefnFK = o.id
		WHERE c.partitionid = @PartitionId and c.Deskref = @DeskREF and c.OrgDeskRef=@OrgId  and c.sdCategoryFK is null

		UNION ALL 

		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1, CAST(ch.CategoryPath+'' - ''+c.CategoryCodeRef AS varchar(1000)), c.inUse
		FROM [dbo].[SD_Category] c --WITH (INDEX(IX_SD_Category_sdCategoryFK), NOLOCK)
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
		) 

	INSERT INTO @CategoryParents
		SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], 0, categoryPath, inUse
		FROM Hierarchy 
		ORDER BY [LEVEL], CategoryCodeRef
	 		
	RETURN 	
END
'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryPathByRef]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryPathByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryPathByRef') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryPathByRef 
(
	@Categoryref varchar(100), 
	@PartitionId numeric(26,0)
)
RETURNS varchar(650)
AS
BEGIN
	
	DECLARE @Id numeric(26,0)
	DECLARE @CategoryPath varchar(650)
	DECLARE @CategoryParents TABLE
	(
		id numeric(26,0),
		sdCategoryFK numeric(26,0),
		Categoryref varchar(100),
		CategoryCodeRef varchar(100),
		[Level] int,
		Processed bit
	);
	
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Categoryref
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], 0
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	IF (SELECT COUNT(1) FROM @CategoryParents) = 1
	BEGIN
		SELECT @CategoryPath = CategoryCodeRef
		FROM @CategoryParents
	END
	ELSE
	BEGIN
		SELECT @CategoryPath = ''('' + CategoryCodeRef + '')''
		FROM @CategoryParents
		WHERE Categoryref = @Categoryref
		
		WHILE (SELECT COUNT(1) FROM @CategoryParents WHERE Processed = 0) > 0 
		BEGIN 
			SELECT TOP 1 @Id = Id, @CategoryPath = @CategoryPath + '' - '' + CategoryCodeRef
			FROM @CategoryParents
			WHERE Processed = 0
			AND [Level] = (SELECT MAX([Level]) FROM @CategoryParents WHERE Processed = 0)
			
			UPDATE @CategoryParents SET Processed = 1 WHERE Id = @Id
		END
	END
	
	RETURN @CategoryPath
	
END

--SELECT [dbo].[fn_GetCategoryPathByRef](''KnowledgeBase||Hardware'', 1)
'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryParents]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryParents]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryParents') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryParents 
(
@ChildCategoryId numeric(26,0), 
@PartitionId NUMERIC(26,0)
)
RETURNS @CategoryParents TABLE
(
	id numeric(26,0),
	ref varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, sdCategoryFK, ref, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.id = @ChildCategoryId
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, ref, [Level] 
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	RETURN 
	
END

--SELECT * FROM [kasadmin].[fn_GetCategoryParents](114041267388519, 1)
'
GO

--
-- Create or alter procedure [dbo].[SD_GetUpdateTicketCategory]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_GetUpdateTicketCategory]')
GO
IF OBJECT_ID(N'dbo.SD_GetUpdateTicketCategory', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_GetUpdateTicketCategory
(
   @CategoryID numeric(18,0)=null,
   @RowID int=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	IF(@Option=''GetUpdateTicket'')
	BEGIN
select * from (	SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,
* FROM [dbo].[fn_GetCategoryParents](@CategoryID, 1)
) tab where
Row_Num=@RowID
order by Level desc
END
	END



'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryChildrenByRef]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryChildrenByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryChildrenByRef') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryChildrenByRef 
(
@Categoryref varchar(100), 
@PartitionId NUMERIC(26,0),
@OrgId numeric(18,0)
)
RETURNS @CategoryChildren TABLE
(
	id numeric(26,0),
	Categoryref varchar(100),
	CategoryCodeRef varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, Categoryref, CategoryCodeRef,[Level]) 
	AS 
	( 
		SELECT id, Categoryref,CategoryCodeRef, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Categoryref
		AND partitionid = @PartitionId
		and OrgDeskRef=@OrgId
		UNION ALL 
		SELECT c.id, c.Categoryref,c.CategoryCodeRef, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
	) 
	
	INSERT INTO @CategoryChildren
	SELECT DISTINCT id, Categoryref, CategoryCodeRef,[Level]
	FROM Hierarchy
	ORDER BY [Level]
	
	RETURN
	
END

--SELECT * FROM [dbo].[fn_GetCategoryChildrenByRef](''Incident||Hardware'', 1) where level=''2''

'
GO

--
-- Create or alter function [dbo].[dbo.[fn_GetCategoryParentsByRef]
--
GO
PRINT (N'Create or alter function [dbo].[dbo.[fn_GetCategoryParentsByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.[dbo.[fn_GetCategoryParentsByRef]') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.[dbo.[fn_GetCategoryParentsByRef] 
(
@Ref varchar(100), 
@PartitionId NUMERIC(26,0)
)
RETURNS @CategoryParents TABLE
(
	id numeric(26,0),
	ref varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, sdCategoryFK, ref, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Ref
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, ref, [Level] 
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	RETURN 
	
END

--SELECT * FROM [kasadmin].[fn_GetCategoryParentsByRef](''724495334748409'', 1)
'
GO

--
-- Create or alter procedure [dbo].[SP_getDashboardData_Old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getDashboardData_Old]')
GO
IF OBJECT_ID(N'dbo.SP_getDashboardData_Old', 'P') IS NULL
EXEC sp_executesql N'    
CREATE OR ALTER PROCEDURE dbo.SP_getDashboardData_Old    
(    
    @ReqType Varchar(50) = null,    
    @Category varchar(50) = null,    
    @frmDate DateTime = null,    
    @toDate DateTime = null,    
    @UserID varchar(50) = null,    
    @Orgid varchar(100) = null    
)    
AS    
BEGIN    
    -- Adjust Date Conditions    
    DECLARE @EffectiveFromDate DateTime = CASE     
                                            WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE() - 7    
                                            ELSE @frmDate     
                                          END    
    DECLARE @EffectiveToDate DateTime = CASE     
                                          WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE()    
                                          ELSE @toDate     
                                        END    
        
    -- Main Dashboard Query    
    SELECT   distinct  
        COUNT(Ticketref) AS TotalTickets,     
        COUNT(CASE WHEN StageCodeRef = ''Open'' THEN Ticketref END) AS OpenTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Hold'' THEN Ticketref END) AS HoldTickets,    
        COUNT(CASE WHEN StageCodeRef = ''WIP'' THEN Ticketref END) AS WIPTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Closed'' THEN Ticketref END) AS ClosedTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Resolved'' THEN Ticketref END) AS ResolvedTickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S1'' THEN Ticketref END) AS S1Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S2'' THEN Ticketref END) AS S2Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S3'' THEN Ticketref END) AS S3Tickets,    
        COUNT(CASE WHEN PriorityCodeRef = ''High'' THEN Ticketref END) AS HighPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Medium'' THEN Ticketref END) AS MediumPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Low'' THEN Ticketref END) AS LowPriority    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Stage st WITH(NOLOCK) ON s.sdStageFK = st.ID    
    LEFT JOIN SD_Severity sv WITH(NOLOCK) ON s.sdSeverityFK = sv.ID    
    LEFT JOIN SD_Priority sp WITH(NOLOCK) ON s.sdPriorityFK = sp.ID    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END;    
    
    -- Day-wise Ticket Data    
    SELECT   distinct  
        CAST(creationDateTime AS DATE) AS TicketDate,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
     -- AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
    GROUP BY CAST(creationDateTime AS DATE)    
    ORDER BY TicketDate;    
    
    -- Location-wise Ticket Data    
    SELECT   distinct  
        s.location LocName,     
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    --LEFT JOIN SD_Location loc WITH(NOLOCK) ON s.location = loc.LocCode    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND s.location IS NOT NULL    
    GROUP BY s.location    
    ORDER BY s.location;    
    
    -- Category-wise Ticket Data    
    SELECT   distinct  
        CategoryCodeRef AS Category,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    LEFT JOIN SD_Category sc WITH(NOLOCK) ON s.sdCategoryFK = sc.ID    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND s.sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN s.sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND CategoryCodeRef IS NOT NULL    
    GROUP BY CategoryCodeRef    
    ORDER BY CategoryCodeRef;    
    
    -- Technician-wise Ticket Data    
    SELECT   distinct  
        UserName AS Technician,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND UserName IS NOT NULL    
    GROUP BY UserName    
    ORDER BY UserName;    
 --exec SP_getDashboardData_old @frmDate=''2024-01-01'',@toDate=''2024-09-21'',@ReqType=''0'',@Category=''0'',@UserID='''',@Orgid=''''    
END '
GO

--
-- Create or alter procedure [dbo].[SP_getDashboardData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getDashboardData]')
GO
IF OBJECT_ID(N'dbo.SP_getDashboardData', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_getDashboardData    
(    
    @ReqType Varchar(50) = null,    
    @Category varchar(50) = null,    
    @frmDate DateTime = null,    
    @toDate DateTime = null,    
    @UserID varchar(50) = null,
	@SubmitterEmail varchar(200)=null,
    @Orgid varchar(100) = null    
)    
AS    
BEGIN    
    DECLARE @EffectiveFromDate DateTime = CASE     
                                            WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE() - 7    
                                            ELSE @frmDate     
                                          END    
    DECLARE @EffectiveToDate DateTime = CASE     
                                          WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE()    
                                          ELSE @toDate     
                                        END 
    SELECT   distinct  
        COUNT(Ticketref) AS TotalTickets,     
        COUNT(CASE WHEN StageCodeRef = ''Open'' THEN Ticketref END) AS OpenTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Hold'' THEN Ticketref END) AS HoldTickets,    
        COUNT(CASE WHEN StageCodeRef = ''WIP'' THEN Ticketref END) AS WIPTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Closed'' THEN Ticketref END) AS ClosedTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Resolved'' THEN Ticketref END) AS ResolvedTickets,    
		COUNT(CASE WHEN StageCodeRef Like ''%Awaiting%'' THEN Ticketref END) AS ApprovalPending,    
		COUNT(CASE WHEN StageCodeRef Like ''%Approved%'' THEN Ticketref END) AS Approved,  
		COUNT(CASE WHEN StageCodeRef Like ''%Rejected%'' THEN Ticketref END) AS Rejected, 
        COUNT(CASE WHEN Serveritycoderef = ''S1'' THEN Ticketref END) AS S1Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S2'' THEN Ticketref END) AS S2Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S3'' THEN Ticketref END) AS S3Tickets,    
        COUNT(CASE WHEN PriorityCodeRef = ''High'' THEN Ticketref END) AS HighPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Medium'' THEN Ticketref END) AS MediumPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Low'' THEN Ticketref END) AS LowPriority    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Stage st WITH(NOLOCK) ON s.sdStageFK = st.ID    
    LEFT JOIN SD_Severity sv WITH(NOLOCK) ON s.sdSeverityFK = sv.ID    
    LEFT JOIN SD_Priority sp WITH(NOLOCK) ON s.sdPriorityFK = sp.ID    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID  
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END 
	  AND s.submitterEmailAddr=CASE WHEN ISNULL(@SubmitterEmail, '''') = '''' THEN s.submitterEmailAddr ELSE @SubmitterEmail END 
	   AND ( @UserID = ''0'' OR (@UserID = '''' AND se.RefUserID IS NULL) 
        OR (se.RefUserID = @UserID) 
		)


    -- Day-wise Ticket Data    
    SELECT   distinct  
        CAST(creationDateTime AS DATE) AS TicketDate,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID   
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
     -- AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
    GROUP BY CAST(creationDateTime AS DATE)    
    ORDER BY TicketDate;    
    
    -- Location-wise Ticket Data    
    SELECT   distinct  
        s.location LocName,     
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    --LEFT JOIN SD_Location loc WITH(NOLOCK) ON s.location = loc.LocCode    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND s.location IS NOT NULL    
    GROUP BY s.location    
    ORDER BY s.location;    
    
    -- Category-wise Ticket Data    
    SELECT   distinct  
        CategoryCodeRef AS Category,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    --LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    LEFT JOIN SD_Category sc WITH(NOLOCK) ON s.sdCategoryFK = sc.ID    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND s.sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN s.sdCategoryFK ELSE @Category END    
       AND ( @UserID = ''0'' OR (@UserID = '''' AND se.RefUserID IS NULL) 
        OR (se.RefUserID = @UserID) 
		)   
      AND CategoryCodeRef IS NOT NULL    
    GROUP BY CategoryCodeRef    
    ORDER BY CategoryCodeRef;    
    
    -- Technician-wise Ticket Data    
    SELECT   distinct  
        UserName AS Technician,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      AND su.UserID = CASE WHEN ISNULL(@UserID, ''0'') = ''0'' THEN su.UserID ELSE @UserID END    
      AND UserName IS NOT NULL    
    GROUP BY UserName    
    ORDER BY UserName;    
 --exec SP_getDashboardData @frmDate=''2024-09-30'',@toDate=''2024-10-31'',@ReqType=''0'',@Category=''0'',@UserID=''0'',@Orgid=''''    
END 


'
GO

--
-- Create or alter procedure [dbo].[SD_spServDeskDefn]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spServDeskDefn]')
GO
IF OBJECT_ID(N'dbo.SD_spServDeskDefn', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spServDeskDefn  
(  
 @id numeric (26, 0) = NULL,  
 @Deskref varchar (100) = NULL,  
 @partitionid numeric (26, 0) = NULL,  
 @DeskDesc varchar (80) =NULL,   
 @sdPrefix varchar (32)= NULL,   
 @sdStageFK numeric (26, 0)= NULL,  
 @sdStatusFK numeric (26, 0) =NULL,  
 @sdPriorityFK numeric (26, 0)= NULL,  
 @sdSeverityFK numeric (26, 0)= NULL,  
 @sdSolutionTypeFK numeric (26, 0)= NULL,  
 @sdCategoryFK numeric (26, 0)= NULL,   
 @templateName varchar (256)=NULL,  
 @sdRolePermissionFK numeric (26, 0) =NULL,   
 @sdCategoryRef nvarchar(50)=null,  
 @autoArchiveTime int   =NULL,  
 @SLA varchar(50)=null,  
 @CoverageSch varchar(50)=null,  
 @OrgFk numeric(18,0)=NULL,
 @Error varchar(200)=NULL OUTPUT,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddServDeskDefn'')  
   
 BEGIN  
 set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef)  
 if not exists(select * from SD_ServDeskDefn where Deskref=@Deskref and OrgFk= @OrgFk)
 begin
 INSERT INTO SD_ServDeskDefn( id   
      , Deskref   
      , partitionid   
      , DeskDesc   
      , sdPrefix   
      , sdStageFK   
      , sdStatusFK   
      , sdPriorityFK   
      , sdSeverityFK   
    ,sdSolutionTypeFK  
      , sdCategoryFK   
      , templateName   
      
      , autoArchiveTime,SLA,CoverageSch ,OrgFk)  
 values(@id   
      ,@Deskref   
      ,''1''  
      ,@DeskDesc   
      ,@sdPrefix   
      ,@sdStageFK   
      ,@sdStatusFK   
      ,@sdPriorityFK   
      ,@sdSeverityFK   
      ,@sdSolutionTypeFK  
      ,@sdCategoryFK   
      ,@templateName   
   
      ,@autoArchiveTime ,@SLA,@CoverageSch,@OrgFk)   
  
   insert into SD_TicketIncrementRef(ReqRef,ReqPrefix,LastUpdatedID,OrgRef)values(@Deskref,@sdPrefix,''0000000'',@OrgFk)
   end
   else 
   begin
   SET @Error=''Desk Already Configured for this Organisation !''
   end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select * from SD_ServDeskDefn  
 END  
  
  if(@Option=''UpdateServDeskDefn'')  
   
 BEGIN  
  set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef)  
 update  SD_ServDeskDefn set   
   
       Deskref =@Deskref  
      , partitionid =''1''  
      , DeskDesc =@DeskDesc  
      , sdPrefix =@sdPrefix  
      , sdStageFK =@sdStageFK  
      , sdStatusFK =@sdStatusFK  
      , sdPriorityFK =@sdPriorityFK  
      , sdSeverityFK =@sdSeverityFK  
      , sdSolutionTypeFK =@sdSolutionTypeFK  
      , sdCategoryFK =@sdCategoryFK  
   --   , templateName =@templateName  
    --  , sdRolePermissionFK =@sdRolePermissionFK  
      , autoArchiveTime =@autoArchiveTime  
   ,SLA=@SLA  
   ,CoverageSch=@CoverageSch,OrgFk=@OrgFk  
   where id=@id  
 END  
  if(@Option=''DeleteServDeskDefn'')  
   
 BEGIN  
 Delete  from  SD_ServDeskDefn  
  where id=@id  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddCategory]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddCategory]')
GO
IF OBJECT_ID(N'dbo.SD_spAddCategory', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddCategory  
(  
 @ID numeric(26,0) = NULL,  
 @DeskRef varchar(5000) =NULL,  
 @Categoryref varchar(5000) =NULL,  
 @rowDesc varchar(1000) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @CategoryCodeRef varchar(1000)=NULL,  
 @sdCategoryFK numeric(26,0)=NULL,  
 @sdParentCategoryFK numeric(26,0)=NULL,  
 @RefID  varchar(200)=NULL,  
 @CategoryLevel int=NULL,  
 @inUse bit =null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
 @CategoryUpdateCodeRef varchar(1000)=NULL,  
 @CategoryUpdateref varchar(1000) =NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddCategory'')  
   
  BEGIN  
    INSERT INTO SD_Category( ID  
      ,DeskRef  
      ,Categoryref  
      ,CategoryCodeRef  
      ,rowDesc  
      ,sdCategoryFK  
      ,partitionid  
      ,inUse,OrgDeskRef  
      )  
    values(@ID,@DeskRef,@Categoryref,@CategoryCodeRef,@rowDesc,@sdCategoryFK,''1'',''1'',@OrgDeskRef)  
  
    Insert into SD_Category_FullPath( sdCategoryFK  
      ,CategoryLevel  
      ,CategoryPath)Values(@ID,@CategoryLevel,@Categoryref)  
   
  END  
 if(@Option=''AddChildCategory'')  
   
   BEGIN  
 set @sdParentCategoryFK=(Select top 1 ID  from SD_Category where Categoryref=@RefID)  
     INSERT INTO SD_Category( ID  
       ,DeskRef  
       ,Categoryref  
       ,CategoryCodeRef  
       ,rowDesc  
       ,sdCategoryFK  
       ,partitionid  
       ,inUse,OrgDeskRef  
       )  
     values(@ID,@DeskRef,@Categoryref,@CategoryCodeRef,@rowDesc,@sdParentCategoryFK,''1'',''1'',@OrgDeskRef)  
      
     Insert into SD_Category_FullPath( sdCategoryFK  
       ,CategoryLevel  
       ,CategoryPath)Values(@ID,@CategoryLevel,@Categoryref)  
   
 END  
  
 if(@Option=''see'')  
   
  BEGIN  
   select * from SD_Category  
   --select * from SD_Category_FullPath  
  END  
 if(@Option=''FillParentCategory'')  
   
  BEGIN  
   select * from SD_Category  
  
  END  
 if(@Option=''UpdateCategory'')  
 BEGIN  
 declare @SD_CategoryFK numeric(18,0);  
 set @SD_CategoryFK=(select id from SD_Category where Categoryref=@CategoryUpdateref)  
  update SD_Category set CategoryCodeRef=@CategoryCodeRef,Categoryref=@Categoryref  
  where Categoryref=@CategoryUpdateref and DeskRef=@DeskRef  
  and OrgDeskRef=@OrgDeskRef  
  update SD_Category   
set Categoryref=REPLACE(Categoryref,@CategoryUpdateref,@Categoryref)  
  
  update SD_Category_FullPath set CategoryPath=@Categoryref where sdCategoryFK=@SD_CategoryFK  
  update SD_Category_FullPath set CategoryPath=REPLACE(CategoryPath,@CategoryUpdateref,@Categoryref)  
 END  
  
   if(@Option=''CheckDupliactePrentCategory'')  
  BEGIN
  if exists(select * from SD_Category where DeskRef=@ID and Categoryref=@DeskRef and CategoryCodeRef=@Categoryref and rowDesc=@CategoryCodeRef and
	sdCategoryFK=@sdCategoryFK and partitionid=''1'' and inUse=''1'' and OrgDeskRef=@OrgDeskRef) begin select ''True'' as [Type] end
  END
   
 END  
  
    
  
'
GO

--
-- Create or alter view [dbo].[vSDTicket_cloud]
--
GO
PRINT (N'Create or alter view [dbo].[vSDTicket_cloud]')
GO
IF OBJECT_ID(N'dbo.vSDTicket_cloud', 'V') IS NULL
EXEC sp_executesql N'



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE OR ALTER view  dbo.vSDTicket_cloud
AS
(
select distinct SDINC.id,
SDReq.ReqTypeRef as''ServiceDesk'',
SDINC.Ticketref as ''TicketNumber'',
SDINC.TicketSummary as ''Summary'',
SDINC.partitionid,
SDINC.categoryFullText as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDINC.creationDateTime as ''CreationDate'',

SDINC.TicketDesc as ''Description'',
SDINC.submitterType as ''SubmitterType'',
SDINC.submitterName as ''SubmitterName'',
SDINC.submitterEmailAddr as ''SubmitterEmail'',
SDINC.submitterPhone as ''SubmitterPhone'',
SDINC.sourceType as ''SourceType'',
SDINC.expectedDueDate as ''DueDate'',
SDINC.SubmitterID,
SDINC.sdCategoryFK,
SDINC.sdStatusFK,
SDINC.sdSeverityFK,
SDINC.sdPriorityFK,sdinc.assigneeParticipantFK,
SDtech.TechLoginName,
SDINC.previousStageFK,
SDINC.actualResolutionDate as ''ExpectedResolutionDt'',
SDINC.closedDateTime as ''ClosedDate'',
SDSever.ResponseTime,
SDSever.ResolutionTime,
Agentguid
      ,UserEmail
      ,AccountID
      ,Permisssions
      ,DurationFrom
      ,DurationTo
	  ,EmailChangeReason
	  ,sdv_Cust.Access_Type
	  ,sdv_Cust.Customer_Name
	  ,SDINC.organizationFK as ''OrgId''



from 

SDIncident  SDINC left outer join 
SD_Category SDCat  on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Priority SDPrio on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever on SDINC.sdSeverityFK=SDSever.ID left outer join
SD_RequestType SDReq on SDINC.orgServDeskDefnFK=SDReq.id  left outer join
SD_Technician SDtech on SDINC.assigneeParticipantFK=SDtech.TechID  left outer join

SD_CloudTickDetails sdc on sdc.TicketRef=SDINC.Ticketref left outer join

SD_vTickCustomField sdv_Cust on  sdv_Cust.TicketNo=SDINC.Ticketref
)
'
GO

--
-- Create or alter function [dbo].[SD_EmailSubject]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailSubject]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailSubject') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SD_EmailSubject
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OrgId numeric(18,0)
	
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailSubject nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(100);
	Declare @SubmitterName nvarchar(100);
	declare @Assignee nvarchar(200);
	declare @ApproverLevel nvarchar(200);
	declare @AccountID nvarchar(200);
	declare @CustomerName nvarchar(200);
	declare @AccessType nvarchar(200);
  
  declare @Desk nvarchar(100);
   select @Desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=Cast(ISNULL(CreationDate,0) as nvarchar(20)) ,@AccountID=AccountID,
  @CustomerName=Customer_Name,@AccessType=Access_Type
 
   from vSDTicket_cloud  
   
   
   where TicketNumber=@TicketNumber  and OrgId=@OrgId
   set @ApproverLevel=@OtherParam
  set @EmailSubject= 

  (SELECT  top 1
    
	Replace( 
    Replace( 
	Replace(
	Replace( 
	Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        Summary, 
                                       ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			 ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),	
			  ''{AccountID}'', COALESCE(@AccountID, ''{AccountID}'')),
			   ''{AccessType}'', COALESCE(@AccessType, ''{AccessType}'')),
			    ''{CustomerName}'', COALESCE(@CustomerName, ''{CustomerName}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}'')) AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
    RETURN  @EmailSubject

END
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody_Cloud_old]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody_Cloud_old]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody_Cloud_old') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.SD_EmailBody_Cloud_old
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OtherParam2 nvarchar(200)
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
	Declare @AccountID nvarchar(200);
	Declare @CustomerName nvarchar(200);
	Declare @AccessType nvarchar(200);
	Declare @Assignee nvarchar(100);
	Declare @ApproverLevel nvarchar(200);

   select @Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=CreationDate,@AccountID=AccountID ,
  @CustomerName=Customer_Name,@AccessType=Access_Type,@Assignee=TechLoginName
 
   from vSDTicket_cloud where TicketNumber=@TicketNumber 
    set @ApproverLevel=@OtherParam

  set @EmailBody=  (SELECT 
   Replace(
  Replace(
  Replace(
   Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),
			   ''{Account}'', COALESCE(@AccountID,''{Account}'')),
			   ''{AccessType}'', COALESCE(@AccessType, ''{AccessType}'')),
			    ''{CustomerName}'', COALESCE(@CustomerName, ''{CustomerName}'')),
			    ''{Approver}'', COALESCE(@OtherParam2, ''{Approver}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter view [dbo].[vSDTicket]
--
GO
PRINT (N'Create or alter view [dbo].[vSDTicket]')
GO
IF OBJECT_ID(N'dbo.vSDTicket', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view  dbo.vSDTicket
AS
(
select distinct SDINC.id,
SDReq.ReqTypeRef as''ServiceDesk'',
SDINC.Ticketref as ''TicketNumber'',
SDINC.TicketSummary as ''Summary'',
SDINC.partitionid,

SDINC.categoryFullText as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDINC.creationDateTime as ''CreationDate'',

SDINC.TicketDesc as ''Description'',
SDINC.submitterType as ''SubmitterType'',
SDINC.submitterName as ''SubmitterName'',
SDINC.submitterEmailAddr as ''SubmitterEmail'',
SDINC.submitterPhone as ''SubmitterPhone'',
SDINC.sourceType as ''SourceType'',
SDINC.expectedDueDate as ''DueDate'',
SDINC.SubmitterID,
SDINC.sdCategoryFK,
SDINC.sdStatusFK,
SDINC.sdSeverityFK,
SDINC.sdPriorityFK,sdinc.assigneeParticipantFK,
SDtech.TechLoginName,
SDINC.previousStageFK,
SDINC.actualResolutionDate as ''ExpectedResolutionDt'',
SDINC.expectedDueDate as ''ExpectedResponseDt'',
SDINC.closedDateTime as ''ClosedDate'',
SDSever.ResponseTime,
SDSever.ResolutionTime,
SDINC.location,
sdinc.Department,
SDINC.sdStageFK,
SDStag.StageCodeRef as ''Stage'',
SDResol.ResolutionCodeRef as ''Resolution'',
SDINC.sdSolutionTypeFK,
SDINC.solutionNote,
SDINC.TickResolvedDt as ResolutionDt,
SDINC.organizationFK as OrgId,
SDStat.StatusColorCode as StatusColorCode




from 

SDIncident  SDINC  with(Nolock) left outer join 
SD_Category SDCat   with(Nolock) on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat  with(Nolock) on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Stage  SDStag  with(Nolock) on SDINC.sdStageFK=SDStag.ID  left outer join
SD_Priority SDPrio  with(Nolock) on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever  with(Nolock) on SDINC.sdSeverityFK=SDSever.ID left outer join
SD_RequestType SDReq  with(Nolock) on SDINC.orgServDeskDefnFK=SDReq.id  left outer join
SD_vOldnNewTech SDtech  with(Nolock) on SDINC.assigneeParticipantFK=SDtech.TechID  left outer join
SD_DeletedTechnician SDtech1  with(Nolock) on SDINC.assigneeParticipantFK=SDtech1.TechID  left outer join
SD_Resolution SDResol  with(Nolock) on SDINC.sdSolutionTypeFK=SDResol.ID


)
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody_Cloud]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody_Cloud]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody_Cloud') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.SD_EmailBody_Cloud
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OtherParam2 nvarchar(200),
	@OrgId numeric(18,0)
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
		Declare @ResolutionDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
	Declare @AccountID nvarchar(200);
	Declare @CustomerName nvarchar(200);
	Declare @AccessType nvarchar(200);
	Declare @Assignee nvarchar(100);
	Declare @ApproverLevel nvarchar(200);
	Declare @ApproverName nvarchar(200);
declare @Desk nvarchar(100);


 select @desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=Cast(ISNULL(CreationDate,0) as nvarchar(20)) ,
  @Assignee=TechLoginName,@ResolutionDate=Cast(ISNULL(ResolutionDt,0) as nvarchar(20)) 
 
   from vSDTicket where TicketNumber=@TicketNumber  and OrgId=@OrgId
    set @ApproverLevel=@OtherParam
	set @ApproverName=@OtherParam2
   set @EmailBody=  (SELECT  top 1
    Replace(
    Replace(
  Replace(
    Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),
			''{ResolvedDt}'', COALESCE(@ResolutionDate, ''{ResolvedDt}'')),			
			''{Approver}'', COALESCE(@ApproverName, ''{Approver}'')),
			''{Remarks}'', COALESCE(@OtherParam, ''{Remarks}'')),
			''{OrgId}'', COALESCE(@OrgId, ''{OrgId}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select top 1 Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.SD_EmailBody
(
  @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OrgId numeric(18,0)
	
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
		Declare @Assignee nvarchar(100);
		declare @ApproverLevel nvarchar(200);
		declare @AccountID nvarchar(200);
		declare @AccountID1 nvarchar(200);
	declare @CustomerName nvarchar(200);
	declare @AccessType nvarchar(200);
	declare @Desk nvarchar(100);
		declare @ticknote nvarchar(max);
		declare @TickResolvedDt nvarchar(30);

   select @desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=CreationDate ,@TickResolvedDt=ResolutionDt
  ,@Assignee=TechLoginName
 
   from vSDTicket where TicketNumber=@TicketNumber and OrgID=@OrgId
    set @ApproverLevel=@OtherParam
		
set @ticknote=(select top 1 EngineerNote from SD_TicketNotes where Ticketref=@TicketNumber order by EditedDt desc)



  set @EmailBody=  (SELECT top 1
    Replace(
    Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
									 REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),		
			    ''{ResolvedDt}'', COALESCE(@TickResolvedDt, ''{ResolvedDt}'')),		
			  ''{Notes}'', COALESCE(@ticknote, ''{Notes}'')),
			    ''{OrgID}'', COALESCE(@OrgId, ''{OrgID}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select top 1 Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName  and ReqRef=@Desk and OrgRef=@OrgId)
    RETURN  @EmailBodyFinal

END

'
GO

--
-- Create or alter procedure [dbo].[sp_TicketAutoClosedStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_TicketAutoClosedStatus]')
GO
IF OBJECT_ID(N'dbo.sp_TicketAutoClosedStatus', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER PROCEDURE dbo.sp_TicketAutoClosedStatus
(
@TicketID numeric(18,0)=NULL
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
				declare @OrgId numeric(18,0);
				declare @ServiceDesk nvarchar(100);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,ResolutionDt,GETDATE()) as ''EscMin'',OrgId,ServiceDesk--,@Summary=Summary		
  from vSDTicket where (Status =''Resolved'' ) --and ServiceDesk =''Incident''
  and DATEDIFF(DAY,ResolutionDt,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId,@ServiceDesk

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  declare @sdStatusFk numeric(18,0);
	    declare @sdStageFk numeric(18,0);
		  declare @sdPrevStageFk numeric(18,0);
		  declare @organizationFK numeric(18,0);
	   set @sdStatusFk =(select top 1 id from SD_Status where StatusCodeRef like ''%closed%'' and DeskRef=@ServiceDesk and OrgDeskRef=@OrgId)
	  	  set @sdStageFk =(select top 1 id from SD_Stage where StageCodeRef like ''%closed%'' and DeskRef=@ServiceDesk and OrgDeskRef=@OrgId)
		  set @sdPrevStageFk=(select sdStageFK from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
	--  set @organizationFK=(select organizationFK from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
	
	
	update SDIncident set sdStatusFK=@sdStatusFk ,sdStageFK=@sdStageFk,previousStageFK=@sdPrevStageFk,closedDateTime=DATEADD(DAY,1,TickResolvedDt),EditedBy=''System'' 
	where Ticketref=@TicketNumber and organizationFK=@OrgId

	 exec  SD_spAddTicketNotes @Ticketref=@TicketNumber,@sdStatusFK=@sdStatusFK,@NoteDesc=''Auto Change'',@EdityBy=''System'',@Option=''AddNotes'',@organizationFK=@OrgId
 
			 
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  
			  FETCH NEXT FROM @MyCursor 
			   INTO @TicketID,@TicketNumber,@EscMin,@OrgId,@ServiceDesk
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END


'
GO

--
-- Create or alter procedure [dbo].[sp_TicketAutoClosed]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_TicketAutoClosed]')
GO
IF OBJECT_ID(N'dbo.sp_TicketAutoClosed', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER PROCEDURE dbo.sp_TicketAutoClosed
(
@TicketID numeric(18,0)=NULL
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
declare @Desk nvarchar(100);
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(DAY,ResolutionDt,GETDATE()) as ''EscMin'',ServiceDesk--,@Summary=Summary		
  from vSDTicket where (Status=''Resolved'') and ServiceDesk =''Incident''
and datediff(day,ResolutionDt,GETDATE())>=1
and ResolutionDt is not null

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@Desk

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	
-------------- if record doesn''t exist , this will make esclation upto 1st level
declare @sdclosedStageFk numeric(18,0);
declare @sdclosedStatusFk numeric(18,0);
declare @sdresolvedFk numeric(18,0);
set @sdclosedStatusFk=(select ID from SD_Status where StatusCodeRef like ''%closed%''
and DeskRef=@Desk)
set @sdresolvedFk=(select ID from SD_Status where StatusCodeRef like ''%resolved%''
and DeskRef=@Desk)
set @sdclosedstageFk=(select ID from SD_Stage where StageCodeRef like ''%closed%''
and DeskRef=@Desk)
	update SDIncident set sdStageFK=@sdclosedStageFk,sdStatusFK=@sdclosedStatusFk,previousStageFK=@sdresolvedFk 
,closedDateTime=DATEADD(DAY,1,TickResolvedDt) where 
 Ticketref=@TicketNumber and datediff(day,TickResolvedDt,GETDATE())>=1

declare  @TicketNotes nvarchar(max);
		set @TicketNotes= CONCAT( ''<p>Auto Generated : Previous Status was'' ,''Resolved'','' Now '',''Closed'',''<br/> status was updated by : '',''System'',''<br/>'')

							
									INSERT INTO	SD_TicketNotes(TicketID
											  ,Ticketref
											  ,EdityBy
											  ,EditedDt
											  ,NoteDesc,organizationFK,EngineerNote)
											values(@TicketID
											  ,@TicketNumber
											  ,''System''
											  ,getdate()
											  ,@TicketNotes,''523843837'',@TicketNotes)	
	    
			  FETCH NEXT FROM @MyCursor 
			    INTO @TicketID,@TicketNumber,@EscMin,@Desk
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[SP_Getdata]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_Getdata]')
GO
IF OBJECT_ID(N'dbo.SP_Getdata', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_Getdata(          
@agentguid varchar(50)=null,        
@ReqType varchar(50)=null,      
@frmdate varchar(20)=null,      
@Todate varchar(20)=null,     
@option varchar(50)=null,    
@ServiceDesk varchar(50)=null,    
@Status varchar(50)=null,    
@Msg varchar(50) Output        
)          
AS          
BEGIN        
if(@option = ''TicketDetailsDeptWise'')    
BEGIN       
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',        
     v.ClosedDate from         
     vSDTicket v         
     where  ServiceDesk= case when ISNULL(@ServiceDesk,''0'')=''0'' then ServiceDesk else @ServiceDesk end      
  and OrgId=680624893       
 AND CAST(CreationDate AS DATE) >= CASE WHEN ISNULL(@frmdate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @frmdate END      
  AND CAST(CreationDate AS DATE) <= CASE WHEN ISNULL(@Todate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @Todate END      
  and  Status=@Status       
  and Department in (  SELECT departmentname from SelfService   where agentguid=@agentguid )        
END    
ELSE    
BEGIN    
    
if exists(SELECT departmentname Status from SelfService   where agentguid=@agentguid) 
begin        
select Count(distinct vSDTicket.TicketNumber) as [Ticket Count], Status          
from vSDTicket where Department in (        
SELECT departmentname Status from SelfService   where agentguid=@agentguid )        
and ServiceDesk= case when ISNULL(@ReqType,'''')='''' then ServiceDesk else @ReqType end      
AND CAST(CreationDate AS DATE) >= CASE WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @frmDate END      
  AND CAST(CreationDate AS DATE) <= CASE WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @toDate END      
  AND OrgId=680624893    
group by Status
select @option
end        
else        
begin        
set @Msg=''AgentGuid is not Mapped''        
end      
    
END    
END       
    
    


--exec SP_Getdata @ReqType=''Incident'',@Status=''Closed'',@agentguid=''166723515374445'',@frmdate=''1900-01-01'',@Todate=''1900-01-01''
--,@Msg='''',@option=''TicketDetailsDeptWise''
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicket_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicket_old]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicket_old', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER Procedure dbo.SD_spGetTicket_old

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
  from dbo.vSDTicket a
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 END 
 else
 BEGIN
 Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,Convert(varchar,case 
 
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())

  End )as ''TicketDayWise''
  from dbo.vSDTicket a
 
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  
  
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise<=@TicketDayWise
 order by CreationDate desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.vSDTicket   a
 
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  
  
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1

 order by CreationDate desc

 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetResponseSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_spGetResponseSLA', 'P') IS NULL
EXEC sp_executesql N'








create OR ALTER Proc dbo.SD_spGetResponseSLA
(
	 @TicketID numeric(18,0)=NULL,
 @TicketNumber varchar(50)=NULL,
 @EscMin int=NULL,
    @L1Min int =NULL,
	    @L2Min int =NULL,
	     @L3Min int=NULL,
		  @L4Min int =NULL,
		   @L5Min int= NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	
	

	DECLARE @MyCursor CURSOR;


    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin''--,@Summary=Summary
		


					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID)
	  BEGIN
	
		  set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'')
		    set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'')
			  set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'')
			    set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'')
				  set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'')
				  if exists( Select * from SD_SLA where TicketID= @TicketID and EsclationLevel=''L5'' )

				BEGIN
				print(''esc '');
				END
				ELSE 
				BEGIN
			 IF @EscMin>@L1Min and @EscMin<=@L2Min
					 BEGIN
					  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
				ELse IF (@EscMin>@L2Min and @EscMin<=@L3Min)
					 BEGIN
					  update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>@L3Min and @EscMin<=@L4Min)
					 BEGIN
					  update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>@L4Min)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel='''',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 END
	  END

	  ELSE
		 BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,EscDt) 
				(select id,TicketNumber,''L1'',''1'',''L2'',GETDATE()--,@Summary=Summary	
					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1 and id=@TicketID)
	  END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;



	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spGetArchiveTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetArchiveTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spGetArchiveTicket', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_spGetArchiveTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
  from dbo.vSDTicket a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 END 
 else
 BEGIN
 Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,Convert(varchar,case 
 
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())

  End )as ''TicketDayWise''
  from dbo.vSDTicket  a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise<=@TicketDayWise
 order by CreationDate desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.vSDTicket  a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref 
	and a.OrgId=b.OrgFk
	where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1

 order by CreationDate desc

 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddSDCustomTicketField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSDCustomTicketField]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSDCustomTicketField', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Proc dbo.SD_spAddSDCustomTicketField
(
	@StatusID int = NULL,
  	@DeskRef varchar(50) =NULL,
    @TicketNo varchar(100)=Null,
    @FieldName varchar(100)=null,
    @FieldValue varchar(100)=null,
	@ID numeric(18,0)=null,
	@OrgId numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomField'')
	
	BEGIN
	INSERT INTO	SD_CustomFieldTicketValues(TicketNo
      ,FieldName
      ,FieldValue,OrgId)
	values(@TicketNo
      ,@FieldName
      ,@FieldValue,@OrgId)	
	END
		if(@Option=''see'')
	
	BEGIN
		select * from	SD_CustomFieldTicketValues
	END
		if(@Option=''UpdateCustomField'')
	
	BEGIN
	 if exists(select * from SD_CustomFieldTicketValues where TicketNo=@TicketNo and OrgId=@OrgId)
	 BEGIN
	update	SD_CustomFieldTicketValues
	set FieldValue=@FieldValue where TicketNo=@TicketNo and FieldName=@FieldName
	and OrgId=@OrgId
	END
	ELSE
	BEGIN
	set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@TicketNo and OrgId=@OrgId)
--	set @OrgId=(select top 1 OrgId from vSDTicket where TicketNumber=@TicketNo)
	exec SD_spCreateCustomField @Ticketref=@TicketNo,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@OrgId

		update	SD_CustomFieldTicketValues
	set FieldValue=@FieldValue where TicketNo=@TicketNo and FieldName=@FieldName
	and OrgId=@OrgId
	END
	END

	
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMainTech]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMainTech]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMainTech', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMainTech
(
@FCategory varchar(50)=NULL,
@TicketStatus varchar(50)=NULL,
@Scope varchar(50)=NULL,
@TechLoginName nvarchar(400)=NULL,
@OrgID numeric(18,0)=NULL,
@Option varchar(50)
)
AS
BEGIN

	if(@Option=''DashboardsCounts'')
	BEGIN
		SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (
		select count(*) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  from vSDTicket WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
		Union
		select 0 ''SevenDaysTotal'',count(*) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  from vSDTicket WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		Union
		select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(*) as TodayTotal,0 ''Total'' from vSDTicket WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		Union
		select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(*) as Total  from vSDTicket  where ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		) AS Final  
	END

	if(@Option=''SevenDaysTickets'')
	BEGIN		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		
 
 
 WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	END

	if(@Option=''ThirtyDaysTickets'')
	BEGIN	
		   select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate

       from vSDTicket a 	

   
 	WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	END

	if(@Option=''TodayTickets'')
	BEGIN
		
	  select  distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
	

	WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
	
		
	END
	if(@Option=''TotalTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket  where ServiceDesk=''Incident'' and TechLoginName=@TechLoginName group by Status 
		
	END
	if(@Option=''TodayTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName group by Status 
		
	END
	if(@Option=''TodayTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
	
	
WHERE  (a.ServiceDesk = ''Incident'')  and TechLoginName=@TechLoginName
					AND CreationDate >= DATEADD(DAY, 0, CAST(CAST(GETDATE() as Date)as datetime))
	and a.Status= @TicketStatus 
		
	END
	if(@Option=''Last7DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	

	
	
	WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))
	and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus
	
		
	END

	if(@Option=''Last30DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a
		

	WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())
	and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus 
		
	END

	if(@Option=''OverAllTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		 WHERE
	 ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus 
		
	END
	if(@Option=''OverAllTickets'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		 WHERE
	 ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	
		
	END

	if(@Option=''Last7DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status
    from vSDTicket a 	
WHERE CreationDate >= DATEADD(DAY, -7, GETDATE())	and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName 	 group by a.Status 
		
	END


	if(@Option=''Last30DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())	and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName	 group by Status 
		
	END

	if(@Option=''ResponseSLAPie'')
	BEGIN
		
	  SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''responsesla'' and Desk=''Incident'' 
			group by CustomFieldValue  
		
	END
	if(@Option=''ResolutionSLAPie'')
	BEGIN
		
	  SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''resolutionsla'' and Desk=''Incident''  and Status=''Closed''
			group by CustomFieldValue  
		
	END
	if(@Option=''SeverityWisePie'')
	BEGIN
	
		
		 select  Severity ,COUNT(TicketNumber) as TotalTickets from vSDTicket
		 where ServiceDesk=''Incident''  
		 group by Severity 
	END
	if(@Option=''SeverityWiseResolvedPie'')
	BEGIN
		 select  Severity ,COUNT(TicketNumber) as TotalTickets from vSDTicket
		 where ServiceDesk=''Incident''  and Status=''Closed''
		 group by Severity 
	END
		if(@Option=''SeverityWiseResponse'')
	BEGIN
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
		 select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s
		 join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber
		 where
		 s.ServiceDesk=''Incident''  and dd.CustomFieldName=''responsesla''
		 group by s.Severity,CustomFieldValue 
		) AS A	  order by Severity asc
		
		END

		if(@Option=''SeverityWiseResolution'')
	BEGIN
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
		 select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s
		 join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber
		 where
		 s.ServiceDesk=''Incident''  and dd.CustomFieldName=''resolutionsla'' and s.Status=''Closed''
		 group by s.Severity,CustomFieldValue 
		) AS A	  order by Severity asc
		
		END
	if(@Option=''SeverityWisePieeeee'')
	BEGIN
	
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
	 select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''
				  group by s.Severity,d.CustomFieldValue

				  union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''
				  group by s.Severity,d.CustomFieldValue
					union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''
				  group by s.Severity,d.CustomFieldValue
				  ) AS A
			 
			 
		
	END
	if(@Option=''SeverityWiseResolutionPie'')
	BEGIN
	
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
	 select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''
				  group by s.Severity,d.CustomFieldValue
				   union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity2''
				  group by s.Severity,d.CustomFieldValue
				  union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''
				  group by s.Severity,d.CustomFieldValue
					union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''
				  group by s.Severity,d.CustomFieldValue
				  ) AS A
			 
			 
		
	END

	if(@Option=''FirstCategoryWiseTickets'')

	BEGIN
	select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSDTicket where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''

	END

END

'
GO

--
-- Create or alter procedure [dbo].[SD_GetResponseSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_GetResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_GetResponseSLA', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_GetResponseSLA

(
--@userName varchar(100)=null,
@ID numeric(18,0)=null,

@Summary NVARCHAR (1000) = NULL,
@AttachmentFile nvarchar(max)=NULL,
@MailBody  varchar (max) =NULL,
@Option varchar(50)=null
)

AS
BEGIN

		if(@Option=''GetResponse'')
		BEGIN
	DECLARE @ResponseCursor CURSOR;
DECLARE @TicketID numeric(18,0);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @ResponseCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin''--,@Summary=Summary
		


					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1   

    OPEN @ResponseCursor 
    FETCH NEXT FROM @ResponseCursor 
    INTO @TicketID,@TicketNumber,@EscMin

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID)
	  BEGIN
		 IF @EscMin>10 and @EscMin<20
			  BEGIN
					  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
					  where  TicketID=@TicketID
			 END
		ELse IF (@EscMin>20 and @EscMin<30)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>30 and @EscMin<40)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
					  where  TicketID=@TicketID
			 END
			 	 	ELse IF (@EscMin>40)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
					  where  TicketID=@TicketID
			 END
	  END

	  ELSE
		 BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel) 
				(select id,TicketNumber,''L1'',''1'',''L2''--,@Summary=Summary	
					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1 and id=@TicketID)
	  END
			  FETCH NEXT FROM @ResponseCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin
    END; 

    CLOSE @ResponseCursor ;
    DEALLOCATE @ResponseCursor;
END;

		END

	END
'
GO

--
-- Create or alter procedure [dbo].[CP_SDDashboardSLAWithCal]
--
GO
PRINT (N'Create or alter procedure [dbo].[CP_SDDashboardSLAWithCal]')
GO
IF OBJECT_ID(N'dbo.CP_SDDashboardSLAWithCal', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.CP_SDDashboardSLAWithCal
(
	 @ServiceDesk  varchar(50)=null,
	 @FROM varchar(50)=null,
	 @TO varchar(50)=null,
	 @FCategory varchar(50)=NULL,
	 @Scope varchar(100)=NULL,
	 @TicketStatus varchar(50)=NULL,
	 @Option varchar(50)
)
AS
BEGIN

	if(@Option=''DashboardsCounts'')
	BEGIN
		SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (
		select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  
		from vSDTicket a 
	
	
		WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident'' 
		Union
		select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  
		from vSDTicket  a 

		
		WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident'' 
		Union
		select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total'' 
		from vSDTicket  a 
	
		WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident''
		Union
		select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total 
		from vSDTicket  a 
		
		where ServiceDesk=''Incident'' 
		) AS Final  
	END

	---------------------Counts Start-----------------------
	if(@Option=''SevenDaysTickets'')
	BEGIN		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
 from vSDTicket
 
 a 
		
		
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))		and ServiceDesk=''Incident''

	END --7 Days Tickets Report

	if(@Option=''ThirtyDaysTickets'')
	BEGIN	
		   select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
     
      ,CreationDate
      ,ClosedDate
   from vSDTicket
   
   a 
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))
   and ServiceDesk=''Incident''	
  
	END --30 Days Tickets Report

	if(@Option=''TodayTickets'')
	BEGIN
		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
 
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
		
		WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident''

		
	END --Today Tickets Report

	if(@Option=''TotalTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
		           FROM  vSDTicket AS a 
					WHERE  (a.ServiceDesk = ''Incident'') 
		group by a.Status  
		
	END

	---------------------Counts END-----------------------

	---------------------Second Row Start-----------------------

	if(@Option=''TodayTicketsPie'')
	BEGIN	
	        SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status
					FROM  vSDTicket AS a 
					
					WHERE  (a.ServiceDesk = ''Incident'')
					AND (CONVERT(varchar(10), a.CreationDate, 120) = CONVERT(varchar(10), GETDATE(), 120))
            GROUP BY a.Status		
	END

	if(@Option=''TodayTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   

      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
	 WHERE  cast(CreationDate as Date)= cast(getdate() as Date) 
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus  
		
	END --Today Tickets Report

	if(@Option=''Last7DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
    
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
	 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus 
		
	END

	if(@Option=''Last30DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
  
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
		 WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus 
		
	END

	---------------------Second Row END-----------------------

	if(@Option=''OverAllTicketsStatusWise'')
	BEGIN
		
	 select   TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
    
      ,CreationDate
      ,ClosedDate
    from vSDTicket  WHERE
	 ServiceDesk=''Incident'' 
	and Status= @TicketStatus
		
	END

	if(@Option=''Last7DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
                 from vSDTicket a
				
				 where ServiceDesk=''Incident''  
				   
				 AND CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))		 group by a.Status  
		
	END

	if(@Option=''Last30DaysTicketsPie'')
	BEGIN
		
	 select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
     from vSDTicket a
			
				 where ServiceDesk=''Incident''  
				  
		and CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))		 group by a.Status  
		
	END

	--if(@Option=''ResponseSLAPie'')
	--BEGIN
		
	--  SELECT [String5] as CustomFieldValue,COUNT( distinct  TicketNumber)  as TotalTickets
 --           from vSDTicket a
	--	         INNER JOIN sd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--		group by [String5]  
		
	--END

	--if(@Option=''ResolutionSLAPie'')
	--BEGIN
		
	-- SELECT [String6] as CustomFieldValue,COUNT( distinct  TicketNumber)  as TotalTickets
 --           from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope     and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND Created >=   @FROM and Created <= @TO
	--		group by [String6]  
	--		UNION
	--		 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets   from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope     and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND Created >=   @FROM and Created <= @TO
		
	--END

	--if(@Option=''SeverityWisePie'')
	--BEGIN
	--	 select  Severity ,COUNT(TicketNumber) as TotalTickets  from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by Severity 
	--END

	--if(@Option=''SeverityWiseResolvedPie'')
	--BEGIN
	--	 select  Severity ,COUNT(TicketNumber) as TotalTickets  from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by Severity 
	--	 UNION
	--	 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
		
	--END

 --   if(@Option=''SeverityWiseResponse'')
	--BEGIN

	--select (Severity +'' (''+[String5]+'')'') as Severity, TotalTickets from 
	--(
	--	 select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,[String5] from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by a.Severity,[String5] 
	--	) AS A	  order by Severity asc
		
	
	--	END

 --   if(@Option=''SeverityWiseResolution'')
	--		BEGIN
	--		select (Severity +'' (''+[String6]+'')'') as Severity, TotalTickets from 
	--    (
	--			select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.[String6] 
	--			 from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND (a.Status=''Closed'' OR a.Status=''Resolved'') 
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--			 group by a.Severity,d.[String6]
	--	) AS A	 
	--			UNION
	--	 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--	 order by Severity asc
	--		END

	--if(@Option=''SeverityWiseResolutionPie'')
	--BEGIN
	
	--select (Severity +'' (''+[String6]+'')'') as Severity, TotalTickets from 
	--(
	--             select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.[String6] 
	--			from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--			 group by a.Severity,d.[String6]
		
 --  ) AS A		 
		
	--END

	if(@Option=''FirstCategoryWiseTickets'')

	BEGIN

	select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSDTicket where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''

	END

END

'
GO

--
-- Create or alter procedure [dbo].[_sp_GetTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[_sp_GetTicket]')
GO
IF OBJECT_ID(N'dbo._sp_GetTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo._sp_GetTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
select ROW_NUMBER() OVER(Order by ID) as RowNum,* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
 into #tempTicket from dbo.vSDTicket
 Select @TotalRow=Count(RowNum) from #tempTicket

select *
 from #tempTicket
  
 
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 drop table #tempTicket
 END
'
GO

--
-- Create or alter view [dbo].[SD_vColorForTickEscl]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vColorForTickEscl]')
GO
IF OBJECT_ID(N'dbo.SD_vColorForTickEscl', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.SD_vColorForTickEscl as
(
select TicketNo, case when (response_time-ResponseTime)<=10
 then ''green''
 when (response_time-ResponseTime)  >10 and  response_time<ResponseTime
 then ''yellow''
 else 
 ''red''
 end as ''color'',response_time,OrgID
 
 from (select TicketNo,FieldName,FieldValue,DueDate,CreationDate ,a.ResponseTime,a.OrgId, --TicketNo,
CASE
            WHEN FieldValue IS NOT NULL THEN
                Datediff(MINUTE, CreationDate, cast( FieldValue as datetime))
            ELSE
                Datediff(MINUTE, CreationDate, ExpectedResponseDt)
        END AS response_time
		from vSDTicket a 
left join 
SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
and a.OrgiD=b.OrgID
where FieldName like ''%openend%'')tt
)'
GO

--
-- Create or alter view [dbo].[SD_vSDTicketDetails]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vSDTicketDetails]')
GO
IF OBJECT_ID(N'dbo.SD_vSDTicketDetails', 'V') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER view dbo.SD_vSDTicketDetails as
(
select distinct a.[id]
      ,[ServiceDesk]
      ,[TicketNumber]
      ,[Summary]
      ,[partitionid]
      ,[Category]
      ,[Priority]
      ,[Status]
      ,[Severity]
      ,[CreationDate]
      ,[Description]
      ,[SubmitterType]
      ,[SubmitterName]
      ,[SubmitterEmail]
      ,[SubmitterPhone]
      ,[SourceType]
      ,[DueDate]
      ,[SubmitterID]
      ,[sdCategoryFK]
      ,[sdStatusFK]
      ,[sdSeverityFK]
      ,[sdPriorityFK]
      ,[assigneeParticipantFK]
      ,[TechLoginName]
      ,[previousStageFK]
      ,[ExpectedResolutionDt]
      ,[ClosedDate]
      ,[ResponseTime]
      ,[ResolutionTime]
      ,[location] 
	  ,Department
	,cc.SerialNo
      ,[sdStageFK],
	  a.OrgId
      ,[Stage],case when  color  is null 
then ''orange''
else 
color
end as ''color''

from vSDTicket a 
left join 
SD_vColorForTickEscl b 
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgID
left join 
SD_CloudTickDetails cc on a.TicketNumber=cc.TicketRef and a.OrgId=cc.OrgID
)
'
GO

--
-- Create or alter procedure [dbo].[SP_CheckMapping]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_CheckMapping]')
GO
IF OBJECT_ID(N'dbo.SP_CheckMapping', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SP_CheckMapping(
@DeskRef nvarchar(50),
@StatusID numeric(18,0),
@OrgDeskRef numeric (18, 0) NULL,
@ScopeName varchar (50) NULL,
@PrevStage varchar (50) NULL,
@Ticketref varchar (50) NULL,
@msg nvarchar(max) out
)
AS
BEGIN
DECLARE @newstage varchar(50)

set @newstage= (select StatusCodeRef from SD_Status where ID=@StatusID)  
 
 set @prevstage=(select  b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a   
inner join  SD_Status b  on a.sdStatusFK=b.ID where TicketNumber=@Ticketref)

if(@newstage!=@prevstage)
begin
if exists(select * from SD_Mapping_Check where StatusRef=@newstage and ScopeName =@ScopeName and OrgDeskRef=@OrgDeskRef and DeskRef=@DeskRef)
begin
SET @msg=''You are not authorized to change the Status.''
end
end
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_old]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_old', 'P') IS NULL
EXEC sp_executesql N'



create OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_old

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'') )tab
   
WHERE  (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'') and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_IMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_IMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_IMSPL', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_IMSPL

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName  or TechLoginName is null  ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status =''WIP'')  and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status =''WIP'') )tab
   
WHERE  (Status =''WIP'')  and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and ( status!=''Closed'' and Status!=''Resolved'') and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END
  IF(@Option=''Hold'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName  or TechLoginName is null  ) and Status=''Hold''  )tab
   
WHERE Status=''Hold'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Hold''
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_Hirel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_Hirel]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_Hirel', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_Hirel

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status =''WIP'')  )tab
   
WHERE  (Status =''WIP'')  and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and  ( status!=''Closed'' and Status!=''Resolved'') and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END

  IF(@Option=''Hold'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Hold''  )tab
   
WHERE Status=''Hold'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Hold''
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@OrgName nvarchar(200)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk and OrgId=@OrgId)
  set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Open'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Open'',@TotalRow=@TotalRow
  END



 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''WIP'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''WIP'',@TotalRow=@TotalRow
  END




 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Assigned'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Assigned'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId
 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''AssignedOther'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''AssignedOther'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''DueSoon'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''DueSoon'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''OverDue'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''OverDue'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''Hold'')
BEGIN
set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''hold'' and ServiceDesk=@Desk and OrgId=@OrgId)
  set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Hold'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Hold'',@TotalRow=@TotalRow
  END



 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTech]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTech]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTech', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Procedure dbo.SD_spGetTicketTech

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
		Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,c.StatusColorCode,a.* ,Convert(varchar,case 
			when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
					then ''Last1Hour''
			when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
					then cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
					then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
					then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())>90 
					then ''Morethan90Days'' 
			End ) as ''TicketDayWise''
								from dbo.SD_vSDTicketDetails a 
																left join  SD_Status c
																						 on a.sdStatusFK=c.ID
															 inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref 
    and
  a.OrgId=b.OrgFk
  
  where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null  )tab
  
WHERE 
  TicketDayWise=@TicketDayWise
  and ServiceDesk=@Desk and OrgId=@OrgId and (TechLoginName=@TechLoginName or TechLoginName is null  ) and location=@EngLocation
 order by CreationDate desc
 END 
 else
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,c.StatusColorCode,a.* ,Convert(int,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then 0
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  left join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
    and
  a.OrgId=b.OrgFk
  where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and 
  ServiceDesk=@Desk and OrgId=@OrgId  and (TechLoginName=@TechLoginName or TechLoginName is null )  
 -- and location=@EngLocation 
  )tab
  
WHERE 
 
  TicketDayWise<=@TicketDayWise

 order by TicketNumber desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where ServiceDesk=@Desk and OrgId=@OrgId 

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
    and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  and ( TechLoginName=@TechLoginName  or TechLoginName is null ) --and location=@EngLocation 
  )tab
   
WHERE ServiceDesk=@Desk  and OrgId=@OrgId  and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketAllEngineerstatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketAllEngineerstatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketAllEngineerstatusWise', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Procedure dbo.SD_spGetTicketAllEngineerstatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@OrgId nvarchar(100)=NULL,
	@IsActive bit =NULL,

	@Location nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
	
IF(@Option=''Open'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open'' and OrgId=@OrgId )tab
   
							WHERE   Status=''Open'' and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId
									order by TicketNumber desc 


		END
IF(@Option=''WIP'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status =''WIP'')  and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
													left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime
							or ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'')  and Org_ID=@OrgId )tab
   
							WHERE (Status =''WIP'')  and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
									order by TicketNumber desc 


		END
IF(@Option=''Assigned'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName is not null

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId )tab
   
							WHERE TechLoginName is not null and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is not null
									order by TicketNumber desc 


		END
IF(@Option=''AssignedOther'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName is null

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is  null and OrgId=@OrgId )tab
   
							WHERE  TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
									order by TicketNumber desc 


		END
IF(@Option=''DueSoon'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())<5

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
							WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
									order by TicketNumber desc 


		END
IF(@Option=''OverDue'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
													left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and (Status!=''Closed'' and status!=''Resolved'') and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 )tab
   
							WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
									order by TicketNumber desc 


		END
		IF(@Option=''Hold'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Hold'' and OrgId=@OrgId )tab
   
							WHERE   Status=''Hold'' and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId
									order by TicketNumber desc 


		END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@SubmitterEmail nvarchar(500)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket)
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate asc ) as RowNum,c.StatusColorCode,a.* ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null  )tab
  
WHERE 
  TicketDayWise=@TicketDayWise
 -- and ServiceDesk=@Desk
 and SubmitterID=@SubmitterID
 order by CreationDate asc
 END 
 else
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate asc ) as RowNum,c.StatusColorCode,a.* ,Convert(int,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then 0
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  left join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref where 
  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and   SubmitterID=@SubmitterID
  
  )tab
  
WHERE 
 
  TicketDayWise<=@TicketDayWise

 order by TicketNumber desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by TicketNumber asc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
  where   DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and   SubmitterID=@SubmitterID  )tab
   
--WHERE   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber asc 


 END

 if(@Option=''UserWise'')
BEGIN
select TicketNumber,Summary,Category,Priority,Severity,
cast(CreationDate as DateTime) CreationDate,SubmitterName,SubmitterEmail,cast(ClosedDate as DateTime) ClosedDate,location,Status from SD_vSDTicketDetails
where SubmitterID=@SubmitterID
END

 if(@Option=''UserWiseViaEmail'')
BEGIN
select TicketNumber,Summary,Category,Priority,Severity,
cast(CreationDate as DateTime) CreationDate,SubmitterName,SubmitterEmail,cast(ClosedDate as DateTime) ClosedDate,location,Status from SD_vSDTicketDetails
where SubmitterEmail like ''%''+ @SubmitterEmail +''%''
END


 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCheckTicketStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCheckTicketStatus]')
GO
IF OBJECT_ID(N'dbo.SD_spCheckTicketStatus', 'P') IS NULL
EXEC sp_executesql N'





CREATE OR ALTER Proc dbo.SD_spCheckTicketStatus
(
	
	   @prevStageFK numeric(26,0)= null
	   ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
	  ,	 @Status varchar(100)= null
	  	  ,@PrevStage varchar(100)= null
	    , @Ticketref varchar(20)= null
     ,@organizationFK numeric(26,0)= null
	,@newstage nvarchar(100)=null
	,@Error nvarchar(max) out
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''Checkstatus'')
 
 
set @newstage= (select StageCodeRef from SD_Stage where ID=@sdStageFK and OrgDeskRef=@organizationFK)
 print(@prevstage);
 --if exists(select previousStageFK from SDIncident where Ticketref=@Ticketref and previousStageFK is null)
 --BEGIN
 set @prevstage=(select  top 1

b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a 
inner join 
SD_Status b 
on a.sdStatusFK=b.ID and b.OrgDeskRef=a.OrgId where TicketNumber=@Ticketref  and a.OrgId=@organizationFK)
-- END 
-- ELSE 
-- BEGIN 
-- set @prevstage=
--(select 

--b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a 
--inner join 
--SD_Status b 
--on a.previousStageFK=b.ID  where TicketNumber=@Ticketref)
-- END
if(@prevstage=''Open'')
	BEGIN
			if(@newstage =''WIP'' or @newstage=''Hold'' or @newstage=''Open'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
				 set @Error=(''prev stage is open and cannot go in closed or resolved'')
				END
	END
	if(@prevstage=''WIP'')
	BEGIN
			if(@newstage =''Hold'' or @newstage=''Resolved'' or @newstage=''WIP'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
			 set @Error=(''prev stage is WIP and cannot go in open  or closed'')
				END
	END
	if(@prevstage=''Resolved'')
	BEGIN
			if(@newstage =''Closed'' or @newstage=''Resolved'' )
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
				 set @Error=(''prev stage is Resolved and cannot go in open  or wip or hold'')
				END
	END
	if(@prevstage=''Hold'')
	BEGIN
			if(@newstage =''WIP''  or @newstage=''Hold'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
			 set @Error=(''prev stage is Hold and cannot go in open  or resolved'')
				END
	END

	
	END

'
GO

--
-- Create or alter view [dbo].[vSDOrgDeskDef]
--
GO
PRINT (N'Create or alter view [dbo].[vSDOrgDeskDef]')
GO
IF OBJECT_ID(N'dbo.vSDOrgDeskDef', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.vSDOrgDeskDef
AS
(
select SDINC.id,
SDINC.templateName as ''TemplateName'',
SDINC.Deskref ,
SDINC.sdPrefix as ''DeskPrefix'',
SDINC.DeskDesc as ''DeskDesc'',
SDINC.partitionid,
SDINC.sdCategoryFK,
SDINC.sdStageFK,
SDINC.sdStatusFK,
SDINC.sdPriorityFK,
SDINC.sdSeverityFK,
SDINC.autoArchiveTime,
SDCat.CategoryCodeRef as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDCat.Categoryref as ''CategoryRef'',
SDRes.ResolutionCodeRef as ''Resolution'',
SDINC.sdSolutionTypeFK ,
SDINC.CoverageSch as ''CoverageID'',
SDcvr.ScdhuleName as ''CoverageName'',
SDINC.SLA as ''SLAID'',
sla.slaName as ''SLAName'',


SDCvr.DaysCovered,
SDCvr.HoursCovered,
SDCvr.BeginHour,
SDCvr.EndHour,
SDINC.OrgFk,
SDOrg.OrgName,
sdst.StageCodeRef
from 

SD_ServDeskDefn  SDINC WITH(NOLOCK) left outer join 
SD_Category SDCat WITH(NOLOCK)  on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat WITH(NOLOCK)  on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Priority SDPrio WITH(NOLOCK) on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever WITH(NOLOCK) on SDINC.sdSeverityFK=SDSever.ID  left outer join 
SD_Resolution SDRes WITH(NOLOCK) on SDINC.sdSolutionTypeFK=SDRes.ID left outer join
SD_SLAConfig sla WITH(NOLOCK) on SDINC.SLA=sla.id  left outer join 
SD_CoverageSchedule  SDCvr WITH(NOLOCK) on SDINC.CoverageSch=SDCvr.ID inner join
SD_Stage sdst WITH(NOLOCK) on SDINC.sdStageFK=sdst.ID inner join
sd_orgmaster SDOrg WITH(NOLOCK) on  SDINC.OrgFk=SDOrg.Org_ID


)
'
GO

--
-- Create or alter function [dbo].[GetResponseDueDtForCategory_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetResponseDueDtForCategory_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetResponseDueDtForCategory_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetResponseDueDtForCategory_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetResponseDueDtForCategory_New (@created2,@DeskRef,@orgStaffFK,@CategoryRef);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		RETURN dbo.GetResponseDueDtForCategory_New (@created2,@DeskRef,@orgStaffFK,@CategoryRef);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDateWithChange]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateWithChange]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateWithChange') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateWithChange
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0)

	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
					Declare @ResponseDt Datetime;
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef  );
					set @TicketDay=datename(WEEKDAY,@created);
				--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					-- set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
				set	@DueMin=(select ResponseTime from SD_Severity where Deskref=@DeskRef and id=@Severity )
				--	print(@TicketTime)
					--if exists(select * from SD_CoverageSchedule where DaysCovered like ''%''+@TicketDay+''%'' )
					--	BEGIN
					
						if(@HoursCovered=''UseTheseHours'')
								BEGIN

								DECLARE @workingDays VARCHAR(100)= (select DaysCovered from SD_CoverageSchedule);
							    -- Check if the ticket creation date is on a working day
								DECLARE @ticketCreationDayOfWeek INT
								--SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
								--	WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
								--BEGIN
								--	SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
								--END


										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=10 )
															 BEGIN
																	 DECLARE @actualResponseDateTime DATETIME;
																	 set @created=DATEADD(DAY,1,@created)
																	SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
																		WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
																			BEGIN
																				SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
																			END

																-- print ''in if condition''
												
																			 set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																			set @ResponseDt= @timein

																END
											else if(@TicketTime>@Endhour )
																BEGIN 
																					set @created=DATEADD(DAY,1,@created)
																					SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
																					WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
																						BEGIN
																								SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
																						END

																					set @actualResponseDateTime=CAST(@created as date)
																					set @timein=DATEADD(MINUTE,@DueMin,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @ResponseDt= @timein
																END

											else 
																BEGIN 
																								
																		--	set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			set @ResponseDt= @timein
																END
									
							
									END
						
					--	print(convert(datetime, @timein, 20))
					--END
	return @ResponseDt
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolutionCategory]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolutionCategory]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolutionCategory') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolutionCategory
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @CategoryRef  nvarchar(500),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @CategoryRef1  nvarchar(300);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResolutionTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResolutionDateTime DATETIME;		
																			set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResolutionDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
					END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  						set @deskref2=@DeskRef;
										 set @CategoryRef1=@CategoryRef;
	
							  RETURN dbo.GetDueDateForResolutionCategory (@created2,@DeskRef,@CategoryRef,@orgStaffFK);
	
	
	  
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolution_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolution_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolution_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolution_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
					DECLARE @actualResponseDateTime DATETIME;
					DECLARE @CurrentDate DATETIME = @created

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResolutionTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity and OrgDeskRef=@orgStaffFK )
					--	print(@TicketTime)
					if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDateForResolution_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDateForResolution_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolution]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolution]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolution') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolution
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select top 1 HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select  top 1 BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select top 1 EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)

					
					set	@DueMin=(select top 1 ISNULL(ResolutionTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity and OrgDeskRef=@orgStaffFK )
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResolutionDateTime DATETIME;		
																			set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResolutionDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
					END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  						set @deskref2=@DeskRef;
										 set @Severity1=@Severity;
	
							  RETURN dbo.GetDueDateForResolution (@created2,@DeskRef,@Severity,@orgStaffFK);
	
	
	  
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDate_PriorityResol]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_PriorityResol]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_PriorityResol') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_PriorityResol
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT Resolutiontime 
         FROM SD_Priority 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_Priority]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_Priority]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_Priority') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_Priority
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResponseTime 
         FROM SD_Priority 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity  and OrgDeskRef=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetResponseDueDtForCategory]
--
GO
PRINT (N'Create or alter function [dbo].[GetResponseDueDtForCategory]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetResponseDueDtForCategory') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetResponseDueDtForCategory
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klres]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klres]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klres') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_klres
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResolutionTime 
         FROM SD_Severity 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klCatresol]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klCatresol]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klCatresol') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_klCatresol
(
   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL((select ISNULL(ResolutionTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
, 0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klCat]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klCat]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klCat') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_klCat
(
   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL((select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
, 0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_kl]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_kl]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_kl') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_kl
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResponseTime 
         FROM SD_Severity 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

 CREATE OR ALTER FUNCTION dbo.GetDueDate
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0)

	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity  and OrgDeskRef=@orgStaffFK)
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResponseDateTime DATETIME;		
																			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							 else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
							
				END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  	  set @deskref2=@DeskRef;
										 set @Severity1=@Severity;
			
									 RETURN dbo.GetDueDate (@created2,@DeskRef,@Severity,@orgStaffFK);
	
	
    END

'
GO

--
-- Create or alter function [dbo].[GetDueDateold]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateold]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateold') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'  create OR ALTER function dbo.GetDueDateold
    (
	   @created datetime,
	   @DeskRef nvarchar(50)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
		Declare @timein Datetime;
							BEGIN
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef);
					set @TicketDay=datename(WEEKDAY,@created);
				--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
				--	print(@TicketTime)
					if exists(select * from SD_CoverageSchedule where DaysCovered like ''%''+@TicketDay+''%'' )
						BEGIN
							if(@HoursCovered!=''UseTheseHours'')
								BEGIN
									set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
									set @timein=DATEADD(MINUTE,@DueMin,@created)
								--	print(@timein)
								END
						ELSE 	if(@HoursCovered=''UseTheseHours'')
								BEGIN
								--    print(@TicketTime);
								--	print(@Beginhour);
								--	print(@Endhour);
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour)
											 BEGIN
												 set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
												-- print ''in if condition''
												set @timein=DATEADD(MINUTE,@DueMin,@created)
								--	print(@timein)
											 END
										 ELSE
											 BEGIN
										--	 print(''in else loop'')
											 Declare @str nvarchar(max);
											 Declare @created2 nvarchar(100);
											 Declare @deskref2 nvarchar(100);
											 set @created2=DATEADD(MINUTE,Datediff(MINUTE,@Beginhour,@TicketTime),@created)
										--	 print(Convert(datetime,@created2,20))
											 -- add difference of time that is calculated from 
											  --begin hour se mins krke ticke ke time ko add krna hei created at mei
											--  abb new createdad  wo bn jayeghi aur function dobara cal hogha
											 set @deskref2=@DeskRef;
								exec @str= dbo.GetDueDate  @created=@created2,@DeskRef=@deskref2
						
											 END
								END
						END
					--	print(convert(datetime, @timein, 20))
					END
	
	    RETURN @timein ;
    END;

'
GO

--
-- Create or alter function [dbo].[GetActualResponse_new]
--
GO
PRINT (N'Create or alter function [dbo].[GetActualResponse_new]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetActualResponse_new') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 create OR ALTER FUNCTION dbo.GetActualResponse_new
(
	@created datetime,
	@DeskRef nvarchar(50),
	@Severity numeric(26,0)
)
RETURNS Datetime -- return type
AS
BEGIN
	DECLARE @timein Datetime;						
	DECLARE @TicketDay nvarchar(50);
	DECLARE @DueMin int;
	DECLARE @TicketTime nvarchar(50);
	DECLARE @HoursCovered nvarchar(50);
	DECLARE @Beginhour time(7);
	DECLARE @Endhour time(7);
	DECLARE @str nvarchar(max);
	DECLARE @created2 nvarchar(100);
	DECLARE @deskref2 nvarchar(100);
	DECLARE @Severity1 numeric(26,0);
	DECLARE @OrgFk1 numeric(26,0);

	SET @HoursCovered = (SELECT HoursCovered FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Beginhour = (SELECT BeginHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Endhour = (SELECT EndHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @TicketDay = DATENAME(WEEKDAY, @created);
	SET @TicketTime = CAST(@created as time);
	SET @DueMin = (SELECT ResponseTime FROM SD_Severity WHERE Deskref = @DeskRef AND id = @Severity);

	-- Check if the ticket''s day is covered by working hours
	IF EXISTS (SELECT * FROM vSDOrgDeskDef WHERE DaysCovered LIKE ''%'' + @TicketDay + ''%'' AND Deskref = @DeskRef)
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
				DECLARE @actualResponseDateTime DATETIME;	
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END
	ELSE IF (@HoursCovered = ''NoCoverage'')
	BEGIN
		-- If there is no coverage, add the due time to the current due date and return the calculated due date.
		SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
		RETURN @timein;
	END
	ELSE
	BEGIN
		-- If the ticket''s day is not covered by working hours, add 1 day to the current due date and set the day''s time to the Beginhour.
		IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
		BEGIN
			-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
			-- add 1 day to the current due date and continue the loop.
			
			SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
			SET @created = @timein;
		END
		ELSE 
		BEGIN
			-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
		
			SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
			SET @created = @timein;
		END
	END

	-- Iterative Loop for calculating due date
	WHILE 1 = 1
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
		
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
			
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END

	-- This will never be reached, but the function needs a return statement outside the loop.
	RETURN NULL;
END
'
GO

--
-- Create or alter function [dbo].[GetActualResponse]
--
GO
PRINT (N'Create or alter function [dbo].[GetActualResponse]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetActualResponse') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetActualResponse
(
	@created datetime,
	@DeskRef nvarchar(50),
	@Severity numeric(26,0)
)
RETURNS Datetime -- return type
AS
BEGIN
	DECLARE @timein Datetime;						
	DECLARE @TicketDay nvarchar(50);
	DECLARE @DueMin int;
	DECLARE @TicketTime nvarchar(50);
	DECLARE @HoursCovered nvarchar(50);
	DECLARE @Beginhour time(7);
	DECLARE @Endhour time(7);
	DECLARE @str nvarchar(max);
	DECLARE @created2 nvarchar(100);
	DECLARE @deskref2 nvarchar(100);
	DECLARE @Severity1 numeric(26,0);
	DECLARE @OrgFk1 numeric(26,0);

	SET @HoursCovered = (SELECT HoursCovered FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Beginhour = (SELECT BeginHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Endhour = (SELECT EndHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @TicketDay = DATENAME(WEEKDAY, @created);
	SET @TicketTime = CAST(@created as time);
	SET @DueMin = (SELECT ResponseTime FROM SD_Severity WHERE Deskref = @DeskRef AND id = @Severity);

	-- Check if the ticket''s day is covered by working hours
	IF EXISTS (SELECT * FROM vSDOrgDeskDef WHERE DaysCovered LIKE ''%'' + @TicketDay + ''%'' AND Deskref = @DeskRef)
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
				DECLARE @actualResponseDateTime DATETIME;	
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				declare @AddResp int=DATEDIFF(MINUTE, @TicketTime, @Endhour);
				SET @timein = DATEADD(MINUTE,(@DueMin -@AddResp), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST (CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, cast(@DueMin as int), CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END
	ELSE IF (@HoursCovered = ''NoCoverage'')
	BEGIN
		-- If there is no coverage, add the due time to the current due date and return the calculated due date.
		SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
		RETURN @timein;
	END
	ELSE
	BEGIN
		-- If the ticket''s day is not covered by working hours, add 1 day to the current due date and set the day''s time to the Beginhour.
		--IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
		--	BEGIN
		--		-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
		--		-- add 1 day to the current due date and continue the loop.
				
		--		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
		--		SET @timein = DATEADD(MINUTE,cast( @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour) as int), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
		--		SET @created = @timein;
		--	END
		--	ELSE 
		--	BEGIN
		--		-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
		--		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
		--		SET @timein = DATEADD(MINUTE, 0, CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
		--		SET @created = @timein;
		--	END
			
		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as datetime));
		SET @timein = DATEADD(day, 1, CAST(@created as datetime));--DATEADD(MINUTE, DATEDIFF(MINUTE, @TicketTime, @Beginhour), (CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)));
		SET @created = @timein;
	END

	-- Iterative Loop for calculating due date
	WHILE 1 = 1
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.

				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE,cast( @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour) as int), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END

	-- This will never be reached, but the function needs a return statement outside the loop.
	RETURN NULL;
END
'
GO

--
-- Create or alter view [dbo].[vSDGenAIBased]
--
GO
PRINT (N'Create or alter view [dbo].[vSDGenAIBased]')
GO
IF OBJECT_ID(N'dbo.vSDGenAIBased', 'V') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER VIEW dbo.vSDGenAIBased
AS
select  Ticketref as TicketNumber, o.OrgName, r.ReqTypeRef as ReqType, st.StageCodeRef As Stage , stu.StatusCodeRef as Status,
p.PriorityCodeRef as Priority, se.Serveritycoderef as Severity, c.CategoryCodeRef as Category,
re.ResolutionCodeRef as Resolution, re.ResolutionDesc as ResolutionDescription, 
solutionNote,sourceType,TicketSummary,TicketDesc as TicketDescription,submitterType,submitterName,submitterEmailAddr as submitterEmailAddress,submitterPhone,
location,Department,Branch , t.TechLoginName as TechnicianAssigned,creationDateTime as CreationTime,
expectedDueDate DUEDATE, se.ResolutionTime, se.ResponseTime,TickResolvedDt as TicketResolvedDate,GETDATE() as [CURRENT_DATE]
from SDIncident s WITH(NOLOCK)
INNER JOIN SD_OrgMaster o WITH(NOLOCK) on o.Org_ID=s.organizationFK
LEFT JOIN SD_RequestType r  WITH(NOLOCK) on r.id=s.orgServDeskDefnFK and r.OrgRef=o.Org_ID
LEFT JOIN SD_Stage st  WITH(NOLOCK) on st.ID=s.sdStageFK and st.OrgDeskRef=s.organizationFK and st.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Status stu WITH(NOLOCK) on stu.ID=s.sdStatusFK and stu.OrgDeskRef=s.organizationFK and stu.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Priority p WITH(NOLOCK) on p.ID= s.sdPriorityFK and p.OrgDeskRef=s.organizationFK and p.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Severity se  WITH(NOLOCK) on se.ID=s.sdSeverityFK and se.OrgDeskRef=s.organizationFK and se.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Category c  WITH(NOLOCK) on c.ID=s.sdCategoryFK and c.OrgDeskRef=s.organizationFK and c.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Resolution re WITH(NOLOCK) on re.ID=s.sdSolutionTypeFK and re.OrgDeskRef=s.organizationFK and re.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Technician t WITH(NOLOCK) on t.TechID = s.assigneeParticipantFK and t.OrgRef=s.organizationFK and t.RequstTypeRef=r.ReqTypeRef


'
GO

--
-- Create or alter view [dbo].[vSD_Tickets]
--
GO
PRINT (N'Create or alter view [dbo].[vSD_Tickets]')
GO
IF OBJECT_ID(N'dbo.vSD_Tickets', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.vSD_Tickets
AS
  
   select  s.ID ,req.ReqTypeRef ServiceDesk,
			s.Ticketref TicketNumber,s.TicketSummary Summary,s.partitionid partitionid,s.categoryFullText Category,
			p.PriorityCodeRef Priority,a.StatusCodeRef Status,se.Serveritycoderef Severity, s.creationDateTime CreationDate,
			s.TicketDesc Description,s.submitterType SubmitterType,s.submitterName SubmitterName,
			s.submitterEmailAddr SubmitterEmail,s.submitterPhone SubmitterPhone,s.sourceType SourceType,
			s.expectedDueDate DueDate,
			s.SubmitterID SubmitterID,s.sdCategoryFK,s.sdStatusFK,s.sdSeverityFK,s.sdPriorityFK,s.assigneeParticipantFK,
			t.TechLoginName TechLoginName,s.previousStageFK,s.TickResolvedDt ExpectedResolutionDt,s.closedDateTime ClosedDate,
			se.ResponseTime ResponseTime,se.ResolutionTime ResolutionTime,
			s.Department,s.location,cl.SerialNo,s.sdStageFK,s.organizationFK OrgId,st.StageCodeRef Stage,s.TickResolvedDt as ResolutionDt,
			case when (
			(CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			-			
			se.ResponseTime)<=10
			 then ''green''
			 when (
			 (CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			 -se.ResponseTime)  >10 and  
			 (CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			 <se.ResponseTime
			 then ''yellow''
			 else 
			 ''red''
			 end as ''color'',
			 a.StatusColorCode,
			 CASE 
                WHEN DATEDIFF(HOUR, creationDateTime, GETDATE()) <= 1 THEN ''Last1Hour1''
                WHEN DATEDIFF(HOUR, creationDateTime, GETDATE()) <= 24 THEN ''Last24Hours''
                WHEN DATEDIFF(DAY, creationDateTime, GETDATE()) <= 30 THEN ''Last30Days''
                WHEN DATEDIFF(DAY, creationDateTime, GETDATE()) <= 90 THEN ''Last90Days''
                ELSE ''Morethan90Days''
            END AS ''TicketDayWise'' ,
			sv.autoArchiveTime autoArchiveTime,
			s.orgServDeskDefnFK,s.solutionNote,
			re.ResolutionCodeRef as ''Resolution''
			from SDIncident s  With(NOLOCK)
left join SD_Status a With(NOLOCK) on s.sdStatusFK=a.ID
left join SD_Category c With(NOLOCK) on s.sdCategoryFK=c.ID
left join SD_Priority p With(NOLOCK) on s.sdPriorityFK=p.ID
left join SD_Severity se With(NOLOCK) on s.sdSeverityFK=se.ID
left join SD_Technician t With(NOLOCK) on s.assigneeParticipantFK=t.TechID
left join SD_CloudTickDetails cl With(NOLOCK) on cl.TicketRef=s.Ticketref and cl.OrgID=s.organizationFK
left join SD_Stage st With(NOLOCK) on s.sdStageFK=st.ID
left join SD_CustomFieldTicketValues b With(NOLOCK) on s.Ticketref=b.TicketNo and s.organizationFK=b.OrgId and  FieldName like ''%openend%''
INNER JOIN SD_RequestType req on req.id=s.orgServDeskDefnFK and req.OrgRef=s.organizationFK
INNER JOIN SD_ServDeskDefn sv WITH (NOLOCK) ON req.ReqTypeRef = sv.Deskref and sv.OrgFk=s.organizationFK
left join SD_Resolution re WITH (NOLOCK) ON s.sdSolutionTypeFK=re.ID
'
GO

--
-- Create or alter procedure [dbo].[SP_getFilterData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getFilterData]')
GO
IF OBJECT_ID(N'dbo.SP_getFilterData', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROC dbo.SP_getFilterData
(
@OrgId varchar(100)=null,
@TicketNumber varchar(100)=null,
@Summary  varchar(1000)=null,
@Priority  varchar(100)=null,
@Severity  varchar(100)=null,
@Status  varchar(100)=null,
@ServiceDesk varchar(50)=null,
@fromdt Datetime=null,
@todt Datetime =null,
@option varchar(50)=null
)

AS
BEGIN
if(@option=''FILTER'')
begin
Select distinct * from vSD_Tickets
  where OrgId=@OrgId 
	  and ISNULL(ServiceDesk,'''') LIKE CASE WHEN ISNULL(@ServiceDesk,'''')='''' THEN ISNULL(ServiceDesk,'''') else ''%''+@ServiceDesk+''%'' END
end
else
begin
Select distinct * from vSD_Tickets
  where OrgId=@OrgId 
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END
	  and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END
	  and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END
	  and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END
	  and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END
	  and ISNULL(ServiceDesk,'''') LIKE CASE WHEN ISNULL(@ServiceDesk,'''')='''' THEN ISNULL(ServiceDesk,'''') else ''%''+@ServiceDesk+''%'' END
	  and cast(CreationDate as date) between cast(@fromdt as date) and cast(@todt as date)
end
END


'
GO

--
-- Create or alter procedure [dbo].[SP_FilterDataArc]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_FilterDataArc]')
GO
IF OBJECT_ID(N'dbo.SP_FilterDataArc', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER PROC dbo.SP_FilterDataArc  
(  
@OrgId varchar(100),  
@TicketNumber varchar(100),  
@Summary  varchar(1000),  
@Priority  varchar(100),  
@Severity  varchar(100),  
@Status  varchar(100)  
)  
  
  
AS  
BEGIN  
Select distinct * from vSD_Tickets  
  where OrgId=@OrgId AND (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1)  
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END  
   and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END  
   and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END  
   and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END  
   and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END  
   and  ( Status=''Closed'' or Status=''Resolved'' ) 
END  
  
  
  
  
  
  
  
  
  
  
  '
GO

--
-- Create or alter procedure [dbo].[SP_FilterData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_FilterData]')
GO
IF OBJECT_ID(N'dbo.SP_FilterData', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROC dbo.SP_FilterData
(
@OrgId varchar(100),
@TicketNumber varchar(100),
@Summary  varchar(1000),
@Priority  varchar(100),
@Severity  varchar(100),
@Status  varchar(100)
)


AS
BEGIN
Select distinct * from vSD_Tickets
  where OrgId=@OrgId AND (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1)
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END
	  and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END
	  and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END
	  and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END
	  and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END
END











  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTech_Arch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTech_Arch]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTech_Arch', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketTech_Arch  
  
(  
@PageIndex Int =1,  
@PageSize int =5,  
@TicketDayWise varchar(50)=null,  
@Option varchar(50)=null,  
@SubmitterID varchar(100)=null,  
@Desk nvarchar(100)=NULL,  
@TechLoginName nvarchar(100)=NULL,  
@EngLocation nvarchar(100)=NULL,  
@OrgID numeric(18,0)=null,  
@TotalRow int output  
  
)  
AS   
SET NOCOUNT ON  
BEGIN  
IF(@Option=''WithFilter'')  
BEGIN  
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets)  
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')  
 BEGIN 
 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' ) AND
 TicketDayWise=@TicketDayWise  
  and ServiceDesk=@Desk and (TechLoginName=@TechLoginName  ) and location=@EngLocation 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc 
 
 END   
 else  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )
   AND ServiceDesk=@Desk and (TechLoginName=@TechLoginName )  and location=@EngLocation 
   AND TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc  
   END  
 END  
 IF(@Option=''WithoutFilter'')  
BEGIN 
set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )  and ServiceDesk=@Desk  and 
 ( TechLoginName=@TechLoginName  --or TechLoginName is null  
 and OrgId=@OrgID ));
  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )  and ServiceDesk=@Desk  and 
 ( TechLoginName=@TechLoginName  --or TechLoginName is null  
 and OrgId=@OrgID  )
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc 
 END  
 END  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMasterstatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMasterstatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMasterstatusWise', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_spGetTicketMasterstatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@OrgId nvarchar(100)=NULL,
	@IsActive bit =NULL,

	@Location nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
	
IF(@Option=''Open'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  
		 or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open'' and OrgId=@OrgId );
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open''
	and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc 


		END
IF(@Option=''WIP'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime or 
		 ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'') and OrgID=@OrgId)  ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime or ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'') and OrgID=@OrgId  
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc			

		END
IF(@Option=''Assigned'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets  where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc	

		END
IF(@Option=''AssignedOther'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName 
 is null and OrgId=@OrgId ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName 
   is null and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END
IF(@Option=''DueSoon'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) 
and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END

IF(@Option=''OverDue'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) 
and (Status!=''Closed'' and status!=''Resolved'') 
   and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and (Status!=''Closed'' and status!=''Resolved'') 
   and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END
IF(@Option=''Hold'')
	BEGIN
set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and 
   Status=''Hold'' and OrgId=@OrgId);
			
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and 
   Status=''Hold'' and OrgId=@OrgId
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc
END

 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMaster_Arch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMaster_Arch]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMaster_Arch', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketMaster_Arch  
(  
@PageIndex Int =1,  
@PageSize int =5,  
@TicketDayWise varchar(50)=null,  
@Option varchar(50)=null,  
@SubmitterID varchar(100)=null,  
@TechLoginName nvarchar(100)=NULL,  
@Desk nvarchar(100)=NULL,  
@EngLocation nvarchar(100)=NULL,  
@OrgId numeric(18,0)=NULL,  
@TotalRow int output  
  
)  
AS   
SET NOCOUNT ON  
BEGIN  
 IF(@Option=''WithFilter'')  
BEGIN  
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)  
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  
   and  TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END 
   and ServiceDesk=@Desk  and OrgId=@OrgId 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc 
 END   
 else  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  and ServiceDesk=@Desk
 and  TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc
   END  
 END  
 IF(@Option=''WithoutFilter'')  
 BEGIN  
   set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where DATEDIFF(day,ClosedDate,GETDATE())>=1   and
   ( Status=''Closed'' or Status=''Resolved'' )  and
ServiceDesk=@Desk and OrgId=@OrgId) ;
   
   WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  and ServiceDesk=@Desk  and OrgId=@OrgId
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by TicketNumber desc
  END  
 END  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMaster]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMaster]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMaster', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketMaster
(      
@PageIndex Int =1,      
@PageSize int =5,      
@TicketDayWise varchar(50)=null,      
@Option varchar(50)=null,      
@SubmitterID varchar(100)=null,      
@TechLoginName nvarchar(100)=NULL,      
@Desk nvarchar(100)=NULL,      
@OrgId nvarchar(100)=NULL,      
@TotalRow int output      
      
)      
AS       
SET NOCOUNT ON      
BEGIN      
 IF(@Option=''WithFilter'')      
BEGIN      
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)      
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')      
 BEGIN 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
 where  DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc      
 END       
 else      
 BEGIN 
 WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets   
 where  (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and OrgId=@OrgId     
 and (Stage !=''Resolved'' and Stage !=''Closed'') and TicketDayWise<=@TicketDayWise 
     )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 

   END      
 END      
 IF(@Option=''WithoutFilter'')      
 BEGIN      
   Select @TotalRow=Count(id) from dbo.vSD_Tickets where ServiceDesk=@Desk and  (Status !=''Resolved'' and status!=''Closed'') and OrgId=@OrgId;    
     WITH RankedTickets AS 
  (  
   select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets 
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
	   and  (Status !=''Resolved'' and status!=''Closed'')
       )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 
  END      
 END '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketAllEngineer]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketAllEngineer]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketAllEngineer', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_spGetTicketAllEngineer
(      
@PageIndex Int =1,      
@PageSize int =5,      
@TicketDayWise varchar(50)=null,      
@Option varchar(50)=null,      
@SubmitterID varchar(100)=null,      
@TechLoginName nvarchar(100)=NULL,      
@Desk nvarchar(100)=NULL,      
@OrgId nvarchar(100)=NULL,      
@TotalRow int output      
      
)      
AS       
SET NOCOUNT ON      
BEGIN      
 IF(@Option=''WithFilter'')      
BEGIN      
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId)      
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')      
 BEGIN 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
 where  DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc      
 END       
 else      
 BEGIN 
 WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets   
 where  (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and OrgId=@OrgId     
 and (Stage !=''Resolved'' and Stage !=''Closed'') and TicketDayWise<=@TicketDayWise 
     )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 

   END      
 END      
 IF(@Option=''WithoutFilter'')      
 BEGIN      
   Select @TotalRow=Count(id) from dbo.vSD_Tickets where ServiceDesk=@Desk and  (Status !=''Resolved'' and status!=''Closed'') and OrgId=@OrgId;    
     WITH RankedTickets AS 
  (  
   select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets 
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
	   and  (Status !=''Resolved'' and status!=''Closed'')
       )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 
  END      
 END '
GO

--
-- Create or alter procedure [dbo].[SD_spDashboardCount1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDashboardCount1]')
GO
IF OBJECT_ID(N'dbo.SD_spDashboardCount1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spDashboardCount1      
(      
 @ID numeric(18,0) = NULL,      
 @adminName varchar(100) = NULL,      
 @SecretKey nvarchar(max) =NULL,      
 @Desk nvarchar(100)= NULL,      
 @IsActive bit =NULL,      
 @TechLoginName nvarchar(100)=NULL,      
 @Location nvarchar(100)=NULL,      
  @OrgId nvarchar(100)=NULL,      
  @Status nvarchar(100)=NULL,   
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AllTicketStatus'')     
 BEGIN     
  select Status,count(TicketNumber) as ''Count'' from  vSD_Tickets with (NOLOCK)    
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  
  group by Status 
  union
    select ''UnAssigned'' UnAssigned,count(TicketNumber) as ''Count'' from  vSD_Tickets  with (NOLOCK)
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  and assigneeParticipantFK is null
	union
    select ''Assigned'' Assigned,count(TicketNumber) as ''Count'' from  vSD_Tickets  with (NOLOCK)
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  and assigneeParticipantFK is not null
END     
 if(@Option=''TicketStatusDetail'')  
 BEGIN
 if(@Status=''UnAssigned'')
 begin
 select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
   and assigneeParticipantFK is null    
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end
 else if(@Status=''Assigned'')
 begin
  select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
   and assigneeParticipantFK is not null    
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end
 else
 begin
  select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId and Status=@Status   
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end  
  END
 END 

'
GO

--
-- Create or alter procedure [dbo].[SD_spDashboardCount]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDashboardCount]')
GO
IF OBJECT_ID(N'dbo.SD_spDashboardCount', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spDashboardCount
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@Desk nvarchar(100)= NULL,
	@IsActive bit =NULL,
	@TechLoginName nvarchar(100)=NULL,
	@Location nvarchar(100)=NULL,
		@OrgId nvarchar(100)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AllTicketStatus'')
	
	BEGIN

SELECT 
sum(case when (Status =''open'' or stage = ''open'') then 1 else 0 end) AS [Open],
sum(case when (Status =''wip'' or stage = ''wip'') then 1 else 0 end) AS WIP,
sum(case when (Status =''Hold'' or stage = ''Hold'') then 1 else 0 end) AS Hold,
sum(case when (TechLoginName is Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null))
then 1 else 0 end) AS AssignedOther,
sum(case when (TechLoginName is not Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null)
) then 1 else 0 end) AS Assigned,
sum(case when (DATEDIFF(MINUTE,DueDate,GETDATE())<5 and ( Status !=''Closed'' and Status!=''Resolved'')
or  DATEDIFF(MINUTE,DueDate,GETDATE())>0 and ( Status !=''Closed'' and Status!=''Resolved'')) then 1 else 0 end) AS OverDue
from vSD_Tickets where  ServiceDesk=@Desk and OrgId=@OrgId

	END
	if(@Option=''AllTicketStatusTech'')
	

	BEGIN
	SELECT 
sum(case when (Status =''open'' or stage = ''open'') then 1 else 0 end) AS [Open],
sum(case when (Status =''wip'' or stage = ''wip'') then 1 else 0 end) AS WIP,
sum(case when (Status =''Hold'' or stage = ''Hold'') then 1 else 0 end) AS Hold,
sum(case when (TechLoginName is Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null)) then 1 else 0 end) AS AssignedOther,
sum(case when (TechLoginName is not Null) and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) then 1 else 0 end) AS Assigned,
sum(case when (DATEDIFF(MINUTE,DueDate,GETDATE())<5 and ( Status !=''Closed'' and Status!=''Resolved'')
or  DATEDIFF(MINUTE,DueDate,GETDATE())>0 and ( Status !=''Closed'' and Status!=''Resolved'')) then 1 else 0 end) AS OverDue
from vSD_Tickets where  ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName=@TechLoginName

	END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_ServiceDeskCallAgingDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ServiceDeskCallAgingDashboard]')
GO
IF OBJECT_ID(N'dbo.SD_ServiceDeskCallAgingDashboard', 'P') IS NULL
EXEC sp_executesql N' CREATE OR ALTER procedure dbo.SD_ServiceDeskCallAgingDashboard  
  (          
     @Assignee varchar(50)=null,  
     @Aging varchar(50)=null,  
     @ServiceDesk varchar(50)=null,  
     @FROM varchar(50)=null,  
     @TO varchar(50)=null,  
     @OrgId numeric(18,0)=null,  
     @Option varchar(50)   
  )  
  AS  
  BEGIN  
    if(@Option=''Age'')  
    BEGIN  
      
  SELECT TechLoginName ''Assignee'',[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM   
  (   
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,TechLoginName FROM   
  (  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (SELECT  v.TicketNumber,v.TechLoginName,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age  
    FROM vSD_Tickets AS v  with(nolock)  
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId and ServiceDesk=@ServiceDesk 
	 and CreationDate between  @FROM and  @TO   and TechLoginName is not null
     ) SourceTable  
    )PVT GROUP BY Aging,TechLoginName  
     )PVTT  
     PIVOT  
     (  
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])  
     )FINAL  
  
    END  
  
    if(@Option=''AgeDetails'')  
    BEGIN  
  
  SELECT * FROM(  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName ''Assignee'',v.CreationDate ''Created date'',DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age  
    FROM vSD_Tickets AS v  with(nolock)
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId and ServiceDesk=@ServiceDesk and CreationDate 
	 between  @FROM and  @TO   and TechLoginName is not null
     )   
     SourceTable  
     )SourceTable1 WHERE  Aging=@Aging AND Assignee=@Assignee  
  
    END  
  END  



'
GO

--
-- Create or alter procedure [dbo].[SD_ServiceDeskAssigneeCallDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ServiceDeskAssigneeCallDashboard]')
GO
IF OBJECT_ID(N'dbo.SD_ServiceDeskAssigneeCallDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.SD_ServiceDeskAssigneeCallDashboard        
  (                
    @Assignee varchar(50)=null,        
    @Aging varchar(50)=null,        
    @Status varchar(50)=null,        
     @ServiceDesk varchar(50)=null,        
     @FROM varchar(50)=null,        
     @TO varchar(50)=null,        
     @OrgId numeric(18,0)=null,        
     @Option varchar(50)         
        
        
--NULL        
--Hold        
--Resolved        
--Closed        
--Open        
--WIP        
  )        
  AS        
  BEGIN        
        
        if(@Option=''NotOpenClosedPie'')        
     BEGIN        
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status        
       from dbo.vSD_Tickets with(nolock)    
    where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO and   
    (Status!=''Closed'' and Status!=''Resolved'')        
      group by  Status        
    END        
        
     if(@Option=''TicketDetails'')        
     BEGIN        
     SELECT  v.TicketNumber ''Ticket Number'',max(v.Summary) Summary,max(v.TechLoginName) TechLoginName,max(v.CreationDate) ''CreationDate date'',      
   max(DATEDIFF(MINUTE, v.CreationDate,  GETDATE())) AS Age        
  FROM dbo.vSD_Tickets AS v  WITH(NOLOCK)      
    where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CAST(CreationDate AS DATE) between  @FROM and  @TO and v.Status=@Status          
        and  (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')       
  group by v.TicketNumber      
    END        
        
    if(@Option=''OpenClosedPie'')        
     BEGIN        
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status        
       from dbo.vSD_Tickets WITH(NOLOCK)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO       
    and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')        
      group by  Status        
        
    END        
     if(@Option=''NotOpenClosed'')        
     BEGIN        
      SELECT TechLoginName ''Assignee'',           
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved]         
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)) as Total        
      FROM          
      (select TechLoginName, Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status        
       from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO       
    and TechLoginName is not null      
      group by  TechLoginName, Status) AS SourceTable          
      PIVOT          
      (          
      MAX([Ticket Count])          
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved] )          
      ) AS PivotTable;          
        
    END        
     if(@Option=''OpenClosed'')        
     BEGIN        
   --       SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]        
        
   --      ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]         
                  
   --    FROM          
   --     (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status        
   --      from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO        
   --      UNION        
   --      select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status        
   --      from dbo.vSD_Tickets with(nolock) where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO and Status!=''Closed'' and Status!=''Resolved''         
   --      UNION        
   --      select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status        
   --      from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable          
   --PIVOT          
   --    (          
   --    MAX([Ticket Count])          
   --    FOR status IN ([Total], [Open],[Closed])          
   --    ) AS PivotTable;        

   SELECT  
    SUM(ISNULL([Total], 0)) AS [Total], 
    SUM(ISNULL([Open], 0)) AS [Open], 
    SUM(ISNULL([Closed], 0)) AS [Closed],
    CASE 
        WHEN SUM(ISNULL([Total], 0)) = 0 THEN 0 -- Handle division by zero
        ELSE (SUM(ISNULL([Closed], 0)) * 100 / SUM(ISNULL([Total], 0))) 
    END AS [Closed Percent]
FROM  
    (
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Total'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK)  
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO
        UNION        
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Open'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK) 
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO 
            AND Status NOT IN (''Closed'', ''Resolved'')         
        UNION        
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Closed'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK)  
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO 
            AND Status IN (''Closed'', ''Resolved'') 
    ) AS SourceTable          
PIVOT          
    (
        MAX([Ticket Count])          
        FOR Status IN ([Total], [Open], [Closed])          
    ) AS PivotTable;

        
        
    END        
        
            
  END   
  
  
  
  
  '
GO

--
-- Create or alter procedure [dbo].[sd_SDDepartmentCallDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[sd_SDDepartmentCallDashboard]')
GO
IF OBJECT_ID(N'dbo.sd_SDDepartmentCallDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.sd_SDDepartmentCallDashboard    
  (            
    @Assignee varchar(50)=null,    
    @Aging varchar(50)=null,    
     @ServiceDesk varchar(50)=null,    
     @FROM varchar(50)=null,    
     @OrgId numeric(18,0)=null,    
     @TO varchar(50)=null,    
     @Status varchar(50)=null,    
     @Option varchar(50)     
    
    
--NULL    
--Hold    
--Resolved    
--Closed    
--Open    
--WIP    
  )    
  AS    
  BEGIN    
    
        if(@Option=''NotOpenClosedPie'')    
     BEGIN    
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status    
       from vSD_Tickets      
       where Status is not null and ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO --and Status!=''Closed'' and Status!=''Resolved''    
      group by  Status    
    
    END    
     if(@Option=''TicketDetails'')    
     BEGIN    
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',    
     v.ClosedDate from     
     vSD_Tickets v     
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and Status=@Status --order by  v.TicketNumber asc    
          
    END    
    if(@Option=''OpenClosedPie'')    
     BEGIN    
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status    
       from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')    
      group by  Status    
    
    END    
     if(@Option=''NotOpenClosed'')    
     BEGIN    
    SELECT Department,       
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved] ,ISNULL([Under Process],0) as [Under Process]    
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)+ ISNULL([Under Process],0)) as Total    
      FROM      
      (select Department as ''Department'',count(TicketNumber) as [Ticket Count],Status    
      from    
      vSD_Tickets b  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO    
      group by  Department, Status) AS SourceTable      
      PIVOT      
      (      
      MAX([Ticket Count])      
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved],[Under Process])      
      ) AS PivotTable;      
    
    END    
     if(@Option=''OpenClosed'')    
     BEGIN    
          SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]    
    
         ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]     
              
       FROM      
        (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO    
         UNION    
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and Status!=''Closed'' and Status!=''Resolved''     
         UNION    
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk  and OrgId=@OrgId and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable      
       PIVOT      
       (      
       MAX([Ticket Count])      
       FOR status IN ([Total], [Open],[Closed])      
       ) AS PivotTable;    
    
    
    END    
    
        
  END '
GO

--
-- Create or alter procedure [dbo].[sd_SDDepartmentCallAgingDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[sd_SDDepartmentCallAgingDashboard]')
GO
IF OBJECT_ID(N'dbo.sd_SDDepartmentCallAgingDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.sd_SDDepartmentCallAgingDashboard  
  (          
     @Assignee varchar(50)=null,  
     @Aging varchar(50)=null,  
     @ServiceDesk varchar(50)=null,  
     @FROM varchar(50)=null,  
     @OrgId numeric(18,0)=null,  
     @TO varchar(50)=null,  
     @Option varchar(50)   
  )  
  AS  
  BEGIN  
    if(@Option=''Age'')  
    BEGIN  
      
  SELECT Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM   
  (   
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM   
  (  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a  
right join   
dbo.vSD_Tickets v on    
a.TicketNo=v.TicketNumber     
and  
a.OrgId=v.OrgId  
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved'' and ServiceDesk=@ServiceDesk and a.OrgId=@OrgId and CreationDate between  @FROM and  @TO) SourceTable  
    )PVT GROUP BY Aging,Department  
     )PVTT  
     PIVOT  
     (  
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])  
     )FINAL  
  
    END  
  
    if(@Option=''AgeDetails'')  
    BEGIN  
  
  SELECT distinct * FROM(  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (select Department as ''Department'',TicketNumber,v.Summary  
  ,v.CreationDate ''Created date'',DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age   
  from SD_CustomFieldTicketValues a  
right join   
dbo.vSD_Tickets v on    
a.TicketNo=v.TicketNumber    
and  
a.OrgId=v.OrgId  
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved''   
     and ServiceDesk=@ServiceDesk and v.OrgId=@OrgId and CreationDate between  @FROM and  @TO   
     )   
     SourceTable  
     )SourceTable1 WHERE  Aging=@Aging AND Department=@Assignee  
  
    END  
  END  '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMain]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMain]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMain', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMain  
(  
@FCategory varchar(50)=NULL,  
@TicketStatus varchar(50)=NULL,  
@OrgId numeric(18,0)=null,  
@Scope varchar(50)=NULL,  
@Option varchar(50)  
)  
AS  
BEGIN  
  
 if(@Option=''DashboardsCounts'')  
 BEGIN  
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (  
  select count(*) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select 0 ''SevenDaysTotal'',count(*) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(*) as TodayTotal,0 ''Total'' from vSD_Tickets WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(*) as Total  from vSD_Tickets  where ServiceDesk=''Incident'' and OrgId=@OrgId  
  ) AS Final    
 END  
  
 if(@Option=''SevenDaysTickets'')  
 BEGIN    
   select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
    
   
   
 WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''   
 END  
  
 if(@Option=''ThirtyDaysTickets'')  
 BEGIN   
     select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
  
       from vSD_Tickets a    
  
     
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''   
 END  
  
 if(@Option=''TodayTickets'')  
 BEGIN  
    
   select  distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   
  
 WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId  
   
    
 END  
 if(@Option=''TotalTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets  where ServiceDesk=''Incident'' and Status is not null  group by Status   
    
 END  
 if(@Option=''TodayTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and OrgId=@OrgId and ServiceDesk=''Incident'' group by Status   
    
 END  
 if(@Option=''TodayTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   
   
WHERE  (a.ServiceDesk = ''Incident'')   
     AND CreationDate >= DATEADD(DAY, 0, CAST(CAST(GETDATE() as Date)as datetime))  and OrgId=@OrgId 
 and a.Status= @TicketStatus   
    
 END  
 if(@Option=''Last7DaysTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
  
   
   
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  
 and ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus  
   
    
 END  
  
 if(@Option=''Last30DaysTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a  
    
  
 WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())  
 and ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus   
  
    
 END  
  
 if(@Option=''OverAllTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   WHERE  
  ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus   
    
 END  
 if(@Option=''OverAllTickets'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   WHERE  
  ServiceDesk=''Incident''  and OrgId=@OrgId  
   
    
 END  
  
 if(@Option=''Last7DaysTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status  
    from vSD_Tickets a    
WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and ServiceDesk=''Incident'' and OrgId=@OrgId   group by a.Status   
    
 END  
  
  
 if(@Option=''Last30DaysTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and ServiceDesk=''Incident'' and OrgId=@OrgId  group by Status   
    
 END  
  
 if(@Option=''ResponseSLAPie'')  
 BEGIN  
    
   SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets  
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''responsesla'' and Desk=''Incident''   
   group by CustomFieldValue    
    
 END  
 if(@Option=''ResolutionSLAPie'')  
 BEGIN  
    
   SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets  
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''resolutionsla'' and Desk=''Incident''  and Status=''Closed''  
   group by CustomFieldValue    
    
 END  
 if(@Option=''SeverityWisePie'')  
 BEGIN  
   
    
   select  Severity ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets  
   where ServiceDesk=''Incident''    
   group by Severity   
 END  
 if(@Option=''SeverityWiseResolvedPie'')  
 BEGIN  
   select  Severity ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets  
   where ServiceDesk=''Incident''  and Status=''Closed''  
   group by Severity   
 END  
  if(@Option=''SeverityWiseResponse'')  
 BEGIN  
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
   select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s  
   join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber  
   where  
   s.ServiceDesk=''Incident''  and dd.CustomFieldName=''responsesla''  
   group by s.Severity,CustomFieldValue   
  ) AS A   order by Severity asc  
    
  END  
  
  if(@Option=''SeverityWiseResolution'')  
 BEGIN  
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
   select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s  
   join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber  
   where  
   s.ServiceDesk=''Incident''  and dd.CustomFieldName=''resolutionsla'' and s.Status=''Closed''  
   group by s.Severity,CustomFieldValue   
  ) AS A   order by Severity asc  
    
  END  
 if(@Option=''SeverityWisePieeeee'')  
 BEGIN  
   
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
  select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''  
      group by s.Severity,d.CustomFieldValue  
  
      union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''  
      group by s.Severity,d.CustomFieldValue  
     union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''  
      group by s.Severity,d.CustomFieldValue  
      ) AS A  
      
      
    
 END  
 if(@Option=''SeverityWiseResolutionPie'')  
 BEGIN  
   
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
  select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''  
      group by s.Severity,d.CustomFieldValue  
       union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity2''  
      group by s.Severity,d.CustomFieldValue  
      union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''  
      group by s.Severity,d.CustomFieldValue  
     union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''  
      group by s.Severity,d.CustomFieldValue  
      ) AS A  
      
      
    
 END  
  
 if(@Option=''FirstCategoryWiseTickets'')  
  
 BEGIN  
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets where ServiceDesk=''Incident'' and OrgId=@OrgId AND  category like ''%''+@FCategory+''%''  
  
 END  
  
END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardDayWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardDayWise]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardDayWise', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardDayWise    
(    
  @ServiceDesk  varchar(50)=null,    
  @FROM varchar(50)=null,    
  @TO varchar(50)=null,    
  @FCategory varchar(50)=NULL,    
  @Scope varchar(50)=NULL,    
  @TicketStatus varchar(50)=NULL,    
   @OrgId numeric(18,0)=NULL,    
  @Days  int=null,    
  @TechLoginName nvarchar(100)=NULL,    
  @Option varchar(50)    
)    
AS    
BEGIN    
    
 if(@Option=''DashboardsCounts'')    
 BEGIN    
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (    
  select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
      
  WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident'' and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
      
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total''     
  from vSD_Tickets  a     
      
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total     
  from vSD_Tickets  a   
      
  where ServiceDesk=''Incident'' and OrgId=@OrgId    
  ) AS Final      
 END    
    
 if(@Option=''SevenDaysTickets'')    
 BEGIN      
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
 from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''    
 END --7 Days Tickets Report    
    
 if(@Option=''ThirtyDaysTickets'')    
 BEGIN     
     select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
       
      ,CreationDate    
      ,ClosedDate    
   from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime)) and ServiceDesk=''Incident''     
   and OrgId=@OrgId    
 END --30 Days Tickets Report    
    
 if(@Option=''TodayTickets'')    
 BEGIN    
      
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  a      
      
     
 WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
      
 END --Today Tickets Report    
    
 if(@Option=''TotalTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
             FROM  vSD_Tickets AS a     
     WHERE  (a.ServiceDesk = ''Incident'') and OrgId=@OrgId and a.Status is not null    
  group by a.Status      
      
 END    
    
 if(@Option=''TodayTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
               ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets WHERE  cast(CreationDate as Date)= cast(getdate() as Date)     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END --Today Tickets Report    
    
 if(@Option=''Last7DaysTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''Last30DaysTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''OverAllTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
          
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE    
  ServiceDesk=''Incident'' and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''TicketsDayWisePie'')    
 BEGIN     
         SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status    
     FROM  vSD_Tickets AS a     
         
     WHERE  (a.ServiceDesk = ''Incident'') and Status is not null   
    and OrgId=@OrgId AND CreationDate >= DATEADD(DAY, @Days, CAST(CAST(GETDATE() as Date)as datetime))    
            GROUP BY a.Status      
 END    
    
 if(@Option=''FirstCategoryWiseTickets'')    
    
 BEGIN    
    
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''    
    
 END    
    
END    '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboard_CategoryWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboard_CategoryWise]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboard_CategoryWise', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboard_CategoryWise      
(      
@FROM varchar(50)=null,      
@TO varchar(50)=null,      
@ServiceDesk varchar(50)=null,      
@Assignee varchar(100)=null,      
@Category  varchar(100)=null,      
@Status varchar(100)=null,      
@Scope varchar(100)=null,      
@OrgId numeric(18,0)=null,      
@Option varchar(50)      
)      
      
AS      
      
BEGIN      
      
      
      
      
     if(@Option=''MultiStatus'')      
    BEGIN      
          
  SELECT ISNULL(Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets       
   WHERE CAST(CreationDate as date)  between @FROM and @TO and ServiceDesk =@ServiceDesk and Orgid=@OrgId and Category like ''%'' + @Category + ''%'' and [Status]=@Status      
     group by  Status      
      
            
    END      
      
      
  if(@Option=''StatusWiseChart'')      
  BEGIN      
  if(@Category=''Total Tickets'')      
  BEGIN      
  SELECT ISNULL(a.Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets      
  a       
              
             
            
         WHERE OrgId=@OrgId and CAST(CreationDate as date) between   @FROM and @TO and ServiceDesk =@ServiceDesk      
   group by  a.Status      
  END      
      
     ELSE      
   BEGIN      
   SELECT ISNULL(a.Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets      
   a       
              
    WHERE OrgId=@OrgId and CAST(CreationDate as date) between   @FROM and @TO  and  ServiceDesk =@ServiceDesk       
    and Category like ''%'' + @Category + ''%''      
         
   group by  a.Status      
      
    END      
  END      
      
  if(@Option=''StatusWiseChartDetails'')      
  BEGIN      
   if(@Category=''Total Tickets'')      
   BEGIN      
    SELECT TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'',       
        SubmitterEmail AS ''Submitter Email'', TechLoginName, CAST(CreationDate as date),ClosedDate      
      FROM vSD_Tickets       
       a       
            
      WHERE OrgId=@OrgId and  CAST(CreationDate as date) between   @FROM and @TO and ServiceDesk = @ServiceDesk and a.Status =@Status       
           
   END      
      
   ELSE      
      
   BEGIN      
    SELECT TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'',       
       SubmitterEmail AS ''Submitter Email'', TechLoginName, CAST(CreationDate as date),ClosedDate      
     FROM  vSD_Tickets a       
             
                 WHERE CAST(CreationDate as date) between   @FROM and @TO and OrgId=@OrgId and      
     ServiceDesk = @ServiceDesk and a.Status =@Status       
     and Category like ''%'' + @Category + ''%''       
   END      
  END      
      
  if(@Option=''CategoryWiseBar'')      
  BEGIN      
  SELECT Category2,count(Category2) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets      
    a       
             
      
    WHERE        
     CAST(CreationDate as date) between   @FROM and @TO  and OrgId=@OrgId      
    and ServiceDesk=@ServiceDesk--and Category like ''%NOC%''      
          
    ) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT   
 where [Category2] is not null  
 GROUP BY Category2      
          
    ORDER BY Category2 ASC      
                  END      
  if(@Option=''AllCategoryBar'')      
  BEGIN      
    SELECT Category1,count(Category1) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets WHERE CAST(CreationDate as date) between        
    @FROM and @TO and ServiceDesk=@ServiceDesk  and OrgId=@OrgId) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT GROUP BY Category1      
    UNION      
    select ''Total Tickets'' ''Category1'',SUM(TotalCounts)TotalCounts from       
    (      
    SELECT Category1,count(Category1) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets WHERE CAST(CreationDate as date) between @FROM and @TO and OrgId=@OrgId      
    and ServiceDesk=@ServiceDesk ) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT GROUP BY Category1      
    )b      
      
    ORDER BY Category1 ASC      
  END      
      
  if(@Option=''CategoryWiseTicketsDetails'')      
  BEGIN      
      
  if(@Category=''Total Tickets'')      
  BEGIN      
            SELECT  TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'', SubmitterEmail AS ''Submitter Email'',       
                         TechLoginName, CAST(CreationDate as date), ClosedDate      
    FROM   vSD_Tickets      
     a       
             
        WHERE  (CAST(CreationDate as date) BETWEEN @FROM AND @TO) AND (ServiceDesk = @ServiceDesk)  and OrgId=@OrgId      
          
    ORDER BY Category      
      
    END      
      
    else      
    BEGIN      
      SELECT  TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'', SubmitterEmail AS ''Submitter Email'',       
                         TechLoginName, CAST(CreationDate as date), ClosedDate      
    FROM   vSD_Tickets      
     a       
            
        WHERE  (CAST(CreationDate as date) BETWEEN @FROM AND @TO) AND (ServiceDesk = @ServiceDesk) and OrgId=@OrgId  AND (Category LIKE ''%'' + @Category + ''%'')      
    ORDER BY Category      
      
    END      
      
          
  END      
      
      
END '
GO

--
-- Create or alter view [dbo].[SD_vResolutionSLA_Imspl]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vResolutionSLA_Imspl]')
GO
IF OBJECT_ID(N'dbo.SD_vResolutionSLA_Imspl', 'V') IS NULL
EXEC sp_executesql N'
  CREATE OR ALTER view dbo.SD_vResolutionSLA_Imspl
  as
  (

 --select TicketNumber,dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as TotalTime,
 -- CASE 
 -- WHEN Cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as int)-
 --cast( dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,a.OrgId) as int)
  
 select  TicketNumber ,DATEDIFF(MINUTE,CreationDate,ResolutionDt) as TotalTime,
 case 
 when  cast(DATEDIFF(MINUTE,CreationDate,ResolutionDt) as int)
  <=a.ResolutionTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResolutionSLA,
  a.ResolutionTime  as DefinedResolutionTime,a.OrgId  from vSD_Tickets a
  inner join 
  vSDOrgDeskDef b 
  on a.ServiceDesk=b.Deskref
  and a.OrgId=b.OrgFk
  left join SD_vGetTotalHoldDuration dd
  on a.TicketNumber=dd.TicketNo and a.OrgId=dd.OrgId
  where (a.Status=''Resolved'' or a.Status=''Closed'') and a.OrgId=''680624893''

  )
'
GO

--
-- Create or alter view [dbo].[SD_vResolutionSLA]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vResolutionSLA]')
GO
IF OBJECT_ID(N'dbo.SD_vResolutionSLA', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vResolutionSLA
  as
  (

  select TicketNumber,dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as TotalTime,
  CASE 
  WHEN Cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as int)-
 cast( dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,a.OrgId) as int)
  
  
  <=a.ResolutionTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResolutionSLA,
  a.ResolutionTime  as DefinedResolutionTime,a.OrgId  from vSD_Tickets a WITH(NOLOCK)
  inner join 
  vSDOrgDeskDef b  WITH(NOLOCK)
  on a.ServiceDesk=b.Deskref
  and a.OrgId=b.OrgFk
  left join SD_vGetTotalHoldDuration dd WITH(NOLOCK)
  on a.TicketNumber=dd.TicketNo and a.OrgId=dd.OrgId
  )
'
GO

--
-- Create or alter view [dbo].[SD_ResponseSLA]
--
GO
PRINT (N'Create or alter view [dbo].[SD_ResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_ResponseSLA', 'V') IS NULL
EXEC sp_executesql N'
  CREATE OR ALTER view dbo.SD_ResponseSLA
  as
  (
  select TicketNumber,DATEDIFF(MINUTE,CreationDate,FieldValue) as TotalTime,
  CASE 
  WHEN DATEDIFF(MINUTE,CreationDate,FieldValue)<=ResponseTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResponseSLA,
  FieldValue  as DefinedResponseTime ,c.OrgId from vSD_Tickets c WITH(NOLOCK)
  join SD_CustomFieldTicketValues h WITH(NOLOCK) on h.TicketNo=c.TicketNumber and c.OrgId=h.OrgId
  where FieldName=''WIPStart''
  )
'
GO

--
-- Create or alter procedure [dbo].[SP_LiveDashboardFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_LiveDashboardFilter]')
GO
IF OBJECT_ID(N'dbo.SP_LiveDashboardFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_LiveDashboardFilter    
(    
@TicketStatus VARCHAR(100) = NULL,    
@OrgID  VARCHAR(100) = NULL,    
@Option  VARCHAR(100) = NULL    
)    
AS    
BEGIN    
if(@Option=''ResponseSLAPieDetails'')      
 BEGIN      
  select max(ResponseSLA) ResponseSLA,  a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status )     Status     
      ,max(Severity  )  Severity  
      ,max(a.Category )   Category  
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) from SD_ResponseSLA b  WITH(NOLOCK)
inner join vSD_Tickets a WITH(NOLOCK)            
 on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId
 where  ResponseSLA=''Missed''
and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and a.OrgId=@OrgID    
 group by a.TicketNumber

 END     
 --------------------------------------------------------------------------------------------------    
 if(@Option=''SeverityWisePieDetails'')      
 BEGIN      
 select TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
      ,max(Severity  )  Severity  
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate 
    from vSD_Tickets WITH(NOLOCK) WHERE  CreationDate >= DATEADD(DAY, -30, GETDATE())  
and Severity= @TicketStatus  and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and OrgId=@OrgID    
 group by TicketNumber
 END      
 --------------------------------------------------------------------------------------------------    
 if(@Option=''ResolutionSLAPieDetails'')      
 BEGIN      
        
   select max(ResolutionSLA) ResolutionSLA,  a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status ) Status         
      ,max(Severity  )  Severity  
      ,max(a.Category )   Category  
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName )  TechLoginName
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) from vSD_Tickets a WITH(NOLOCK)      
  inner join SD_vResolutionSLA b  WITH(NOLOCK)    
  on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId   where     
   (a.Status=''Closed'' OR  a.Status=''Resolved'') and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and a.OrgId=@OrgID   
   group by a.TicketNumber
 END      
 --------------------------------------------------------------------------------------------------    
 if(@Option=''SeverityWiseResponseDetails'')      
 BEGIN      
select  * from ( 
select max(ResponseSLA) ResponseSLA, 
a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status )  Status
	  ,max((Severity +'' (''+ResponseSLA+'')'') ) as SeverityWithStatus 
      ,max(a.Category )    Category 
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName ) TechLoginName 
      ,max(CreationDate )CreationDate     
      ,max(ClosedDate) ClosedDate from vSD_Tickets a WITH(NOLOCK)     
inner join SD_ResponseSLA dd  WITH(NOLOCK)    
 on a.TicketNumber=dd.TicketNumber and a.OrgId=dd.OrgId            
   where CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and  a.OrgId=@OrgID
   group by a.TicketNumber
  ) tab      
  where SeverityWithStatus=@TicketStatus      
  END      
  --------------------------------------------------------------------------------------------------    
  if(@Option=''SeverityWiseResolvedPieDetails'')      
 BEGIN      
   select   TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
      ,max(Severity  )  Severity  
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate     
    from vSD_Tickets WITH(NOLOCK) WHERE  Severity= @TicketStatus  and (Status=''Closed'' OR  Status=''Resolved'') 
and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and OrgId=@OrgID    
group by TicketNumber
 END    
 --------------------------------------------------------------------------------------------------    
  if(@Option=''SeverityWiseResolutionDetails'')      
   BEGIN      
  select * from ( 
  select max(ResolutionSLA) ResolutionSLA, 
  a.TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
       ,max((Severity +'' (''+ResolutionSLA+'')'')) as SeverityWithStatus   
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate
	  from vSD_Tickets a   WITH(NOLOCK)   
inner join SD_vResolutionSLA dd   WITH(NOLOCK)   
 on a.TicketNumber=dd.TicketNumber  and a.OrgId=dd.OrgId       
 where CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) AND a.OrgId=@OrgID 
 group by a.TicketNumber
  ) tab      
  where  SeverityWithStatus=@TicketStatus      
   END      
END '
GO

--
-- Create or alter procedure [dbo].[SP_LiveDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_LiveDashboard]')
GO
IF OBJECT_ID(N'dbo.SP_LiveDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER   PROC dbo.SP_LiveDashboard        
(        
@OrgId varchar(50) = null,        
@Aging varchar(100) = null,        
@Assignee varchar(100) = null,        
@Status varchar(100) = null,        
@Department varchar(100) = null,       
@Option varchar(100) = null        
)        
AS        
BEGIN        
if(@Option=''Totcount'')        
BEGIN        
SELECT count(Distinct TicketNumber) as Total           
  from vSD_Tickets  a           
  where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and OrgId=@OrgId          
END        
 if(@Option=''ResponseSLAPie'')          
 BEGIN          
            
   SELECT ResponseSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets          
           from  SD_ResponseSLA a          
   inner join           
   vSD_Tickets b           
   on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId
   where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
   and a.OrgId=@OrgId          
   group by ResponseSLA   
 END          
 -------------------------------------------------------------------------------        
 if(@Option=''ResolutionSLAPie'')          
 BEGIN          
            
  SELECT ResolutionSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets          
           from  SD_vResolutionSLA a          
   inner join           
   vSD_Tickets b           
   on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId          
   where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status=''Closed'' and Status=''Resolved'')  and a.OrgId  =@OrgId        
   group by ResolutionSLA           
            
 END          
 -------------------------------------------------------------------------------        
  if(@Option=''SeverityWiseResponse'')          
 BEGIN          
          
 select (Severity +'' (''+ResponseSLA+'')'') as Severity, TotalTickets from           
 (          
   select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,ResponseSLA from vSD_Tickets a          
           INNER JOIN SD_ResponseSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
             
     where (Severity +'' (''+ResponseSLA+'')'') is not null and a.OrgId=@OrgId  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)          
   group by a.Severity,ResponseSLA          
  ) AS A   order by Severity asc          
  END         
        
   if(@Option=''SeverityWiseResolution'')          
   BEGIN          
   select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from           
     (          
    select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA           
     from vSD_Tickets a          
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
              
     where a.OrgId=@OrgId          
     AND (a.Status=''Closed'' OR a.Status=''Resolved'')           
                 
     AND  CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)           
     group by a.Severity,d.ResolutionSLA          
  ) AS A            
    UNION          
   select  ''Total'' as ''Severity'' ,COUNT(a.TicketNumber) as TotalTickets from vSD_Tickets a          
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
              
     where  a.OrgId=@OrgId   and (Status=''Closed'' OR  Status=''Resolved'')          
              
     AND  CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   order by Severity asc          
   END          
        
   -------------------------------------------------------------------------------        
 if(@Option=''SeverityWisePie'')          
 BEGIN          
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a    
   where Severity is not null and OrgId=@OrgId   AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   group by Severity           
 END         
        
if(@Option=''SeverityWiseResolvedPie'')          
 BEGIN          
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a          
                 
     where Severity is not null and OrgId=@OrgId   and (Status=''Closed'' OR  Status=''Resolved'')  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   group by Severity           
   UNION          
   select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets a          
     where Severity is not null and OrgId=@OrgId  and (Status=''Closed'' OR  Status=''Resolved'')  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
 END          
        
 -------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosedPie'')          
     BEGIN          
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where  OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status!=''Closed'' and Status!=''Resolved'')          
      group by  Status          
    END          
 -------------------------------------------------------------------------------------        
if(@Option=''OpenClosedPie'')          
     BEGIN          
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where  OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')          
      group by  Status          
    END          
 -------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosed'')          
     BEGIN          
      SELECT TechLoginName ''Assignee'',             
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved]           
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)) as Total          
      FROM            
      (select TechLoginName, Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
      group by  TechLoginName, Status) AS SourceTable            
      PIVOT            
      (            
      MAX([Ticket Count])            
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved] )            
      ) AS PivotTable;            
          
    END         
 -------------------------------------------------------------------------------------         
 if(@Option=''Age'')          
    BEGIN          
              
  SELECT TechLoginName ''Assignee'',[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,TechLoginName FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (SELECT  v.TicketNumber,v.TechLoginName,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age          
    FROM vSD_Tickets AS v            
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
     ) SourceTable          
    )PVT GROUP BY Aging,TechLoginName          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
    END          
-------------------------------------------------------------------------------------         
 IF (@Option = ''OpenClosed'')        
BEGIN        
    SELECT         
        SUM(ISNULL([Total], 0)) AS [Total],        
        SUM(ISNULL([Open], 0)) AS [Open],        
        SUM(ISNULL([Closed], 0)) AS [Closed],        
        CASE         
            WHEN SUM(ISNULL([Total], 0)) > 0         
            THEN (SUM(ISNULL([Closed], 0)) * 100.0 / SUM(ISNULL([Total], 0)))        
            ELSE 0        
        END AS [Closed Percent]        
    FROM         
    (        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Total'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
        
        UNION          
        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Open'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
        AND Status != ''Closed''         
        AND Status != ''Resolved''        
        
        UNION          
        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Closed'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
        AND (Status = ''Closed'' OR Status = ''Resolved'')        
    ) AS SourceTable        
        
    PIVOT         
    (        
        MAX([Ticket Count])         
        FOR Status IN ([Total], [Open], [Closed])        
    ) AS PivotTable;        
END        
        
        
-------------------------------------------------------------------------------------        
if(@Option=''AgeDetails'')          
    BEGIN          
          
  SELECT * FROM(          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName ''Assignee'',v.CreationDate ''Created date'',        
  DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age          
    FROM vSD_Tickets AS v            
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
     )           
     SourceTable          
     )SourceTable1 WHERE  Aging=@Aging AND Assignee=@Assignee          
          
    END          
-------------------------------------------------------------------------------------        
 if(@Option=''TicketDetails'')          
     BEGIN          
     SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName,v.CreationDate ''CreationDate date'',        
  DATEDIFF(MINUTE, v.CreationDate, GETDATE()) AS Age          
    FROM dbo.vSD_Tickets AS v             
    where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)  and v.Status=@Status            
    END        
-------------------------------------------------------------------------------------        
  if(@Option=''TicketDetailsDept'')          
     BEGIN          
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',          
     v.ClosedDate from           
     vSD_Tickets v           
     where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status=@Status         
    END         
-------------------------------------------------------------------------------------        
if(@Option=''NotOpenClosedDept'')          
     BEGIN          
    SELECT Department,             
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved] ,ISNULL([Under Process],0) as [Under Process]          
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)+ ISNULL([Under Process],0)) as Total          
      FROM            
      (select Department as ''Department'',count(TicketNumber) as [Ticket Count],Status          
      from          
      vSD_Tickets b  where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
      group by  Department, Status) AS SourceTable            
      PIVOT            
      (            
      MAX([Ticket Count])            
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved],[Under Process])            
      ) AS PivotTable;            
     
    END          
-------------------------------------------------------------------------------------        
  if(@Option=''Age'')          
    BEGIN          
              
  SELECT Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a          
right join           
dbo.vSD_Tickets v on            
a.TicketNo=v.TicketNumber             
and          
a.OrgId=v.OrgId          
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved'' and a.OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)) SourceTable          
    )PVT GROUP BY Aging,Department          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
          
    END         
-------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosedPieDept'')          
     BEGIN          
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from vSD_Tickets            
       where  OrgId=@OrgId and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status != ''Closed'' and Status!=''Resolved''          
      group by  Status          
          
    END          
-------------------------------------------------------------------------------------        
 if(@Option=''OpenClosedDept'')          
     BEGIN          
          SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]         
         ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]           
                    
       FROM            
        (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status          
         from vSD_Tickets where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
         UNION          
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status          
         from vSD_Tickets where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status!=''Closed'' and Status!=''Resolved''           
         UNION          
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status          
         from vSD_Tickets where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable            
       PIVOT            
       (            
       MAX([Ticket Count])            
       FOR status IN ([Total], [Open],[Closed])            
       ) AS PivotTable;          
    END          
-------------------------------------------------------------------------------------        
if(@Option=''OpenClosedPieDept'')          
     BEGIN          
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from vSD_Tickets  where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
    and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')          
      group by  Status          
          
    END          
-------------------------------------------------------------------------------------        
if(@Option=''AgeDept'')          
    BEGIN          
              
  SELECT distinct Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a          
right join           
dbo.vSD_Tickets v on            
a.TicketNo=v.TicketNumber             
and          
a.OrgId=v.OrgId          
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved''         
and a.OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)  
  ) SourceTable          
    )PVT GROUP BY Aging,Department          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
          
    END        
      
 -----------------------------------------------------------------------------------      
 if(@Option=''AgeDetailsDept'')        
    BEGIN        
        
  SELECT distinct * FROM(        
  SELECT *,        
  CASE        
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''        
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''        
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''        
   ELSE ''More than 10 Days''        
  END AS Aging        
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a        
right join         
dbo.vSD_Tickets v on          
a.TicketNo=v.TicketNumber           
and        
a.OrgId=v.OrgId          
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'')and v.OrgId=@OrgId       
  AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)       
     )         
     SourceTable        
     )SourceTable1 WHERE  Aging=@Aging AND Department=@Department       
        
    END      
 -----------------------------------------------------------------------------------      
END '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardSLAWithCal]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardSLAWithCal]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardSLAWithCal', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardSLAWithCal    
(    
  @ServiceDesk  varchar(50)=null,    
  @FROM varchar(50)=null,    
  @TO varchar(50)=null,    
  @FCategory varchar(50)=NULL,    
  @Scope varchar(100)=NULL,    
  @TicketStatus varchar(50)=NULL,    
    @OrgId numeric(18,0)=null,    
  @Option varchar(50)    
)    
AS    
BEGIN    
    
 if(@Option=''DashboardsCounts'')    
 BEGIN    
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (    
  select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets a     
     
     
  WHERE CAST(CreationDate as DATE) >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
  Union    
  select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
    
      
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total''     
  from vSD_Tickets  a     
     
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident'' and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total     
  from vSD_Tickets  a     
      
  where ServiceDesk=''Incident'' and OrgId=@OrgId    
  ) AS Final      
 END    
    
 ---------------------Counts Start-----------------------    
 if(@Option=''SevenDaysTickets'')    
 BEGIN      
   select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
          
      ,CreationDate    
      ,ClosedDate    
 from vSD_Tickets    
     
 a     
      
      
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId and ServiceDesk=''Incident''    
    
 END --7 Days Tickets Report    
    
 if(@Option=''ThirtyDaysTickets'')    
 BEGIN     
     select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
   from vSD_Tickets    
       
   a     
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))    
   and ServiceDesk=''Incident''  and OrgId=@OrgId    
      
 END --30 Days Tickets Report    
    
 if(@Option=''TodayTickets'')    
 BEGIN    
      
   select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
     
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
      
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
      
 END --Today Tickets Report    
    
 if(@Option=''TotalTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
             FROM  vSD_Tickets AS a     
     WHERE  (a.ServiceDesk = ''Incident'')  and OrgId=@OrgId    
  group by a.Status      
      
 END    
    
 ---------------------Counts END-----------------------    
    
 ---------------------Second Row Start-----------------------    
    
 if(@Option=''TodayTicketsPie'')    
 BEGIN     
         SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status    
  FROM  vSD_Tickets AS a     
         
     WHERE  (a.ServiceDesk = ''Incident'') and OrgId=@OrgId    
     AND (CONVERT(varchar(10), a.CreationDate, 120) = CONVERT(varchar(10), GETDATE(), 120))    
            GROUP BY a.Status      
 END    
    
 if(@Option=''TodayTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)     
 and ServiceDesk=''Incident''   and OrgId=@OrgId    
 and a.Status= @TicketStatus      
      
 END --Today Tickets Report    
    
 if(@Option=''Last7DaysTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
        
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
  WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and a.Status= @TicketStatus     
      
 END    
    
 if(@Option=''Last30DaysTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
      
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and a.Status= @TicketStatus     
      
 END    
    
 ---------------------Second Row END-----------------------    
    
 if(@Option=''OverAllTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
        
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE    
  ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''Last7DaysTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
                 from vSD_Tickets a    
        
     where ServiceDesk=''Incident''   and OrgId=@OrgId    
           
     AND CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))   group by a.Status      
      
 END    
    
 if(@Option=''Last30DaysTicketsPie'')    
 BEGIN    
      
  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
     from vSD_Tickets a    
       
     where ServiceDesk=''Incident''   and OrgId=@OrgId    
          
  and CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))   group by a.Status      
      
 END    
    
 if(@Option=''ResponseSLAPie'')    
 BEGIN    
      
   SELECT ResponseSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets    
           from  SD_ResponseSLA a WITH(NOLOCK)   
   inner join     
   vSD_Tickets b WITH(NOLOCK)    
   on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId    
    
     where CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and ServiceDesk=@ServiceDesk
     and a.OrgId=@OrgId and ResponseSLA is not null   
   group by ResponseSLA     
      
 END    
    
 if(@Option=''ResolutionSLAPie'')    
 BEGIN    
      
  SELECT ResolutionSLA as CustomFieldValue,COUNT( distinct b.TicketNumber)  as TotalTickets    
           from 
    SD_vResolutionSLA a  WITH(NOLOCK)  
   inner join     
   vSD_Tickets b    WITH(NOLOCK)    
   on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId    
    where CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and a.OrgId=@OrgId and ServiceDesk=@ServiceDesk 
	and Resolution is not null 
   group by ResolutionSLA
      
 END    
    
 if(@Option=''SeverityWisePie'')    
 BEGIN    
   select  Severity ,COUNT(distinct TicketNumber) as TotalTickets  from vSD_Tickets a  WITH(NOLOCK)        
     where ServiceDesk=@ServiceDesk   and OrgId=@OrgId and Severity is not null
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
   group by Severity     
 END    
    
 if(@Option=''SeverityWiseResolvedPie'')    
 BEGIN    
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a WITH(NOLOCK)    
           
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and Severity is not null 
         
     AND CAST(CreationDate as date) >=   @FROM and CAST(CreationDate as date)  <= @TO    
   group by Severity     
   UNION    
   select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets a WITH(NOLOCK) 
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId  
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE)  <= @TO  and Severity is not null   
      
 END    
    
    if(@Option=''SeverityWiseResponse'')    
 BEGIN    
    
 select (Severity +'' (''+ResponseSLA+'')'') as Severity, TotalTickets from     
 (    
   select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,ResponseSLA from vSD_Tickets a with(NOLOCK)   
           INNER JOIN SD_ResponseSLA d with(NOLOCK) on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
       
     where ServiceDesk=@ServiceDesk     and a.OrgId=@OrgId and  a.Severity is not null  
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
   group by a.Severity,ResponseSLA    
  ) AS A   order by Severity asc    
      
     
  END    
    
    if(@Option=''SeverityWiseResolution'')    
   BEGIN    
   select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from     
     (    
    select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA     
     from vSD_Tickets a WITH(NOLOCK)    
           INNER JOIN SD_vResolutionSLA d  WITH(NOLOCK) on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
        
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId and  a.Severity is not null
           
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
     group by a.Severity,d.ResolutionSLA    
  ) AS A      
    UNION    
   select  ''Total'' as ''Severity'' ,COUNT(distinct a.TicketNumber) as TotalTickets from vSD_Tickets a    
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId 
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and  a.Severity is not null   
   order by Severity asc    
   END    
    
 if(@Option=''SeverityWiseResolutionPie'')    
 BEGIN    
     
 select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from     
 (    
              select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA     
    from vSD_Tickets a WITH(NOLOCK)   
           INNER JOIN SD_vResolutionSLA d WITH(NOLOCK)    on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
       
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId  and a.Severity is not null    
       
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
     group by a.Severity,d.ResolutionSLA    
      
   ) AS A       
      
 END    
    
 if(@Option=''FirstCategoryWiseTickets'')    
    
 BEGIN    
    
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets  
 where ServiceDesk=''Incident'' and OrgId=@OrgId AND  category like ''%''+@FCategory+''%''    
    
 END    
    
END    '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMainWithFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMainWithFilter]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMainWithFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMainWithFilter    
(    
@FCategory varchar(50)=NULL,    
@ServiceDesk nvarchar(50)=NULL,    
@FROM varchar(50)=null,    
@TO varchar(50)=null,    
@TicketStatus varchar(50)=NULL,    
@OrgID numeric(18,0)=NULL,    
@Option varchar(50)    
)    
AS    
BEGIN        
 if(@Option=''ResponseSLAPieDetails'')    
 BEGIN    
     
  select max(ResponseSLA) ResponseSLA,  a.TicketNumber ''Ticket Number''    
      ,max(a.Summary) ''Ticket Summary''    
      ,max(a.Status )  Status
      ,max(Severity )   Severity
      ,max(a.Category) Category
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone) ''Submitter Phone''    
      ,max(a.TechLoginName) TechLoginName
      ,max(CreationDate) CreationDate
      ,max(ClosedDate) from SD_ResponseSLA b  WITH(NOLOCK)    
inner join vSD_Tickets a WITH(NOLOCK) 
 on a.TicketNumber=b.TicketNumber    and a.OrgId=b.OrgId
 where   CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and ServiceDesk=@ServiceDesk
     and a.OrgId=@OrgId and ResponseSLA is not null and ResponseSLA=@TicketStatus 
       group by a.TicketNumber
 END    
  if(@Option=''SeverityWisePieDetails'')    
 BEGIN    
 select  TicketNumber ''Ticket Number''    
      ,max(Summary) ''Ticket Summary''    
      ,max(Status)    Status     
      ,max(Severity)  Severity  
      ,max(Category )  Category 
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone )''Submitter Phone''    
      ,max(TechLoginName)TechLoginName
      ,max(CreationDate ) CreationDate  
      ,max(ClosedDate)   ClosedDate 
    from vSD_Tickets WITH(NOLOCK) WHERE  --CreationDate >= DATEADD(DAY, -30, GETDATE())   and   
 ServiceDesk=@ServiceDesk    
 and Severity= @TicketStatus and   CAST(CreationDate as date) BETWEEN   @FROM and @TO  and OrgId=@OrgID and Severity is not null  
      group by TicketNumber
 END    
  if(@Option=''SeverityWiseResponseDetails'')    
 BEGIN    
select * from ( select ResponseSLA,  a.TicketNumber ''Ticket Number''    
      ,a.Summary ''Ticket Summary''    
      ,a.Status         
     
   ,(Severity +'' (''+ResponseSLA+'')'') as SeverityWithStatus    
      ,a.Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,a.TechLoginName      
  ,ServiceDesk    
    
      ,CreationDate    
      ,ClosedDate from vSD_Tickets a    
inner join SD_ResponseSLA dd    
 on a.TicketNumber=dd.TicketNumber and a.OrgId=dd.OrgId    
  -- where   dd.CustomFieldName=''responsesla''    
      
   where    CAST(CreationDate as date) BETWEEN   @FROM and @TO  and a.OrgId=@OrgID  
  ) tab    
  where ServiceDesk=@ServiceDesk and SeverityWithStatus=@TicketStatus    
  END    
   if(@Option=''ResolutionSLAPieDetails'')    
 BEGIN    
      
   select distinct ResolutionSLA,  a.TicketNumber ''Ticket Number''    
      ,a.Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,a.Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,a.TechLoginName   
      ,CreationDate    
      ,ClosedDate from vSD_Tickets a WITH(NOLOCK)
  inner join SD_vResolutionSLA b    WITH(NOLOCK)
  on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId 
    
  where    
  ServiceDesk=@ServiceDesk and a.OrgId=@OrgID   
  and   CAST(CreationDate as date) BETWEEN   @FROM and @TO    
   and b.ResolutionSLA=@TicketStatus    and Resolution is not null   
  
 END    
  if(@Option=''SeverityWiseResolvedPieDetails'')    
 BEGIN    
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets WHERE    
  ServiceDesk=@ServiceDesk
 and Severity= @TicketStatus  and   CAST(CreationDate as date) BETWEEN   @FROM and @TO AND OrgId=@OrgID  and Severity is not null 
      
 END    
    if(@Option=''SeverityWiseResolutionDetails'')    
   BEGIN    
  select * from ( select max(ResolutionSLA) ResolutionSLA,  a.TicketNumber ''Ticket Number''    
      ,max(a.Summary) ''Ticket Summary''    
      ,max(a.Status )  Status
   ,(max(Severity) +'' (''+max(ResolutionSLA)+'')'') as SeverityWithStatus    
      ,max(a.Category)   Category 
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone) ''Submitter Phone''    
      ,max(a.TechLoginName)  TechLoginName   
		,max(ServiceDesk) ServiceDesk  
      ,max(CreationDate) CreationDate   
      ,max(ClosedDate) ClosedDate from vSD_Tickets a  WITH(NOLOCK)  
inner join SD_vResolutionSLA dd WITH(NOLOCK)   
 on a.TicketNumber=dd.TicketNumber  and a.OrgId=dd.OrgId
   where ServiceDesk=@ServiceDesk   and a.OrgId=@OrgID
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and  a.Severity is not null 
	 group by a.TicketNumber     
  ) tab    
  where SeverityWithStatus=   case when isnull(@TicketStatus,''Total'')=''Total'' then SeverityWithStatus else @TicketStatus end  
   END    
END    
    '
GO

--
-- Create or alter view [dbo].[SD_vTechDetails]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vTechDetails]')
GO
IF OBJECT_ID(N'dbo.SD_vTechDetails', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vTechDetails 
as
(
Select a.*,b.CategoryCodeRef,b.ID,b.DeskRef from SD_Technician a 
inner join SD_Category b 
on a.CategoryFK=b.Categoryref
)

'
GO

--
-- Create table [dbo].[SD_adminLog]
--
PRINT (N'Create table [dbo].[SD_adminLog]')
GO
IF OBJECT_ID(N'dbo.SD_adminLog', 'U') IS NULL
CREATE TABLE dbo.SD_adminLog (
  ID numeric NOT NULL,
  adminName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  eventTime datetime NULL,
  description varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[EmployeeMaster]
--
PRINT (N'Create table [dbo].[EmployeeMaster]')
GO
IF OBJECT_ID(N'dbo.EmployeeMaster', 'U') IS NULL
CREATE TABLE dbo.EmployeeMaster (
  EmpId numeric IDENTITY,
  EmployeeCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmployeeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FirstName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LastName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Email varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerName_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerCode_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerEmail_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerName_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerCode_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerEmail_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmploymentStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Division varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubDivision varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BUHeadCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BUHeadName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (EmpId)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[Email_FromInbox]
--
PRINT (N'Create table [dbo].[Email_FromInbox]')
GO
IF OBJECT_ID(N'dbo.Email_FromInbox', 'U') IS NULL
CREATE TABLE dbo.Email_FromInbox (
  ID int IDENTITY,
  created_datetime datetime NULL,
  type nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterName nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailfrom nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailto nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailcc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  subject nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  body nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  param1 nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spMailFromServerInbox]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spMailFromServerInbox]')
GO
IF OBJECT_ID(N'dbo.SD_spMailFromServerInbox', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER procedure dbo.SD_spMailFromServerInbox
@message_id varchar(max)=NULL
,@to varchar(max)=NULL, 
@from varchar(max)=NULL,
@cc varchar(max)=null
,@subject varchar(max)=NULL
,@SubmitterName varchar(200)=NULL
,@body varchar(max)=NULL,
@received_time datetime=NULL
as
begin
--IF NOT EXISTS( SELECT 1 from Email_FromInbox where param1 = @message_id )
insert into Email_FromInbox( created_datetime, type,SubmitterName, [Mailfrom], [Mailto], Mailcc, [subject], body)--, param1 )
values( @received_time, ''receive_supportmail'',@SubmitterName, @from, @to, @cc, @subject, @body)--, @message_id)

end
'
GO

--
-- Create table [dbo].[email]
--
PRINT (N'Create table [dbo].[email]')
GO
IF OBJECT_ID(N'dbo.email', 'U') IS NULL
CREATE TABLE dbo.email (
  id int IDENTITY (385031, 123),
  [from] varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [to] varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  cc varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bcc varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  subject nvarchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyFileName varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyContent nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyType char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  created datetime NOT NULL,
  sent datetime NULL,
  expiration datetime NULL,
  sendTime datetime NULL,
  priority int NOT NULL,
  uniqueTag varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sendStatus int NULL,
  partitionId numeric(26) NULL CONSTRAINT DF_email_partitionId DEFAULT (1),
  headers xml NULL,
  messageID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyEncoding int NULL,
  OrgID numeric NULL,
  PickedTime datetime NULL,
  RetryCount int NULL DEFAULT (0),
  DeskRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PKEmail PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[sp_GetMailToSend]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_GetMailToSend]')
GO
IF OBJECT_ID(N'dbo.sp_GetMailToSend', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.sp_GetMailToSend  
(  
@Option nvarchar(100)=NULL  
)  
as   
BEGIN  
--------------this will send mail to user accoridingly to organization  
  
select * from  
(  
  
-----------This will get hirel email and send mail   
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef and a.Deskref=b.Deskref  
where sendStatus in (''0'', ''4'')  and b.OrgRef=''523843837''  and MailType=''Outbound''  
and a.PickedTime is NULL AND a.RetryCount < 6  
union all  
  
-- this will get IMSPL mail and send mail  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''1644669286'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''103319509'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  
  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''970118232'' and MailType=''Outbound''  
and a.PickedTime is NULL AND a.RetryCount < 6  
  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''2141137785'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  

union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'') 
--and b.OrgRef=''2141137785'' 
and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6 
  
)s  
  
order by created desc  

  
END




'
GO

--
-- Create or alter procedure [dbo].[SP_AssignAndEscalation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AssignAndEscalation]')
GO
IF OBJECT_ID(N'dbo.SP_AssignAndEscalation', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AssignAndEscalation  
AS  
BEGIN  
    DECLARE @Ticketref VARCHAR(20), @Techid INT, @TicketCount INT, @orgid INT;  
  
    -- Cursor to handle multiple tickets that are between 30 minutes and 2 hours overdue  
    DECLARE lvl30_cursor CURSOR FOR  
    SELECT Ticketref   
    FROM SDIncident   
    WHERE sdStatusFK = ''738442562''   
      --AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) >= 30   
      --AND DATEDIFF(HOUR, expectedDueDate, GETDATE()) <= 2;  
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) >= 2
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) <= 5;  
  
    OPEN lvl30_cursor;  
    FETCH NEXT FROM lvl30_cursor INTO @Ticketref;  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
        -- Select the Technician ID with the lowest ticket count who is at level L2  
        SELECT TOP 1 @Techid = TechID   
        FROM SD_Technician   
        WHERE TechLevel = ''L2''   
        ORDER BY TicketCount ASC;  
  
        -- Update the incident to assign the technician  
        UPDATE SDIncident   
        SET assigneeParticipantFK = @Techid   
        WHERE Ticketref = @Ticketref   
          AND organizationFK = @orgid;  
  
        -- Update the technician''s ticket count  
        SELECT @TicketCount = TicketCount   
        FROM SD_Technician   
        WHERE TechID = @Techid;  
  
        UPDATE SD_Technician   
        SET TicketCount = @TicketCount + 1   
        WHERE TechID = @Techid;  
  
        FETCH NEXT FROM lvl30_cursor INTO @Ticketref;  
    END  
  
    CLOSE lvl30_cursor;  
    DEALLOCATE lvl30_cursor;  
  
    -- Repeat for tickets that are more than 2 hours overdue  
    DECLARE lvl90_cursor CURSOR FOR  
    SELECT Ticketref   
    FROM SDIncident   
    WHERE sdStatusFK = ''738442562''   
      --AND DATEDIFF(HOUR, expectedDueDate, GETDATE()) > 2;  
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) > 5;
  
    OPEN lvl90_cursor;  
    FETCH NEXT FROM lvl90_cursor INTO @Ticketref;  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
        -- Select the Technician ID with the lowest ticket count who is at level L2  
        --==------  
  insert into email([from],[to],created,priority,sendStatus,partitionId,OrgID)  
  values(''msp@hisysmc.com'',''anuj.dogra.fz@hitachi-systems.com'',GETDATE(),''1'',''0'',''1'',523843837)  
        FETCH NEXT FROM lvl90_cursor INTO @Ticketref;  
    END  
  
    CLOSE lvl90_cursor;  
    DEALLOCATE lvl90_cursor;  
END;  
  
'
GO

--
-- Create or alter procedure [dbo].[sp_AddEMail]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_AddEMail]')
GO
IF OBJECT_ID(N'dbo.sp_AddEMail', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.sp_AddEMail
(
	@PARTITIONID NUMERIC (26,0),
	@FROM NVARCHAR(1000),
	@TO NVARCHAR (1000),
	@CC NVARCHAR (1000) = NULL,
	@BCC NVARCHAR (1000) = NULL,
	@SUBJECT NVARCHAR(256),
	@BODYCONTENT NVARCHAR(MAX) = NULL,
	@BODYFILENAME NVARCHAR(256) = NULL,
	@BODYTYPE CHAR(1),
	@PRIORITY INT = 1,
	@bodyEncoding INT = NULL
)
AS
BEGIN
	DECLARE @ReturnStatus bit
	INSERT INTO [dbo].[EMAIL] ( [FROM], [TO], [CC], [BCC],
		[SUBJECT], [BODYFILENAME], [BODYCONTENT], [BODYTYPE], [CREATED],  [PRIORITY], [SENDSTATUS], [PARTITIONID], bodyEncoding)
	VALUES (@FROM, @TO, @CC, @BCC,
		@SUBJECT, @BODYFILENAME, @BODYCONTENT, @BODYTYPE, GETDATE(),  @PRIORITY, 0, @PARTITIONID, @bodyEncoding)
	SET @ReturnStatus = @@ERROR

RETURN @ReturnStatus
END




'
GO

--
-- Create or alter procedure [dbo].[SDsp_Emaillog]
--
GO
PRINT (N'Create or alter procedure [dbo].[SDsp_Emaillog]')
GO
IF OBJECT_ID(N'dbo.SDsp_Emaillog', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER PROC dbo.SDsp_Emaillog  
(  
@id varchar(50)=null,  
@Search varchar(100)=null,  
@Option varchar(50)  
)  
AS  
BEGIN  
  
  if (@Option=''Select'')  
   BEGIN  
     SELECT     id,   [from], [to], cc, bcc, subject, bodyContent, created, priority, sendStatus  
     FROM            email order  by created desc  
      END  
  
   if (@Option=''Details'')  
   BEGIN  
     SELECT        *  
     FROM            email where id=@id order  by created desc  
      END  
  
   if (@Option=''Filter'')  
   BEGIN  
     SELECT id, [from], [to], cc, bcc, subject, bodyFileName, bodyContent, bodyType, created, sent, expiration, sendTime, priority, uniqueTag, sendStatus, partitionId, headers, messageID, bodyEncoding  
     FROM     email  
     WHERE  ([from] LIKE ''%'' + @Search + ''%'') OR  
           ([to] LIKE  ''%'' + @Search + ''%'') OR  
           (cc LIKE ''%'' + @Search + ''%'') OR  
           (bcc LIKE ''%'' + @Search + ''%'') OR  
           (subject LIKE  ''%'' + @Search + ''%'') --OR  
           --(created = ''%'' + @Search + ''%'')  
     ORDER BY created DESC  
        END  
END  
'
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRFix]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRFix]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_SRFix', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_SRFix    
(    
@userName varchar(100)=null,    
@Subject nvarchar(1000)=NULL,    
@EmailBody nvarchar(max)=NULL,    
@To varchar(500)=null,    
@MailBody  varchar (max) =NULL,    
@UserEmail nvarchar(200)=NULL,    
@User nvarchar(200)=NULL,    
@cc nvarchar(200)=NULL,    
@AssigneeEmail nvarchar(200)=NULL,    
@UserID numeric(18,0) = NULL,    
@Ticketref  varchar(100) = NULL,    
@Approval1Name varchar(100)= NULL,    
@Approval1Email varchar(100)= NULL,    
@Approval1Status varchar(50)=NULL,    
@Approval1Remarks varchar(max)=NULL,    
@Approval1Grade varchar(20)=NULL,    
@Approval2Name varchar(100)= NULL,    
@Approval2Email varchar(100)= NULL,    
@Approval2Status varchar(50)=NULL,    
@Approval2Remarks varchar(max)=NULL,    
@Approval2Grade varchar(20)=NULL,    
@Approval3Name varchar (100) =NULL,    
@Approval3Email  varchar (100) =NULL,    
@Approval3Status varchar(50)=NULL,    
@Approval3Remarks varchar(max)=NULL,    
@Approval3Grade varchar(20)=NULL,    
@Approval4Name varchar (100) =NULL,    
@Approval4Email varchar(100)= NULL,    
@Approval4Status varchar(50)=NULL,    
@Approval4Remarks varchar(max)=NULL,    
@Approval4Grade varchar(20)=NULL,    
@Approval5Name varchar (100)= NULL,    
@Approval5Email varchar (100) =NULL,    
@Approval5Status varchar(50) =NULL,    
@Approval5Grade varchar(20)=NULL,    
@Remarks varchar(max)=NULL,    
@ApproverLevel varchar(10)=NULL,    
@StatusFk numeric(18,0)=NULL,    
@Approval1IsActive bit=NULL,    
@Approval2IsActive bit=NULL,    
@Approval3IsActive bit=NULL,    
@Approval4IsActive bit=NULL,    
@Approval5IsActive bit=NULL,    
@PrevStage numeric(18,0)=null,    
@ToEmail nvarchar(100)=null,    
@assigneeParticipantFK numeric(18,0) =null,    
 @HODApproval nvarchar(10)=null,    
 @OrgId numeric(18,0)=null,    
@Option varchar(50)   =null 
     
 )    
 AS    
 BEGIN  ----main begin start    
    
    
     
  if(@Option=''TicketAssigned'')    
  BEGIN    
     
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
       
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a     
inner join      
SD_User_Master b     
on a.RefUserID=b.UserID    
where     
REplace(CategoryFK,''||'','' - '') in    
(select Category from vSDTicket where TicketNumber=@Ticketref)    
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref    
     if(@ToEmail is not null)    
      BEGIN    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
    
           
       END      
  END    
  if(@Option=''AddSrApprovalStatus'')    
     
  BEGIN    
    --select     
    -- @Approval1Name=Approval1Name,@Approval1Email=Approval1Email    
    --,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email    
    --,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email    
    --,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email    
    --,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email    
    --from SD_User_SRApproval_SRDesk where UserID=@UserID     
    -------------------------Previous is on the basis of Userbased -------------now it is on the basis of Single Approval for all user---    
    set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
    ------------------ enteries will insert so that to monitor    
        
        
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID    
         
      ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status    
      ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status    
      ,Approval5Name,Approval5Email,Approval5Status,UATAccept,OrgId )    
        values(@TicketRef,@UserID     
        ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''    
      ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''    
      ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'',@OrgId)     
  END    
      
    
  if(@Option=''UpdateRequest'')    
 BEGIN    
  declare @location nvarchar(100);    
  declare @M2Status nvarchar(100);    
  declare @EmpCode nvarchar(40);    
   declare @Severity nvarchar(40);    
  declare @StatusFk1 numeric(18,0);    
  declare @sdStageFk numeric(18,0);    
  declare @FromEmail nvarchar(100);    
  declare @PrevStatus numeric(18,0);    
   SET @FromEmail=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);    
      
     --select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,    
     --       @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,    
     --       @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name    
     --      ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active     
     --     from SD_User_SRApproval_SRDesk where EmpID=@EmpCode    
    set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
         
     set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
     set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
     --if(@Approval1IsActive=''1'')    
     --  BEGIN    
       if(@ApproverLevel=''L1'')    
         BEGIN    
     --set status to Awaiting IT Manager Approval    
            set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved By Reporting Manager%''  and OrgDeskRef=@OrgId)    
            set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved By Reporting Manager%'' and OrgDeskRef=@OrgId)    
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
            update SD_SRApprovalStatus set Approval1Status=''Approved''     
              ,Approval1Remarks=@Remarks    
              where TicketRef=@Ticketref    and orgid=@OrgId      
             
          
           ----------check if L2 exits  ? send mail to L2 : update status Approved     
        if exists(select * from SD_SRApprovers where  ApproverLevel=''L2'')    
        BEGIN    
         set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));    
               set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
             
        set @ToEmail=(@Approval2Email);    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId)    
      END    
      --------------------- as L2 doesn''t exist than update status only     
      else     
       BEGIN     
           set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
             set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
          set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved''  and OrgDeskRef=@OrgId)    
          set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved'' and OrgDeskRef=@OrgId)    
          update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
       END    
          
                     
                            
         
         
         
    END    
   --END    
   ----------- for IT manager Update    
        
      if(@ApproverLevel=''L2'')    
      BEGIN    
          
      if(@HODApproval=''Yes'')    
      BEGIN    
    
      ---------status will set to awaiting hod approval    
       set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
       update SD_SRApprovalStatus set Approval2Status=''Pending''     
                              ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and OrgId=@OrgId    
    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])    
      
                
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));    
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
       ELSE    
        BEGIN    
          set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
          set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
        update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and orgid=@OrgId    
             
    
    
     -----------now ticket will visible to pool  according to location of ticket     
     --set @location=(select location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
     --set @ToEmail=(select Engineer from  SD_Pool where Location=@location  and OrgId=@OrgId)    
           if exists(select * from SD_SRApprovers where  ApproverLevel=''L3'')    
        BEGIN    
         set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));    
               set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval2Name,@OrgId));    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
             
        set @ToEmail=(@Approval2Email);    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
      --------------------- as L3 doesn''t exist than update status only     
      else     
       BEGIN     
           set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
             set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
          set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved''  and OrgDeskRef=@OrgId)    
          set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved'' and OrgDeskRef=@OrgId)    
          update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
       END    
           
             
         
        END    
          
      END    
        
     if(@Approval3IsActive=''1'')    
     BEGIN    
       if(@ApproverLevel=''L3'')    
       BEGIN    
    
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request     
       --------------than IT manager will take action on it    
       set @StatusFk1=(select ID FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval3Status=''Approved''     
        ,Approval3Remarks=@Remarks    
   set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
            if(@Approval4IsActive=''1'')    
  BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L4'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L4'',@Approval4Name,@OrgId));    
      SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --       insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       
           
           
       END    
  END    
     END    
     if(@Approval4IsActive=''1'')    
     BEGIN    
      if(@ApproverLevel=''L4'')    
      BEGIN    
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
      update SD_SRApprovalStatus set Approval4Status=''Approved''     
  ,Approval4Remarks=@Remarks    
   if(@Approval5IsActive=''1'')    
   BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));    
      SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
      END    
     END    
     if(@Approval5IsActive=''1'')    
     BEGIN    
    if(@ApproverLevel=''L5'')    
   BEGIN    
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
   update SD_SRApprovalStatus set Approval5Status=''Approved''     
  ,Approval5Remarks=@Remarks    
   END    
   END    
  END    
    
  if(@Option=''RejectRequest'')    
   BEGIN    
     
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
    
      --select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active    
      -- ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active     
      --from SD_User_SRApproval_SRDesk where EmpID=@EmpCode    
    set    @Approval1Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
       set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
             set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
     --if(@Approval1IsActive=''1'')    
     --BEGIN    
       if(@ApproverLevel=''L1'')    
       BEGIN-- reject by manager    
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
    
             
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
   
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
    
            update SD_SRApprovalStatus set Approval1Status=''Rejected''     
         ,Approval1Remarks=@Remarks    
       where TicketRef=@Ticketref  and orgid=@OrgId    
                
       END    
    -- END    
       
         --if(@Approval2IsActive=''1'')    
         --  BEGIN    
              if(@ApproverLevel=''L2'')    
               BEGIN    
               --Rejected by IT manager     
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''     
                   ,Approval2Remarks=@Remarks    
                   where TicketRef=@Ticketref  and orgid=@OrgId    
                         
             
             
        
               END    
          -- END    
         
         if(@Approval3IsActive=''1'')    
          BEGIN    
           if(@ApproverLevel=''L3'')    
             BEGIN    
              set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId    
              update SD_SRApprovalStatus set Approval3Status=''Rejected''     
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId    
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
                
             set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
                
            END    
      
          END    
        --END    
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)    
     --   BEGIN    
           if(@Approval4IsActive=''1'')    
            BEGIN    
             if(@ApproverLevel=''L4'')    
              BEGIN    
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
                update SD_SRApprovalStatus set Approval4Status=''Rejected''     
                ,Approval4Remarks=@Remarks    
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
              END    
            END    
       -- END    
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)    
     -- BEGIN    
         if(@Approval5IsActive=''1'')    
          BEGIN    
                  
           if(@ApproverLevel=''L5'')    
            BEGIN    
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
               update SD_SRApprovalStatus set Approval5Status=''Rejected''     
               ,Approval5Remarks=@Remarks    
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       
             END    
          END    
      --END    
   END    
    
    
    
    
 END  ----main end closes    
     '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus  
(  
  @userName varchar(100)=null,  
@Subject nvarchar(1000)=NULL,  
 @EmailBody nvarchar(max)=NULL,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@UserID numeric(18,0) = NULL,  
@Ticketref  varchar(100) = NULL,  
@Approval1Name varchar(100)= NULL,  
@Approval1Email varchar(100)= NULL,  
@Approval1Status varchar(50)=NULL,  
@Approval1Remarks varchar(max)=NULL,  
@Approval1Grade varchar(20)=NULL,  
@Approval2Name varchar(100)= NULL,  
@Approval2Email varchar(100)= NULL,  
@Approval2Status varchar(50)=NULL,  
@Approval2Remarks varchar(max)=NULL,  
@Approval2Grade varchar(20)=NULL,  
@Approval3Name varchar (100) =NULL,  
@Approval3Email  varchar (100) =NULL,  
@Approval3Status varchar(50)=NULL,  
@Approval3Remarks varchar(max)=NULL,  
@Approval3Grade varchar(20)=NULL,  
@Approval4Name varchar (100) =NULL,  
@Approval4Email varchar(100)= NULL,  
@Approval4Status varchar(50)=NULL,  
@Approval4Remarks varchar(max)=NULL,  
@Approval4Grade varchar(20)=NULL,  
@Approval5Name varchar (100)= NULL,  
@Approval5Email varchar (100) =NULL,  
@Approval5Status varchar(50) =NULL,  
@Approval5Grade varchar(20)=NULL,  
@Remarks varchar(max)=NULL,  
@ApproverLevel varchar(10)=NULL,  
@StatusFk numeric(18,0)=NULL,  
@Approval1IsActive bit=NULL,  
@Approval2IsActive bit=NULL,  
@Approval3IsActive bit=NULL,  
@Approval4IsActive bit=NULL,  
@Approval5IsActive bit=NULL,  
@OrgID numeric(18,0)=null,  
@Option varchar(50)  
   
 )  
 AS  
 BEGIN  ----main begin start  
  
  
   
  if(@Option=''CheckForAppproval'')  
  BEGIN  
   select * from SD_SRApprovalStatus --where TicketRef=@Ticketref and OrgID=@OrgID  
  END  
  
  if(@Option=''AddSrApprovalStatus'')  
   
  BEGIN  
    select @Approval1Name=Approval1Name,@Approval1Email=Approval1Email  
    ,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email  
    ,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email  
    ,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email  
    ,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email  
    from SD_User_SRApproval where UserID=@UserID  
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
      ,Approval1Name  
      ,Approval1Email  
      ,Approval1Status  
      ,Approval2Name  
      ,Approval2Email  
      ,Approval2Status  
      ,Approval3Name  
      ,Approval3Email  
      ,Approval3Status  
      ,Approval4Name  
      ,Approval4Email  
      ,Approval4Status  
      ,Approval5Name  
      ,Approval5Email  
      ,Approval5Status  
      )  
 values(@TicketRef  
      ,@UserID  
     
      ,@Approval1Name  
      ,@Approval1Email  
      ,''Pending''  
      ,@Approval2Name  
      ,@Approval2Email  
      ,''Pending''  
      ,@Approval3Name  
      ,@Approval3Email  
      ,''Pending''  
      ,@Approval4Name  
      ,@Approval4Email  
      ,''Pending''  
      ,@Approval5Name  
      ,@Approval5Email  
      ,''Pending''  
     )   
  END  
  
  if(@Option=''UpdateRequest'')  
   BEGIN  
     declare @DeskRef nvarchar(100);  
     set @DeskRef=(select ServiceDesk from vSDTicket where TicketNumber=@Ticketref );  
   if(@DeskRef=''Service Request'' or @DeskRef=''Service_Request'')  
     BEGIN  
        Exec SD_SRTicketApprovalStatus_SRFix @Ticketref=@Ticketref ,@Remarks=@Remarks,@ApproverLevel=@ApproverLevel,@Option=''UpdateRequest''  
     END  
           -- if(@DeskRef=''Cloud_Request'' or @DeskRef=''IAM_CloudRequest'' or @DeskRef=''Cloud Process'')  
    -- BEGIN  
       -- exec SD_SRTicketApprovalStatusForCloud @Ticketref=@Ticketref ,@Remarks=@Remarks,@ApproverLevel=@ApproverLevel,@Option=''UpdateRequest''  
     --END  
  
   END  
  
  if(@Option=''RejectRequest'')  
   BEGIN  
   
    
      select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active  
       ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
      from SD_User_SRApproval  
     if(@Approval1IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L1'')  
       BEGIN  
            set @StatusFk=(select Approval1RejectStatus from SD_User_SRApproval)  
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk  where Ticketref=@Ticketref  
  
            update SD_SRApprovalStatus set Approval1Status=''Rejected''   
         ,Approval1Remarks=@Remarks  
        where TicketRef=@Ticketref  
         
       END  
     END  
     if exists(select * from SD_SRApprovalStatus where Approval1Status!=''Rejected'')  
       BEGIN  
         if(@Approval2IsActive=''1'')  
           BEGIN  
              if(@ApproverLevel=''L2'')  
               BEGIN  
                set @StatusFk=(select Approval2RejectStatus from SD_User_SRApproval)  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''   
                   ,Approval2Remarks=@Remarks  
                   where TicketRef=@Ticketref  
   
               END  
           END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval2Status!=''Rejected'')  
       BEGIN  
         if(@Approval3IsActive=''1'')  
          BEGIN  
           if(@ApproverLevel=''L3'')  
             BEGIN  
              set @StatusFk=(select Approval3RejectStatus from SD_User_SRApproval)  
              update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
              update SD_SRApprovalStatus set Approval3Status=''Rejected''   
              ,Approval3Remarks=@Remarks  
             END  
    
          END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'')  
        BEGIN  
           if(@Approval4IsActive=''1'')  
            BEGIN  
             if(@ApproverLevel=''L4'')  
              BEGIN  
                set @StatusFk=(select Approval4RejectStatus from SD_User_SRApproval)  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
                update SD_SRApprovalStatus set Approval4Status=''Rejected''   
                ,Approval4Remarks=@Remarks  
              END  
            END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'')  
      BEGIN  
         if(@Approval5IsActive=''1'')  
          BEGIN  
                
           if(@ApproverLevel=''L5'')  
            BEGIN  
              set @StatusFk=(select Approval5RejectStatus from SD_User_SRApproval)  
              update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
               update SD_SRApprovalStatus set Approval5Status=''Rejected''   
               ,Approval5Remarks=@Remarks  
     
             END  
          END  
      END  
   END  
  
  
  
  
 END  ----main end closes  
   
   '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_Change]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_Change]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_Change', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_Change
(
@userName varchar(100)=null,
@Subject nvarchar(1000)=NULL,
@EmailBody nvarchar(max)=NULL,
@To varchar(500)=null,
@MailBody  varchar (max) =NULL,
@UserEmail nvarchar(200)=NULL,
@User nvarchar(200)=NULL,
@cc nvarchar(200)=NULL,
@AssigneeEmail nvarchar(200)=NULL,
@UserID numeric(18,0) = NULL,
@Ticketref  varchar(100) = NULL,
@Approval1Name varchar(100)= NULL,
@Approval1Email varchar(100)= NULL,
@Approval1Status varchar(50)=NULL,
@Approval1Remarks varchar(max)=NULL,
@Approval1Grade varchar(20)=NULL,
@Approval2Name varchar(100)= NULL,
@Approval2Email varchar(100)= NULL,
@Approval2Status varchar(50)=NULL,
@Approval2Remarks varchar(max)=NULL,
@Approval2Grade varchar(20)=NULL,
@Approval3Name varchar (100) =NULL,
@Approval3Email  varchar (100) =NULL,
@Approval3Status varchar(50)=NULL,
@Approval3Remarks varchar(max)=NULL,
@Approval3Grade varchar(20)=NULL,
@Approval4Name varchar (100) =NULL,
@Approval4Email varchar(100)= NULL,
@Approval4Status varchar(50)=NULL,
@Approval4Remarks varchar(max)=NULL,
@Approval4Grade varchar(20)=NULL,
@Approval5Name varchar (100)= NULL,
@Approval5Email varchar (100) =NULL,
@Approval5Status varchar(50) =NULL,
@Approval5Grade varchar(20)=NULL,
@Remarks varchar(max)=NULL,
@ApproverLevel varchar(10)=NULL,
@StatusFk numeric(18,0)=NULL,
@Approval1IsActive bit=NULL,
@Approval2IsActive bit=NULL,
@Approval3IsActive bit=NULL,
@Approval4IsActive bit=NULL,
@Approval5IsActive bit=NULL,
@PrevStage numeric(18,0)=null,
@ToEmail nvarchar(100)=null,
@assigneeParticipantFK numeric(18,0) =null,
 @HODApproval nvarchar(10)=null,
 @EmpID nvarchar(100)=null,
 @OrgId numeric(18,0)=null,
@Option varchar(50)
	
	)
	AS
	BEGIN  ----main begin start


	
		if(@Option=''TicketAssigned'')
		BEGIN
	
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));
			SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
			
				select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a 
inner join  
SD_User_Master b 
on a.RefUserID=b.UserID
where 
REplace(CategoryFK,''||'','' - '') in
(select Category from vSDTicket where TicketNumber=@Ticketref)
										update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref
					if(@ToEmail is not null)
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')

						 
							END		
		END
		if(@Option=''AddSrApprovalStatus'')
	
		BEGIN
				select 
				 @Approval1Name=Approval1Name,@Approval1Email=Approval1Email
				,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email
				,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email
				,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email
				,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email
				from SD_User_SRApproval_SRDesk where EmpID=@EmpID 
				-------------------------Previous is on the basis of Userbased -------------now it is on the basis of Single Approval for all user---
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
				------------------ enteries will insert so that to monitor
				
				
				INSERT INTO	SD_SRApprovalStatus(TicketRef,UserID
     
				  ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status
				  ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status
				  ,Approval5Name,Approval5Email,Approval5Status,UATAccept,OrgId )
			     values(@TicketRef,@UserID 
				    ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''
					 ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''
					 ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'',@OrgId)	
		END
		

		if(@Option=''UpdateRequest'')
	BEGIN
		declare @location nvarchar(100);
		declare @M2Status nvarchar(100);
		declare @EmpCode nvarchar(40);
			declare @Severity nvarchar(40);
		declare @StatusFk1 numeric(18,0);
		declare @sdStageFk numeric(18,0);
		declare @FromEmail nvarchar(100);
		declare @PrevStatus numeric(18,0);
			SET @FromEmail=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
		set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);
		
	    select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,
	           @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,
	           @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name
	          ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active	
	         from SD_User_SRApproval_SRDesk where EmpID=@EmpCode
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
		   
		   set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)
	  		set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)

					--if(@Approval1IsActive=''1'')
					--		BEGIN
							if(@ApproverLevel=''L1'')
									BEGIN
					--set status to Awaiting IT Manager Approval
												set @StatusFk1=(select  ID from SD_Status where DeskRef=''Change Request''and StatusCodeRef like ''%Approved By Reporting Manager%''  and OrgDeskRef=@OrgId)
												set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Change Request''and StatusCodeRef like ''%Approved By Reporting Manager%'' and OrgDeskRef=@OrgId)
												update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId
												update SD_SRApprovalStatus set Approval1Status=''Approved'' 
														,Approval1Remarks=@Remarks
														where TicketRef=@Ticketref		  and orgid=@OrgId		
									
						
					      
		  set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);  
					
									set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));
							        set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));
									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
									
						if(@ToEmail is not null)
						BEGIN
								insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)
								values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId)
						END
				
						
		             	 
                   					
					
					
					
				END
			--END
			----------- for IT manager Update
				
						if(@ApproverLevel=''L2'')
						BEGIN
						
						if(@HODApproval=''Yes'')
						BEGIN

						---------status will set to awaiting hod approval
							set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							set @sdStageFk=(select sd_stageFK from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
							update SD_SRApprovalStatus set Approval2Status=''Pending'' 
		                            ,Approval2Remarks=@Remarks
	                              where TicketRef=@Ticketref  and OrgId=@OrgId

									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

							--(SELECT userName FROM [dbo]. [SD_EmailConfig])
		
												
							set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));
							set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
						END
							ELSE
								BEGIN
								  set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
										set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
								update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
								 update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks
	                              where TicketRef=@Ticketref  and orgid=@OrgId
									


				
			      
					
								END
						
						END
				
					if(@Approval3IsActive=''1'')
					BEGIN
							if(@ApproverLevel=''L3'')
							BEGIN

							-----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request 
							--------------than IT manager will take action on it
							set @StatusFk1=(select ID FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
									update SD_SRApprovalStatus set Approval3Status=''Approved'' 
								,Approval3Remarks=@Remarks
			set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)
								set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);
								---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same				
						set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));
						insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
							
												if(@Approval4IsActive=''1'')
		BEGIN
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L4'',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L4'',@Approval4Name,@OrgId));
						SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
				set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
			--							insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
							
			
							
							
							END
		END
					END
					if(@Approval4IsActive=''1'')
					BEGIN
						if(@ApproverLevel=''L4'')
						BEGIN
						set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
						update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref
						update SD_SRApprovalStatus set Approval4Status=''Approved'' 
		,Approval4Remarks=@Remarks
			if(@Approval5IsActive=''1'')
			BEGIN
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));
						SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
				set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
			--								insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
						END
						END
					END
					if(@Approval5IsActive=''1'')
					BEGIN
				if(@ApproverLevel=''L5'')
			BEGIN
			set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
			update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref
			update SD_SRApprovalStatus set Approval5Status=''Approved'' 
		,Approval5Remarks=@Remarks
			END
			END
		END

		if(@Option=''RejectRequest'')
			BEGIN
	
		set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)

						select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active
							,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active	
						from SD_User_SRApproval_SRDesk where EmpID=@EmpCode
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
							set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )
													set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )
					--if(@Approval1IsActive=''1'')
					--BEGIN
							if(@ApproverLevel=''L1'')
							BEGIN-- reject by manager
												set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)

									
												set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
												
												update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId

												update SD_SRApprovalStatus set Approval1Status=''Rejected'' 
									,Approval1Remarks=@Remarks
							where TicketRef=@Ticketref  and orgid=@OrgId
											 
							END
				--	END
			
									--if(@Approval2IsActive=''1'')
									--		BEGIN
														if(@ApproverLevel=''L2'')
															BEGIN
															--Rejected by IT manager 
																set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
																	set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
													update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId
																	update SD_SRApprovalStatus set Approval2Status=''Rejected'' 
																			,Approval2Remarks=@Remarks
																			where TicketRef=@Ticketref  and orgid=@OrgId
																					
									
			      
				
															END
										--	END
					
									if(@Approval3IsActive=''1'')
										BEGIN
											if(@ApproverLevel=''L3'')
													BEGIN
														set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
														set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
													update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId
														update SD_SRApprovalStatus set Approval3Status=''Rejected'' 
														,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId
	--															update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
												
													set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)
								set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);
								---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same				
						set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));
						insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
												
												END
		
										END
								--END
					--if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)
					--			BEGIN
											if(@Approval4IsActive=''1'')
												BEGIN
													if(@ApproverLevel=''L4'')
														BEGIN
																set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
														update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref
																update SD_SRApprovalStatus set Approval4Status=''Rejected'' 
																,Approval4Remarks=@Remarks
																		update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
														END
												END
							--	END
					--if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)
					--	BEGIN
									if(@Approval5IsActive=''1'')
										BEGIN
														
											if(@ApproverLevel=''L5'')
												BEGIN
														set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
										update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref
															update SD_SRApprovalStatus set Approval5Status=''Rejected'' 
															,Approval5Remarks=@Remarks
																	update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
			
													END
										END
						--END
			END




	END  ----main end closes
	
	
'
GO

--
-- Create or alter procedure [dbo].[SD_spEmailConfig]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spEmailConfig]')
GO
IF OBJECT_ID(N'dbo.SD_spEmailConfig', 'P') IS NULL
EXEC sp_executesql N'    
    
CREATE OR ALTER Proc dbo.SD_spEmailConfig    
(    
 @ID numeric(18,0)=null    
         
      ,@Hostname nvarchar(50)=null    
      ,@Port int=null    
      ,@UserName nvarchar(100)=null    
      ,@Email nvarchar(100)=null    
      ,@Password nvarchar(250)=null    
      ,@Retry int=null    
 ,@ClientID nvarchar(max)=null    
 ,@ClientSecretKey nvarchar(max)=null    
 ,@TenantID nvarchar(max)=null    
 ,@OrgRef numeric(18,0)=null    
 ,@Error varchar(50)=null output  
 ,@Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddEmailConfig'')    
     
 BEGIN    
  if not exists(select * from SD_EmailConfig where Hostname=@Hostname and Port= @Port and OrgRef=@OrgRef)   
 begin   
 INSERT INTO SD_EmailConfig(ID    
      ,Hostname    
      ,Port    
      ,UserName    
      ,Email    
      ,Password    
      ,Retry    
   ,ClientID,ClientSecretKey,TenantID,OrgRef)    
 values(@ID    
      ,@Hostname    
      ,@Port    
      ,@UserName    
      ,@Email    
      ,@Password    
      ,@Retry,@ClientID,@ClientSecretKey,@TenantID,@OrgRef)    
   end  
   else   
 begin  
 set @Error=''Organization already exists.''  
 end  
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_EmailConfig a left join sd_orgmaster b     
on a.OrgRef=b.Org_ID    
    
 END    
    
  if(@Option=''UpdateEmailConfig'')    
     
 BEGIN    
   
 update  SD_EmailConfig set     
    
    Hostname=@Hostname    
      ,Port=@Port    
      ,UserName=@UserName    
      ,Email=@Email    
      ,Password=@Password    
      ,Retry=@Retry    
   ,ClientID=@ClientID    
   ,ClientSecretKey=@ClientSecretKey    
   ,TenantID=@TenantID,OrgRef=@OrgRef    
  where ID=@ID   
 END    
  if(@Option=''DeleteEmailConfig'')    
     
 BEGIN    
 Delete  from  SD_EmailConfig    
 where ID=@ID    
 END    
 END    
    
    
    '
GO

--
-- Create or alter procedure [dbo].[SD_SendmailOnStatusChange]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SendmailOnStatusChange]')
GO
IF OBJECT_ID(N'dbo.SD_SendmailOnStatusChange', 'P') IS NULL
EXEC sp_executesql N'
  
CREATE OR ALTER Procedure dbo.SD_SendmailOnStatusChange  
  
(  
--@userName varchar(100)=null,  
@TicketNumber varchar(500)=null,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@Approval3Email nvarchar(200)=null,  
@Otp int =NULL,  
@DeskRef varchar(300)=NULL,  
@Esclevel nvarchar(200)=null, 
@OrgId varchar(100)=null, 
@Option varchar(50)=null  
)  
  
AS  
BEGIN  
  
   
     
   if(@Option=''SendMailOnStatusChangeForSR'')  
    BEGIN  
   
   --set @DeskRef  
     Declare @userName varchar(100);  
     declare @Subject nvarchar(1000);  
     declare @EmailBody nvarchar(max);  
     declare @sdStatusFK numeric(18,0);  
     declare @ToEmail nvarchar(100);  
      declare @Approval3Name nvarchar(100);  
  
      set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@TicketNumber)  
   
       if(@DeskRef  like ''%Service%'' or @DeskRef  like ''%cloud%'' or @DeskRef like ''%Change%'' )  
      --------------------this part if request is not of incident type  
        BEGIN  
          declare @EmpCode nvarchar(40);  
          declare @ApproverName nvarchar(100);  
          set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@TicketNumber);  
           if(@DeskRef = ''Service Request'')  
              BEGIN  
                 set @sdStatusFK=(select top 1 sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  
                 -----------------if IT manager  require HOD approval , than after change of status , mail will send to M3   
                   ----------------------- this status of Awaiting IT manager approval  
               
                 --select * from SD_Status  
               ----when IT manager require approval  
   
               if(@sdStatusFK=''1980641309'')  
                 BEGIN  
    
       SET @userName=''itsupport@hisysmc.com'';  
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
      set @ToEmail=(select top 1 EmailID from sd_hodapproval where EmailID=@Approval3Email);  
       set @Approval3Name=(select top 1 Name from sd_hodapproval where EmailID=@Approval3Email);    
          if(@ToEmail is not null)  
             BEGIN  
        
       
       
            set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L3'',@OrgId));  
             set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));  
           insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
           values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
           END    
                      
    END  
       
                 if(@sdStatusFK=''6543565'')  
                   BEGIN  
    
                         set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''UAT Accept'','''',@OrgId));  
                      set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''UAT Accept'','''',@OrgId));  
                       SET @userName=''itsupport@hisysmc.com'';  
                      --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
                       set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);  
                       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                     END  
  
               END  
  
           ELSE if(@DeskRef like ''%Cloud%'')  
              BEGIN  
                  set @ApproverName =(select  top 1 Approval1Name from SD_User_SRApproval where EmpID=@EmpCode)  
                set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval where Approval1Active=''1'' and EmpID=@EmpCode );  
                set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L1'',@OrgId));  
                set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L1'',@ApproverName,@OrgId));  
     
              END  
          else if(@DeskRef like ''%Change%'')  
            BEGIN   
              
               set @sdStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  
               -----------------if IT manager  require HOD approval , than after change of status , mail will send to M3   
               ----------------------- this status of Awaiting IT manager approval  
               if(@sdStatusFK=''59024056'')  
                   BEGIN  
   
                     SET @userName=''itsupport@hisysmc.com'';  
                     --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
                     set @ToEmail=(select top 1 Approval3Email from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);  
                     set @Approval3Name =(select top 1 Approval3Name from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);     
                     set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L3'',@OrgId));  
                     set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));  
                     insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                    END  
                   ------------------------------- UAT when status set  -----------------  
                    if(@sdStatusFK=''883758708'')  
                   BEGIN  
    
                      set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''UAT Accept'','''',@OrgId));  
                      set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''UAT Accept'','''',@OrgId));  
                       SET @userName=''itsupport@hisysmc.com'';  
                      --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
                       set @ToEmail=(select  top 1  SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);  
                       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                     END  
  
  
            END  
    
               
              
       END  
        
  END  
   
 -----------------------last end ----------------------------------  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_SRStatusUpdate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRStatusUpdate]')
GO
IF OBJECT_ID(N'dbo.SD_SRStatusUpdate', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_SRStatusUpdate  
(  
 @PrevStageFK numeric(18,0) = NULL,  
  @PrevStatusFK numeric(18,0) = NULL,  
 @sdStatusFK numeric(18,0) = NULL,  
 @TicketNumber nvarchar(100) = NULL,  
  @userName varchar(100)=null,  
   @Subject nvarchar(1000)=NULL,  
 @EmailBody nvarchar(max)=NULL,  
  @ToEmail nvarchar(100)=null,  
  @Remarks nvarchar(max)=null,  
    @Approval3Email nvarchar(100)=null,  
	@OrgID nvarchar(100)=null,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
 --------------------- send mail on update of status of sR  ::::::::::::  for HOD approval and UAT acceptance mai----------  
 if(@Option=''OnUpdateStatus'')  
   
 BEGIN  
     exec SD_SendmailOnStatusChange @TicketNumber=@TicketNumber,@Option=''SendMailOnStatusChangeForSR'',@Approval3Email=@Approval3Email,@OrgId=@OrgID  
   
  
  
  
 END  
   
----------------------------------------- UAT Acceptance Mail ----------------------------------------------  
 if(@Option=''UpdateUATStatus'')  
  
 BEGIN  
 update SD_SRApprovalStatus set UATAccept=''Accepted'',UATAcceptRemarks=@Remarks where TicketRef=@TicketNumber  
  
  
 set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@TicketNumber)  
 set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
-----------------------set stage to uat accepted  and status to UAT acceptance mail  
  
  
 update SDIncident set sdStatusFK=''1607683888'' ,sdStageFK=''1732939374'',  
 previousStageFK=@PrevStageFK,prevSDstatusFk=@PrevStatusFK  where Ticketref=@TicketNumber  
   
 END  
 if(@Option=''RejectRequest'')  
  
 BEGIN  
 update SD_SRApprovalStatus set UATAccept=''Rejected'',UATAcceptRemarks=@Remarks where TicketRef=@TicketNumber  
 set @PrevStageFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
   
   ------------------set stage to UAT  and status to UAT rejected mail  
   update SDIncident set sdStatusFK=''1505236067'' ,sdStageFK=''1732939374'',  
   previousStageFK=@PrevStageFK,prevSDstatusFk=@PrevStatusFK where Ticketref=@TicketNumber  
   
  END  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_Sendmail]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_Sendmail]')
GO
IF OBJECT_ID(N'dbo.SD_Sendmail', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_Sendmail

(
--@userName varchar(100)=null,
@TicketNumber varchar(500)=null,
@To varchar(500)=null,
@MailBody  varchar (max) =NULL,
@UserEmail nvarchar(200)=NULL,
@User nvarchar(200)=NULL,
@cc nvarchar(200)=NULL,
@AssigneeEmail nvarchar(200)=NULL,
@Otp int =NULL,
@OrgId numeric(18,0)=null,
@DeskRef varchar(300)=NULL,
@Esclevel nvarchar(200)=null,
@OrgName nvarchar(100)= null,
@Option varchar(50)=null
)

AS
BEGIN

	
			if(@Option=''AllInOne'')
		BEGIN
			IF @MailBody IS NOT NULL
				BEGIN
				Declare @userNameee varchar(100)
				SET @userNameee=(SELECT userName FROM [dbo].[SD_EmailConfig])
			--	EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
				END
		END
			if(@Option=''ReminderonTicketCreaton'')
		BEGIN
	
			
				Declare @userName varchar(100);
				declare @Subject nvarchar(1000);
				declare @EmailBody nvarchar(max);
					set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Creation'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Creation'','''',@OrgId));
			SET @userName=(SELECT top 1 Email  FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
				declare @ToEmail nvarchar(100);
				set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
					set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
					if(@OrgName=''Hitachi'')
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
							values(@userName,@ToEmail,''it_help@hitachi-hirel.com'',@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
						END
					else 
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
						END
			--				insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
				--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					if(@DeskRef  like ''%Service%'' or @DeskRef  like ''%cloud%'' )
				
			BEGIN
								declare @EmpCode nvarchar(40);
								declare @ApproverName nvarchar(100);
								set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId);
									if(@DeskRef = ''Service Request'')
											BEGIN
													--set @ApproverName	=(select  top 1 Approval1Name from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
												--	set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval1Active=''1'' and EmpID=@EmpCode );
													select   @ApproverName=UserName,@ToEmail=UserEmail from SD_SRApprovers
																where OrgRef=@OrgId and Approverlevel=''L1'';
												
												set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L1'',@OrgId));
													set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L1'',@ApproverName,@OrgId));
											END

				
								else if(@DeskRef like ''%Change%'')
										BEGIN 
												set @ApproverName	=(select  top 1 Approval1Name from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
													set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval1Active=''1'' and EmpID=@EmpCode );
												set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Change_ForApproval'',''L1'',@OrgId));
												set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''Change_ForApproval'',''L1'',@ApproverName,@OrgId));
										END
		
	     							
											SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)				
										if(@ToEmail is not null)
										BEGIN
										
										insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
											values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
									END
							
							
							END
				else 
				BEGIN

				---- ticket will assign to asignee
							declare @location nvarchar(100);
							declare @category nvarchar(500);
			set	@location =(select location from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
			set @category =(select top 1 Category from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
				--	set @ToEmail=(select Engineer from SD_Pool where Location=@location);
			
			
						set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
					set @ToEmail=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID 
									inner join SDIncident sd 
									on sd.assigneeParticipantFK=a.TechID
									where Ticketref=@TicketNumber and  b.Org_ID=@OrgId
									--where @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%''
									
									)
					--	set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Created Reminder'',''''));
					--set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Created Reminder'',''''));
					set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Assigned'','''',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Assigned'','''',@OrgId));
	
				END 

				ELSE 

				BEGIN 
					declare @location4 nvarchar(100);
										set	@location4 =(select top 1 location from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
										set @ToEmail=(select top 1 Engineer from SD_Pool where Location=@location4 and OrgId=@OrgId);
										set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Created Reminder'','''',@OrgId));
										set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Created Reminder'','''',@OrgId));
											

					END
								if(@ToEmail is not null)
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId)
						END

			END
		END
			if(@Option=''ForgotPassword'')
		BEGIN
								
		--	set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Creation''));
		  set @Subject=(select top 1 Summary from SD_EmailTemplate where TemplateName=''Password Reset''  and OrgRef=@OrgId)
			set @EmailBody=(select dbo.SD_EmailBodyOther(@User,@Otp,''Password Reset'',@OrgId));
						SET @userName=(SELECT top 1 Email  FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
			--	set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@UserEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId, @DeskRef)
							
				--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
				
		END
			if(@Option=''AssigneUpdate'')
		BEGIN
								
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Assigned'','''',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Assigned'','''',@OrgId));
									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
						set @ToEmail=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
							if(@ToEmail is not null)
								BEGIN
									insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
									values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
					END		
		END
			if(@Option=''TicketEsc'')
		BEGIN
	
						set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Escalated'',@Esclevel,@OrgId));
					set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Escalated'',@Esclevel,@OrgId));
		SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
					set @cc=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
					if(@AssigneeEmail is not null)
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
						values(@userName,@AssigneeEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
							--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					END		
		END
			if(@Option=''TicketResponseEsc'')
		BEGIN
	
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''ResponseMissed'',@Esclevel,@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''ResponseMissed'',@Esclevel,@OrgId));
			SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
				set @cc=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
					if(@AssigneeEmail is not null)
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
						values(@userName,@AssigneeEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
							--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					END		
		END

			if(@Option=''ResolvedTicket'')
		BEGIN
	
			
			
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Closed'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Closed'','''',@OrgId));
					SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
				set @cc=(select top 1 b.EmailID from vSDTicket a 
					inner join SD_User_Master b on
					a.TechLoginName=b.LoginName
					where TicketNumber=@TicketNumber and a.OrgId=@OrgId)
		set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
			set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
				set @cc =Concat(@cc,'','',''it_help@hitachi-hirel.com'');
				END
				
		
		if (@cc is not null)
			BEGIN
				insert into email([from],[to],[cc],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
			else 
			BEGIN
			insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
				
			--			
				
		END
		    
			if(@Option=''StatusChange'')
		BEGIN
	
			
			
			set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Status Change'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Status Change'','''',@OrgId));
SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
					set @cc=(select top 1 b.EmailID from vSDTicket a 
					inner join SD_User_Master b on
					a.TechLoginName=b.LoginName
					where TicketNumber=@TicketNumber and a.OrgId=@OrgId)
		set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
		--set @ToEmail=''anuj.dogra.fz@hitachi-systems.com''	;	

			set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
		set @cc=CONCAT(@cc,'','',''it_help@hitachi-hirel.com'');

		END
		
		if (@cc is not null)
			BEGIN
				insert into email([from],[to],[cc],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
			else 
			BEGIN
			insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
				
		END
	END

	
'
GO

--
-- Create or alter procedure [dbo].[sp_ResponseEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_ResponseEsclation]')
GO
IF OBJECT_ID(N'dbo.sp_ResponseEsclation', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER PROCEDURE dbo.sp_ResponseEsclation
(
@TicketID numeric(18,0)=NULL,
@OrgID numeric(18,0)
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
DECLARE @TicketNumber varchar(50);

Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin'',OrgId--,@Summary=Summary
		


					from vSDTicket where (Status=''Open'' ) and ServiceDesk =''Incident'' and OrgId=@OrgID
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1    

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID and OrgID=@OrgID)
	  BEGIN
	   Declare @L1Min int;
	   Declare @L1Email nvarchar(500);
	   Declare @L2Min int;
	   Declare @L2Email nvarchar(500);
	   Declare @L3Min int;
	   Declare @L3Email nvarchar(500);
	   Declare @L4Min int;
	   Declare @L4Email nvarchar(500);
	   Declare @L5Min int;
	   Declare @L5Email nvarchar(500);
		set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1'' and OrgRef=@OrgID)
		set @L1Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgID)
		set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
		set @L2Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
		set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		set @L3Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
		set @L4Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
		set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
		set @L5Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
		
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		BEGIN
						IF @EscMin>@L2Min and @EscMin<=@L3Min
							 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
					  BEGIN
						if not exists(select * from SD_SLA where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
										BEGIN
							  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
							  where  TicketID=@TicketID and OrgID=@OrgID
					
							exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
		END
					END
							 END
		END
		ELSE 
			BEGIN
					if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
						  BEGIN
								 if(@EscMin >@L2Min)
									 BEGIN
												if not exists(select * from SD_SLA where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
											BEGIN
													  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
														where  TicketID=@TicketID and  OrgID=@OrgID
					
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
											END
									 END
						  END
			END

		---- above condition is to check if level is restricted to only l2 than l3 condition will not check
		-- same we will do for other 
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
			BEGIN
				 IF (@EscMin>@L3Min and @EscMin<=@L4Min)
						BEGIN
							if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
									BEGIN
											if not exists(select * from SD_SLA where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
												BEGIN
													update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
													where  TicketID=@TicketID and OrgID=@OrgID
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												END
									END
						 END
			END
		 ELSE 
		 BEGIN 
		 if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
					BEGIN
											if(@EscMin >@L3Min)
												BEGIN
														if not exists(select * from SD_SLA where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
															BEGIN
																update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
																where  TicketID=@TicketID and  OrgID=@OrgID
																exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												            END
												END
						END
		END

		if exists( select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
			BEGIN
					IF (@EscMin>@L4Min and @EscMin<=@L5Min)
						 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
									  BEGIN
										  if not exists(select * from SD_SLA where EsclationLevel=''L4'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
											BEGIN
													update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
													where  TicketID=@TicketID and OrgID=@OrgID
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L4Email,@Esclevel=''L4'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
											END
										END
						END
						else IF (@EscMin>@L5Min)
							 BEGIN
									  if exists(select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
										 BEGIN
												if not exists(select * from SD_SLA where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
								BEGIN
									  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
									  where  TicketID=@TicketID
									 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
								END
										END
							END
			END
			else

				 BEGIN
							 if(@EscMin>@L5Min)
									 BEGIN
											if not exists(select * from SD_SLA where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
												BEGIN
														update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
														 where  TicketID=@TicketID and OrgID=@OrgID
														 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												END
									END
				  END
			 END
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  ELSE
		 BEGIN
		  if exists(select * from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgID)
			  BEGIN
			    if not exists(select * from SD_SLA where EsclationLevel=''L1'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
								BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,OrgID) 
				values(@TicketID,@TicketNumber,''L1'',''1'',''L2'',@OrgID)--,@Summary=Summary	
				 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L1Email,@Esclevel=''L1'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
				 END
				END
	      END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin,@OrgId
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[sp_ResolutionEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_ResolutionEsclation]')
GO
IF OBJECT_ID(N'dbo.sp_ResolutionEsclation', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER PROCEDURE dbo.sp_ResolutionEsclation
(
@TicketID numeric(18,0)=NULL,
@OrgId numeric(18,0)
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
	
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,ExpectedResolutionDt,GETDATE()) as ''EscMin'',OrgId--,@Summary=Summary		
  from vSDTicket where (Status!=''Closed'' and Status !=''Resolved'' ) and ServiceDesk =''Incident''-- and OrgId=@OrgId
  and DATEDIFF(MINUTE,ExpectedResolutionDt,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLAForResol where TicketID= @TicketID and OrgID=@OrgId)
	  BEGIN
	   Declare @L1Min int;
	   Declare @L1Email nvarchar(500);
	   Declare @L2Min int;
	   Declare @L2Email nvarchar(500);
	   Declare @L3Min int;
	   Declare @L3Email nvarchar(500);
	   Declare @L4Min int;
	   Declare @L4Email nvarchar(500);
	   Declare @L5Min int;
	   Declare @L5Email nvarchar(500);
		set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1'' and OrgRef=@OrgId)
		set @L1Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgId)
		set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
		set @L2Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
		set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		set @L3Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
		set @L4Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
		set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
		set @L5Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
		
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		BEGIN
						IF @EscMin>@L2Min and @EscMin<=@L3Min
							 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
					  BEGIN
						if not exists(select * from SD_SLAForResol where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
										BEGIN
							  update SD_SLAForResol set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
							  where  TicketID=@TicketID and OrgID=@OrgId
					
							exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketEsc'',@OrgId=@OrgId
		END
					END
							 END
		END
		ELSE 
			BEGIN
					if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
						  BEGIN
								 if(@EscMin >@L2Min)
									 BEGIN
												if not exists(select * from SD_SLAForResol where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
											BEGIN
													  update SD_SLAForResol set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
														where  TicketID=@TicketID and OrgID=@OrgId
					
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketEsc'',@OrgId=@OrgId
											END
									 END
						  END
			END

		---- above condition is to check if level is restricted to only l2 than l3 condition will not check
		-- same we will do for other 
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
			BEGIN
				 IF (@EscMin>@L3Min and @EscMin<=@L4Min)
						BEGIN
							if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
									BEGIN
											if not  exists(select * from SD_SLAForResol where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
												BEGIN
													update SD_SLAForResol set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
													where  TicketID=@TicketID and OrgID=@OrgId
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketEsc'',@OrgId=@OrgId
												END
									END
						 END
			END
		 ELSE 
		 BEGIN 
		 if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
					BEGIN
											if(@EscMin >@L3Min)
												BEGIN
														if not  exists(select * from SD_SLAForResol where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
															BEGIN
																update SD_SLAForResol set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
																where  TicketID=@TicketID and OrgID=@OrgId
																exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketEsc'',@OrgId=@OrgId
												            END
												END
						END
		END

		if exists( select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
			BEGIN
					IF (@EscMin>@L4Min and @EscMin<=@L5Min)
						 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
									  BEGIN
										  if not exists(select * from SD_SLAForResol where EsclationLevel=''L4'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
											BEGIN
													update SD_SLAForResol set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
													where  TicketID=@TicketID and OrgID=@OrgId
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L4Email,@Esclevel=''L4'',@Option=''TicketEsc'',@OrgId=@OrgId
											END
										END
						END
						else IF (@EscMin>@L5Min)
							 BEGIN
									  if exists(select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
										 BEGIN
												if not exists(select * from SD_SLAForResol where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
								BEGIN
									  update SD_SLAForResol set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
									  where  TicketID=@TicketID and OrgID=@OrgId
									 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketEsc'',@OrgId=@OrgId
								END
										END
							END
			END
			else

				 BEGIN
							 if(@EscMin>@L5Min)
									 BEGIN
											if not exists(select * from SD_SLAForResol where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
												BEGIN
														update SD_SLAForResol set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
														 where  TicketID=@TicketID and OrgID=@OrgId
														 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketEsc'',@OrgId=@OrgId
												END
									END
				  END
			 END
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  ELSE
		 BEGIN
		  if exists(select * from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgId)
			  BEGIN
			    if not exists(select * from SD_SLAForResol where EsclationLevel=''L1'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
								BEGIN
			Insert into SD_SLAForResol (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,OrgID) 
				values(@TicketID,@TicketNumber,''L1'',''1'',''L2'',@OrgId)--,@Summary=Summary	
				 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L1Email,@Esclevel=''L1'',@Option=''TicketEsc'',@OrgId=@OrgId
				 END
				END
	      END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin,@OrgId
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[sp_AllSDProc]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_AllSDProc]')
GO
IF OBJECT_ID(N'dbo.sp_AllSDProc', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.sp_AllSDProc
(
@Option nvarchar(100)=NULL
)
as 
BEGIN
print (''Rahul chamanlal'');
--update email set sendStatus=''0'' where sendStatus=''4'';
--- For HIREL Response Esclation 
Declare @currnTime Time ;
Declare @beginHour Time ;
Declare @EndHour Time ;
Declare @beginHourIMSPL Time ;
Declare @EndHourIMSPL Time ;
set @currnTime=GETDATE();
  select @beginHour=BeginHour,@EndHour=EndHour from vSDOrgDeskDef  where OrgFk=''523843837''
  if(@currnTime>=@beginHour  and @currnTime<@EndHour)
  BEGIN
exec sp_ResponseEsclation @OrgID=''523843837'';----this will send mail if response miss
exec sp_ResolutionEsclation @OrgID=''523843837'';-- this will send mail if resolution miss
END

------------------- response and resolution esclation according to IMSPL

  select @beginHourIMSPL=BeginHour,@EndHourIMSPL=EndHour from vSDOrgDeskDef  where OrgFk=''680624893''
    if(@currnTime>=@beginHourIMSPL  and @currnTime<@EndHourIMSPL)
  BEGIN
exec sp_ResponseEsclation @OrgID=''680624893'';----this will send mail if response miss
exec sp_ResolutionEsclation @OrgID=''680624893'';-- this will send mail if resolution miss
END

exec sp_TicketAutoClosedStatus;----------this will closed ticket automatically
--exec SP_AssignAndEscalation; ------------- this will auto Assign to Tech Level L2 after 30 min and Esclate after 2hr

--exec sp_TicketEscReminderForEng;-- this will send mail if ticket not acknowledge by assigne
END



'
GO

--
-- Create or alter procedure [dbo].[SP_AutoAssignTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AutoAssignTicket]')
GO
IF OBJECT_ID(N'dbo.SP_AutoAssignTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AutoAssignTicket    
(    
@TicketID nvarchar(50),    
@orgid varchar(50)    
)    
AS    
BEGIN    
DECLARE @count int, @Newcount int, @TechID varchar(50) ,@TechName nvarchar(200) ,@Notes nvarchar(max)   
    
 select top 1 @TechID=t.TechID ,@TechName=t.TechLoginName from SD_Technician t    
 left join TechLeave l on t.TechID=l.TechId where t.TechLevel = ''L1'' 
 And  OrgRef =@orgid and t.TechID not in (''533394'',''533395'')
 AND(l.TechId IS NULL or CAST(GETDATE() AS DATE) NOT BETWEEN CAST(LeaveFromdate AS DATE) AND CAST(LeaveTodate AS DATE) )     
 order by TicketCount asc    
    
 update SDIncident set assigneeParticipantFK=@TechID where Ticketref= @TicketID and organizationFK=@orgid;    
 select @count=TicketCount from SD_Technician where TechID=@TechID;    
 set @Newcount = @count+1;    
    
 update SD_Technician set TicketCount =@Newcount where TechID=@TechID and OrgRef =@orgid;    
    set @Notes= Concat(''Engineer Auto Assigned:'',@TechName);
exec  SD_spAddTicketNotes @Ticketref=@TicketID,@sdStatusFK=null,@NoteDesc=@Notes,@EdityBy=''System'',@Option=''EngineerNotes'',@organizationFK=@orgid;    


 exec SD_Sendmail @TicketNumber=@TicketID,@OrgID=@orgid,@Option=''AssigneUpdate'' 
 
    
 END


 '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_IMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_IMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_IMSPL', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident_IMSPL        
(        
   @id numeric(26,0)= null        
   ,@DeskRef varchar(50) =NULL        
   ,@UserIDForAppro numeric(18,0)=null        
   ,@ticketout varchar(50)=Null        
      ,@Ticketref varchar(20)= null output        
      ,@partitionid numeric(26,0)= null        
      ,@orgServDeskDefnFK numeric(26,0)= null        
      ,@sdStageFK numeric(26,0)= null        
      ,@sdStatusFK numeric(26,0)= null        
      ,@sdPriorityFK numeric(26,0)= null        
      ,@sdSeverityFK numeric(26,0)= null        
      ,@sdSolutionTypeFK numeric(26,0)= null        
      ,@sdCategoryFK numeric(26,0)= null        
      ,@creationDateTime datetime= null        
      ,@closedDateTime datetime= null        
      ,@TicketSummary varchar(max)= null        
      ,@TicketDesc varchar(max)= null        
   ,@TickNotes nvarchar(max)=null        
      ,@submitterType varchar(50)= null        
      ,@submitterName varchar(50)= null        
      ,@submitterEmailAddr varchar(50)= null        
      ,@submitterPhone varchar(50)= null        
      ,@assigneeType varchar(50)= null        
      ,@assigneePoolFK numeric(26,0)= null        
      ,@assigneeParticipantFK numeric(26,0)= null        
      ,@actualCompletedDate datetime= null        
      ,@expectedDueDate datetime= null        
      ,@actualResolutionDate datetime= null        
      ,@organizationFK numeric(26,0)= null        
      ,@orgStaffFK numeric(26,0)= null        
      ,@sdErrorMessage varchar(max)= null        
      ,@solutionNote varchar(max)= null        
      ,@sourceType varchar(50)= null        
      ,@previousStageFK numeric(26,0)= null        
      ,@categoryFullText varchar(max)= null        
   ,@sdCategoryRef  varchar(200)=null        
   ,@UserName nvarchar(100)=null        
   ,@SubmitterID varchar(50)=null        
      ,@AssigneName varchar(100)=null        
   ,@TechID numeric(18,0)=null        
   ,@UserID numeric(18,0)=null        
  ,@InsertBy int =NULL        
  ,@InsertDt datetime =NULL        
  ,@UpdateBy int =NULL        
  ,@UpdateDt datetime =NULl        
  ,@Status nvarchar(10) = NULL        
  ,@TicketAttachMent nvarchar(max)=null        
  ,@Filename nvarchar(100)=null        
  ,@location nvarchar(100)=null        
  ,@Department nvarchar(100)=null        
  , @Note nvarchar(1000)=null    
  ,@EmpID nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null        
  ,@Option varchar(50)=null,    
  @Error varchar(100)= null output     
         
 )        
 AS        
 BEGIN        
   BEGIN TRY    
  set  @creationDateTime=GETDATE();  
 if(@Option=''AddTicket'')        
 BEGIN        
 declare @ParentCategoryRef nvarchar(500);        
 declare @SLA nvarchar(300);        
   --declare @OrgName nvarchar(100);        
   declare @sdSeverityFK1 numeric(26,0);        
         
    -- set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)        
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)        
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK)        
     set @sdSeverityFK1=@sdSeverityFK  
	 

  --       set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*       
  --         FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where      
  --                Row_Num=''1'')      
  --    set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID       
  --        where Deskref=@DeskRef and OrgFk=@organizationFK );      
      
  --     if(@SLA=''Severity'')      
  --      BEGIN       
  --       set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --      END      
  --else if(@SLA=''Category'')      
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_klCat(@creationDateTime, @DeskRef,@organizationFK,@ParentCategoryRef))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_klCatresol(@creationDateTime, @DeskRef,@organizationFK,@ParentCategoryRef))      
  --      END      
		-- else if(@SLA=''Priority'')      
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_Priority(@creationDateTime, @DeskRef,@sdPriorityFK ,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_PriorityResol( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))      
  --      END 
  --     else       
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --      END     
             
     set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*         
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where        
                  Row_Num=''1'')        
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
          where Deskref=@DeskRef and OrgFk=@organizationFK );        
        
       if(@SLA=''Severity'')        
        BEGIN         
         set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
  else if(@SLA=''Category'')        
        BEGIN        
         --set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory_New(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
         --set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
		set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
    
        END        
       else         
        BEGIN        
         set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
           
     if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)        
       BEGIN        
        declare @TicketIDforNotes numeric(26,0)=null;        
        declare @NoteDesc nvarchar(max)=null;        
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))        
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK         
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)        
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)         
    set @Error=''Exists''    
       END        
       else         
       BEGIN       
    DECLARE @InsertedTickets TABLE (SID numeric(26,0),    Ticketref varchar(20));      
  
  
EXEC GetUniqueTicketRef  @TicketNo = @Ticketref, @organizationFK = @organizationFK,  @NewTicketref = @Ticketref OUTPUT;
  
       insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK          
          ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone          
           ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,        
        actualResolutionDate,location,Department,CurrentEscalationLevel)           
  OUTPUT INSERTED.SID, INSERTED.Ticketref INTO @InsertedTickets(SID, Ticketref)      
         Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()          
         ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone          
         ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,  
   @expectedDueDate,  
   @categoryFullText,@SubmitterID,        
         @actualResolutionDate,  
   ISNULL(@location,0),ISNULL(@Department,0),''0'')          
            
        --SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())        
  SET @Ticketref = (SELECT TOP 1 Ticketref FROM @InsertedTickets ORDER BY SID DESC);      
         if(@Ticketref is not null)        
           BEGIN    
		    exec SP_AutoAssignTicket @TicketID=@Ticketref,@orgid=@organizationFK   

              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)         
              where ReqRef=@DeskRef and OrgRef=@organizationFK        
          END        
          ---------------custom field creation-------------        
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK        
        
       if(@TicketAttachMent is not null)        
        BEGIN        
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
        END        
      END        
        
      ------------------else khtm        
         
 END        
        
 if(@Option=''DeleteTicket'')        
 BEGIN        
 Delete from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK        
 END        
 if(@Option=''AssignTechnician'')        
 BEGIN        
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
  BEGIN         
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
  END        
 END        
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------        
  if(@Option=''ChangeTechnician'')        
  BEGIN        
  declare @Reason nvarchar(1000);        
          
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);        
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
    BEGIN         
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK        
        
    END        
  END        
-----------------------------Update Ticket  ---------------------------------------------------        
 if(@Option=''UpdateTicket'')        
 BEGIN  
 set @DeskRef =(select top 1 r.ReqTypeRef from SDIncident s inner join SD_RequestType r on s.orgServDeskDefnFK=r.id  where Ticketref=@Ticketref and organizationFK=@organizationFK)
	 


 ---Stage,DeskrefID,select from bydefaultvalue        
 Declare @PrevStageFK numeric(18,0)=null;        
  Declare @PrevStatusFK numeric(18,0)=null;        
  Declare @StatusFKAsPerStage numeric(18,0)=null;        
  Declare @TicketID numeric(18,0)=null;        
  Declare @EditedBy nvarchar(max)=null;        
  set @EditedBy=@UserName;        
  ------------this is prevstatus status        
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
	if not exists (select * from SD_StatusRestriction where OrgId=@organizationFK and Reqtype=@DeskRef and StageId=@PrevStageFK)  
begin  

 if(@sdStatusFK!=@PrevStageFK)        
 BEGIN        
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK        
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''        
         
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''        
         
 END        
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)        
 if(@sdStatusFK is null)        
 BEGIN        
  set @sdStatusFK=@StatusFKAsPerStage        
            
 END        
 else         
 BEGIN        
  set @sdStatusFK= @sdStatusFK        
 END        
        
         
 update  SDIncident        
        
  set    sdStageFK=@sdStageFK        
    ,sdStatusFK=@StatusFKAsPerStage        
      ,sdPriorityFK=@sdPriorityFK        
      ,sdSeverityFK=@sdSeverityFK        
             
      ,sdCategoryFK=@sdCategoryFK        
   ,SubmitterID=@SubmitterID        
   ,submitterPhone=@submitterPhone        
    ,closedDateTime=@closedDateTime        
      ,assigneeType =@assigneeType        
     ,assigneeParticipantFK=@assigneeParticipantFK        
   ,sdSolutionTypeFK=@sdSolutionTypeFK        
   ,solutionNote=@solutionNote        
           
      ,categoryFullText=@categoryFullText        
   ,location=@location        
   ,Department=@Department        
   ,EditedBy=@UserName        
      where ticketref=@Ticketref and organizationFK =@organizationFK        
    if(@TicketAttachMent is not null)        
  BEGIN        
  exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
  END        
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK        
 declare @Assignee nvarchar(500);  
  Declare @IssueSummary nvarchar(max);  
 set @IssueSummary =(select top 1  Summary from  vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
  
 set @Assignee =(select top 1  TechLoginName from  vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
exec SD_spAddKnowledgeBase @Issue=@IssueSummary,@ResolutionDetail=@solutionNote,@Option=''AddKB'',@OrgDeskRef=@organizationFK,@KBSubmiitedBy=@Assignee  
         
 declare @NewStatus nvarchar(100);        
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)        
 if(@NewStatus=''resolved'')        
 BEGIN        
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK         
 END        
 declare  @PrevStageForMail numeric(18,0);        
  declare  @SDStageForMail numeric(18,0);        
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
  if( @NewStatus!=''resolved'')        
 BEGIN        
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK         
         
         
 END        
         
 END  
 else
 begin
 set @Error=''You are not Authorize to change the Stage !''
 end
 END
        
 if(@Option=''AddSR_ApproverStatus'')        
 BEGIN        
 declare @desk nvarchar(100);        
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)        
   if(@desk=''Service Request'')      
 BEGIN        
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK ,@EmpID=@EmpID  
        
 END     
  else  if(@desk=''Change Request'')      
 BEGIN        
   exec SD_SRTicketApprovalStatus_Change @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK    ,@EmpID=@EmpID     
        
 END  
        
 END        
 END TRY      
    BEGIN CATCH      
        SET @Ticketref = ERROR_MESSAGE();      
    END CATCH     
 if(@Error='''' or @Error = null)    
 begin    
 if exists(select * from SDIncident where Ticketref=@Ticketref AND organizationFK=@organizationFK AND (TicketSummary IS NULL OR TicketSummary = '''') )      
  begin      
  set @Error=''yes''      
  end      
  end    
 END   
  
  
  
  
  
  
   --select dbo.GetResponseDueDtForCategory_New(@creationDateTime, @DeskRef,@ParentCategoryRef,''680624893'')    
   --select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK)  
  
 --  select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
 --         where Deskref=''Incident'' and OrgFk=680624893  
  
  
 --    select dbo.GetDueDate_New(GETDATE(), ''Incident'',''1541925503'',''680624893'')  
 --   select dbo.GetDueDateForResolution( GETDATE(), ''Incident'',''819216043'',''680624893'')  
  
 --select ISNULL(ResolutionTime,0) from SD_Severity where Deskref=''Incident'' and id=''1541925503'' and OrgDeskRef=''680624893''   
 --if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+''19:38:34.4866667''+''%'' and Deskref=''Incident'' and OrgFk=''680624893'' )  
  
  
 ----select * from SD_Mfa where UserId=1018149815  
  
  
 --select * from SD_Severity where OrgDeskRef=''680624893''



'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Hirel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Hirel]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Hirel', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_Hirel        
(        
   @id numeric(26,0)= null        
   ,@DeskRef varchar(50) =NULL        
   ,@UserIDForAppro numeric(18,0)=null        
   ,@ticketout varchar(50)=Null        
   ,@Ticketref varchar(20)= null output       
   ,@partitionid numeric(26,0)= null        
   ,@orgServDeskDefnFK numeric(26,0)= null        
   ,@sdStageFK numeric(26,0)= null        
   ,@sdStatusFK numeric(26,0)= null        
   ,@sdPriorityFK numeric(26,0)= null        
   ,@sdSeverityFK numeric(26,0)= null        
   ,@sdSolutionTypeFK numeric(26,0)= null        
   ,@sdCategoryFK numeric(26,0)= null        
   ,@creationDateTime datetime= null        
   ,@closedDateTime datetime= null        
   ,@TicketSummary varchar(max)= null        
   ,@TicketDesc varchar(max)= null        
   ,@TickNotes nvarchar(max)=null        
   ,@submitterType varchar(50)= null        
   ,@submitterName varchar(50)= null        
   ,@submitterEmailAddr varchar(50)= null        
   ,@submitterPhone varchar(50)= null        
   ,@assigneeType varchar(50)= null        
   ,@assigneePoolFK numeric(26,0)= null        
   ,@assigneeParticipantFK numeric(26,0)= null        
   ,@actualCompletedDate datetime= null        
   ,@expectedDueDate datetime= null        
   ,@actualResolutionDate datetime= null        
   ,@organizationFK numeric(26,0)= null        
   ,@orgStaffFK numeric(26,0)= null        
   ,@sdErrorMessage varchar(max)= null        
   ,@solutionNote varchar(max)= null        
   ,@sourceType varchar(50)= null        
   ,@previousStageFK numeric(26,0)= null        
   ,@categoryFullText varchar(max)= null        
   ,@sdCategoryRef  varchar(200)=null        
   ,@UserName nvarchar(100)=null        
   ,@SubmitterID varchar(50)=null        
   ,@AssigneName varchar(100)=null        
   ,@TechID numeric(18,0)=null        
   ,@UserID numeric(18,0)=null        
   ,@InsertBy int =NULL        
   ,@InsertDt datetime =NULL        
   ,@UpdateBy int =NULL        
   ,@UpdateDt datetime =NULl        
   ,@Status nvarchar(10) = NULL        
   ,@TicketAttachMent nvarchar(max)=null        
   ,@Filename nvarchar(100)=null        
   ,@location nvarchar(100)=null        
   ,@Department nvarchar(100)=null        
   , @Note nvarchar(1000)=null        
   ,@SDRole nvarchar(100)=null        
   ,@Option varchar(50)  =null    
   ,@Error varchar(20)= null output   
   )        
 AS        
 BEGIN        
    BEGIN TRY  
	set @creationDateTime=GETDATE()
 if(@Option=''AddTicket'')        
 BEGIN        
   declare @ParentCategoryRef nvarchar(500);        
   declare @SLA nvarchar(300);        
   declare @OrgName nvarchar(100);        
   declare @sdSeverityFK1 numeric(18,0);        
         
 --    set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)       
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)        
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
 set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK )       
      
  set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*         
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  Row_Num=''1'')        
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
          where Deskref=@DeskRef and OrgFk=@organizationFK );        
        
       if(@SLA=''Severity'')        
        BEGIN         
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
       else if(@SLA=''Category'')        
        BEGIN        
         --set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
         --set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
		  set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
       else         
        BEGIN        
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
  if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)        
       BEGIN        
       -------------------------------- this will add notes , as ticket already exists -------------------------------        
        declare @TicketIDforNotes numeric(26,0)=null;        
        declare @NoteDesc nvarchar(max)=null;        
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))        
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK         
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)        
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)     
    set @Error=''Exists''  
       END        
  
       else         
         BEGIN        
    DECLARE @InsertedTickets TABLE (SID numeric(26,0),    Ticketref varchar(20));    
    
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK        
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone        
         ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,      
   actualResolutionDate,location,Department)       
   OUTPUT INSERTED.SID, INSERTED.Ticketref INTO @InsertedTickets(SID, Ticketref)    
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()        
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone        
       ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,      
    @actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))        
         
       SET @Ticketref = (SELECT TOP 1 Ticketref FROM @InsertedTickets ORDER BY SID DESC);    
         if(@Ticketref is not null)        
           BEGIN 

		     exec SP_AutoAssignTicket @TicketID=@Ticketref,@orgid=@organizationFK 

              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)         
              where ReqRef=@DeskRef and OrgRef=@organizationFK        
          END      
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK        
        
       if(@TicketAttachMent is not null)        
        BEGIN        
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
  END        
        
      END        
 ------------------------ assign ticket hirel on ticket creatio -----------------        
    declare @category nvarchar(500);        
  declare @location1 nvarchar(500);        
  declare @department1 nvarchar(500);        
   set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);        
   set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);        
   set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);        
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')        
    BEGIN        
        
     ------------------ assign hardware tickets only----------        
    if(@category like ''%Incident - Hardware%'')        
      BEGIN        
         if(@location1=''Sanand'')        
        BEGIN        
   --------------- Ticket will assign  to  Itamc.hhpe        
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
   END        
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')        
       BEGIN        
        
        --------ticket assign to chintan        
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
       END        
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')        
       BEGIN        
        
        --------ticket assign to itamc.gnr        
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
       END        
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')        
        BEGIN         
    ---------------- ticket assign to krunal        
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
   END        
     END        
        
     --------------------- asssign Software tickets only   --------------        
   if(@category like ''%Incident - Software%'')        
      BEGIN        
       if(@location1=''Sanand'')        
        BEGIN        
        --------------- Ticket will assign  to  Unati        
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
       END        
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')        
        BEGIN        
        
        --------ticket assign to chintan        
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        END        
        
         
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')        
        BEGIN         
          ---------------- ticket assign to krunal        
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        END        
    END        
          
  END        
    else if(@category like ''%Incident - Business Application%'')        
     BEGIN        
      -----------  ticket assign to nalin        
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
    END        
      else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')        
       BEGIN        
   -------------- ticket assign to anand        
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
    END        
         
          
        
    -------------end of auto assignment for hirel        
 END        
        
 if(@Option=''DeleteTicket'')        
 BEGIN        
 Delete from SDIncident where Ticketref=@Ticketref        
 END        
 if(@Option=''AssignTechnician'')        
 BEGIN        
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
  BEGIN        
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
  --exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
  END        
 END        
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------        
  if(@Option=''ChangeTechnician'')        
  BEGIN        
  declare @Reason nvarchar(1000);        
          
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);        
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
    BEGIN         
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK        
        
    END        
  END        
-----------------------------Update Ticket  ---------------------------------------------------        
 if(@Option=''UpdateTicket'')        
 BEGIN        
 ---Stage,DeskrefID,select from bydefaultvalue        
 Declare @PrevStageFK numeric(18,0)=null;        
  Declare @PrevStatusFK numeric(18,0)=null;        
  Declare @StatusFKAsPerStage numeric(18,0)=null;        
  Declare @TicketID numeric(18,0)=null;        
  Declare @EditedBy nvarchar(max)=null;        
  set @EditedBy=@UserName;        
  ------------this is prevstatus status        
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
         
 if(@sdStatusFK!=@PrevStageFK)        
 BEGIN        
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK        
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''        
         
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''        
         
 END        
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)        
 if(@sdStatusFK is null)        
 BEGIN        
  set @sdStatusFK=@StatusFKAsPerStage        
            
 END        
 else         
 BEGIN        
  set @sdStatusFK= @sdStatusFK        
 END        
        
         
 update  SDIncident        
        
  set    sdStageFK=@sdStageFK ,sdStatusFK=@StatusFKAsPerStage  ,sdPriorityFK=@sdPriorityFK  ,sdSeverityFK=@sdSeverityFK        
      ,sdCategoryFK=@sdCategoryFK  ,SubmitterID=@SubmitterID  ,submitterPhone=@submitterPhone  ,closedDateTime=@closedDateTime        
      ,assigneeType =@assigneeType,assigneeParticipantFK=@assigneeParticipantFK ,sdSolutionTypeFK=@sdSolutionTypeFK        
   ,solutionNote=@solutionNote ,categoryFullText=@categoryFullText        
   ,location=@location  ,Department=@Department  ,EditedBy=@UserName        
        
      where ticketref=@Ticketref and organizationFK =@organizationFK        
  if(@TicketAttachMent is not null)        
   BEGIN        
   exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
   END        
  exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK        
         
 declare @NewStatus nvarchar(100);        
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)        
 if(@NewStatus=''resolved'')        
 BEGIN        
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK         
 END        
 declare  @PrevStageForMail numeric(18,0);        
  declare  @SDStageForMail numeric(18,0);        
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')        
 BEGIN        
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK       
         
 END        
         
 END        
        
 if(@Option=''AddSR_ApproverStatus'')        
 BEGIN        
 declare @desk nvarchar(100);        
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)        
 if(@desk=''CloudProcess'')        
 BEGIN        
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''        
 END        
 else        
 BEGIN        
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK        
        
 END        
        
 END      
 END TRY    
    BEGIN CATCH    
        SET @Ticketref = ERROR_MESSAGE();    
    END CATCH   
 if(@Error='''')  
 begin  
if exists(select * from SDIncident where Ticketref=@Ticketref AND organizationFK=@organizationFK AND (TicketSummary IS NULL OR TicketSummary = '''') )    
  begin    
  set @Error=''yes''    
  end    
  end  
 END        











'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_New]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_New]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_New', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_New    
(    
   @id numeric(26,0)= null    
     ,@DeskRef varchar(50) =NULL    
    ,@UserIDForAppro numeric(18,0)=null    
    ,@ticketout varchar(50)=Null    
    ,@Ticketref varchar(20)= null output    
    ,@Error varchar(20)= null output      
    ,@partitionid numeric(26,0)= null    
    ,@orgServDeskDefnFK numeric(26,0)= null    
    ,@sdStageFK numeric(26,0)= null    
    ,@sdStatusFK numeric(26,0)= null    
    ,@sdPriorityFK numeric(26,0)= null    
    ,@sdSeverityFK numeric(26,0)= null    
    ,@sdSolutionTypeFK numeric(26,0)= null    
    ,@sdCategoryFK numeric(26,0)= null    
    ,@creationDateTime datetime= null    
    ,@closedDateTime datetime= null    
    ,@TicketSummary varchar(max)= null    
    ,@TicketDesc varchar(max)= null    
 ,@TickNotes nvarchar(max)=null    
    ,@submitterType varchar(50)= null    
    ,@submitterName varchar(50)= null    
    ,@submitterEmailAddr varchar(50)= null    
    ,@submitterPhone varchar(50)= null    
    ,@assigneeType varchar(50)= null    
    ,@assigneePoolFK numeric(26,0)= null    
    ,@assigneeParticipantFK numeric(26,0)= null    
    ,@actualCompletedDate datetime= null    
    ,@expectedDueDate datetime= null    
    ,@actualResolutionDate datetime= null    
    ,@organizationFK numeric(26,0)= null    
    ,@orgStaffFK numeric(26,0)= null    
    ,@sdErrorMessage varchar(max)= null    
    ,@solutionNote varchar(max)= null    
    ,@sourceType varchar(50)= null    
    ,@previousStageFK numeric(26,0)= null    
    ,@categoryFullText varchar(max)= null    
   ,@sdCategoryRef  varchar(200)=null    
   ,@UserName nvarchar(100)=null    
   ,@SubmitterID varchar(50)=null    
   ,@AssigneName varchar(100)=null    
   ,@TechID numeric(18,0)=null    
   ,@UserID numeric(18,0)=null    
   ,@InsertBy int =NULL    
   ,@InsertDt datetime =NULL    
   ,@UpdateBy int =NULL    
   ,@UpdateDt datetime =NULl    
   ,@Status nvarchar(10) = NULL    
   ,@TicketAttachMent nvarchar(max)=null    
   ,@Filename nvarchar(100)=null    
   ,@location nvarchar(100)=null    
   ,@Department nvarchar(100)=null    
   ,@Note nvarchar(1000)=null    
   ,@SDRole nvarchar(100)=null    
   ,@Option varchar(50)=null,    
    @OrgName varchar(50)=null,    
    @TicketNumber VARCHAR(100)=null    
     
 )    
 AS    
 BEGIN    
 set @Ticketref = @TicketNumber    
 declare @Type varchar(50)    
 set @Type= @Option    
 if(@OrgName=''Hitachi'')    
  begin    
  EXEC SD_spSDIncident_Hirel     
        @id = @id,     
        @DeskRef = @DeskRef,     
        @UserIDForAppro = @UserIDForAppro,    
        @ticketout = @ticketout,     
        @Ticketref = @TicketNumber OUTPUT,     
        @partitionid = @partitionid,     
        @orgServDeskDefnFK = @orgServDeskDefnFK,     
        @sdStageFK = @sdStageFK,     
        @sdStatusFK = @sdStatusFK,     
        @sdPriorityFK = @sdPriorityFK,     
        @sdSeverityFK = @sdSeverityFK,     
        @sdSolutionTypeFK = @sdSolutionTypeFK,     
        @sdCategoryFK = @sdCategoryFK,    
        @creationDateTime = @creationDateTime,     
        @closedDateTime = @closedDateTime,     
        @TicketSummary = @TicketSummary,     
        @TicketDesc = @TicketDesc,     
        @TickNotes = @TickNotes,     
        @submitterType = @submitterType,     
        @submitterName = @submitterName,     
        @submitterEmailAddr = @submitterEmailAddr,     
        @submitterPhone = @submitterPhone,     
        @assigneeType = @assigneeType,     
        @assigneePoolFK = @assigneePoolFK,     
        @assigneeParticipantFK = @assigneeParticipantFK,     
        @actualCompletedDate = @actualCompletedDate,    
        @expectedDueDate = @expectedDueDate,     
        @actualResolutionDate = @actualResolutionDate,     
        @organizationFK = @organizationFK,     
        @orgStaffFK = @orgStaffFK,     
        @sdErrorMessage = @sdErrorMessage,     
        @solutionNote = @solutionNote,     
        @sourceType = @sourceType,    
        @previousStageFK = @previousStageFK,     
        @categoryFullText = @categoryFullText,   
        @sdCategoryRef = @sdCategoryRef,     
        @UserName = @UserName,     
        @SubmitterID = @SubmitterID,     
        @AssigneName = @AssigneName,     
        @TechID = @TechID,     
        @UserID = @UserID,     
        @InsertBy = @InsertBy,     
        @InsertDt = @InsertDt,     
        @UpdateBy = @UpdateBy,     
        @UpdateDt = @UpdateDt,     
        @Status = @Status,     
        @TicketAttachMent = @TicketAttachMent,     
        @Filename = @Filename,     
        @location = @location,     
        @Department = @Department,     
        @Note = @Note,    
        @SDRole = @SDRole,     
        @Option = @Type,  
  @Error=@Error OUTPUT;    
  end    
    
  else    
  begin    
  EXEC [dbo].[SD_spSDIncident_IMSPL]    
    @id = @id,    
    @DeskRef = @DeskRef,    
    @UserIDForAppro = @UserIDForAppro,    
    @ticketout = @ticketout,    
    @Ticketref = @TicketNumber OUTPUT,    
    @partitionid = @partitionid,    
    @orgServDeskDefnFK = @orgServDeskDefnFK,    
    @sdStageFK = @sdStageFK,    
    @sdStatusFK = @sdStatusFK,    
    @sdPriorityFK = @sdPriorityFK,    
    @sdSeverityFK = @sdSeverityFK,    
    @sdSolutionTypeFK = @sdSolutionTypeFK,    
    @sdCategoryFK = @sdCategoryFK,    
    @creationDateTime = @creationDateTime,    
    @closedDateTime = @closedDateTime,    
    @TicketSummary = @TicketSummary,    
    @TicketDesc = @TicketDesc,    
    @TickNotes = @TickNotes,    
    @submitterType = @submitterType,    
    @submitterName = @submitterName,    
    @submitterEmailAddr = @submitterEmailAddr,    
    @submitterPhone = @submitterPhone,    
    @assigneeType = @assigneeType,    
    @assigneePoolFK = @assigneePoolFK,    
    @assigneeParticipantFK = @assigneeParticipantFK,    
    @actualCompletedDate = @actualCompletedDate,    
    @expectedDueDate = @expectedDueDate,    
    @actualResolutionDate = @actualResolutionDate,    
    @organizationFK = @organizationFK,    
    @orgStaffFK = @orgStaffFK,    
    @sdErrorMessage = @sdErrorMessage,    
    @solutionNote = @solutionNote,    
    @sourceType = @sourceType,    
    @previousStageFK = @previousStageFK,    
    @categoryFullText = @categoryFullText,    
    @sdCategoryRef = @sdCategoryRef,    
    @UserName = @UserName,    
    @SubmitterID = @SubmitterID,    
    @AssigneName = @AssigneName,    
    @TechID = @TechID,    
    @UserID = @UserID,    
    @InsertBy = @InsertBy,    
    @InsertDt = @InsertDt,    
    @UpdateBy = @UpdateBy,    
    @UpdateDt = @UpdateDt,    
    @Status = @Status,    
    @TicketAttachMent = @TicketAttachMent,    
    @Filename = @Filename,    
    @location = @location,    
    @Department = @Department,    
    @Note = @Note,    
    @SDRole = @SDRole,    
    @Option = @Type,  
 @Error=@Error OUTPUT;    
 end    
  
 END    
    
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident    
(    
   @id numeric(26,0)= null    
     ,@DeskRef varchar(50) =NULL    
    ,@UserIDForAppro numeric(18,0)=null    
    ,@ticketout varchar(50)=Null    
    ,@Ticketref varchar(20)= null output    
    ,@Error varchar(100)= null output      
    ,@partitionid numeric(26,0)= null    
    ,@orgServDeskDefnFK numeric(26,0)= null    
    ,@sdStageFK numeric(26,0)= null    
    ,@sdStatusFK numeric(26,0)= null    
    ,@sdPriorityFK numeric(26,0)= null    
    ,@sdSeverityFK numeric(26,0)= null    
    ,@sdSolutionTypeFK numeric(26,0)= null    
    ,@sdCategoryFK numeric(26,0)= null    
    ,@creationDateTime datetime= null    
    ,@closedDateTime datetime= null    
    ,@TicketSummary varchar(max)= null    
    ,@TicketDesc varchar(max)= null    
 ,@TickNotes nvarchar(max)=null    
    ,@submitterType varchar(50)= null    
    ,@submitterName varchar(50)= null    
    ,@submitterEmailAddr varchar(50)= null    
    ,@submitterPhone varchar(50)= null    
    ,@assigneeType varchar(50)= null    
    ,@assigneePoolFK numeric(26,0)= null    
    ,@assigneeParticipantFK numeric(26,0)= null    
    ,@actualCompletedDate datetime= null    
    ,@expectedDueDate datetime= null    
    ,@actualResolutionDate datetime= null    
    ,@organizationFK numeric(26,0)= null    
    ,@orgStaffFK numeric(26,0)= null    
    ,@sdErrorMessage varchar(max)= null    
    ,@solutionNote varchar(max)= null    
    ,@sourceType varchar(50)= null    
    ,@previousStageFK numeric(26,0)= null    
    ,@categoryFullText varchar(max)= null    
   ,@sdCategoryRef  varchar(200)=null    
   ,@UserName nvarchar(100)=null    
   ,@SubmitterID varchar(50)=null    
   ,@AssigneName varchar(100)=null    
   ,@TechID numeric(18,0)=null    
   ,@UserID numeric(18,0)=null    
   ,@InsertBy int =NULL    
   ,@InsertDt datetime =NULL    
   ,@UpdateBy int =NULL    
   ,@UpdateDt datetime =NULl    
   ,@Status nvarchar(10) = NULL    
   ,@TicketAttachMent nvarchar(max)=null    
   ,@Filename nvarchar(100)=null    
   ,@location nvarchar(100)=null    
   ,@Department nvarchar(100)=null    
   ,@Note nvarchar(1000)=null    
   ,@SDRole nvarchar(100)=null    
   ,@Option varchar(50)=null,    
    @OrgName varchar(50)=null,    
    @TicketNumber VARCHAR(100)=null    
     
 )    
 AS    
 BEGIN    
 set @Ticketref = @TicketNumber    
 declare @Type varchar(50)    
 set @Type= @Option    
 if(@OrgName=''Hitachi'')    
  begin    
  EXEC SD_spSDIncident_Hirel     
        @id = @id,     
        @DeskRef = @DeskRef,     
        @UserIDForAppro = @UserIDForAppro,    
        @ticketout = @ticketout,     
        @Ticketref = @TicketNumber OUTPUT,     
        @partitionid = @partitionid,     
        @orgServDeskDefnFK = @orgServDeskDefnFK,     
        @sdStageFK = @sdStageFK,     
        @sdStatusFK = @sdStatusFK,     
        @sdPriorityFK = @sdPriorityFK,     
        @sdSeverityFK = @sdSeverityFK,     
        @sdSolutionTypeFK = @sdSolutionTypeFK,     
        @sdCategoryFK = @sdCategoryFK,    
        @creationDateTime = @creationDateTime,     
        @closedDateTime = @closedDateTime,     
        @TicketSummary = @TicketSummary,     
        @TicketDesc = @TicketDesc,     
        @TickNotes = @TickNotes,     
        @submitterType = @submitterType,     
        @submitterName = @submitterName,     
        @submitterEmailAddr = @submitterEmailAddr,     
        @submitterPhone = @submitterPhone,     
        @assigneeType = @assigneeType,     
        @assigneePoolFK = @assigneePoolFK,     
        @assigneeParticipantFK = @assigneeParticipantFK,     
        @actualCompletedDate = @actualCompletedDate,    
        @expectedDueDate = @expectedDueDate,     
        @actualResolutionDate = @actualResolutionDate,     
        @organizationFK = @organizationFK,     
        @orgStaffFK = @orgStaffFK,     
        @sdErrorMessage = @sdErrorMessage,     
        @solutionNote = @solutionNote,     
        @sourceType = @sourceType,    
        @previousStageFK = @previousStageFK,     
        @categoryFullText = @categoryFullText,   
        @sdCategoryRef = @sdCategoryRef,     
        @UserName = @UserName,     
        @SubmitterID = @SubmitterID,     
        @AssigneName = @AssigneName,     
        @TechID = @TechID,     
        @UserID = @UserID,     
        @InsertBy = @InsertBy,     
        @InsertDt = @InsertDt,     
        @UpdateBy = @UpdateBy,     
        @UpdateDt = @UpdateDt,     
        @Status = @Status,     
        @TicketAttachMent = @TicketAttachMent,     
        @Filename = @Filename,     
        @location = @location,     
        @Department = @Department,     
        @Note = @Note,    
        @SDRole = @SDRole,     
        @Option = @Type,  
  @Error=@Error OUTPUT;    
  end    
    
  else    
  begin    
  EXEC [dbo].[SD_spSDIncident_IMSPL]    
    @id = @id,    
    @DeskRef = @DeskRef,    
    @UserIDForAppro = @UserIDForAppro,    
    @ticketout = @ticketout,    
    @Ticketref = @TicketNumber OUTPUT,    
    @partitionid = @partitionid,    
    @orgServDeskDefnFK = @orgServDeskDefnFK,    
    @sdStageFK = @sdStageFK,    
    @sdStatusFK = @sdStatusFK,    
    @sdPriorityFK = @sdPriorityFK,    
    @sdSeverityFK = @sdSeverityFK,    
    @sdSolutionTypeFK = @sdSolutionTypeFK,    
    @sdCategoryFK = @sdCategoryFK,    
    @creationDateTime = @creationDateTime,    
    @closedDateTime = @closedDateTime,    
    @TicketSummary = @TicketSummary,    
    @TicketDesc = @TicketDesc,    
    @TickNotes = @TickNotes,    
    @submitterType = @submitterType,    
    @submitterName = @submitterName,    
    @submitterEmailAddr = @submitterEmailAddr,    
    @submitterPhone = @submitterPhone,    
    @assigneeType = @assigneeType,    
    @assigneePoolFK = @assigneePoolFK,    
    @assigneeParticipantFK = @assigneeParticipantFK,    
    @actualCompletedDate = @actualCompletedDate,    
    @expectedDueDate = @expectedDueDate,    
    @actualResolutionDate = @actualResolutionDate,    
    @organizationFK = @organizationFK,    
    @orgStaffFK = @orgStaffFK,    
    @sdErrorMessage = @sdErrorMessage,    
    @solutionNote = @solutionNote,    
    @sourceType = @sourceType,    
    @previousStageFK = @previousStageFK,    
    @categoryFullText = @categoryFullText,    
    @sdCategoryRef = @sdCategoryRef,    
    @UserName = @UserName,    
    @SubmitterID = @SubmitterID,    
    @AssigneName = @AssigneName,    
    @TechID = @TechID,    
    @UserID = @UserID,    
    @InsertBy = @InsertBy,    
    @InsertDt = @InsertDt,    
    @UpdateBy = @UpdateBy,    
    @UpdateDt = @UpdateDt,    
    @Status = @Status,    
    @TicketAttachMent = @TicketAttachMent,    
    @Filename = @Filename,    
    @location = @location,    
    @Department = @Department,    
    @Note = @Note,    
    @SDRole = @SDRole,    
    @Option = @Type,  
 @Error=@Error OUTPUT;    
 end    
  
 END    
    
'
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRGodrej]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRGodrej]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_SRGodrej', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_SRGodrej        
(            
@userName varchar(100)=null,            
@Subject nvarchar(1000)=NULL,            
@EmailBody nvarchar(max)=NULL,                  
@UserID nvarchar(100) = NULL,            
@Ticketref  varchar(100) = NULL,            
@Approval1Name varchar(100)= NULL,            
@Approval1Email varchar(100)= NULL,            
@Approval1Status varchar(50)=NULL,            
@Approval1Remarks varchar(max)=NULL,            
@Approval1Grade varchar(20)=NULL,               
@Approval2Remarks varchar(max)=NULL,           
@Approval3Name varchar (100) =NULL,             
@Approval3Remarks varchar(max)=NULL,           
@Approval5Name varchar (100)= NULL,            
@Approval5Email varchar (100) =NULL,           
@Remarks varchar(max)=NULL,            
@ApproverLevel varchar(10)=NULL,            
@StatusFk numeric(18,0)=NULL,             
@Approval4IsActive bit=NULL,            
@Approval5IsActive bit=NULL,            
@PrevStage numeric(18,0)=null,            
@ToEmail nvarchar(100)=null,            
@assigneeParticipantFK numeric(18,0) =null,            
 @HODApproval nvarchar(200)=null,            
 @OrgId numeric(18,0)=null,            
 @ApprovalBy varchar(50)=NULL,          
@Options varchar(50) 
             
 )            
 AS            
 BEGIN               
  if(@Options=''TicketAssigned'')            
  BEGIN            
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));            
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));            
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')          
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a             
inner join              
SD_User_Master b             
on a.RefUserID=b.UserID            
where             
REplace(CategoryFK,''||'','' - '') in            
(select Category from vSD_Tickets where TicketNumber=@Ticketref)            
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref            
     if(@ToEmail is not null)            
      BEGIN            
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')         
                   
       END              
  END            
  if(@Options=''AddSrApprovalStatus'')           
  BEGIN            
  set @Approval1Name=(select top 1 UserName from sd_srApprovers where UserEmail =@HODApproval)            
    set @Approval1Email=(select top 1 UserEmail from sd_srApprovers where UserEmail =@HODApproval)          
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID ,Approval1Name ,Approval1Email,Approval1Status,UATAccept,OrgId )            
          values(@TicketRef,@UserID ,@Approval1Name,@Approval1Email,''Pending'',''Pending'',@OrgId)             
  END            
              
            
  if(@Options=''UpdateRequest'')            
 BEGIN            
  declare @location nvarchar(100);            
  declare @M2Status nvarchar(100);            
  declare @EmpCode nvarchar(40);            
  declare @StatusFk1 numeric(18,0);            
  declare @PrevStatus numeric(18,0);            
  declare @sdStageFk numeric(18,0);            
  declare @FromEmail nvarchar(100);            
   SET @FromEmail=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);         
       set @PrevStage=(select top 1   sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)            
     set @PrevStatus=(select top 1 sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)            
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)            
     if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref and OrgId=@OrgId)            
       BEGIN            
                    
     --set status to Awaiting IT Manager Approval            
            set @StatusFk1=(select top 1  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef=''Approved By Reporting Manager''  and OrgDeskRef=@OrgId)            
            set @sdStageFK=(select top 1  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef=''Approved By Reporting Manager'' and OrgDeskRef=@OrgId)            
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus             
            where Ticketref=@Ticketref   and organizationFK=@OrgId            
            update SD_SRApprovalStatus set Approval1Status=''Approved''             
              ,Approval1Remarks=@Remarks            
              where TicketRef=@Ticketref    and orgid=@OrgId             
     set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ApproverUpdate'',@OrgID=@OrgId            
            
  ---------Add Notes-------------          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
     END             
    if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
               
    BEGIN            
         set @StatusFk1=(select top 1 ID from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
      set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus where Ticketref=@Ticketref  and organizationFK=@OrgId            
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks            
                               where TicketRef=@Ticketref  and orgid=@OrgId            
              
      set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
      END            
    if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
            
       BEGIN            
       set @StatusFk1=(select top 1 ID FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       set @sdStageFk=(select top 1 sd_stageFK FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId            
         update SD_SRApprovalStatus set Approval3Status=''Approved''             
        ,Approval3Remarks=@Remarks            
      ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval3Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
  END            
                 
     if(@Approval4IsActive=''1'')            
     BEGIN            
      if(@ApproverLevel=''L4'')            
      BEGIN            
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref            
      update SD_SRApprovalStatus set Approval4Status=''Approved''             
  ,Approval4Remarks=@Remarks            
   if(@Approval5IsActive=''1'')            
   BEGIN            
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));            
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));            
      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')        
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );            
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')            
        ---------Add Notes-------------          
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
          
   END            
      END            
     END            
     if(@Approval5IsActive=''1'')            
     BEGIN            
    if(@ApproverLevel=''L5'')            
   BEGIN            
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref            
   update SD_SRApprovalStatus set Approval5Status=''Approved''             
  ,Approval5Remarks=@Remarks            
    ---------Add Notes-------------          
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
   END            
   END            
  END            
            
  if(@Options=''RejectRequest'')            
   BEGIN            
             
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
            
       set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
       set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
    select * from SD_Status            
       if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)            
       BEGIN-- reject by manager            
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
            
                     
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                        
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId            
            
            update SD_SRApprovalStatus set Approval1Status=''Rejected''             
         ,Approval1Remarks=@Remarks            
       where TicketRef=@Ticketref  and orgid=@OrgId            
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
        SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
            
            
     -----------now ticket will visible to pool  according to location of ticket             
     set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
     set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and orgid=@OrgId)            
                     
           ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
             
     if(@ToEmail is not null)            
       BEGIN            
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
       END            
       END            
                    
              if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
               BEGIN            
               --Rejected by IT manager             
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId            
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''             
                   ,Approval2Remarks=@Remarks            
                   where TicketRef=@Ticketref  and orgid=@OrgId            
                    -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
       SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
    ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
   exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
            
     -----------now ticket will visible to pool  according to location of ticket             
     set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )            
     set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)            
                     
                     
     if(@ToEmail is not null)            
       BEGIN            
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
       END            
  END          
                  
          if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
             BEGIN            
              set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId            
              update SD_SRApprovalStatus set Approval3Status=''Rejected''             
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId            
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
                    
                ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
            END           
           if(@Approval4IsActive=''1'')            
            BEGIN            
             if(@ApproverLevel=''L4'')            
              BEGIN            
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
                update SD_SRApprovalStatus set Approval4Status=''Rejected''             
                ,Approval4Remarks=@Remarks            
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
          
        ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
              END            
            END          
         if(@Approval5IsActive=''1'')            
          BEGIN            
                          
           if(@ApproverLevel=''L5'')            
            BEGIN            
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
               update SD_SRApprovalStatus set Approval5Status=''Rejected''             
               ,Approval5Remarks=@Remarks            
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref          
 set  @ApprovalBy =(select top 1 approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
             END            
          END            
   END            
 END '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_CRGodrej]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_CRGodrej]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_CRGodrej', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_CRGodrej    
(    
@userName varchar(100)=null,    
@Subject nvarchar(1000)=NULL,    
@EmailBody nvarchar(max)=NULL,    
@To varchar(500)=null,    
@MailBody  varchar (max) =NULL,    
@UserEmail nvarchar(200)=NULL,    
@User nvarchar(200)=NULL,    
@cc nvarchar(200)=NULL,    
@AssigneeEmail nvarchar(200)=NULL,    
@UserID nvarchar(100) = NULL,    
@Ticketref  varchar(100) = NULL,    
@Approval1Name varchar(100)= NULL,    
@Approval1Email varchar(100)= NULL,    
@Approval1Status varchar(50)=NULL,    
@Approval1Remarks varchar(max)=NULL,    
@Approval1Grade varchar(20)=NULL,    
@Approval2Name varchar(100)= NULL,    
@Approval2Email varchar(100)= NULL,    
@Approval2Status varchar(50)=NULL,    
@Approval2Remarks varchar(max)=NULL,    
@Approval2Grade varchar(20)=NULL,    
@Approval3Name varchar (100) =NULL,    
@Approval3Email  varchar (100) =NULL,    
@Approval3Status varchar(50)=NULL,    
@Approval3Remarks varchar(max)=NULL,    
@Approval3Grade varchar(20)=NULL,    
@Approval4Name varchar (100) =NULL,    
@Approval4Email varchar(100)= NULL,    
@Approval4Status varchar(50)=NULL,    
@Approval4Remarks varchar(max)=NULL,    
@Approval4Grade varchar(20)=NULL,    
@Approval5Name varchar (100)= NULL,    
@Approval5Email varchar (100) =NULL,    
@Approval5Status varchar(50) =NULL,    
@Approval5Grade varchar(20)=NULL,    
@Remarks varchar(max)=NULL,    
@ApproverLevel varchar(10)=NULL,    
@StatusFk numeric(18,0)=NULL,    
@Approval1IsActive bit=NULL,    
@Approval2IsActive bit=NULL,    
@Approval3IsActive bit=NULL,    
@Approval4IsActive bit=NULL,    
@Approval5IsActive bit=NULL,    
@PrevStage numeric(18,0)=null,    
@ToEmail nvarchar(100)=null,    
@assigneeParticipantFK numeric(18,0) =null,    
 @HODApproval nvarchar(200)=null,    
 @OrgId numeric(18,0)=null,    
 @ApprovalBy varchar(50)=NULL,  
@Option varchar(50)    
     
 )    
 AS    
 BEGIN  ----main begin start    
    
    
     
  if(@Option=''TicketAssigned'')    
  BEGIN    
     
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
       
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a     
inner join      
SD_User_Master b     
on a.RefUserID=b.UserID    
where     
REplace(CategoryFK,''||'','' - '') in    
(select Category from vSDTicket where TicketNumber=@Ticketref)    
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref    
     if(@ToEmail is not null)    
      BEGIN    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
    
           
       END      
  END    
  if(@Option=''AddSrApprovalStatus'')    
     
  BEGIN    
  set @Approval1Name=(select top 1 UserName from sd_srApprovers where UserEmail =@HODApproval)    
    set @Approval1Email=(select top 1 UserEmail from sd_srApprovers where UserEmail =@HODApproval)    
    
        
    ------------------ enteries will insert so that to monitor    
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID    
         
      ,Approval1Name ,Approval1Email,Approval1Status,UATAccept,OrgId )    
          values(@TicketRef,@UserID     
         ,@Approval1Name,@Approval1Email,''Pending'',''Pending'',@OrgId)     
  END    
      
    
  if(@Option=''UpdateRequest'')    
 BEGIN    
  declare @location nvarchar(100);    
  declare @M2Status nvarchar(100);    
  declare @EmpCode nvarchar(40);    
  declare @StatusFk1 numeric(18,0);    
  declare @PrevStatus numeric(18,0);    
  declare @sdStageFk numeric(18,0);    
  declare @FromEmail nvarchar(100);    
   SET @FromEmail=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);    
      
     
       set @PrevStage=(select top 1   sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
     set @PrevStatus=(select top 1 sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)    
     if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref and OrgId=@OrgId)    
       BEGIN    
            
     --set status to Awaiting IT Manager Approval    
            set @StatusFk1=(select top 1  ID from SD_Status where DeskRef=''Change Request'' and StatusCodeRef=''Approved By Reporting Manager''  and OrgDeskRef=@OrgId)    
            set @sdStageFK=(select top 1  sd_stageFK from SD_Status where DeskRef=''Change Request'' and StatusCodeRef=''Approved By Reporting Manager'' and OrgDeskRef=@OrgId)    
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus     
            where Ticketref=@Ticketref   and organizationFK=@OrgId    
            update SD_SRApprovalStatus set Approval1Status=''Approved''     
              ,Approval1Remarks=@Remarks    
              where TicketRef=@Ticketref    and orgid=@OrgId     
     set  @ApprovalBy =(select approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ApproverUpdate'',@OrgID=@OrgId    
    
  ---------Add Notes-------------  
 exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
                  
              ----------------- AS manual approval 2 will work here  ----------------    
       --set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));    
       --set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));    
       --  SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
            
       
       -- set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);    
       -- insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
       -- values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
                      
         
         
         
         
     END    
      
   ----------- for IT manager Update    
    if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)    
       
    BEGIN    
         set @StatusFk1=(select  ID from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
      set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and orgid=@OrgId    
      
      set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
     --  ELSE    
     -- BEGIN     
     --   update SDIncident set assigneeParticipantFK=''1435327746'' where Ticketref=@Ticketref    
     --set @ToEmail=( select b.EmailID from SD_Technician a     
     --    inner join SD_User_Master b     
    
     --    on a.RefUserID=b.UserID    
             
     --    where EmailID like ''%nikhil.kumar.fb@hitachi-systems.com%'')    
     --    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
     --   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
     -- END    
      END    
          
          
        
        
         ----------- for IT manager Update    
    if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)    
    
       BEGIN    
    
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request     
       --------------than IT manager will take action on it    
       set @StatusFk1=(select ID FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval3Status=''Approved''     
        ,Approval3Remarks=@Remarks    
   --set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
   --     set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
   --     ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
   --   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
   --   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
   --   insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   --   values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
      ---------Add Notes-------------  
 set  @ApprovalBy =(select approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  END    
         
     if(@Approval4IsActive=''1'')    
     BEGIN    
      if(@ApproverLevel=''L4'')    
      BEGIN    
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
      update SD_SRApprovalStatus set Approval4Status=''Approved''     
  ,Approval4Remarks=@Remarks    
   if(@Approval5IsActive=''1'')    
   BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));    
      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
        ---------Add Notes-------------  
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
   END    
      END    
     END    
     if(@Approval5IsActive=''1'')    
     BEGIN    
    if(@ApproverLevel=''L5'')    
   BEGIN    
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
   update SD_SRApprovalStatus set Approval5Status=''Approved''     
  ,Approval5Remarks=@Remarks    
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
   END    
   END    
  END    
    
  if(@Option=''RejectRequest'')    
   BEGIN    
     
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
    
       set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
       set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
    select * from SD_Status    
       if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)    
       BEGIN-- reject by manager    
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
    
             
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
                
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
    
            update SD_SRApprovalStatus set Approval1Status=''Rejected''     
         ,Approval1Remarks=@Remarks    
       where TicketRef=@Ticketref  and orgid=@OrgId    
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
        SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    
     -----------now ticket will visible to pool  according to location of ticket     
     set @location=(select location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location  and orgid=@OrgId)    
             
           ---------Add Notes-------------  
 set  @ApprovalBy =(select approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
     
     if(@ToEmail is not null)    
       BEGIN    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       END    
           
       END    
         
        
            
              if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)    
               BEGIN    
               --Rejected by IT manager     
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId    
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''     
                   ,Approval2Remarks=@Remarks    
                   where TicketRef=@Ticketref  and orgid=@OrgId    
                    -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
       SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
    
     -----------now ticket will visible to pool  according to location of ticket     
     set @location=(select location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )    
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)    
             
             
     if(@ToEmail is not null)    
       BEGIN    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       END    
               END    
              
          
          if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)    
             BEGIN    
              set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId    
              update SD_SRApprovalStatus set Approval3Status=''Rejected''     
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId    
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
            
                ---------Add Notes-------------  
 set  @ApprovalBy =(select approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
            END    
      
             
        --END    
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)    
     --   BEGIN    
           if(@Approval4IsActive=''1'')    
            BEGIN    
             if(@ApproverLevel=''L4'')    
              BEGIN    
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
                update SD_SRApprovalStatus set Approval4Status=''Rejected''     
                ,Approval4Remarks=@Remarks    
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
  
        ---------Add Notes-------------  
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
              END    
            END    
       -- END    
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)    
     -- BEGIN    
         if(@Approval5IsActive=''1'')    
          BEGIN    
                  
           if(@ApproverLevel=''L5'')    
            BEGIN    
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
               update SD_SRApprovalStatus set Approval5Status=''Rejected''     
               ,Approval5Remarks=@Remarks    
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
             END    
          END    
      --END    
   END    
    
    
    
    
 END  ----main end closes    
     
     '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncidentFromMail]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncidentFromMail]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncidentFromMail', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spSDIncidentFromMail
(
	


      @submitterEmailAddr varchar(50)= null
	  ,	 @submitterName varchar(50)= null
	     ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@OrgId numeric(18,0)=null
	--  ,@creationDateTime datetime =null
	 
		,@Option varchar(50)
		 	,@Email_FromInboxID varchar(50)=null
	
	)
	AS
	BEGIN
	
 if(@Option=''AddTicket'')
 BEGIN
 ---Stage,DeskrefID,select from bydefaultvalue
		declare @id numeric(26,0)= null;
			 declare @DeskRef varchar(50) =NULL;
		 declare  @Ticketref varchar(20) =NULL  ;
	  declare    @partitionid numeric(26,0)= null;
    declare   @orgServDeskDefnFK numeric(26,0)= null;
     declare  @sdStageFK numeric(26,0)= null;
    declare   @sdStatusFK numeric(26,0)= null;
     declare  @sdPriorityFK numeric(26,0)= null;
    declare  @sdSeverityFK numeric(26,0)= null;
    declare  @sdSolutionTypeFK numeric(26,0)= null;
   declare  @sdCategoryFK numeric(26,0)= null;
   -- declare  @creationDateTime datetime= null;
   declare  @closedDateTime datetime= null;
   
	declare  @TickNotes nvarchar(max)=null
   declare   @submitterType varchar(50)= null;
     
   declare   @submitterPhone varchar(50)= null;
   declare   @assigneeType varchar(50)= null;
   declare   @assigneePoolFK numeric(26,0)= null;
    declare  @assigneeParticipantFK numeric(26,0)= null;
    declare  @actualCompletedDate datetime= null;
   declare   @expectedDueDate datetime= null;
 declare   @actualResolutionDate datetime= null;
   declare   @organizationFK numeric(26,0)= null;
   declare   @orgStaffFK numeric(26,0)= null;
   declare   @sdErrorMessage varchar(max)= null;
   declare   @solutionNote varchar(max)= null;
   declare   @sourceType varchar(50)= null;
   declare   @previousStageFK numeric(26,0)= null;
   declare   @categoryFullText varchar(max)= null;
	declare  @sdCategoryRef  varchar(200)=null;
	declare  @UserName nvarchar(100)=null;
	declare  @SubmitterID varchar(50)=null;
	declare  	  @AssigneName varchar(100)=null;
declare	  @TechID numeric(18,0)=null;
	declare  @UserID numeric(18,0)=null;
		declare @createdof datetime=null;
	declare	@Status nvarchar(10) = NULL;
	declare	@TicketAttachMent nvarchar(max)=null;
	declare	@Filename nvarchar(100)=null;


   Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=''Incident'' and OrgRef=@OrgId)
   set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=''Incident'' and OrgRef=@OrgId)
   set @sdCategoryFK=(select sdCategoryFK from SD_ServDeskDefn where  Deskref=''Incident'' and OrgFk=@OrgId);
   set @categoryFullText=(select Replace(Categoryref,''||'','' - '') from SD_Category where id=@sdCategoryFK)
  set @createdof=getdate();
   set @sdSeverityFK=(select sdSeverityFK from vSDOrgDeskDef where Deskref=''Incident'' and OrgFk=@OrgId);
   set @sdStageFK=(select sdStageFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId);
   set @sdStatusFK=(select sdStatusFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId );
  -- set @expectedDueDate= ( select dbo.GetDueDate( GETDATE(), ''Incident'',@sdSeverityFK,@OrgId))
   set @sdPriorityFK=(select sdPriorityFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId);

		set @expectedDueDate= ( select dbo.GetDueDate_kl(@createdof, @DeskRef,@sdSeverityFK,@organizationFK))
				set @actualResolutionDate= ( select dbo.GetDueDate_klres(@createdof, @DeskRef,@sdSeverityFK,@organizationFK))
		if(@TicketSummary like ''%RE:%'' or
	@TicketSummary like ''%FWD:%'' or
	@TicketSummary like ''%Microsoft 365 security: You have messages in quarantine%'' 
	or @TicketSummary like ''%Approaching SharePoint Site Storage Limit%'' 
	or @TicketSummary like ''%Tailored Tech at Your Fingertips: Customize Your Lenovo Laptop Now !%''
	or @submitterEmailAddr like ''%lenovo@ecomm.lenovo.com%'' or @TicketSummary like ''%Undeliverable:%'')
	BEGIN
	if exists(select top 1 * from vSDTicket  where (Status !=''Resolved'')  and ( (RTrim(LTRIM(@TicketSummary))) like ''%''+REPLACE(RTRIM(LTRIM(TicketNumber)), CHAR(160),'''')+''%'') )
		BEGIN
		declare @TicketIDforNotes numeric(26,0)=null;
		declare @NoteDesc nvarchar(max)=null;
		set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
		 select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber,@organizationFK=OrgId from vSDTicket where ( Status !=''Resolved'' or Status!=''Closed'')  and (@TicketSummary like ''%''+TicketNumber+''%'' ) order by CreationDate desc
		 
		
		 INSERT INTO	SD_TicketNotes(TicketID
      ,Ticketref
      ,EdityBy
      ,EditedDt
      ,NoteDesc,organizationFK)
	values(@TicketIDforNotes
      ,@Ticketref
      ,''System''
      ,getdate()
      ,@NoteDesc,@organizationFK)	
		END
		else 	if exists(select top 1 * from vSDTicket  where (Status !=''Resolved'')  and SubmitterEmail=@submitterEmailAddr and  ( (RTrim(LTRIM(@TicketSummary))) like ''%''+REPLACE(RTRIM(LTRIM(Summary)), CHAR(160),'''')+''%'') )
		BEGIN
	
		set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
		 select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber,@organizationFK=OrgId from vSDTicket where ( Status !=''Resolved'' or Status!=''Closed'') and SubmitterEmail=@submitterEmailAddr and (@TicketSummary like ''%''+Summary+''%'' ) order by CreationDate desc
		 
		
		 INSERT INTO	SD_TicketNotes(TicketID
      ,Ticketref
      ,EdityBy
      ,EditedDt
      ,NoteDesc,organizationFK)
	values(@TicketIDforNotes
      ,@Ticketref
      ,''System''
      ,getdate()
      ,@NoteDesc,@organizationFK)	
		END
	END

	
		
	else 
	BEGIN
 insert into SDIncident(
		id
      ,Ticketref
      ,partitionid
      ,orgServDeskDefnFK
      ,sdStageFK
      ,sdStatusFK
      ,sdPriorityFK
      ,sdSeverityFK     
      ,sdCategoryFK
      ,creationDateTime     
      ,TicketSummary
      ,TicketDesc
      ,submitterType
      ,submitterName
      ,submitterEmailAddr
      ,submitterPhone
      ,assigneeType
	  ,organizationFK
      ,sourceType
      ,expectedDueDate
      ,categoryFullText
	  
	  ,actualResolutionDate,Email_FromInboxID
 ) Values(ROUND(RAND() * (100000000000000), 0)
      ,@Ticketref
      ,''1''
      ,@orgServDeskDefnFK
	  ,@sdStageFK
	  ,@sdStatusFK
      ,@sdPriorityFK
      ,ISNULL(@sdSeverityFK ,0)
      ,isnull(@sdCategoryFK,0)
      ,GETDATE()
      ,Replace(@TicketSummary,''(Trial Version)'','''')
      ,@TicketDesc
      ,''''
      ,@submitterName
      ,@submitterEmailAddr
      ,''''
      ,''''
	  ,@OrgId
      ,''Email''
	  ,@expectedDueDate
      ,@categoryFullText
	  
	 , @actualResolutionDate,@Email_FromInboxID)
	 	  	SET @Ticketref=(select top 1 Ticketref from SDIncident where SID=SCOPE_IDENTITY())
				  update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7) where ReqRef=''Incident'' and OrgRef=@OrgId
	
				exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=''Incident'',@Option=''AddCustomField'',@OrgId=@OrgId

				exec SD_Sendmail @ticketnumber=@Ticketref ,@Option=''ReminderonTicketCreaton'',@OrgId=@OrgId
	 END
	    

		--	declare @category nvarchar(500);
		--	set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref);
		--	 Set  @TechID =(Select top 1 TechID  from SD_Technician a where 
		--	  @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')
	 --update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref
		if(@TicketAttachMent is not null)
		BEGIN
		exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@OrgId
		END
 END


	
	END

'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident1]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident1  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   ,@UserIDForAppro numeric(18,0)=null  
   ,@ticketout varchar(50)=Null  
   ,@Ticketref varchar(20)= null output  
   ,@partitionid numeric(26,0)= null  
   ,@orgServDeskDefnFK numeric(26,0)= null  
   ,@sdStageFK numeric(26,0)= null  
   ,@sdStatusFK numeric(26,0)= null  
   ,@sdPriorityFK numeric(26,0)= null  
   ,@sdSeverityFK numeric(26,0)= null  
   ,@sdSolutionTypeFK numeric(26,0)= null  
   ,@sdCategoryFK numeric(26,0)= null  
   ,@creationDateTime datetime= null  
   ,@closedDateTime datetime= null  
   ,@TicketSummary varchar(max)= null  
   ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
   ,@submitterType varchar(50)= null  
   ,@submitterName varchar(50)= null  
   ,@submitterEmailAddr varchar(50)= null  
   ,@submitterPhone varchar(50)= null  
   ,@assigneeType varchar(50)= null  
   ,@assigneePoolFK numeric(26,0)= null  
   ,@assigneeParticipantFK numeric(26,0)= null  
   ,@actualCompletedDate datetime= null  
   ,@expectedDueDate datetime= null  
   ,@actualResolutionDate datetime= null  
   ,@organizationFK numeric(26,0)= null  
   ,@orgStaffFK numeric(26,0)= null  
   ,@sdErrorMessage varchar(max)= null  
   ,@solutionNote varchar(max)= null  
   ,@sourceType varchar(50)= null  
   ,@previousStageFK numeric(26,0)= null  
   ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
   ,@UpdateBy int =NULL  
   ,@UpdateDt datetime =NULl  
   ,@Status nvarchar(10) = NULL  
   ,@TicketAttachMent nvarchar(max)=null  
   ,@Filename nvarchar(100)=null  
   ,@location nvarchar(100)=null  
   ,@Department nvarchar(100)=null  
   , @Note nvarchar(1000)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
 declare @ParentCategoryRef nvarchar(500);  
 declare @SLA nvarchar(300);  
   declare @OrgName nvarchar(100);  
   declare @sdSeverityFK1 numeric(18,0);  
   
     set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)  
     ---Stage,DeskrefID,select from bydefaultvalue  
     Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)  
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
    -- set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
    -- set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
    
	
	
	if(@OrgName=''Hitachi'')  
      BEGIN  
       set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK )  
      END  
      else   
       BEGIN  
        set @sdSeverityFK1=@sdSeverityFK  
       end   
       
     set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*   
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  
                   Row_Num=''1'')  
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID   
          where Deskref=@DeskRef and OrgFk=@organizationFK );  
  
       if(@SLA=''Severity'')  
        BEGIN   
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
       else if(@SLA=''Category'')  
        BEGIN  
         set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
        END  
       else   
        BEGIN  
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
     
     if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK   
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType  
        --,assigneePoolFK  
       --,assigneeParticipantFK   
       ,organizationFK  
       -- ,orgStaffFK  
       ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()  
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone  
       ,ISNULL(@assigneeType,0)  
     --  ,@assigneePoolFK  
     --  ,@assigneeParticipantFK     
     ,@organizationFK  
     -- ,@orgStaffFK  
       ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))  
  
     ------------------------to get ticket ID after successfull generation -----------------------  
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())  
          ---------------------------this will auto increment ticket ID, after ticket inseretion  
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END  
       --------------------------  this will create custom filed against ticket ID  
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK  
  
       if(@TicketAttachMent is not null)  
        BEGIN  
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
   
        END  
  
      END  
      
  --- this will assign ticket category according to category of enginner  
  if(@OrgName=''Hitachi'')  
  BEGIN  
  declare @category nvarchar(500);  
  
  declare @location1 nvarchar(500);  
  declare @department1 nvarchar(500);  
   set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
   set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
   set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);  
    --Set  @TechID =(Select top 1 TechID  from SD_Technician a where   
    -- @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')  
   
  
  
  ----------------------------Auto Assignment of ticket  --------------------------------------  
  
  
  
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')  
   BEGIN  
  
     ------------------ assign hardware tickets only----------  
    if(@category like ''%Incident - Hardware%'')  
      BEGIN  
         if(@location1=''Sanand'')  
        BEGIN  
   --------------- Ticket will assign  to  Itamc.hhpe  
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to chintan  
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to itamc.gnr  
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
    ---------------- ticket assign to krunal  
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
     END  
  
     --------------------- asssign Software tickets only   --------------  
   if(@category like ''%Incident - Software%'')  
      BEGIN  
       if(@location1=''Sanand'')  
        BEGIN  
        --------------- Ticket will assign  to  Unati  
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
       END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
        BEGIN  
  
        --------ticket assign to chintan  
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
  
   
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
          ---------------- ticket assign to krunal  
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
    END  
    
  END  
   else if(@category like ''%Incident - Business Application%'')  
    BEGIN  
      -----------  ticket assign to nalin  
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  
  
  else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')  
    BEGIN  
   -------------- ticket assign to anand  
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  END  
    
  
    -------------end of auto assignment for hirel  
 END  
  
 if(@Option=''DeleteTicket'')  
 BEGIN  
 Delete from SDIncident where Ticketref=@Ticketref  
 END  
 if(@Option=''AssignTechnician'')  
 BEGIN  
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
  END  
 END  
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------  
  if(@Option=''ChangeTechnician'')  
  BEGIN  
  declare @Reason nvarchar(1000);  
    
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);  
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
    BEGIN   
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
    END  
  END  
-----------------------------Update Ticket  ---------------------------------------------------  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
   
 if(@sdStatusFK!=@PrevStageFK)  
 BEGIN  
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  
   
 END  
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)  
 if(@sdStatusFK is null)  
 BEGIN  
  set @sdStatusFK=@StatusFKAsPerStage  
      
 END  
 else   
 BEGIN  
  set @sdStatusFK= @sdStatusFK  
 END  
  
   
 update  SDIncident  
  
  set    sdStageFK=@sdStageFK  
    ,sdStatusFK=@StatusFKAsPerStage  
      ,sdPriorityFK=@sdPriorityFK  
      ,sdSeverityFK=@sdSeverityFK  
       
      ,sdCategoryFK=@sdCategoryFK  
   ,SubmitterID=@SubmitterID  
   ,submitterPhone=@submitterPhone  
       
        
       
     -- ,TicketDesc=@TicketDesc  
    ,closedDateTime=@closedDateTime  
      ,assigneeType =@assigneeType  
  --    ,assigneePoolFK  
     ,assigneeParticipantFK=@assigneeParticipantFK  
   ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote  
   --   ,organizationFK  
  --    orgStaffFK  
     
     
      
      ,categoryFullText=@categoryFullText  
   ,location=@location  
   ,Department=@Department  
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
    if(@TicketAttachMent is not null)  
  BEGIN  
  exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
  END  
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
 declare @NewStatus nvarchar(100);  
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
 if(@NewStatus=''resolved'')  
 BEGIN  
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
 END  
 declare  @PrevStageForMail numeric(18,0);  
  declare  @SDStageForMail numeric(18,0);  
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')  
 BEGIN  
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK   
   
   
 END  
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
 BEGIN  
 declare @desk nvarchar(100);  
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
 if(@desk=''CloudProcess'')  
 BEGIN  
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
 END  
 else  
 BEGIN  
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK  
  
 END  
  
 END  
 END  
  


  
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_old]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_old', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Proc dbo.SD_spSDIncident_old
(
	  @id numeric(26,0)= null
	  ,@DeskRef varchar(50) =NULL
	  ,@UserIDForAppro numeric(18,0)=null
	  ,@ticketout varchar(50)=Null
      ,@Ticketref varchar(20)= null output
      ,@partitionid numeric(26,0)= null
      ,@orgServDeskDefnFK numeric(26,0)= null
      ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
      ,@sdPriorityFK numeric(26,0)= null
      ,@sdSeverityFK numeric(26,0)= null
      ,@sdSolutionTypeFK numeric(26,0)= null
      ,@sdCategoryFK numeric(26,0)= null
      ,@creationDateTime datetime= null
      ,@closedDateTime datetime= null
      ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@TickNotes nvarchar(max)=null
      ,@submitterType varchar(50)= null
      ,@submitterName varchar(50)= null
      ,@submitterEmailAddr varchar(50)= null
      ,@submitterPhone varchar(50)= null
      ,@assigneeType varchar(50)= null
      ,@assigneePoolFK numeric(26,0)= null
      ,@assigneeParticipantFK numeric(26,0)= null
      ,@actualCompletedDate datetime= null
      ,@expectedDueDate datetime= null
      ,@actualResolutionDate datetime= null
      ,@organizationFK numeric(26,0)= null
      ,@orgStaffFK numeric(26,0)= null
      ,@sdErrorMessage varchar(max)= null
      ,@solutionNote varchar(max)= null
      ,@sourceType varchar(50)= null
      ,@previousStageFK numeric(26,0)= null
      ,@categoryFullText varchar(max)= null
	  ,@sdCategoryRef  varchar(200)=null
	  ,@UserName nvarchar(100)=null
	  ,@SubmitterID varchar(50)=null
	  	  ,@AssigneName varchar(100)=null
	  ,@TechID numeric(18,0)=null
	  ,@UserID numeric(18,0)=null
		,@InsertBy int =NULL
		,@InsertDt datetime =NULL
		,@UpdateBy int =NULL
		,@UpdateDt datetime =NULl
		,@Status nvarchar(10) = NULL
		,@TicketAttachMent nvarchar(max)=null
		,@Filename nvarchar(100)=null
		,@location nvarchar(100)=null
		,@Department nvarchar(100)=null
		,@SDRole nvarchar(100)=null
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''AddTicket'')
 BEGIN
 declare @ParentCategoryRef nvarchar(500);
	declare @SLA nvarchar(300);
					---Stage,DeskrefID,select from bydefaultvalue
					Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)
					set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)
					set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)
					set @sdStageFK=(select top 1	 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);
					set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);
				--	set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
				--	set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))

					
				set	@ParentCategoryRef =(select top 1 ref from (	SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,* 
											FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where
																			Row_Num=''1'')
 set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID 
										where Deskref=@DeskRef and OrgFk=@organizationFK );

											if(@SLA=''Severity'')
				BEGIN 
						set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
							set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
				END
				else if(@SLA=''Category'')
				BEGIN
					set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))
					set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))
				END
					else 
					BEGIN
						set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
						set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
					END
			
					if exists(select * from vSDTicket  where Status like ''%Open%'' and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)
							BEGIN
							-------------------------------- this will add notes , as ticket already exists -------------------------------
								declare @TicketIDforNotes numeric(26,0)=null;
								declare @NoteDesc nvarchar(max)=null;
								set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
								 select top 1  @TicketIDforNotes=id,@Ticketref=Ticketref from SDIncident order by creationDateTime desc
		 						INSERT INTO	SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)
										values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)	
							END
							else 
									BEGIN
									---------------- new ticket ID will create --------------------------------
								insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK
								,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone
							  ,assigneeType
							 --,assigneePoolFK
							--,assigneeParticipantFK 
							,organizationFK
						 -- ,orgStaffFK
					  ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department) 
					  Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,GETDATE()
					  ,@TicketSummary,@TicketDesc,@submitterType,@submitterName,@submitterEmailAddr,@submitterPhone
					  ,@assigneeType
					--  ,@assigneePoolFK
					--  ,@assigneeParticipantFK   
					,@organizationFK
					-- ,@orgStaffFK
					  ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,@location,@Department)

					------------------------to get ticket ID after successfull generation -----------------------
							 SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())
							   ---------------------------this will auto increment ticket ID, after ticket inseretion
								 if(@Ticketref is not null)
										 BEGIN
												  update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7) 
												  where ReqRef=@DeskRef and OrgRef=@organizationFK
										END
						 --------------------------  this will create custom filed against ticket ID
							exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK

							if(@TicketAttachMent is not null)
								BEGIN
										exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK
	
								END

						END
						declare @OrgName nvarchar(100);
						set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)
		--- this will assign ticket category according to category of enginner
		if(@OrgName=''Hitachi'')
		BEGIN
		declare @category nvarchar(500);

		declare @location1 nvarchar(500);
		declare @department1 nvarchar(500);
			set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);
			set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);
			set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);
			 --Set  @TechID =(Select top 1 TechID  from SD_Technician a where 
			 -- @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')
	


	 ----------------------------Auto Assignment of ticket  --------------------------------------



	 if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')
	BEGIN
		if(@location1=''Gandhinagar'' or @department1=''Customer Support'')
			BEGIN

					--------ticket assign to chintan
				 update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref
			END

 
		if(@location1!=''gandhinagar'' and @department1!=''Customer Support'')
			BEGIN 
				---------------- ticket assign to krunal
				update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref
			END
 
 
		END
			else if(@category like ''%Incident - Business Application%'')
				BEGIN
						-----------  ticket assign to nalin
				update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref
				END
		else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')
				BEGIN
			-------------- ticket assign to anand
				update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref
				END
		END
		

		  -------------end of auto assignment for hirel
 END

 if(@Option=''DeleteTicket'')
 BEGIN
 Delete from SDIncident where Ticketref=@Ticketref
 END
 if(@Option=''AssignTechnician'')
	BEGIN
	 if Exists (select *from SD_Technician where TechLoginName=@AssigneName)
	 BEGIN 
	 Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)
	 update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK
	 END
	END
 if(@Option=''UpdateTicket'')
 BEGIN
 ---Stage,DeskrefID,select from bydefaultvalue
 Declare @PrevStageFK numeric(18,0)=null;
  Declare @PrevStatusFK numeric(18,0)=null;
  Declare @StatusFKAsPerStage numeric(18,0)=null;
  Declare @TicketID numeric(18,0)=null;
  Declare @EditedBy nvarchar(max)=null;
  set @EditedBy=@UserName;
  ------------this is prevstatus status
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)

 
 if(@sdStatusFK!=@PrevStageFK)
 BEGIN
	  update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK
--	  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''
 
	--  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''
 
 END
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)
 	set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)
	if(@sdStatusFK is null)
	BEGIN
	 set @sdStatusFK=@StatusFKAsPerStage
    
	END
	else 
	BEGIN
	 set @sdStatusFK= @sdStatusFK
	END

 
 update  SDIncident

  set    sdStageFK=@sdStageFK
    ,sdStatusFK=@StatusFKAsPerStage
      ,sdPriorityFK=@sdPriorityFK
      ,sdSeverityFK=@sdSeverityFK
     
      ,sdCategoryFK=@sdCategoryFK
	  ,SubmitterID=@SubmitterID
	  ,submitterPhone=@submitterPhone
     
      
     
     -- ,TicketDesc=@TicketDesc
    ,closedDateTime=@closedDateTime
      ,assigneeType =@assigneeType
  --    ,assigneePoolFK
     ,assigneeParticipantFK=@assigneeParticipantFK
   ,sdSolutionTypeFK=@sdSolutionTypeFK
   ,solutionNote=@solutionNote
   --   ,organizationFK
  --    orgStaffFK
   
   
    
      ,categoryFullText=@categoryFullText
	  ,location=@location
	  ,Department=@Department
	  ,EditedBy=@UserName

      where ticketref=@Ticketref and organizationFK =@organizationFK
    if(@TicketAttachMent is not null)
		BEGIN
		exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK
		END
	exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK
 
 declare @NewStatus nvarchar(100);
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)
 if(@NewStatus=''resolved'')
 BEGIN
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK

 	exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK	
 END
 declare  @PrevStageForMail numeric(18,0);
  declare  @SDStageForMail numeric(18,0);
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)

  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')
 BEGIN
	  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK	
 
 
 END
 
 END

	if(@Option=''AddSR_ApproverStatus'')
	BEGIN
	declare @desk nvarchar(100);
	set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)
	if(@desk=''CloudProcess'')
	BEGIN
	exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''
	END
	else
	BEGIN
			exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''

	END

	END
	END

'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Hitachi]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Hitachi]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Hitachi', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_Hitachi  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   ,@UserIDForAppro numeric(18,0)=null  
   ,@ticketout varchar(50)=Null  
   ,@Ticketref varchar(20)= null output  
   ,@partitionid numeric(26,0)= null  
   ,@orgServDeskDefnFK numeric(26,0)= null  
   ,@sdStageFK numeric(26,0)= null  
   ,@sdStatusFK numeric(26,0)= null  
   ,@sdPriorityFK numeric(26,0)= null  
   ,@sdSeverityFK numeric(26,0)= null  
   ,@sdSolutionTypeFK numeric(26,0)= null  
   ,@sdCategoryFK numeric(26,0)= null  
   ,@creationDateTime datetime= null  
   ,@closedDateTime datetime= null  
   ,@TicketSummary varchar(max)= null  
   ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
   ,@submitterType varchar(50)= null  
   ,@submitterName varchar(50)= null  
   ,@submitterEmailAddr varchar(50)= null  
   ,@submitterPhone varchar(50)= null  
   ,@assigneeType varchar(50)= null  
   ,@assigneePoolFK numeric(26,0)= null  
   ,@assigneeParticipantFK numeric(26,0)= null  
   ,@actualCompletedDate datetime= null  
   ,@expectedDueDate datetime= null  
   ,@actualResolutionDate datetime= null  
   ,@organizationFK numeric(26,0)= null  
   ,@orgStaffFK numeric(26,0)= null  
   ,@sdErrorMessage varchar(max)= null  
   ,@solutionNote varchar(max)= null  
   ,@sourceType varchar(50)= null  
   ,@previousStageFK numeric(26,0)= null  
   ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
   ,@UpdateBy int =NULL  
   ,@UpdateDt datetime =NULl  
   ,@Status nvarchar(10) = NULL  
   ,@TicketAttachMent nvarchar(max)=null  
   ,@Filename nvarchar(100)=null  
   ,@location nvarchar(100)=null  
   ,@Department nvarchar(100)=null  
   , @Note nvarchar(1000)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Option varchar(50)  
   )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
   declare @ParentCategoryRef nvarchar(500);  
   declare @SLA nvarchar(300);  
   declare @OrgName nvarchar(100);  
   declare @sdSeverityFK1 numeric(18,0);  
   
     set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK) 
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
	set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK ) 

	 set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*   
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  Row_Num=''1'')  
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID   
          where Deskref=@DeskRef and OrgFk=@organizationFK );  
  
       if(@SLA=''Severity'')  
        BEGIN   
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
       else if(@SLA=''Category'')  
        BEGIN  
         set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
        END  
       else   
        BEGIN  
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
		if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK   
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,
		 actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()  
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone  
       ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,
	   @actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))  
   
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())   
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END   
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK  
  
       if(@TicketAttachMent is not null)  
        BEGIN  
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
		END  
  
      END  
		if(@OrgName=''Hitachi'')  
		BEGIN  
		declare @category nvarchar(500);  
		declare @location1 nvarchar(500);  
		declare @department1 nvarchar(500);  
		 set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
		 set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
		 set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);  
		 if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')  
   BEGIN  
  
     ------------------ assign hardware tickets only----------  
    if(@category like ''%Incident - Hardware%'')  
      BEGIN  
         if(@location1=''Sanand'')  
        BEGIN  
   --------------- Ticket will assign  to  Itamc.hhpe  
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to chintan  
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to itamc.gnr  
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
    ---------------- ticket assign to krunal  
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
     END  
  
     --------------------- asssign Software tickets only   --------------  
   if(@category like ''%Incident - Software%'')  
      BEGIN  
       if(@location1=''Sanand'')  
        BEGIN  
        --------------- Ticket will assign  to  Unati  
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
       END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
        BEGIN  
  
        --------ticket assign to chintan  
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
  
   
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
          ---------------- ticket assign to krunal  
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
    END  
    
  END  
   else if(@category like ''%Incident - Business Application%'')  
    BEGIN  
      -----------  ticket assign to nalin  
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  
  
  else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')  
    BEGIN  
   -------------- ticket assign to anand  
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  END  
    
  
    -------------end of auto assignment for hirel  
 END  
  
 if(@Option=''DeleteTicket'')  
 BEGIN  
 Delete from SDIncident where Ticketref=@Ticketref  
 END  
 if(@Option=''AssignTechnician'')  
 BEGIN  
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
  END  
 END  
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------  
  if(@Option=''ChangeTechnician'')  
  BEGIN  
  declare @Reason nvarchar(1000);  
    
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);  
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
    BEGIN   
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
    END  
  END  
-----------------------------Update Ticket  ---------------------------------------------------  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
   
 if(@sdStatusFK!=@PrevStageFK)  
 BEGIN  
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  
   
 END  
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)  
 if(@sdStatusFK is null)  
 BEGIN  
  set @sdStatusFK=@StatusFKAsPerStage  
      
 END  
 else   
 BEGIN  
  set @sdStatusFK= @sdStatusFK  
 END  
  
   
 update  SDIncident  
  
  set    sdStageFK=@sdStageFK ,sdStatusFK=@StatusFKAsPerStage  ,sdPriorityFK=@sdPriorityFK  ,sdSeverityFK=@sdSeverityFK  
      ,sdCategoryFK=@sdCategoryFK  ,SubmitterID=@SubmitterID  ,submitterPhone=@submitterPhone  ,closedDateTime=@closedDateTime  
      ,assigneeType =@assigneeType,assigneeParticipantFK=@assigneeParticipantFK ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote ,categoryFullText=@categoryFullText  
   ,location=@location  ,Department=@Department  ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
		if(@TicketAttachMent is not null)  
		 BEGIN  
		 exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
		 END  
		exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
	declare @NewStatus nvarchar(100);  
	set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
	if(@NewStatus=''resolved'')  
	BEGIN  
	update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK  
	 
	 exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
 END  
 declare  @PrevStageForMail numeric(18,0);  
  declare  @SDStageForMail numeric(18,0);  
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')  
 BEGIN  
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK 
   
 END  
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
 BEGIN  
 declare @desk nvarchar(100);  
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
 if(@desk=''CloudProcess'')  
 BEGIN  
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
 END  
 else  
 BEGIN  
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK  
  
 END  
  
 END  
 END  
	
'
GO

--
-- Create or alter procedure [dbo].[SD_ChangeCABApproval]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ChangeCABApproval]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeCABApproval', 'P') IS NULL
EXEC sp_executesql N'  
  
  
  
CREATE OR ALTER Proc dbo.SD_ChangeCABApproval  
(  
@userName varchar(100)=null,  
@Subject nvarchar(1000)=NULL,  
@EmailBody nvarchar(max)=NULL,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@UserID numeric(18,0) = NULL,  
@Ticketref  varchar(100) = NULL,  
@Approval1Name varchar(100)= NULL,  
@Approval1Email varchar(100)= NULL,  
@Approval1Status varchar(50)=NULL,  
@Approval1Remarks varchar(max)=NULL,  
@Approval1Grade varchar(20)=NULL,  
@Approval2Name varchar(100)= NULL,  
@Approval2Email varchar(100)= NULL,  
@Approval2Status varchar(50)=NULL,  
@Approval2Remarks varchar(max)=NULL,  
@Approval2Grade varchar(20)=NULL,  
@Approval3Name varchar (100) =NULL,  
@Approval3Email  varchar (100) =NULL,  
@Approval3Status varchar(50)=NULL,  
@Approval3Remarks varchar(max)=NULL,  
@Approval3Grade varchar(20)=NULL,  
@Approval4Name varchar (100) =NULL,  
@Approval4Email varchar(100)= NULL,  
@Approval4Status varchar(50)=NULL,  
@Approval4Remarks varchar(max)=NULL,  
@Approval4Grade varchar(20)=NULL,  
@Approval5Name varchar (100)= NULL,  
@Approval5Email varchar (100) =NULL,  
@Approval5Status varchar(50) =NULL,  
@Approval5Grade varchar(20)=NULL,  
@Remarks varchar(max)=NULL,  
@ApproverLevel varchar(10)=NULL,  
@StatusFk numeric(18,0)=NULL,  
@Approval1IsActive bit=NULL,  
@Approval2IsActive bit=NULL,  
@Approval3IsActive bit=NULL,  
@Approval4IsActive bit=NULL,  
@Approval5IsActive bit=NULL,  
@PrevStage numeric(18,0)=null,  
@PrevStatus numeric(18,0)=null,  
@ToEmail nvarchar(100)=null,  
@assigneeParticipantFK numeric(18,0) =null,  
 @HODApproval nvarchar(10)=null,  
 @StageFK numeric(18,0)=null,  
 @Orgid numeric(18,0)=null,
@Option varchar(50)  
   
 )  
 AS  
 BEGIN  ----main begin start  
  
  
  
  if(@Option=''TicketAssigned'')  
  BEGIN  
   
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
     
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a   
inner join    
SD_User_Master b   
on a.RefUserID=b.UserID  
where   
REplace(CategoryFK,''||'','' - '') in  
(select Category from vSDTicket where TicketNumber=@Ticketref)  
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref  
     if(@ToEmail is not null)  
      BEGIN  
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
  
         
       END    
  END  
  if(@Option=''AddCABApprovalStatus'')  
   
  BEGIN  
  select   
     @Approval1Name=Approval1Name,@Approval1Email=Approval1Email  
    ,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email  
    ,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email  
    ,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email  
    ,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email  
    from SD_User_SRApproval_SRDesk where UserID=@UserID  
    ------------------ enteries will insert so that to monitor  
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
      ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status  
      ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status  
      ,Approval5Name,Approval5Email,Approval5Status,UATAccept )  
   values(@TicketRef,@UserID   
        ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''  
      ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''  
      ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'')   
  
 -- -----------get approval name from master table  
 --   select @Approval1Name=username,@Approval1Email=userEmail from SD_CABApproval where CABLevel=''L1''  
 --   select @Approval2Name=username,@Approval2Email=userEmail from SD_CABApproval where CABLevel=''L2''  
 --  select @Approval3Name=username,@Approval3Email=userEmail from SD_CABApproval where CABLevel=''L3''  
 -- select @Approval4Name=username,@Approval4Email=userEmail from SD_CABApproval where CABLevel=''L4''  
 -- select @Approval5Name=username,@Approval5Email=userEmail from SD_CABApproval where CABLevel=''L5''  
    
 -- -----------------table common for sr and change to check approval status  
 --   INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
 --     ,Approval1Name  
 --     ,Approval1Email  
 --     ,Approval1Status  
 --     ,Approval2Name  
 --     ,Approval2Email  
 --     ,Approval2Status  
 --     ,Approval3Name  
 --     ,Approval3Email  
 --     ,Approval3Status  
 --     ,Approval4Name  
 --     ,Approval4Email  
 --     ,Approval4Status  
 --     ,Approval5Name  
 --     ,Approval5Email  
 --     ,Approval5Status  
 --     )  
 --values(@TicketRef  
 --     ,@UserID  
     
 --     ,@Approval1Name  
 --     ,@Approval1Email  
 --     ,''Pending''  
 --     ,@Approval2Name  
 --     ,@Approval2Email  
 --     ,''Pending''  
 --     ,@Approval3Name  
 --     ,@Approval3Email  
 --     ,''Pending''  
 --     ,@Approval4Name  
 --     ,@Approval4Email  
 --     ,''Pending''  
 --     ,@Approval5Name  
 --     ,@Approval5Email  
 --     ,''Pending''  
 --    )   
  END  
    
   if(@Option=''UpdateRequest'')  
 BEGIN  
  declare @location nvarchar(100);  
  declare @M2Status nvarchar(100);  
  declare @EmpCode nvarchar(40);  
  declare @StatusFk1 numeric(18,0);  
  declare @sdStageFk numeric(18,0);  
  declare @FromEmail nvarchar(100);  
  set @FromEmail=''itsupport@hisysmc.com''  
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref);  
    
     select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,  
            @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,  
            @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name  
           ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
          from SD_User_SRApproval_SRDesk where EmpID=@EmpCode  
       set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref)  
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)  
     if(@Approval1IsActive=''1'')  
       BEGIN  
         if(@ApproverLevel=''L1'')  
          BEGIN  
     --set status to Awaiting IT Manager Approval  
            set @StatusFk1=(select  ID from SD_Status where DeskRef=''Change Request'' and id=''1392406111'' )  
            set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Change Request'' and id=''1392406111'' )  
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage  where Ticketref=@Ticketref  
            update SD_SRApprovalStatus set Approval1Status=''Approved''   
              ,Approval1Remarks=@Remarks  
              where TicketRef=@Ticketref       
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L2'',@Orgid));  
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L2'',@Approval2Name,@Orgid));  
       SET @userName=''itsupport@hisysmc.com'';  
         --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                    -- insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
       --  values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
       
       
       
       
     END  
   END  
   ----------- for IT manager Update  
    if(@Approval2IsActive=''1'')  
    BEGIN  
      if(@ApproverLevel=''L2'')  
      BEGIN  
        
      if(@HODApproval=''Yes'')  
      BEGIN  
  
      ---------status will set to awaiting hod approval  
       set @StatusFk1=(select  ID from SD_Status where id=''59024056'' and DeskRef=''Change Request'')  
       set @sdStageFk=(select sd_stageFK from SD_Status where id=''59024056'' and DeskRef=''Change Request'')  
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
       update SD_SRApprovalStatus set Approval2Status=''Pending''   
                              ,Approval2Remarks=@Remarks  
                               where TicketRef=@Ticketref  
  
       SET @userName=''itsupport@hisysmc.com'';  
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
       set @ToEmail=(select top 1 Approval3Email from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);  
              
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L3'',@Orgid));  
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L3'',@Approval3Name,@Orgid));  
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
      END  
      ELSE  
      BEGIN  
      -----------Approved BY IT Manager  
         set @StatusFk1=(select  ID from SD_Status where id=''688050162'' and DeskRef=''Change Request'')  
      set @sdStageFk=(select  sd_stageFK from SD_Status where id=''688050162'' and DeskRef=''Change Request'')  
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks  
                               where TicketRef=@Ticketref  
          set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     SET @userName=''itsupport@hisysmc.com'';  
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
     --  ELSE  
     -- BEGIN   
     --   update SDIncident set assigneeParticipantFK=''1435327746'' where Ticketref=@Ticketref  
     --set @ToEmail=( select b.EmailID from SD_Technician a   
     --    inner join SD_User_Master b   
  
     --    on a.RefUserID=b.UserID  
           
     --    where EmailID like ''%nikhil.kumar.fb@hitachi-systems.com%'')  
     --    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
     --   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
     -- END  
      END  
        
      END  
    END  
     if(@Approval3IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L3'')  
       BEGIN  
  
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request   
       --------------than IT manager will take action on it  
       set @StatusFk1=(select ID FROM SD_Status  WHERE id=''476231700'' and DeskRef=''Change Request'')  
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE id=''476231700'' and DeskRef=''Change Request'')  
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
         update SD_SRApprovalStatus set Approval3Status=''Approved''   
        ,Approval3Remarks=@Remarks  
   set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);  
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same      
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@Orgid));  
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@Orgid));  
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
            if(@Approval4IsActive=''1'')  
  BEGIN  
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L4'',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L4'',@Approval4Name,@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
    --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
    set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );  
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
   --       insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
     
         
         
       END  
  END  
     END  
     if(@Approval4IsActive=''1'')  
     BEGIN  
      if(@ApproverLevel=''L4'')  
      BEGIN  
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
      update SD_SRApprovalStatus set Approval4Status=''Approved''   
  ,Approval4Remarks=@Remarks  
   if(@Approval5IsActive=''1'')  
   BEGIN  
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L5'',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L5'',@Approval5Name,@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
    --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );  
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
      END  
      END  
     END  
     if(@Approval5IsActive=''1'')  
     BEGIN  
    if(@ApproverLevel=''L5'')  
   BEGIN  
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
   update SD_SRApprovalStatus set Approval5Status=''Approved''   
  ,Approval5Remarks=@Remarks  
   END  
   END  
  END  
  
  if(@Option=''RejectRequest'')  
   BEGIN  
 set @FromEmail=''itsupport@hisysmc.com''  
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
      select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active  
       ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
      from SD_User_SRApproval_SRDesk where EmpID=@EmpCode  
       set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref )  
        set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref )  
     if(@Approval1IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L1'')  
       BEGIN-- reject by manager  
            set @StatusFk=(select top 1 ID from SD_Status where id=''441242598'' and DeskRef=''Change Request'')  
  
           
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''441242598'' and DeskRef=''Change Request'')  
              
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
  
            update SD_SRApprovalStatus set Approval1Status=''Rejected''   
         ,Approval1Remarks=@Remarks  
       where TicketRef=@Ticketref  
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
    
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
         
       END  
     END  
     --if exists(select * from SD_SRApprovalStatus where Approval1Status!=''Rejected'' and TicketRef=@Ticketref)  
     --  BEGIN  
         if(@Approval2IsActive=''1'')  
           BEGIN  
              if(@ApproverLevel=''L2'')  
               BEGIN  
               --Rejected by IT manager   
                set @StatusFk=(select top 1 ID from SD_Status where id=''934234849'' and DeskRef=''Change Request'')  
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''934234849'' and DeskRef=''Change Request'')  
                 update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''   
                   ,Approval2Remarks=@Remarks  
                   where TicketRef=@Ticketref  
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
       
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
               END  
           END  
       -- END  
     --if exists(select * from SD_SRApprovalStatus where Approval2Status!=''Rejected'' and TicketRef=@Ticketref)  
     --  BEGIN  
         if(@Approval3IsActive=''1'')  
          BEGIN  
           if(@ApproverLevel=''L3'')  
             BEGIN  
              set @StatusFk=(select top 1 ID from SD_Status where id=''2125451219'' and DeskRef=''Change Request'')  
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''2125451219'' and DeskRef=''Change Request'')  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
              update SD_SRApprovalStatus set Approval3Status=''Rejected''   
              ,Approval3Remarks=@Remarks  
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
              
             set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);  
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same      
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L2'',@Orgid));  
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L2'',@Approval2Name,@Orgid));  
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
              
            END  
    
          END  
        --END  
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)  
     --   BEGIN  
           if(@Approval4IsActive=''1'')  
            BEGIN  
             if(@ApproverLevel=''L4'')  
              BEGIN  
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  
                update SD_SRApprovalStatus set Approval4Status=''Rejected''   
                ,Approval4Remarks=@Remarks  
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
              END  
            END  
       -- END  
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)  
     -- BEGIN  
         if(@Approval5IsActive=''1'')  
          BEGIN  
                
           if(@ApproverLevel=''L5'')  
            BEGIN  
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  
               update SD_SRApprovalStatus set Approval5Status=''Rejected''   
               ,Approval5Remarks=@Remarks  
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
     
             END  
          END  
      --END  
   END  
  
   
  
  
  
  
 END  ----main end closes  
   
   '
GO

--
-- Create or alter procedure [dbo].[SD_spSDMergeNupate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDMergeNupate]')
GO
IF OBJECT_ID(N'dbo.SD_spSDMergeNupate', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDMergeNupate  
(  
 @id numeric(26,0)= null  
 ,@DeskRef varchar(50) =NULL  
 ,@UserIDForAppro numeric(18,0)=null  
 ,@ticketout varchar(50)=Null  
    , @Ticketref varchar(20)= null   
    ,@partitionid numeric(26,0)= null  
    ,@orgServDeskDefnFK numeric(26,0)= null  
    ,@sdStageFK numeric(26,0)= null  
     ,@sdStatusFK numeric(26,0)= null  
      ,@sdPriorityFK numeric(26,0)= null  
      ,@sdSeverityFK numeric(26,0)= null  
      ,@sdSolutionTypeFK numeric(26,0)= null  
      ,@sdCategoryFK numeric(26,0)= null  
      ,@creationDateTime datetime= null  
      ,@closedDateTime datetime= null  
      ,@TicketSummary varchar(max)= null  
      ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
      ,@submitterType varchar(50)= null  
      ,@submitterName varchar(50)= null  
      ,@submitterEmailAddr varchar(50)= null  
      ,@submitterPhone varchar(50)= null  
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      ,@actualCompletedDate datetime= null  
      ,@expectedDueDate datetime= null  
      ,@actualResolutionDate datetime= null  
      ,@organizationFK numeric(26,0)= null  
      ,@orgStaffFK numeric(26,0)= null  
      ,@sdErrorMessage varchar(max)= null  
      ,@solutionNote varchar(max)= null  
      ,@sourceType varchar(50)= null  
      ,@previousStageFK numeric(26,0)= null  
      ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
 ,@InsertBy int =NULL  
  ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
  ,@Status nvarchar(10) = NULL  
  ,@TicketAttachMent nvarchar(max)=null  
  ,@Filename nvarchar(100)=null  
  ,@location nvarchar(100)=null  
  ,@Department nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null  
  ,@StageFKAsPerStatus numeric(18,0)=null  
  ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
  
    
         BEGIN  
              set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
 set @StageFKAsPerStatus=(select top 1 sd_stageFK from SD_Status where id=@sdStatusFK)  
   
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncidentBulkUpdate(Ticketref,partitionid,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,submitterType  
        ,sdCategoryFK,assigneeType  
          
       ,assigneeParticipantFK   
       ,organizationFK  
       -- ,orgStaffFK  
   ,location,Department,categoryFullText)   
       Values(@Ticketref,''1'',isnull(@sdStageFK,0),ISNULL(@StageFKAsPerStatus,0),ISNULL(@sdPriorityFK,0),  
       ISNULL(@sdSeverityFK ,0) ,''1'',ISNULL(@sdCategoryFK,0),@assigneeType  
        
      
       ,ISNULL(@assigneeParticipantFK  ,0)   
     ,ISNULL(@organizationFK,0)  
     -- ,@orgStaffFK  
      ,@location,@Department,@categoryFullText)  
  
             
      END  
   
 --select * from SD_ErrorLog order by eventTime desc  
  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---------update status  
 update SDIncident set sdStatusFK=b.sdStatusFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdStatusFK<>b.sdStatusFK and b.sdStatusFK is not null and b.sdStatusFK=''0''  
  
 update SDIncident set sdStageFK=b.sdStageFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdStageFK<>b.sdStageFK and b.sdStageFK is not null and b.sdStageFK=''0''  
  
 update SDIncident set sdCategoryFK=b.sdCategoryFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdCategoryFK<>b.sdCategoryFK and b.sdStatusFK is not null and b.sdCategoryFK=''0''  
  
  update SDIncident set sdPriorityFK=b.sdPriorityFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdPriorityFK<>b.sdPriorityFK and b.sdPriorityFK is not null and b.sdPriorityFK=''0''  
  
  update SDIncident set sdSeverityFK=b.sdSeverityFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdSeverityFK<>b.sdSeverityFK and b.sdSeverityFK is not null and b.sdSeverityFK=''0''  
  
 update SDIncident set assigneeParticipantFK=b.assigneeParticipantFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.assigneeParticipantFK<>b.assigneeParticipantFK and b.assigneeParticipantFK is not null and b.assigneeParticipantFK=''0''  
  
  
  update SDIncident set sdSolutionTypeFK=b.sdSolutionTypeFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdSolutionTypeFK<>b.sdSolutionTypeFK and b.sdSolutionTypeFK is not null and b.sdSolutionTypeFK=''0''  
  
  update SDIncident set location=b.location from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.location<>b.location and b.location is not null and b.location=''0''  
  
  update SDIncident set Department=b.Department from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.Department<>b.Department and b.Department is not null and b.Department=''0''  
  ---Stage,DeskrefID,select from bydefaultvalue  
  
   
 --END  
   
   
 END  
  if(@Option=''UpdateTicketMerge'')  
 BEGIN  
  ---Stage,DeskrefID,select from bydefaultvalue  
   Declare @PrevStageFK numeric(18,0)=null;  
  
   Declare @TicketID numeric(18,0)=null;  
   Declare @EditedBy nvarchar(max)=null;  
   set @EditedBy=@UserName;  
   -------------------- to check previouse stage  
   set @PrevStageFK=(select top 1 sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
   if(@sdStageFK!=@PrevStageFK)  
     BEGIN  
      update SDIncident set previousStageFK=@PrevStageFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
      -------------this will update status of ticket and send mail for  HOD approval and UAT acceptance mail  
        
      exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  ,@OrgID=@organizationFK 
   
    END  
    set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
    set @StageFKAsPerStatus=(select top 1 sd_stageFK from SD_Status where id=@sdStatusFK)  
   
       update  SDIncident  set  
  
           sdStageFK=ISNULL(@StageFKAsPerStatus,sdStageFK)  
          ,sdStatusFK=ISNULL(@sdStatusFK,sdStatusFK)  
          ,sdPriorityFK=ISNULL(@sdPriorityFK,sdPriorityFK)  
          ,sdSeverityFK=ISNULL(@sdSeverityFK  ,sdSeverityFK)  
          ,sdCategoryFK=ISNULL(@sdCategoryFK,sdCategoryFK)  
          ,TicketDesc=ISNULL(@TicketDesc,TicketDesc)  
          ,closedDateTime=ISNULL(@closedDateTime,closedDateTime)  
          ,assigneeType =ISNULL(@assigneeType,assigneeType)  
          --    ,assigneePoolFK  
          ,assigneeParticipantFK=ISNULL(@assigneeParticipantFK,assigneeParticipantFK)  
          ,sdSolutionTypeFK=ISNULL(@sdSolutionTypeFK,sdSolutionTypeFK)  
          ,solutionNote=ISNULL(@solutionNote,solutionNote)  
  --   ,organizationFK  
  --    orgStaffFK        
          ,categoryFullText=ISNULL(@categoryFullText,categoryFullText)  
            where ticketref=@Ticketref and organizationFK =@organizationFK  
   declare @sdStatus nvarchar(100);  
   set @sdStatus=(select top 1 Status from vSDTicket where TicketNumber=@Ticketref)  
  
     if(@sdStatus=''Closed'')  
     BEGIN  
      update SDIncident set closedDateTime=GETDATE() where Ticketref=@Ticketref  
     END  
    -- if(@TicketAttachMent is not null)  
    --BEGIN  
    -- exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
    --END  
    -- is procedure mei dikkt hei  
     exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@EditedBy,@Option=''AddNotes'',@organizationFK=@organizationFK  
    declare @NewStatus nvarchar(100);  
    set @NewStatus=(select top 1 status  from vSDTicket where TicketNumber=@Ticketref)  
   if(@NewStatus=''resolved'')  
    BEGIN  
     update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket''  
            exec SD_spAddKnowledgeBase @Issue=@TicketSummary,@ResolutionDetail=@solutionNote,@Option=''AddKB''  
    END  
    set @PrevStageFK=(select top 1 previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    
   
   
 ------------------------        mail on status change  
 -- if(@sdStageFK!=@PrevStageFK and @NewStatus!=''resolved'')  
 --BEGIN  
 --  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
   
 --END  
   
   
 END  
 if(@Option=''AddSR_ApproverStatus'')  
  BEGIN  
    declare @desk nvarchar(100);  
    set @desk=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
    if(@desk=''CloudProcess'')  
     BEGIN  
      exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
     END  
    else if(@desk=''Service Request'')  
     BEGIN  
      exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
  
     END  
     else if(@desk=''Change Request'')  
     BEGIN  
  
     exec SD_ChangeCABApproval @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddCABApprovalStatus''  
     END  
  
  END  
  
  
  
  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Conversion]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Conversion]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Conversion', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident_Conversion  
(  
 @id numeric(26,0)= null  
 ,@DeskRef varchar(50) =NULL  
 ,@desk nvarchar(100)=null  
 ,@UserIDForAppro numeric(18,0)=null  
 ,@ticketout varchar(50)=Null  
 ,@ticketConvert varchar(50)=Null  
    , @Ticketref varchar(20)= null output  
    ,@partitionid numeric(26,0)= null  
    ,@orgServDeskDefnFK numeric(26,0)= null  
    ,@sdStageFK numeric(26,0)= null  
     ,@sdStatusFK numeric(26,0)= null  
      ,@sdPriorityFK numeric(26,0)= null  
      ,@sdSeverityFK numeric(26,0)= null  
      ,@sdSolutionTypeFK numeric(26,0)= null  
      ,@sdCategoryFK numeric(26,0)= null  
      ,@creationDateTime datetime= null  
      ,@closedDateTime datetime= null  
      ,@TicketSummary varchar(max)= null  
      ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
      ,@submitterType varchar(50)= null  
      ,@submitterName varchar(50)= null  
      ,@submitterEmailAddr varchar(50)= null  
      ,@submitterPhone varchar(50)= null  
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      ,@actualCompletedDate datetime= null  
      ,@expectedDueDate datetime= null  
      ,@actualResolutionDate datetime= null  
      ,@organizationFK numeric(26,0)= null  
      ,@orgStaffFK numeric(26,0)= null  
      ,@sdErrorMessage varchar(max)= null  
      ,@solutionNote varchar(max)= null  
      ,@sourceType varchar(50)= null  
      ,@previousStageFK numeric(26,0)= null  
      ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
 ,@InsertBy int =NULL  
  ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
  ,@Status nvarchar(10) = NULL  
  ,@TicketAttachMent nvarchar(max)=null  
  ,@Filename nvarchar(100)=null  
  ,@location nvarchar(100)=null  
  ,@Department nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null  
  ,@ViewToUser bit =null  
  ,@Option varchar(50)  
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
     ---Stage,DeskrefID,select from bydefaultvalue  
     Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)  
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select  top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select  top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select  top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
     set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
  
     if exists(select * from vSDTicket  where Status like ''%Open%'' and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=Ticketref from SDIncident order by creationDateTime desc  
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType   ,organizationFK  
       -- ,orgStaffFK  
       ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@creationDateTime  
       ,@TicketSummary,@TicketDesc,@submitterType,@submitterName,@submitterEmailAddr,@submitterPhone  
       ,@assigneeType  
     --  ,@assigneePoolFK  
     --  ,@assigneeParticipantFK     
     ,@organizationFK  
     -- ,@orgStaffFK  
       ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,@location,@Department)  
  
     ------------------------to get ticket ID after successfull generation -----------------------  
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())  
          ---------------------------this will auto increment ticket ID, after ticket inseretion  
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END  
       --------------------------  this will create custom filed against ticket ID  
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField''  
  
       --if(@TicketAttachMent is not null)  
       -- BEGIN  
       --   exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
   
       -- END  
  
      END  
 END  
  
 if(@Option=''CloseTicket'')  
 BEGIN  
  ---Stage,DeskrefID,select from bydefaultvalue  
   Declare @PrevStageFK numeric(18,0)=null;  
   Declare @PrevStatusFK numeric(18,0)=null;  
   Declare @StageFk numeric(18,0)=null;  
     Declare @StatusFk numeric(18,0)=null;  
   Declare @TicketID numeric(18,0)=null;  
   Declare @TickNotesFinal nvarchar(max)=null;  
   
  set @desk=(select  top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketConvert);  
     set @PrevStageFK=(select  top 1 sdStageFK from SDIncident where Ticketref=@ticketConvert);  
  set @PrevStatusFK=(select  top 1 sdStatusFK from SDIncident where Ticketref=@ticketConvert);    
  set @TickNotesFinal=CONCAT(@TickNotes,'' <br/>Auto Generated :Ticket closed by Engineer and status was marked as Resolved<br/>'',''New Request has been raised on the basis of this summary'');  
     
      set @StatusFk=(select  top 1 ID from SD_Status where DeskRef=@desk and StatusRef like ''%resolv%'')  
      set @StageFk=(select  top 1 sd_stageFK from SD_Status where  DeskRef=@desk and StatusRef like ''%resolv%'')  
      
     update SDIncident set TickResolvedDt=GETDATE(),sdStatusFK=@StatusFk,sdStageFK=@StageFk, sdSolutionTypeFK=@sdSolutionTypeFK,solutionNote=@solutionNote,prevSDstatusFK=@PrevStatusFK,previousStageFK=@previousStageFK  
     where Ticketref=@ticketConvert;  
     exec SD_Sendmail @TicketNumber=@ticketConvert,@Option=''ResolvedTicket'',@OrgId=@organizationFK;  
     exec SD_spAddKnowledgeBase @Issue=@TicketSummary,@ResolutionDetail=@solutionNote,@ViewToUser=@ViewToUser,@Option=''AddKB'',@OrgDeskRef=@organizationFK;  
     exec  SD_spAddTicketNotes @Ticketref=@ticketConvert,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotesFinal,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK;  
  
    
     
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
  BEGIN  
    
    
    set @desk=(select  top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
     set @SubmitterID=(select  top 1 SubmitterID from vSDTicket where TicketNumber=@ticketConvert)  
    if(@desk=''CloudProcess'')  
     BEGIN  
     set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval where EmpID=@SubmitterID)  
      exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
       
     END  
    else if(@desk=''Service Request'')  
     BEGIN  
     set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval_SRDesk where EmpID=@SubmitterID)  
      exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
        
     END  
     else if(@desk=''Change Request'')  
     BEGIN  
      set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval_SRDesk where EmpID=@SubmitterID)  
     exec SD_ChangeCABApproval @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddCABApprovalStatus'',@Orgid=@organizationFK  
         
    END  
  
  END  
 END  
  '
GO

--
-- Create table [dbo].[DynamicFLow]
--
PRINT (N'Create table [dbo].[DynamicFLow]')
GO
IF OBJECT_ID(N'dbo.DynamicFLow', 'U') IS NULL
CREATE TABLE dbo.DynamicFLow (
  id int IDENTITY,
  Org_Id varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  flowDesc nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  imagepath varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  inserttime datetime NULL DEFAULT (getdate()),
  ReqType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertDynamicFlow]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertDynamicFlow]')
GO
IF OBJECT_ID(N'dbo.SP_InsertDynamicFlow', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_InsertDynamicFlow(
    @Org_Id VARCHAR(100)=null,
    @flowDesc NVARCHAR(500)=null,
    @imagepath VARCHAR(1000)=null,
	@ReqType VARCHAR(50)=null
	)
AS
BEGIN
    INSERT INTO DynamicFlow (Org_Id, flowDesc, imagepath,ReqType)
    VALUES (@Org_Id, @flowDesc, @imagepath,@ReqType);
END;
'
GO

--
-- Create table [dbo].[CommonLog]
--
PRINT (N'Create table [dbo].[CommonLog]')
GO
IF OBJECT_ID(N'dbo.CommonLog', 'U') IS NULL
CREATE TABLE dbo.CommonLog (
  ID numeric IDENTITY,
  TableId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PageName varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReqType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReqDef varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageDesc varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SLAName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SLADesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryRef varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryCodeRef varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDPrefix varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DeskDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDCategory varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityName varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SeverityName varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SeverityDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ArchiveTime varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CoverageSch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HostName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Port varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderUserName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderEmail varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderPWD varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Retry varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientSecretKey varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TenantID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonMob varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonEmail varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonNameII varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonMobII varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonEmailII varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldMode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsFieldReq varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldScope varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseTimeMin varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionTimeMin varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ColorCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  FieldValue varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertCommonLog]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertCommonLog]')
GO
IF OBJECT_ID(N'dbo.SP_InsertCommonLog', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_InsertCommonLog  
(  
	@TableId varchar(50) = NULL,  
    @OrgId varchar(50) = NULL,  
    @UserID varchar(100) = NULL,  
    @PageName varchar(max) = NULL,  
    @ReqType varchar(50) = NULL,  
    @ReqDef varchar(50) = NULL,  
    @StageName varchar(50) = NULL,  
    @StageDesc varchar(2000) = NULL,  
    @SLAName varchar(50) = NULL,  
    @SLADesc varchar(max) = NULL,  
	@CategoryRef varchar(50) = NULL,  
	@CategoryCodeRef varchar(100) = NULL,  
    @TemplateName varchar(50) = NULL,  
    @SDPrefix varchar(20) = NULL,  
    @DeskDesc varchar(max) = NULL,  
    @SDCategory varchar(50) = NULL,  
    @Status varchar(20) = NULL,  
    @PriorityName varchar(20) = NULL,  
    @PriorityDesc varchar(500) = NULL,  
    @SeverityName varchar(20) = NULL,  
    @SeverityDesc varchar(500) = NULL,  
    @ResolutionName varchar(50) = NULL,  
    @ResolutionDesc varchar(500) = NULL,  
    @ArchiveTime varchar(20) = NULL,  
    @CoverageSch varchar(50) = NULL,  
    @HostName varchar(500) = NULL,  
    @Port varchar(20) = NULL,  
    @SenderUserName varchar(500) = NULL,  
    @SenderEmail varchar(500) = NULL,  
    @SenderPWD varchar(100) = NULL,  
    @Retry varchar(20) = NULL,  
    @ClientID varchar(100) = NULL,  
    @ClientSecretKey varchar(100) = NULL,  
    @TenantID varchar(100) = NULL,  
	@OrgName varchar(500) = NULL,  
    @OrgDesc varchar(500) = NULL,  
	@ContPersonName varchar(50) = NULL,  
    @ContPersonMob varchar(20) = NULL,  
    @ContPersonEmail varchar(500) = NULL,  
    @ContPersonNameII varchar(50) = NULL,  
    @ContPersonMobII varchar(20) = NULL,  
	@ContPersonEmailII varchar(500) = NULL,  
    @FieldID varchar(100) = NULL,  
    @FieldName varchar(100) = NULL,  
    @FieldMode varchar(100) = NULL,  
	@FieldValue varchar(100) = NULL,
	@FieldType varchar(100) = NULL,
    @IsFieldReq varchar(20) = NULL,  
    @FieldScope varchar(50) = NULL,  
    @ResponseTimeMin varchar(20) = NULL,  
    @ResolutionTimeMin varchar(20) = NULL,  
    @StatusName varchar(50) = NULL,  
    @StatusDesc varchar(500) = NULL,  
    @ColorCode varchar(50) = NULL  
)  
AS  
BEGIN  
    INSERT INTO CommonLog (TableId,  
        OrgId,  UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc,CategoryRef,  
		CategoryCodeRef,TemplateName, SDPrefix, DeskDesc,  
        SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName,  
        ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD,  
        Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc,ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII,  
        ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode,FieldValue,FieldType, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin,  
        StatusName, StatusDesc, ColorCode) 
		VALUES 
		(@TableId, @OrgId, @UserID, @PageName, @ReqType, @ReqDef, @StageName, @StageDesc, @SLAName, @SLADesc,  
        @CategoryRef,@CategoryCodeRef, @TemplateName, @SDPrefix, @DeskDesc,  
        @SDCategory, @Status, @PriorityName, @PriorityDesc, @SeverityName, @SeverityDesc, @ResolutionName,  
        @ResolutionDesc, @ArchiveTime, @CoverageSch, @HostName, @Port, @SenderUserName, @SenderEmail, @SenderPWD,  
        @Retry, @ClientID, @ClientSecretKey, @TenantID, @OrgName, @OrgDesc, @ContPersonName, @ContPersonMob, @ContPersonEmail, @ContPersonNameII,  
        @ContPersonMobII, @ContPersonEmailII, @FieldID, @FieldName, @FieldMode,@FieldValue,@FieldType, @IsFieldReq, @FieldScope, @ResponseTimeMin, @ResolutionTimeMin,  
        @StatusName, @StatusDesc, @ColorCode);  
END;  
'
GO

--
-- Create table [dbo].[AMS_Asset_Dep_Master]
--
PRINT (N'Create table [dbo].[AMS_Asset_Dep_Master]')
GO
IF OBJECT_ID(N'dbo.AMS_Asset_Dep_Master', 'U') IS NULL
CREATE TABLE dbo.AMS_Asset_Dep_Master (
  ID int IDENTITY (17654567, 1),
  DepCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy int NULL,
  InsertDt datetime NULL,
  UpdateBy int NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  PRIMARY KEY CLUSTERED (DepCode)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[ALM_OrgLogo]
--
PRINT (N'Create table [dbo].[ALM_OrgLogo]')
GO
IF OBJECT_ID(N'dbo.ALM_OrgLogo', 'U') IS NULL
CREATE TABLE dbo.ALM_OrgLogo (
  ID int IDENTITY,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  Org_ID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[GetDateDifference]
--
GO
PRINT (N'Create or alter function [dbo].[GetDateDifference]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDateDifference') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDateDifference (
    @StartDate DATETIME,
    @EndDate DATETIME
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @Duration NVARCHAR(100)

    DECLARE @Days INT, @Hours INT, @Minutes INT, @Seconds INT

    -- Calculate the difference in seconds
    DECLARE @DiffSeconds INT = DATEDIFF(SECOND, @StartDate, @EndDate)

    -- Calculate days, hours, minutes, and remaining seconds
    SET @Days = @DiffSeconds / (60 * 60 * 24)
    SET @DiffSeconds = @DiffSeconds % (60 * 60 * 24)

    SET @Hours = @DiffSeconds / (60 * 60)
    SET @DiffSeconds = @DiffSeconds % (60 * 60)

    SET @Minutes = @DiffSeconds / 60
    SET @Seconds = @DiffSeconds % 60

    -- Format the duration
    SET @Duration = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '''' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '''' END,
        CASE WHEN @Minutes > 0 THEN CAST(@Minutes AS NVARCHAR(10)) + '' minutes '' ELSE '''' END,
        CAST(@Seconds AS NVARCHAR(10)) + '' seconds''
    )

    RETURN @Duration
END
'
GO

--
-- Create or alter function [dbo].[SplitString]
--
GO
PRINT (N'Create or alter function [dbo].[SplitString]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SplitString') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SplitString
(    
    @Input NVARCHAR(MAX),
    @Character CHAR(1)
)
RETURNS @Output TABLE (
    Item NVARCHAR(1000)
)
AS
BEGIN
    DECLARE @StartIndex INT, @EndIndex INT
 
    SET @StartIndex = 1
    IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
    BEGIN
        SET @Input = @Input + @Character
    END
 
    WHILE CHARINDEX(@Character, @Input) > 0
    BEGIN
        SET @EndIndex = CHARINDEX(@Character, @Input)
         
        INSERT INTO @Output(Item)
        SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)
         
        SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
    END
 
    RETURN
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDMergeTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDMergeTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spSDMergeTicket', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER  Proc dbo.SD_spSDMergeTicket  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   
      ,@Ticketref varchar(20)= null output  
    
      ,@sdStageFK numeric(26,0)= null  
      ,@sdStatusFK numeric(26,0)= null  
      
      ,@sdSolutionTypeFK numeric(26,0)= null  
     
      ,@TicketSummary varchar(max)= null  
     ,@AllTicketMerge nvarchar(max)=null  
   ,@TickNotes nvarchar(max)=null  
       
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      
      ,@organizationFK numeric(26,0)= null  
     
      ,@solutionNote varchar(max)= null  
     
      ,@previousStageFK numeric(26,0)= null  
     
   ,@UserName nvarchar(100)=null  
   ,@PrimaryTicketref nvarchar(100)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
 ,@MergeNotes  nvarchar(10)=null  
  ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''MergeTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  declare @MergeSummary nvarchar(max)=null;  
  declare @MergeDesc nvarchar(max)=null;  
    declare @MergeFinalNote nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
  set @sdStageFK=(select top 1 sd_stageFK from SD_Status where DeskRef=@DeskRef and StatusCodeRef =''Resolved'')  
  set @StatusFKAsPerStage=(select top 1 ID from SD_Status where DeskRef=@DeskRef and StatusCodeRef =''Resolved'')  
  if Exists (select *from SD_Technician where TechLoginName=@UserName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@UserName)  
  
  END  
   set @MergeDesc=(select top 1 TicketDesc from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  set @MergeSummary=(select top 1 TicketSummary from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  set @MergeFinalNote=Concat(''Summary of Merge Ticket :'','''',@MergeSummary,'''',''Description of Ticket:'',@MergeDesc,''Reason For merging:'',@TickNotes);  
  exec  SD_spAddTicketNotes @Ticketref=@PrimaryTicketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
 update  SDIncident  
  
  set    sdStageFK=ISNULL(@sdStageFK,0)  
    ,sdStatusFK=ISNULL(@StatusFKAsPerStage,0)  
       
    ,TickResolvedDt=GETDATE()  
   ,assigneeParticipantFK=@TechID  
  
   ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote  
     
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
  
  exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
   declare @NewStatus nvarchar(100);  
  set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
   if(@NewStatus=''resolved'')  
  BEGIN  
  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
  END  
  update  SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''OpenEnd'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  update SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''WIPStart'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  update SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''WIPEnd'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  
  
  
   
 END  
 if(@Option=''UpdatePrimaryTicket'')  
 BEGIN  
  
  
  --if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  --BEGIN   
  --Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@UserName)  
  
  --END  
 update  SDIncident  
  
set TicketSummary=@TicketSummary  
--,assigneeParticipantFK=@TechID  
     
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
  
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
 if(@MergeNotes=''Yes'')  
 set @TicketID=(select top 1 id from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
 insert into SD_TicketNotes (TicketID,Ticketref,EdityBy,EditedDt,NoteDesc,EngineerNote,organizationFK)  
 select @TicketID,@Ticketref,@EditedBy,GETDATE(),NoteDesc,EngineerNote,organizationFK from SD_TicketNotes   where organizationFK=@organizationFK and  Ticketref in (SELECT Item FROM dbo.SplitString(@AllTicketMerge, '',''))  
and  Ticketref!=@Ticketref  
  
  
   
 END  
END   
  '
GO

--
-- Create or alter function [dbo].[udf_StripHTML]
--
GO
PRINT (N'Create or alter function [dbo].[udf_StripHTML]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.udf_StripHTML') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.udf_StripHTML

(
@HTMLText varchar(MAX)
)
RETURNS varchar(MAX)
AS
BEGIN
DECLARE @Start  int
DECLARE @End    int
DECLARE @Length int

set @HTMLText = replace(@htmlText, ''<br>'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<br/>'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<br />'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<li>'',''- '')
set @HTMLText = replace(@htmlText, ''</li>'',CHAR(13) + CHAR(10))

set @HTMLText = replace(@htmlText, ''&rsquo;'' collate Latin1_General_CS_AS, ''''''''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&quot;'' collate Latin1_General_CS_AS, ''"''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&amp;'' collate Latin1_General_CS_AS, ''&''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&euro;'' collate Latin1_General_CS_AS, ''â¬''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&lt;'' collate Latin1_General_CS_AS, ''<''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&gt;'' collate Latin1_General_CS_AS, ''>''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&oelig;'' collate Latin1_General_CS_AS, ''oe''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&nbsp;'' collate Latin1_General_CS_AS, '' ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&copy;'' collate Latin1_General_CS_AS, ''Â©''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&laquo;'' collate Latin1_General_CS_AS, ''Â«''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&reg;'' collate Latin1_General_CS_AS, ''Â®''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&plusmn;'' collate Latin1_General_CS_AS, ''Â±''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&sup2;'' collate Latin1_General_CS_AS, ''Â²''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&sup3;'' collate Latin1_General_CS_AS, ''Â³''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&micro;'' collate Latin1_General_CS_AS, ''Âµ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&middot;'' collate Latin1_General_CS_AS, ''Â·''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ordm;'' collate Latin1_General_CS_AS, ''Âº''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&raquo;'' collate Latin1_General_CS_AS, ''Â»''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac14;'' collate Latin1_General_CS_AS, ''Â¼''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac12;'' collate Latin1_General_CS_AS, ''Â½''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac34;'' collate Latin1_General_CS_AS, ''Â¾''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Aelig'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ccedil;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Egrave;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Eacute;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ecirc;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ouml;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&agrave;'' collate Latin1_General_CS_AS, ''Ã ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&acirc;'' collate Latin1_General_CS_AS, ''Ã¢''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&auml;'' collate Latin1_General_CS_AS, ''Ã¤''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&aelig;'' collate Latin1_General_CS_AS, ''Ã¦''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ccedil;'' collate Latin1_General_CS_AS, ''Ã§''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&egrave;'' collate Latin1_General_CS_AS, ''Ã¨''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&eacute;'' collate Latin1_General_CS_AS, ''Ã©''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ecirc;'' collate Latin1_General_CS_AS, ''Ãª''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&euml;'' collate Latin1_General_CS_AS, ''Ã«''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&icirc;'' collate Latin1_General_CS_AS, ''Ã®''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ocirc;'' collate Latin1_General_CS_AS, ''Ã´''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ouml;'' collate Latin1_General_CS_AS, ''Ã¶''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&divide;'' collate Latin1_General_CS_AS, ''Ã·''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&oslash;'' collate Latin1_General_CS_AS, ''Ã¸''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ugrave;'' collate Latin1_General_CS_AS, ''Ã¹''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&uacute;'' collate Latin1_General_CS_AS, ''Ãº''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ucirc;'' collate Latin1_General_CS_AS, ''Ã»''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&uuml;'' collate Latin1_General_CS_AS, ''Ã¼''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&quot;'' collate Latin1_General_CS_AS, ''"''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&amp;'' collate Latin1_General_CS_AS, ''&''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&lsaquo;'' collate Latin1_General_CS_AS, ''<''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&rsaquo;'' collate Latin1_General_CS_AS, ''>''  collate Latin1_General_CS_AS)


-- Remove anything between <STYLE> tags
SET @Start = CHARINDEX(''<STYLE'', @HTMLText)
SET @End = CHARINDEX(''</STYLE>'', @HTMLText, CHARINDEX(''<'', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '''')
SET @Start = CHARINDEX(''<STYLE'', @HTMLText)
SET @End = CHARINDEX(''</STYLE>'', @HTMLText, CHARINDEX(''</STYLE>'', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1
END

-- Remove anything between <whatever> tags
SET @Start = CHARINDEX(''<'', @HTMLText)
SET @End = CHARINDEX(''>'', @HTMLText, CHARINDEX(''<'', @HTMLText))
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '''')
SET @Start = CHARINDEX(''<'', @HTMLText)
SET @End = CHARINDEX(''>'', @HTMLText, CHARINDEX(''<'', @HTMLText))
SET @Length = (@End - @Start) + 1
END

RETURN LTRIM(RTRIM(@HTMLText))

END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsDataIMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsDataIMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsDataIMSPL', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsDataIMSPL          
  (          
  @From datetime ,          
  @To datetime,          
  @OrgID numeric(18,0),      
  @Deskref varchar(50)      
  )          
            
  AS          
  BEGIN          
          
           
select  ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,max(a.Status) Status,max(a.Priority) Priority,  
max(a.Severity) Severity,max(Location) ''Location (Call registered by Team from Location)'',          
max(CONVERT(VARCHAR(19), CreationDate, 120))  ''Call Registration Date Time (A)'',          
max((CONVERT(VARCHAR(10), CreationDate, 23))) ''Call Registration Date  (A>a)'',          
          
max(SubmitterName) ''Complaint By (User Name)'',          
max(Department) ''Complaint By Dept.'',max(Summary) ''Problem Desc.'',          
max(a.Category) ''Problem Type'',          
max(a.Resolution) ''Solution Type''          
,max(dbo.udf_StripHTML(solutionNote)) ''Solution Description'',          
max(a.Category) ''Problem'', max(SourceType) ''Call Registration Flag (With / Without Mail)'',          
    max(CONVERT(VARCHAR(19), FieldValue, 120)) ''Call Attend time ("B")'',          
 max(CONVERT(VARCHAR(19), ResolutionDt, 120)) ''Solution Given Time ("C")'',          
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',          
max(dbo.GetDateDifference(CreationDate,ResolutionDt)) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',          
          
max(dbo.GetTicketResolutionTime_new(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID)) ''Time Taken to Resolve The Problem ("C" - "A") With SLA'',          
max(a.TechLoginName) as ''Engineer'',          
max(ResolutionSLA ) ResolutionSLA,        
max(a.SubmitterEmail )   SubmitterEmail    
from vSDTicket a          
left join SD_CustomFieldTicketValues b          
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId          
left join SD_vResolutionSLA c          
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId          
left join  vSDOrgDeskDef dd          
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk          
where            
--FieldName=''WIPStart''and       
(CreationDate >=@From and CreationDate <= @To)          
and a.OrgId=@OrgID   
and a. ServiceDesk = case when isnull(@Deskref,''----All----'')=''----All----'' then a. ServiceDesk else @Deskref end      
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)          
 group by a.TicketNumber         
          
  END         
          
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
          
          '
GO

--
-- Create or alter view [dbo].[SD_MonthlyDataReport]
--
GO
PRINT (N'Create or alter view [dbo].[SD_MonthlyDataReport]')
GO
IF OBJECT_ID(N'dbo.SD_MonthlyDataReport', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.SD_MonthlyDataReport as
(
select ROW_NUMBER() over (order by TicketNumber desc) ''S No.'',TicketNumber,Location ''Location (Call registered by Team from Location)'',
CreationDate ''Call Registration Date Time (A)'',SubmitterName ''Complaint By (User Name)'',
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',
Category ''Problem Type'',
Resolution ''Solution Type''
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',
Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',
FieldValue ''Call Attend time ("B")'',
ResolutionDt ''Solution Given Time ("C")'',
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',
dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A")'',
a.TechLoginName as ''Engineer''



from vSDTicket a inner join SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
where (Status=''Resolved'' or Status=''Closed'') and FieldName=''WIPStart''
and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)

)

'
GO

--
-- Create or alter procedure [dbo].[SD_DepartmentwiseCall]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_DepartmentwiseCall]')
GO
IF OBJECT_ID(N'dbo.SD_DepartmentwiseCall', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_DepartmentwiseCall

(
@PageIndex Int =1,
@PageSize int =5,
@FieldName varchar(50)=null,
@FieldValue nvarchar(100)=null,
@ID nvarchar(100)=null,
@Option varchar(50)=null

)
AS 
SET NOCOUNT ON
BEGIN

select * from SD_MonthlyDataReport order by TicketNumber desc

DECLARE 
			@ColumnsList1 AS NVARCHAR(MAX),
			@ColumnsList2 AS NVARCHAR(MAX),
			@ColumnsList3 AS NVARCHAR(MAX),
			@query AS NVARCHAR(MAX);

		SET @ColumnsList1 = STUFF(
			(SELECT distinct '','' + QUOTENAME([Problem Type]) FROM SD_MonthlyDataReport FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)'') 
			,1,1,'''')
		PRINT @ColumnsList1
		SET @ColumnsList2 = REPLACE (@ColumnsList1, '','',''+'')
		PRINT @ColumnsList2
		SET @ColumnsList3 = (SELECT distinct '',SUM(ISNULL('' + QUOTENAME([Problem Type]) + '', 0)) as '' + QUOTENAME([Problem Type]) FROM SD_MonthlyDataReport FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)'')
		PRINT @ColumnsList3

		SET @query = ''
		;With MyCTE as(
		select [Complaint By Dept.],''+@ColumnsList1+'',''+@ColumnsList2+'' AS Grand_Total
		from (
			 SELECT Count(TicketNumber) as Total,[Complaint By Dept.],[Problem Type] from [dbo].[SD_MonthlyDataReport] w 
			 where [Complaint By Dept.]!=''''0''''
			 group by [Complaint By Dept.],[Problem Type]
		) src
		pivot
		(
		  MAX(Total)
		  for [Problem Type] in (''+@ColumnsList1+'')
		) piv
		)
		select ISNULL([Complaint By Dept.],''''Total'''') as Name ''+@ColumnsList3+''
		from MyCTE
		GROUP BY ROLLUP ([Complaint By Dept.])''
		execute(@query)
END
'
GO

--
-- Create or alter view [dbo].[SD_CustomizedAllTicketsData]
--
GO
PRINT (N'Create or alter view [dbo].[SD_CustomizedAllTicketsData]')
GO
IF OBJECT_ID(N'dbo.SD_CustomizedAllTicketsData', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.SD_CustomizedAllTicketsData as
(
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,Status,Priority,Severity,Location ''Location (Call registered by Team from Location)'',
CreationDate ''Call Registration Date Time (A)'',SubmitterName ''Complaint By (User Name)'',
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',
Category ''Problem Type'',
Resolution ''Solution Type''
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',
Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',
FieldValue ''Call Attend time ("B")'',
ResolutionDt ''Solution Given Time ("C")'',
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',
dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A")'',


a.TechLoginName as ''Engineer'',
ResolutionSLA



from vSDTicket a inner join SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
inner join SD_vResolutionSLA c
on a.TicketNumber=c.TicketNumber
and b.OrgId=c.OrgID
where 
FieldName=''WIPStart''
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)

)'
GO

--
-- Create or alter function [dbo].[ConvertMintoDayHourMinSec]
--
GO
PRINT (N'Create or alter function [dbo].[ConvertMintoDayHourMinSec]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ConvertMintoDayHourMinSec') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.ConvertMintoDayHourMinSec (
   @TotalResolutionMinutes int
)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100);

--DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24)
DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60
DECLARE @Minutes INT = @TotalResolutionMinutes % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
 --   CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '' 0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '' 0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)

return @ResolutionTime
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData_Old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData_Old]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsData_Old', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsData_Old    
  (    
  @From datetime ,    
  @To datetime,    
  @OrgID numeric(18,0)    
  )    
      
  AS    
  BEGIN    
    
     
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,a.Status,a.Priority,a.Severity,Location ''Location (Call registered by Team from Location)'',    
CONVERT(VARCHAR(19), CreationDate, 120)  ''Call Registration Date Time (A)'',    
CONVERT(VARCHAR(10), CreationDate, 23) ''Call Registration Date  (A>a)'',    
    
SubmitterName ''Complaint By (User Name)'',    
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',    
a.Category ''Problem Type'',    
a.Resolution ''Solution Type''    
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',    
a.Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',    
    CONVERT(VARCHAR(19), FieldValue, 120) ''Call Attend time ("B")'',    
 CONVERT(VARCHAR(19), ResolutionDt, 120) ''Solution Given Time ("C")'',    
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',    
--dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',    
dbo.ResolTimeBuisne(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) ''Time Taken to Resolve The Problem (C - A) With SLA'',    
dbo.ResolTimeBuisne(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) ''Total Hold Time With SLA'',    
    
    
[dbo].[ConvertMintoDayHourMinSec](    
cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) as int)    
- Cast(dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) as int)     
 )''Time Taken to Resolve The Problem (C - A) With SLA - HoldTime'',    
a.TechLoginName as ''Engineer'',    
ResolutionSLA  ,  
a.SubmitterEmail  
from vSDTicket a    
inner join SD_CustomFieldTicketValues b    
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId    
inner join SD_vResolutionSLA c    
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId    
inner join  vSDOrgDeskDef dd    
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk    
left join  SD_vGetTotalHoldDuration ho    
on ho.TicketNo=a.TicketNumber and ho.OrgId=a.OrgId    
    
    
where     
FieldName=''WIPStart''    
and  (CreationDate >=@From and CreationDate <= @To) and a.OrgId=@OrgID    
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)    
    
    
  END    
    
      
       
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsData', 'P') IS NULL
EXEC sp_executesql N'--exec SD_spCustomizedAllTicketsData @From=''2024-08-01'',@To=''2024-08-30'',@OrgID=''680624893''  ,@Deskref=''----All----''



 CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsData        
  (        
  @From datetime ,        
  @To datetime,        
  @OrgID numeric(18,0) ,  
  @Deskref varchar(50)       
  )        
          
  AS        
  BEGIN        
        
         
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,a.Status,a.Priority,a.Severity,Location ''Location (Call registered by Team from Location)'',        
CONVERT(VARCHAR(19), CreationDate, 120)  ''Call Registration Date Time (A)'',        
CONVERT(VARCHAR(10), CreationDate, 23) ''Call Registration Date  (A>a)'',        
        
SubmitterName ''Complaint By (User Name)'',        
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',        
a.Category ''Problem Type'',        
a.Resolution ''Solution Type''        
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',        
a.Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',        
    CONVERT(VARCHAR(19), FieldValue, 120) ''Call Attend time ("B")'',        
 CONVERT(VARCHAR(19), ResolutionDt, 120) ''Solution Given Time ("C")'',        
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',        
--dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',        
dbo.ResolTimeBuisne(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) ''Time Taken to Resolve The Problem (C - A) With SLA'',        
dbo.ResolTimeBuisne(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) ''Total Hold Time With SLA'',        
        
        
[dbo].[ConvertMintoDayHourMinSec](        
cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) as int)        
- Cast(dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) as int)         
 )''Time Taken to Resolve The Problem (C - A) With SLA - HoldTime'',        
a.TechLoginName as ''Engineer'',        
ResolutionSLA  ,      
a.SubmitterEmail      
from vSDTicket a        
left join SD_CustomFieldTicketValues b        
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId        
left join SD_vResolutionSLA c        
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId        
left join  vSDOrgDeskDef dd        
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk        
left join  SD_vGetTotalHoldDuration ho        
on ho.TicketNo=a.TicketNumber and ho.OrgId=a.OrgId        
        
        
where         
--FieldName=''WIPStart''   and   
(CreationDate >=@From and CreationDate <= @To) and a.OrgId=@OrgID    
and a.ServiceDesk=CASE WHEN ISNULL(@Deskref,''----All----'')=''----All----'' then a.ServiceDesk else @Deskref end  
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)        
        
        
  END 

  '
GO

--
-- Create or alter procedure [dbo].[SDsp_TicketDetails]
--
GO
PRINT (N'Create or alter procedure [dbo].[SDsp_TicketDetails]')
GO
IF OBJECT_ID(N'dbo.SDsp_TicketDetails', 'P') IS NULL
EXEC sp_executesql N'    
    
  CREATE OR ALTER PROC dbo.SDsp_TicketDetails    
  (    @Scope varchar(50)=null,    
   @From datetime=null,    
   @ServiceDesk nvarchar(200)=null,    
   @To datetime=null,    
   @Category varchar(100)=null,    
   @Organization varchar(100)=null,    
     @OrgId numeric(18,0)=null,    
   @Option varchar(50)    
  )    
  AS    
  BEGIN    
     --if(@Option=''OrgSLA'')    
     --BEGIN    
    
     --select CustomerName ''Customer Name'',ContractType ''Contract Type'',    
     --DBCategory ''DB Category'',CustomerEmail ''Customer Email'',ResponseS1,ResponseS2,ResponseS3,ResponseS4,    
     --ResolutionS1,ResolutionS2,ResolutionS3,ResolutionS4    
     --from pcv_SLA a      
     --    WHERE   (o.ScopeName =@Scope)     
    
     --END    
    
         
     --if(@Option=''OrgCategoryDetails'')    
     --BEGIN    
    
     --SELECT distinct   v.ServiceDesk as ''Service Desk'',    
     --   v.TicketNumber as ''Ticket Number'',    
     --   v.Summary,     
     --   v.Status,    
     --   v.Severity,    
     --   v.Category,    
     --   v.SubmitterName ''Submitter Name'',    
     --   v.SubmitterEmail ''Submitter Email'',    
     --   v.Assignee,     
     --   v.Organization,    
     --    v.Created,    
     --   v.Closed,    
     --   String2 as [Sub Status], String9 as [Contract Type], String1 as [Engineer Name], String8 as [System Serial Number],    
     --   String19 as [User Name], String11 as [Customer Email], String24 as [Request Type],String40 as [GSD Agent],String3 as [Hold Reason]    
     --   FROM ksd.CustomFieldsValues AS c     
     --   INNER JOIN kasadmin.vSDTicket AS v ON c.Id = v.Id          
     --   INNER JOIN kasadmin.org o ON v.Organization=o.orgName    
     --   INNER JOIN [CP_UserScope] s ON o.id=s.Org_id    
     --   where ServiceDesk=''Incident'' and s.ScopeName=@Scope    
     --   and Category like @Category+''%''     
     --      order by TicketNumber asc    
     --END    
    
     if(@Option=''OrgTicketsDateWise'')    
     BEGIN    
     --select * from SD_CustomizedAllTicketsData      
    
     --where CONVERT(varchar(10),[Call Registration Date Time (A)],120)>=@From and CONVERT(varchar(10),[Call Registration Date Time (A)],120)<=@To     
         
     if(@OrgId=''523843837'')    
     BEGIN    
     exec SD_spCustomizedAllTicketsData @From=@From,@To=@To,@OrgID=@OrgId  ,@Deskref=@ServiceDesk  
            END    
      else     
      BEGIN     
      exec SD_spCustomizedAllTicketsDataIMSPL @From=@From,@To=@To,@OrgID=@OrgId ,@Deskref=@ServiceDesk  
      END    
    
     END    
        
--     if(@Option=''OrgSurvey'')    
--     BEGIN    
    
--      SELECT *    
--    FROM    
--    (    
--                    SELECT        [Ticket ID], Summary, Organization, Submitter, Assignee,String1 as [Engineer Name],[GSD Agent], Question, Answer,[Date Time]    
--FROM            (         
--                                   SELECT DISTINCT     
--                                                    String1,String40 as [GSD Agent],pcv_FeedAnswers.TicketID AS ''Ticket ID'', a.Summary, a.Organization, a.SubmitterName AS ''Submitter'',a.Assignee,     
--                                                    q.QuestionId, q.Question, pcv_FeedAnswers.Answer, FORMAT(pcv_FeedAnswers.Date_Time, ''yyyy-MM-dd'') AS ''Date Time''    
--                          FROM            pcv_FeedAnswers INNER JOIN    
          
--                                                    pcv_FeedQuestions q ON pcv_FeedAnswers.QuestionId = q.QuestionId INNER JOIN    
--                                                    kasadmin.vSDTicket a ON pcv_FeedAnswers.TicketID = a.TicketNumber    
--               INNER JOIN ksd.CustomFieldsValues v on a.id=v.Id     
--               INNER JOIN kasadmin.org o ON a.Organization=o.orgName    
--               INNER JOIN [CP_UserScope] s ON o.id=s.Org_id    
--              where ServiceDesk=''Incident'' and s.ScopeName=@Scope    
--                          AND (q.Status = ''Active'')      
            
--        AND pcv_FeedAnswers.Date_Time >= @From and pcv_FeedAnswers.Date_Time <=@To ) AS DASHBOARD    
                       
    
--      ) AS SourceTable    
--    PIVOT    
--    (    
--     Max(Answer)    
--     FOR Question IN (    
--      [How do you rate our responsiveness over Phone/E-mail dealing with you?]    
--     ,[How do you rate our technical competence of engineer and their interaction with you?]    
--     ,[How do you rate our products and services, and did they meet your needs and delivery expectations?]    
--     )    
--    ) AS PivotTable   order by [Date Time] desc    
    
--     END    
  END    
    
    '
GO

--
-- Create or alter procedure [dbo].[_sp_GetCustomFieldValue]
--
GO
PRINT (N'Create or alter procedure [dbo].[_sp_GetCustomFieldValue]')
GO
IF OBJECT_ID(N'dbo._sp_GetCustomFieldValue', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo._sp_GetCustomFieldValue

(
@PageIndex Int =1,
@PageSize int =5,
@FieldName varchar(50)=null,
@FieldValue nvarchar(100)=null,
@ID nvarchar(100)=null,
@Option varchar(50)=null

)
AS 
SET NOCOUNT ON
BEGIN
if(@Option=''GetCustomFieldValue'')


BEGIN
Declare @ColumnName varchar(100);
Declare @str nvarchar(max);
set @ColumnName=@FieldName;
set @str=''select ID, ''+@ColumnName+'' as ''''FieldValue'''' from SD_CustomFieldValues where ''+@ColumnName+'' is not null  '';
exec(@str);
END
if(@Option=''DeleteCustomFieldValue'')


BEGIN
Declare @ColumnNamedel varchar(100);
Declare @ColumnNamedelval varchar(100);
Declare @strdel nvarchar(max);
set @ColumnNamedel=@FieldName;
set @ColumnNamedelval=@FieldValue;
set @strdel=''update  SD_CustomFieldValues set ''+@ColumnNamedel+''=null where ''+@ColumnNamedel+''=''''''+@ColumnNamedelval+'''''' and id=''''''+@ID+'''''' '';
exec(@strdel);
END

if(@Option=''updateCustomFieldValue'')


BEGIN
Declare @ColumnNameupdt varchar(100);
Declare @ColumnNameupdtval varchar(100);
Declare @strUpdt nvarchar(max);
set @ColumnNameupdt=@FieldName;
set @ColumnNameupdtval=@FieldValue;
set @strUpdt=''update  SD_CustomFieldValues set ''+@ColumnNameupdt+''=''''''+@ColumnNameupdtval+'''''' where  id=''''''+@ID+'''''' '';
exec(@strUpdt);
END

END
'
GO

--
-- Create or alter procedure [dbo].[VSA_spSelfServiceProcedures]
--
GO
PRINT (N'Create or alter procedure [dbo].[VSA_spSelfServiceProcedures]')
GO
IF OBJECT_ID(N'dbo.VSA_spSelfServiceProcedures', 'P') IS NULL
EXEC sp_executesql N'
 

CREATE OR ALTER PROC dbo.VSA_spSelfServiceProcedures
        (
                @ID int =null ,
                @scriptId int = NULL,
                @scriptName varchar(260)= NULL,
                @departmentName varchar(260)= NULL,
                @agentGuid numeric(26,0)= NULL,
                @UserName varchar(500) = NULL,
                @FirstSchool varchar(500) = NULL,
                @BornCity varchar(500) = NULL,
                @ChildhoodPet varchar(500) = NULL,
                @ChildhoodBestFriend varchar(500) = NULL,
                @FirstEmployer varchar(500) = NULL,
                @FirstCarMake varchar(500) = NULL,
                @GrandmothersFirstname varchar(500) = NULL,
                @ChildStreet varchar(500) = NULL,
                @Password varchar(100)=null,
                @ChangedBy varchar(100)=null,
                @EncryptedPassword varchar(100)=null,
                @InsertedBy int= NULL,
                @UpdateBy int= NULL,
                @SerialNo varchar(100)=null,
                @UpdatedSerialNo varchar(100)=null,
                @Remarks varchar(max)=null,
                @ActionType varchar(20)=null,
                @InsertBy varchar(500)= NULL,
                @tempStr  varchar(500)= NULL,
				@Category  varchar(100)= NULL,
                @Option varchar(50) 
        )
        AS
        BEGIN
                if(@Option=''MachineDetails'')
                BEGIN
                        select ComputerName,SysSerialNumber,IpAddress,groupName,''IT'' as Department,a.agentGuid from ksubscribers.dbo.vmachine a-- join VMachCustFields b on a.agentGuid=b.agentGuid
                        where a.agentGuid=@agentGuid
                END
        END
        BEGIN
                if(@Option=''MyProcedures'')
                BEGIN
                        select distinct scriptName,scriptId from ksubscribers.dbo.pcv_SelfServiceProcedures where Category=@Category
						and OrgID=(select OrgID from ksubscribers.dbo.DenormalizedOrgToMach where AgentGuid=@agentGuid)  order by scriptName asc
                END
				 if(@Option=''AllProcedures'')
                BEGIN
                        select distinct Category from ksubscribers.dbo.pcv_SelfServiceProcedures where  OrgID=(select OrgID from ksubscribers.dbo.DenormalizedOrgToMach where AgentGuid=@AgentGuid)  
                END
 

                if(@Option=''MatchAnswers'')
                BEGIN
                        select * from pcv_SelfServiceUserDetails where UserName=@UserName  
                END

 

                if(@Option=''RegisterSecurityAns'')
                BEGIN
                IF EXISTS(SELECT * FROM pcv_SelfServiceUserDetails WHERE UserName = @UserName)
                    BEGIN
                        SET @tempStr=''Error:  There is already an Emp with an id of: '' + @UserName
                        RAISERROR (@tempStr, 11, 1)
                    END
                    ELSE
                    BEGIN
                        INSERT INTO pcv_SelfServiceUserDetails
                         (UserName, FirstSchool, BornCity, ChildhoodPet, ChildhoodBestFriend, FirstEmployer, FirstCarMake, GrandmothersFirstname, ChildStreet, InsertDt, InsertBy) 
                  VALUES (@UserName, @FirstSchool, @BornCity, @ChildhoodPet, @ChildhoodBestFriend, @FirstEmployer, @FirstCarMake, @GrandmothersFirstname, @ChildStreet, GETDATE(), @InsertBy)

 

                  INSERT INTO pcv_SelfServiceUserDetailsback
                         (UserName, FirstSchool, BornCity, ChildhoodPet, ChildhoodBestFriend, FirstEmployer, FirstCarMake, GrandmothersFirstname, ChildStreet, InsertDt, InsertBy) 
                  VALUES (@UserName, @FirstSchool, @BornCity, @ChildhoodPet, @ChildhoodBestFriend, @FirstEmployer, @FirstCarMake, @GrandmothersFirstname, @ChildStreet, GETDATE(), @InsertBy)
                   END

 

                END
        END

 

        BEGIN
                if(@Option=''RegisteredUserDetails'')
                BEGIN
                        SELECT ID,[UserName]     
      ,[InsertDt]
      ,[InsertBy]
  FROM [ksubscribers].[dbo].[pcv_SelfServiceUserDetails] order by InsertDt desc
                END

 

                if(@Option=''ChangePasswordLogs'')
                begin
                   INSERT INTO pcv_changepasswordlogs(UserName,ChangedBy,ChangeDate) values (@UserName,@ChangedBy,GETDATE())
                end

 

                if(@Option=''AssetUpdateDeleteLogs'')
                begin
                   INSERT INTO AMS_UpdateDeleteLogs(SerialNo,Remarks,ActionType,ActionDoneBy,ActionDateTime,UpdatedSerialNo) 
                   values (@SerialNo,@Remarks,@ActionType,@ChangedBy,GETDATE(),@UpdatedSerialNo)
                end

 

                if(@Option=''PasswordLogs'')
                begin
                  select * from pcv_changepasswordlogs order by ChangeDate desc 
                end

 

                if(@Option=''InsertPassword'')
                begin
                   INSERT INTO AMS_password([Password],EncryptedPassword,Insertby,Insertdt) values (@Password,@EncryptedPassword,@InsertedBy,GETDATE())
                end

 

                if(@Option=''UpdatePassword'')
                begin
                   update AMS_password set [Password]=@Password,EncryptedPassword=@EncryptedPassword,Updateby=@Updateby,Updatedt=GETDATE()
                   where ID=@ID
                end
        END

'
GO

--
-- Create or alter procedure [dbo].[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]
--
GO
PRINT (N'Create or alter procedure [dbo].[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]')
GO
IF OBJECT_ID(N'dbo.[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9] AS BEGIN BEGIN TRANSACTION; RECEIVE TOP(0) conversation_handle FROM [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; IF (SELECT COUNT(*) FROM [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9] WHERE message_type_name = ''http://schemas.microsoft.com/SQL/ServiceBroker/DialogTimer'') > 0 BEGIN if ((SELECT COUNT(*) FROM sys.services WHERE name = ''SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9'') > 0)   DROP SERVICE [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; if (OBJECT_ID(''SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9'', ''SQ'') IS NOT NULL)   DROP QUEUE [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; DROP PROCEDURE [SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; END COMMIT TRANSACTION; END
'
GO

--
-- Create or alter procedure [dbo].[SD_spOrgTicketFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spOrgTicketFilter]')
GO
IF OBJECT_ID(N'dbo.SD_spOrgTicketFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spOrgTicketFilter
(
    @From DATETIME = NULL,
    @To DATETIME = NULL,
    @OrgID NVARCHAR(200) = NULL,
    @Scope NVARCHAR(200) = NULL,
    @ServiceDesk NVARCHAR(200) = NULL,
    @query NVARCHAR(MAX) = NULL,
    @ColumnName NVARCHAR(300) = NULL,
    @SearchItem NVARCHAR(300) = NULL,
    @Option NVARCHAR(200)
)
AS
BEGIN
    IF (@Option = ''OrgTicketsFilter'')
    BEGIN
        SET @query = ''
        SELECT 
            ROW_NUMBER() OVER (ORDER BY MAX(a.TicketNumber) DESC) AS [S No.],
            MAX(a.ServiceDesk) AS [ServiceDesk],
            MAX(a.TicketNumber) AS [TicketNumber],
            MAX(a.Status) AS [Status],
            MAX(a.Priority) AS [Priority],
            MAX(a.Severity) AS [Severity],
            MAX(a.Location) AS [Location (Call registered by Team from Location)],
            MAX(CONVERT(VARCHAR(19), a.CreationDate, 120)) AS [Call Registration Date Time (A)],
            MAX(CONVERT(VARCHAR(10), a.CreationDate, 23)) AS [Call Registration Date (A>a)],
            MAX(a.SubmitterName) AS [Complaint By (User Name)],
            MAX(a.Department) AS [Complaint By Dept.],
            a.Summary AS [Problem Desc.],
            MAX(a.Category) AS [Problem Type],
            MAX(a.Resolution) AS [Solution Type],
            MAX(dbo.udf_StripHTML(a.solutionNote)) AS [Solution Description],
            MAX(a.Category) AS [Problem],
            MAX(a.SourceType) AS [Call Registration Flag (With / Without Mail)],
            MAX(CONVERT(VARCHAR(19), b.FieldValue, 120)) AS [Call Attend time (B)],
            MAX(CONVERT(VARCHAR(19), a.ResolutionDt, 120)) AS [Solution Given Time (C)],
            MAX(dbo.GetDateDifference(a.CreationDate, a.ResolutionDt)) AS [Time Taken to Resolve The Problem (C - A) Without SLA],
            MAX(dbo.GetTicketResolutionTime_HIREL(
                ho.HoldStart, ho.HoldEnd, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + ''''''
            )) AS [Total Hold Time With SLA],
            MAX(dbo.GetTicketResolutionTime_HIREL(
                a.CreationDate, a.ResolutionDt, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + ''''''
            )) AS [Time Taken to Resolve The Problem (C - A) With SLA],
            MAX([dbo].[ConvertMintoDayHourMinSec](
                CAST(dbo.GetTicketResolutionTime_HIREL_IN_Min(a.CreationDate, a.ResolutionDt, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + '''''') AS INT) -
                CAST(dbo.GetTicketResolutionTime_HIREL_IN_Min(ho.HoldStart, ho.HoldEnd, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + '''''') AS INT)
            )) AS [Time Taken to Resolve The Problem (C - A) With SLA - HoldTime],
            MAX(a.TechLoginName) AS [Engineer],
            MAX(c.ResolutionSLA) AS [Resolution SLA]
        FROM vSD_Tickets a WITH(NOLOCK)
        LEFT JOIN SD_CustomFieldTicketValues b  WITH(NOLOCK)
            ON a.TicketNumber = b.TicketNo AND a.OrgId = b.OrgId
        LEFT JOIN SD_vResolutionSLA c  WITH(NOLOCK)
            ON a.TicketNumber = c.TicketNumber AND c.OrgId = b.OrgId
        LEFT JOIN vSDOrgDeskDef dd  WITH(NOLOCK)
            ON a.ServiceDesk = dd.Deskref AND a.OrgId = dd.OrgFk
        LEFT JOIN SD_vGetTotalHoldDuration ho  WITH(NOLOCK)
            ON ho.TicketNo = a.TicketNumber AND ho.OrgId = a.OrgId
        WHERE 
            b.FieldName = ''''WIPStart''''
            AND a.ServiceDesk = '''''' + @ServiceDesk + ''''''
            AND a.OrgId = '''''' + @OrgID + ''''''
            AND a.'' + @ColumnName + '' LIKE ''''%'' + @SearchItem + ''%''''
        GROUP BY 
            a.TicketNumber,a.Summary;
        ''

        EXEC sp_executesql @query;
    END
END


'
GO

--
-- Create or alter procedure [dbo].[SD_FilterDataInc]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_FilterDataInc]')
GO
IF OBJECT_ID(N'dbo.SD_FilterDataInc', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_FilterDataInc  
(  
    @ColumnName VARCHAR(100) = NULL,  
    @SearchItem VARCHAR(100) = NULL,  
    @DeskRef VARCHAR(100) = NULL,  
    @OrgID NVARCHAR(100) = NULL,  
    @query NVARCHAR(MAX) = NULL,  
    @serialno NVARCHAR(50) = NULL,  
    @Status NVARCHAR(100) = NULL,  
    @Option VARCHAR(50)  
)  
AS  
BEGIN  
    DECLARE @baseQuery NVARCHAR(MAX) = ''SELECT distinct * FROM vSD_Tickets
        WHERE (DATEDIFF(day, ClosedDate, GETDATE()) <= 20 OR ClosedDate IS NULL)
        AND OrgID = @OrgID AND ServiceDesk = @DeskRef '';

    -- Determine the query based on @Option value
    IF (@Option = ''Inventory'')  
    BEGIN  
        SET @query = @baseQuery + '' AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''Inventoryex'')  
    BEGIN  
        SET @query = @baseQuery + '' AND Status = @Status AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''TechOverDue'')  
    BEGIN  
        SET @query = @baseQuery + '' AND DATEDIFF(MINUTE, DueDate, GETDATE()) > 0 AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''TechDueSoon'')  
    BEGIN  
        SET @query = @baseQuery + '' AND DATEDIFF(MINUTE, DueDate, GETDATE()) < 5 AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''NoTech'')  
    BEGIN  
        SET @query = @baseQuery + '' AND TechLoginName IS NULL AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END 

    IF (@query IS NOT NULL AND @query != '''')  
    BEGIN  
        EXEC sp_executesql @query, 
            N''@OrgID NVARCHAR(100), @DeskRef VARCHAR(100), @SearchItem VARCHAR(100), @Status NVARCHAR(100)'', 
            @OrgID = @OrgID, 
            @DeskRef = @DeskRef, 
            @SearchItem = @SearchItem, 
            @Status = @Status;
    END  
    ELSE  
    BEGIN  
        RAISERROR(''Invalid Search'', 16, 1);  
        RETURN;  
    END  
END;
'
GO

--
-- Create or alter function [dbo].[GetMinINWords]
--
GO
PRINT (N'Create or alter function [dbo].[GetMinINWords]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetMinINWords') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.GetMinINWords (
    @TicketResolutionInMin int
   
)
RETURNS NVARCHAR(100)
AS
BEGIN

 declare @ResolutionTime  nvarchar(100)
-- Calculate days, hours, and minutes
DECLARE @Days INT = @TicketResolutionInMin / (60 * 24)
DECLARE @Hours INT = (@TicketResolutionInMin % (60 * 24)) / 60
DECLARE @Minutes INT = @TicketResolutionInMin % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)
	return @ResolutionTime
END



'
GO

-- Table ServiceDesk30_3.dbo.VSA_MonitorSerialNumber does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.TechLeave does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SR_Cloud does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SelfService does not contain any data (it is empty)

-- 
-- Dumping data for table SD_User_SRApproval_SRDesk_New
--
PRINT (N'Dumping data for table SD_User_SRApproval_SRDesk_New')
SET IDENTITY_INSERT dbo.SD_User_SRApproval_SRDesk_New ON
GO
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284305, 637016966, 'IM8001', 'amit.singh', 'Shishir', 'jhv', CONVERT(bit, 'True'), 'ugtv', 'uyv', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 16:06:46.070', NULL, NULL)
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284306, 637016966, 'IM8001', 'amit.singh', 'Anuj', 'efww', CONVERT(bit, 'True'), 'x', 'e', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 18:48:30.717', NULL, NULL)
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284307, 637016966, 'IM8001', 'amit.singh', 'Anuj', 'efww', CONVERT(bit, 'True'), 'x', 'e', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 18:50:19.743', NULL, NULL)
GO
SET IDENTITY_INSERT dbo.SD_User_SRApproval_SRDesk_New OFF
GO

-- Table ServiceDesk30_3.dbo.SD_User_SRApproval_SRDesk does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_User_SRApproval does not contain any data (it is empty)

-- 
-- Dumping data for table SD_User_Master
--
PRINT (N'Dumping data for table SD_User_Master')
SET IDENTITY_INSERT dbo.SD_User_Master ON
GO
EXEC(N'INSERT dbo.SD_User_Master(SD_UID, UserID, EmpID, UserName, FirstName, LastName, EmailID, LoginName, Pass, UserScope, UserRole, LocCode, DepCode, Manager_UserID, Designation, ContactNo, UserRemarks, AccountCreatnDt, LastLoginDt, LastPassChngDt, LoginAttempts, Accontlock, InsertBy, InsertDt, UpdateBy, UpdateDt, Status, DomainType, Org_ID, FileName, FileType, FileData, ISMfa, UserType, SDRole, LoginStatus, LoginSessionID, RememberISMfa, RememberISMfaTime, Serialno, Theme, ThemeModify) VALUES (284306, 430313502384, ''9999'', ''Hitachi Admin'', ''Hitachi'', ''Admin'', ''pcvsupport@hitachi-systems.com'', ''hitachi_admin'', ''Hitachi@1234'', ''896976904'', ''Master'', ''Agartala'', ''Administration'', NULL, ''eng'', ''9871694195'', NULL, NULL, NULL, ''2024-11-24 17:07:09.807'', NULL, NULL, NULL, NULL, ''hitachi_admin'', ''2024-05-22 19:53:42.290'', NULL, ''Non-Domain'', ''680624893'', N''download.jpg'', NULL, 0x89504E470D0A1A0A0000000D4948445200000078000000780806000000396436D2000000017352474200AECE1CE90000000467414D410000B18F0BFC6105000000097048597300000EC300000EC301C76FA8640000581C49444154785EED9D757C54E7BA7039A5C583258104F71628506829D096E294E2B4B8148720210412DCDDDDDDDDDD259084B8BB7B32719F89ADEFD9A19CC3A11B5A7AE9ED77EF3D7FACDF448699BDDFF53EB6673214718C2DE07DB08F852789703F3D9F27495AEC2275B844816D623EDE09053C4CCAE1516C368E31F95825E41317750A420CC94CFE08CFE40BF84567E3169BC0B58C3CEC13B50C8A8AE7A3D0084AF8A750D421884FA263A8E8104D69DF043E4ECDA6484A2A152293F84E9EDB4B1ED3312A1D074D3676F1601327CF1BAF7E9CFFE125EF2DD8271CBC42F37117B1DEB1B978CBA23B4516F05CBE0F0A2BC025320FAF883C02A2E1A188760F774793D01D6D545182FD06E329327DE3D3700B4BC55936C3DE602DD5FDA328E31D4B71CF084A798751C659047BC5514A93C13F9252291593C4A7715AACA20B70D2C886D2680B37DA0B45706C9EEA71FE8797BCB760C7D87CDC34E0210BEB109DC9D3982C1E27E4621D9F436054018F44F863B99FAB44F9B3E45C5CC2B37148DC41727013325D2A1112B6152F4D32613E99B8C4EB700F82913E89E8790651CA238CD22E2114738D90DB082A8424535C934A514D12A565531C8992A84F91488ED3612F1BC95E043B44E5AA1CE37F78C57B0BBE9BA8E3494A9E444F2E4F62B2799890838DC8B593C87AA6C9C35CE40D8B4D64754236579372098C28C026360CBFB0FDE0FE159AA09AD887B8E11921911FADC52FA680E312C5D5BCBD296DE34D31DF188ABA8650C63E988A9E31948C4CA6485C124544B2455416F7D3C02F568763784EA160A7C81CD5E3FC0F2F796FC1B6F179B888147749D32E12A57E79102591E51796C50D89C8B60931948A0CA145449C0849C1362A137B4D8EA4D20CD2BCD710E75A067B8F9DD825C9E3891C6BD9048EF2EF3B074A043F75E5A3C0248A3A0550CAD61F3DA7503E098CA348B4488E4EA1ABC83E9E28CF159B8373742EB622D8F53F11FC4EDE3F454B1DF49706C73A2A9F1D21A96C8DCBC02A46A9B93A9CA5A9FA253517C3C874CA0768A81B188259503817E2D20A9B21CFE040C2EC4D0877ED8B57B01BAE71D288C9EF5C64136C0D4EA5A28B3FA59D62F9C4CE879236BE7CFCC29F22DE917C1C96825E442675A234AC8F4AC54752B4AB6C342B41790CD5E3FC0F85BC5D709C343485C802C6491A94146C2F3F7FA049C7352D979B1245FD5D826860EFC468FF58CE8667111499CF5E89E2AFC2D229E195C4479E813470F163BA5F084F24D2EC627208F6B526D96D00218E5B7197A87E1E9D2A1D77028FC3F2682DFFA6F4531F8ADBF853C6CA8522B69E7CE41C49998074CA4666601091C0D488789C95141D9F2B293AAF30A3A81EFF7F28E4ED82254A9DA59952043BC567611F9F819D087F2C1DACBBA447BB8874A6F88750F2B935659F3AD0D1C687A36119384569F925208E12D2467F641F86BE7530F5EC4299E61ECBDD882C89BE08027C4E1162BB150FFF186CA2F3E4F1D3447E16163E5ACA3DB7A1B87528151FBDA0888D33C59E8660E89EC83FA2E3A82819A37D44344F14B192317CA4537F24F55FF5F8FF43216F15EC5428F7258EAFA2581A2B8F886CBC8262708BD3B0272A83168F83F8C72D07CA3EB441FFC20DF6B9A4713838599A2657CAF96AD07B2AA3CF33574A3FB4C2D2295E1AB37C5C2362F076BE8FB797A34463BE648644BC527D39191B49773B4F3E791244D90712C9CF5D2875D71123A9C7454324AA7D34D40E0CE6A264027B290B0ED2C9DB47FEA706BF8BB70A76FE3545DB2BC4886869AC9C639364EE8DC4454993321A3D929A3BDB554395EBE114B9EC48B18BCF2873E43E73EC025826D15DEC991B1F392453F289D4D46BB618DF7263B947069ECA3C1BEC877BA01576D2855B4B447AC7A5632FF3F30E571D651FB9F2C9DD584A5AF9A277E339068F7C28E5E34709CF304AFA05B338281BD7E402AC259B7885FFA706BF8BB70A7651A44AC4DAC9E2DB492A749254EAAEF191E6E6A94477380E1239CED2D95ED7F8D24F44EA9DB5C6F0A233A58F3DA1DEA98B4C'

+ N'C21C176B1B268B1B9D8CACC192873F083141D931335340A8CA1745826A5FC53A8E01A8351403C639DA3786E3383D417524B6F344377BA11B997EB9279A6067157BFE0D2F69F68DB6E24E51BCCA6E6675BA8577A0215E62EA1FAF3703E7EECC82F47AE117FB219A9675AA2DDD79898235DD0EEFF9EE0FD5F5073D7498AEEBF4189F53730DE7419C36BCA95AE00AA5FB56153641A0EF139384B04DB4983A8BC18A27E5E6FC7415968150A6BE47BF03F42B0527B0B050B769A7C890A497DF1F90405E5E22E51FC4CEADDCFD1F17C94184731115DCE3F8AE29E7194B00FA1FD33378EDF9A4FC8AD2F48BAD591AC2B8D49BEF229E9A79A917EA9157737FE4C976603A9663C1A236353AAB531A3C6592B8ADDD450F7D2638E9C184FE2C1EFC8DFDE9ED8FDDF92BCB71B059B1B60B6451AB4CD8728B55566E2B597A870EC1EFAD7FD287EC38EF1CEC1527BF37093B9F845949CC39FE8A415996A8BFFBE8215DEDC24BF875A7AFD10FCBE60A9C376F1B26889C80C0C8F9295775148DA4E90A80ECD67BC8F8E4F94B7BCDAC6A267EF4D199FE714F709C3E04138CBCF2E27F2724DD2AE7C49F6C94EE41F6B04C79A90BCBB058E2B5BD3ADE9008AD537A182E1400CB63EA7D6C3208A5FBD4FAF13B788D9DC0EB67445BBED6BD2B7B7A260592FAC5758D26AF1262AED784685D59729B64BA2F8AA271FDD73A1DB03A7C2F76829826D2272646C523FAF77A12CF4FF19C1AF52F49BD88617609D9A844392061F117C2F0AFA86C450D231987FB8C451C62994E2CF9DF8D8DE8D9A370231D97B08DB0B9D48BBDC84DCBD55C838DD80B4735FA0DDFC1D4E73BEA371B51F285AB107D5FB6EA2CC191FAA9F7644FFEC53B6EF5F40FE86AF885DD39ECCCD2D4858F90DC90B5A6372701346736554DAF490122B0F52E39213152F0552EF861347A427F00ECA94CD97CB53254DAB9E97FA02BF0BB585FBF028CFF35B94B74EA9A1CCFE6AD82780DD6BBCB7604799839DA3650C09772626F01C31E18E5C8C8F63A0BF863AF742297B3B9062CF43287FCD89D2D79FA3F7E011C30FADC0636F5F32CE7C43D2DE6F49DCD14E6A6C5DB2F70DE492C5285A57AD8D7E8BF1E89DF043EFF8334A9D7C4197239BF058F70B992BBB12B5AE0DDA155DC958F4235796995371DD71AAAC7882C1E2E3E8EF9791E97A2086979EB1DC2B160F49CD2F34BA77469D9AC477A12EE443F35BB90A6A7215D4E42A38885445F22BDE5BB05B4C365E3273FA856D26D6A706D9EE4D89F35C889DDF35CC9C5D653E8DA0F8FD408A3FB2A6C4555B2A5CF4A4C23957BEDF7C96EB1B279274E01B120F372475773B32B7B623715757AC2C3BD1FD8BF6545A76814FAE7852FC880D258F9E66D6BAF5642EE949F4E22EE42DEB866EEE10122CFAD069DD26F416DFA7DABCD394597551369337C52F3E66B095074F64516C927478CA713AA99ED74B696AA9F86DA8352F1F1C29836A28C2D45093ABE0F8C6FDDE5BB07D542E2ED251FB85DA11ED36922CBBE2E43FA94AEAF3D604BC98C1061B77EA3E8EE71F577DD03FEF8CF199104A9DB5A1C8F9137CB1F53CC7979BA1DDD889BCDDDF91B9FA0B1277B62675CD773C99DC8936234CF8C7E5404AEFBB47B1FD77A8B6E928CE0B06916DD18F8C25DF933D7D28A90B3B70CE620EC5979FA6E2BCB3949C7B14BDC34FF9E4EA339A5EB66247503AF733F3708F4DFDB58FF8EDB9FDAF16FC46A4BFB7609B48795269B87C9292098DBC80C6FB0B32EF9721EFD41770AA05BADB5D39FF6033CD4F5951E4A433A52F596174D083D2576E52E4DA516ACF776597D91CB2363443BBA78F44722F22CD3E9586AA3387660CA1DEBE0754DC790DC36D8FF968F319E6CF9F4382E92812E7B5216B4A1F2225A27346FFC2778BD65076FE79CA591EA4FCD21394B9FC1C83938F19FE3C8CFDA9F93C8D57DE08A01CF36FCFEDF5F4FB47504FA91F9A9729F94DDE14F60A35B90A6FDEEFBD053B25C5E098988893FC63F7D83402FC8E116FF53519D229A75DFC86DC9355C938DE88EB57A7F0F3E973D4DBF388F2A72E6178C81AFD7D1E143B7285BAAB8F3167C6126CD68E94DADA05DDC2AEC46F684FDCEA41CC5DBB928A5BEF62BCE1311F6FBC46BD7927B93CCD94B419DD48366B4FB289640D93EE9C9C3C9D6A73AF6064BE0FE3499B2977EC81D46E6B9A5E71C32C34994B89D9FF279BAC3779876085DF0A768ECBC251E64CBB18E5A0F2F1088D23C4E334E18FDB1177BE11A9A77A91BEA72505FB24651F99CC9C9DABF97CFB29AAECB84DF1BD0F2871E42EA5775FC378C1654C4C176067D697BC25ED085FD18184D53FF07CCE58EAAD7A4AE5353728B3EE26C517DE67F4E4CD44CDE843FCD436A40E194DEAA42E048E1A4557B31318581CA382E95AF4375EA1F4315B8C64230DF68E626F7246E165469728396EB955AE6E2928D7D5DFF722BE22C0F13DB117096AA8DD57412D3D2B2881A486B382FCBBDFE37704FF16A758898C189981A593B68D969A1C93884B8C27FE61074938DF13DDFEE6684E7F45D29636E46EEE8EEFF6019C5CBB808E0BF75172F34DCAADBF4E9D2D0F29B5F20AFA7377D366E2186E9A0F236C4E67528E36970EBB2F9D975EC470F123CAAD3A48E959C7A96B7E914323A4A31EDF8DB43123C81ED787D8E183593D6A1DE5E69C446FE62E89E4E35410C125D65E60807F0C2BA3E37194E3738B545E692AE0794201CFE2F3712F7C3BF09BD1F36E1C7F7D03813AB2266FE0281BE9F551E575D42428A8DD57C14544FE57786FC10ED172F0121536513982223B0D774D320EF11A3C3D2F937DAA37399B1B10B5'
+ N'AF0D515BBB91B5A01B49163D085C3689F126CB319C739B8F57DDA2E6D67394D97E9C7F2CDBCF97BD6761B3AE2B050E2D88BA5F95E99BE7F091A527D5576CA2F694E5D2319FA2ED0FDB0815C9299387A3193D809C5E43783ED092C616BBF86CEC292A8FDC4FCDC3CF29BA741FFD4313B0F08BE3996C44E52F215D4584AD2C9622D955E663458C9AC8B7F1BE829D94F42ACFA7869A5C05B5FB2AA8497B1FDE3F8295939245B28BD5499A4EC72E3A0BBBC83C9C03753CCFCAC533D09A9CAD6360ED97A4ACEF40CAC221C42DEC418E6963C2670E63F8E899545874980A8BCF6330E72EE5673A326AF5725C6FB720EE4663321C2BF2F86067EACC3F86E1DC33D434DD4EC5E9C729697299ADBD4D881E3E0CCD801164FD3894C49FC63063C22AAA8E3B83DEC48352938FF3E98E2BF4088E63845F3C37645452AEC2B9C9892AE9D9464979720E0E720EAA9DEC5BF83F2558F9E804E5DD1ECE9A3C391145722ECF23A5E18A00EB847CAEA5A7E0E1FF8284634B489927B3EBA27624CFE84892E918D2CD44F6E81E6CE93786E64356A33F7E3715E6DFA6E7EAD5785CEB82F6560BC21E9425E54C53E6EE1A458949226EF269AA8F3D4389993B69D7672E76BD2790DC7B3C097D46922E3CE86749D5C907296121CDD690B50CB913C0D7EE21F40E4CE458740A4F13254DCB89DA2B1740E45669BCFE72C1825A63A4A0265741EDBE0A6AD2DE87F716FC42A9BF8293D432E59D1ECA02584B647848E3E5EAA2C1D5CE1F778F389CFC8389BAB21BDDACBEA44FED4CFA1449DDC38790326A3CB1BF8CE77ED721FC3CD08C52631652419AA8ED0B269079BE25B177EBA13BD7828013DF326CE64C2A4D3880D1D873E8FFB20CC3A15B58D7C582809E2349EA3B8E94CE9388EA309689A324CAC7AFA0D9E403F4734EC6D8C18BDE3EB16C0D8FE56E624EE1022A2F232A1FDC6257F83AB748567EF607F933820BFF784F8537C5BE42EDBE0A6AD2DE87F7AFC1F13A59A05CE9A4E5C425725F48343F4FD1F2384E83DDB45344575F8D63EFCD3C5BBD8FA0C77604DFBE8166E65062877D41C2940EC48D1948C2D04944F49B885FAB054CFA7A29A5879BD1BCEF781C36CA26B8D48A9853EDC93ED48CF8AD6DE938651595C69EA446FFBD7C3CE2105DBFB7E476B7BE64779F4062EB3924B51D8243EF2DD4ED36997EDB6DF8CC3D9E72762E0C7608657548383712B4850BEE109153B8195FFC37095693F8675093F63E14513FE8F747F9C015E74D0FD0949F495C590B1E5730E1AA8109F6837713BEF102DAB9AB891E3988D8813F932D2936BBC30CF2BB8C9048346753BD25B4ADD997761DA6907AB00BE9FBBE24EA681BD8D2149BB9DDF972DC148C87EEC468C02ACAF75CC6B0765B48F9662409DF8E26B3E354622A0D66DC98C574738BE21FB79C29F3C089967E412C916E7A534A061EB21195141D18928F558C3487CA1FD4C988A7601F9F27B52E5750FE4EF9C389795FD4E428B8CA31A9E126F5F98FF0C1047B4B24FB876671D9EC14D76BCCC0BAE1726E56B5E07205530EB6B0E4CED855048FB024ADDF04327A8C24B5F37032BFEB4F7EEB71847499C7DDE6B3E951662813077C45F09106A46E6845E6869E84AFEBC956D3D954FB7E15063FADA162B72DD4FFD292F36D2793F1ED64429B8CC4AACD342C8FDEA1C1532FFE71DB93720FDCF9D2D98FA57EB1AC8F57FE34E6E56776F949D67190452B9C31A5117A396B2A92F3E5E7324EC9CFD416FFBF0335B90A6A7215D464AAF1C1042BEF86B08B4CC5E79906E7018771283B094FFD393CAAB5986B551771ACFA4C0E379DCCA3F65389EC3A91D8CE6388E93087B8C66604353525A3E152CED6198659837E9C37ED48DEC656842E6F45EAB28E44CEEAC28C814BA8D67E3E7A1D7750B3C7527E6C3A09FF9626847E368E83F38E32D4DA13BDBB2E7CF2388C52D724829FFB32DF2386156109580564723F2D178F4281924265811C8557578B5E5ED0C89754FC37A65619E1D45093A6E09EF8C7F86082AD5372F0CED4492464F0C22582E7D2D95E28318467C6663C369CC9C50AB3D8653083E5F5A770A4A9091E2D2693FEBD19D92D8691D1622A6903BB91626B4CD4ADEFB834A70F3E0BBA92BEB516B973BF21DFD48490550DE8DFCE9C8A1D5650ADC35C6A7FB9984D8D7F21AEF54216DD70A1D67D3B3EBEEB41B17B2194BAE2C217F73D30738B65A14F345672A60F3373704D1289D1CAFBBAA59CC4E788E85C895AE5AF139577AEFCCDB5534A841A6F0A7B8547D21FE38309B68FCEE06668388EC99978A7E6CA416763BBEB3E67AA8DE492DE108E1A4E6567A3E51C335ACC4689EE09D587B0A7FE00C2BFB1405B79036112D169514D490DAC81C6BD1AD6BB9A90386B00056623C99CD29702D3565C19664EDB6F4651ABD1140C5A2CA743E3F1D87559C390E70114BFA2BCA2E4C93F4EBB62F0C0973A77EC19E51ECB1CC750ECAD22B14BD3E191F2B2C172D664C8E265C86DA6908D739CC88E9559FE030A7695287B1FD4E42AA8C9555093A9C60713EC2151E02D27E691A2E344402CFBA363799490CEADED4FD8F7E332D6369CCE093D5376959CC8D22A5358D1682E33AB2F628144F7B9CF66E0FCD9047C36342327A21819019589756848DCE62F4999FE1371263D65BC1A4898C9208E761B4AC3CFA651B6D91C2AD7336561070BBA3DF2A3CC155B2A9CF7A4C46937F46E3B51F3913DBD5D2399FAC0831767DD700E4BC443990064711CE393247AA59424244924A78B902CD9903AB9FD3B05E7A8A22657C133F98F5144EDE0FE0C5E22D83FB280C301C9347F6245A59B7769F'
+ N'FD0039327816C3BE3C2D1D12739DA6C39BB0D4CD9546122EBAA4F6791C16CC657306348B52EACA86EC2B1011389F33320F3794D327D8D897F5195F8F55F91613204CDF881448E1A4EECD0A1CC6C3A11A3C633295F6F32DFB61EC9378F7D297FC1968A173C282394BC644DEDA7CE7CFBC20FB32BCED8AE7C80AB5F3CFE513938CAE2384765E09BF0089F042B39F644EC53E2A5AE690BFF1AC2B970BE1764D32AE7F532854A34C90670916EDB2551223D5169CA24B54B63F69B54FB2B6A7553414D9682AB44AB1A6A51F90A35A16FF2C1043BCA09BB2B63871CD474B750CA9FBB4DD18377D0DB7B97AAFB6FF0CDC1070C5D719D99FDF7B0B2EE3CD6963563BA8C520B6A2DC1C4682C83CB8F634C03131E1D6F4CB6C7D784DB5627D3BA0CBA9BB5C95CFD03DAC1A388EF3399C47E0388ED349E9F4472C9EA43F9BCDD649A3EF1A2DC996794BEE842D1330E94B96C47AD87AE347BEAC6B4A3CF709A701E77A758826413BACBF1F94486119B3285A8A4E5B8C5C5629D192D3F97264CF9A80A0511ED2275DA456AB4B3A07CEDA69C9F74E2EE894AE323BF17B9CEAF75B56FA22657414D94829B3CB61A6AF77D1F3E98609B4C64C6CC223C2657EA700E26B65E543B768F125B6EF3D1BA5B14DD7483926B2E5279D6519A8CD9C50F3DD631A9EA582C8D2D312D3D0F53E9B87F2E3D19936FFBF0EC5A73B4768670A12D69E75B9071D298C8699D48F9E12734DD4CC9EF389C6B5DC7D1C6680CF53B59D2E89E3B654F3EA5F439078A9EB2A5FC453BEADE77A389B53F23979FC177C0413C2F38E398A5C52B4E434CDC22D2338D484A1E8C4F6C2C2F32D30A3F3CD55D64BA2A91FC2B4A1FE1122FE9BB50B64810DC4592BB9CAFA7A0DCAAC955508B520535090ACAC65143EDBEEFC307136C2B0F6613A1C5372489C0E42CAC7405ACF04EA4F5713BF4B63DA6ECB25B18CFBC48F5C927309E78849A2377D1FA3B73BA7E369D4195D630B6E60C7E2C3794AE468BE8D2AF367627BF22E5F667245FF89AFCEB9D89B8F605A9B3BB90D4650CB1D28187B7B7E0767D739A7630A3C17517CA1C7B4CA933B6143D6E85C1457BEADF76A7E9F320A64CD983A6FB764256DEC43A2319DF680FB2625A939F54846C4D5782236370C8D0E29CA4A444B955D2B04467A14CC143A2C8295127E797855D52260E49E9F27D2A4E49A992AE3355E52AA8C97D27F2FC7F051F4CB08BD45FF7883C3C13B37991988C7DBA74A7A9055CF14865D6256F1AAE3ACB47B376F3C9EC8394373D84FEE8BD9419B1915A3D17F3F557EB695D6F345FD5E848DF6F4F537FDE6DBEDB7A8223375BA2B95F15DDD9D6141CF88C8C436D081DD385A8AF171153C74266E80998B49F49ED4B4E9439FA885227ADF8F8C8432A9FB3A3C15537EA9E7766F390EDA4755C4FF29853D268C5E09FE4445E6813082D8A36AC25A12141386688B464E5E311B585972695A6517989D143BEF62EAC852FAF7439886CE5D651EAB053B2D462594035B94A0A578B260555B98247B2FC1B15DC65B4FBAFF0C104FB48EA7289D262A3BCC294A0C329261D1FE950DD13E278A289628FB73F038E5FA1FA8CCD9419BD018309FBD01B7D94D23DE753A5FD22EA7FB590BA4D7AD2A8D51A2A1EF5A1C22E376AADBFCB923D63893BF629EC6A49E2DEC6A46CFA91B89F47E2F5E920A23F3361439B39D43CEF84DE9147943CFE884F0EDCC15822B9C105572AAEB8C283DEBB48FE6E29B95D0F127C3F00EF34477202BE941C5B86CCC0DA0405394804474B448A38E95AED252D2AEFB050FE5CD65DBA6B4FE9B6FDE222098C8EC42F3A069F180DDE71C978C984A06CE6B709566B7814D4A42BA8DD5741EDBEEFC307136C27F3E4A3E8B4C24B803E51E01B2AE92C260CA7700722FDADF0F171C22E3092BDCF4369B7EC2CC57B2EA2FA0F7BA9D17D19953BCCC5E8CB3DE87F3E8A9275C7526BE3112AEEBDCE3FD63CA3C2AC874C5DB196847DED49D8DD8A82E59D48DAD8066F937EB8EB4D604397D5D438A7087E4CC9630FF9789F948293363490CEBDB8C93E427B1E22AECD7CF25AEE266AB713F6C9B664F8B720DF558FD48072F805DFC03E33B0F06D304EC95A1C53B5225B4626D99C2E7111B8C4BA1312758DF8F0FDC4841F253CF22C21B157098ABF8B5F82C7FF5CC16FBE2AF2FA08A086BB8C16AE12B92F3234B8A4E4131C1D414CC458923DF4C8BB5B93821B5F9173EF1B626D7EC6E9DE128EEE39409709DBA9D4DE9CB2DFCFC6F0BB4554693C8BDA0D64FC19B395EA3B6DD09F77994AABAE52D27C1BDDA66F2376517BE236F541BBB03F398B87E0D7A5371B3BAEA0FA111F4A1EBE47A5BDD7A4D17A469DA30EE8EFB9CF96FEEB086DB589B43ACB88EEB8199FF9E709894E25D26534B92EDF9069AF2FC7BC9800598820D9A0363922373D93C0C847C478CAA672184E924B4BD25D1A92E3D4841C9716685D5B92EBD116FCBB92173482F4F01D6834AE04A4664A4992CC95948D47A25636401EFED29CF94A3DF74D2AC04B462B0FF9DA2345165E50FE4A53C14B52BD829A1C054F49B36A7889FC3FC287132C23926B4236B6D26029B3A68FA4E8D090D3C4F90C26FD595DB22E1BA23BD514DDE1EEE46CFF91DC8D5DD1AC1ECFB969A68CE86141932F676154D78C8AC6E3A8F99D0515365DA0E4B20B94597495E21647D09BB88FEFC6CDE3DA82EEA4CDE84EE682C168C67667F188699439E04489FD7731DC71850A12C9654E88E49597B8D2670BFE4D571251733E49ED3613260D9E977B38C1616BC8B5A949BA731D9CA2ACA4AC1448AD4D2628329E10BF3B44394E27C5A62BDA67'
+ N'DF91F5AC3559D62DD0D93547E720821DBE44E7DC9202CFEFC80BE84246886C82B05544C75D2638D94D163F45A23F1FC7B46C1C52652DE4D6459A38977469E05245BE225716FE75BC947AAB2257C1F32DA8C954E3C30916B92ED2852A7F7CAD7CBCA08BD42FEFB00802039E12ED3A97D45B2DC93C529DD4DD0D49DED9848C4D4DC89BDB892CCB9E444C18C8FD01E399DFCE84EF1B8CA46495B194F96909D5CC2F6030F32C7A93F6516DE8798C069FA3F94F969C1CFC3309B37A923D691067074FE0A303D694DD7F1FE36DD7A9B6E7111F9DBA4FEFA9C7F06ABF156F99B9BD6B5A92D166230903F6E32C23954B9C1DBA679F48740E96B93781C7A9B978C604926C7F88948713E458BF4077AB06DC6D4C8EF259210FBE4667F52539CF5B906DDD0CAD6D13729D9A49243723CBBB39D9DE1DC90E1E434ADC6E42E37DF18CCBC34D36B9D2897B08BEF2B5BFF428BEB2365E8A1C45922CBE82C7AFA88D480A1ECAECAC82B229FE081F4CB0722548192F943700D82AEF494E8995EFD30BFFAED8293E9170EF9B845E1B4AC291E6E46E6A836E6187C23F264B19D98694517D891A3B9888817D08EAD983256D7B32F0AB9F583DA82FC3662FA6FC9C33941DB688F27D8E633870239FFEB899E9BDC610FEF3CFDC1AB9898F76DFA7ECCEDB186EB88AD1C63B14DF758E397D3713DE64057E5567E259C792E42FD790DA79071E879E63139B22E9B92731BE27704BCEC6292D191FB743245D9588BDF439B9171B5170F12BF2AE7C4BD6AD1664DD95CC73BF05398F9AA17BDC88EC270DD03DAF87CEB6213A7BE5B3499A892D3927919C107B9688C46091972EA95A1A3119AD7CA443F749CE91349D838FA46BEF5FE52AB80B6ECAED6BA3CDEBA8C9555093A9C60713EC222384722D5779CBA8839C9822D8312585E7CAA7BAC76AF1CE94DD989E4C40C425626FCE277EF568E2E7F726747677743306913F7000D97D86923D751AB9BBBF25FDEC97649F1D4CD8D649EC9A67C61743E75172E01CF4FA4DA3F8379B28F1D53AFAB636C1D27419C5763EA0ECD65B186EBC55F8297BB5171EE660FB95F8D4B524D4C89C80DAB3086DBA84F8F65B085C741DE7A828347E7E84C479E122736D90D773C2AE744173D498CCD3B5C83FD78AFCB33FA2BDF00319373F17C9F5D1DD10F177847B9F896C91FBA80EBA279F926BD54276F457E0281BD7AB3359611624C79D974E3B1AF7B8045CA56173C990593A5BD625AB40EAB1223BB770F1DD255DBBA60A4A5D4E96FAAC825AFD55504BC76A7C30C1CA1F3D394A73E1223BD6459A2D6769321C9272F08BCF24F47110CE2B1EE23EF711F68BEEF06CF5711C37EDC377DE4622C799103FB817B13FF724AACF2F687A9911397E102ECA35E8E56DC959F63DF14BBB9262328BF9A3A7D1B2C724AAB55E4E89F66B31AC3F8A264316506DC723F4365FC760F35D8A6EBB45F7B17BB8D96631B675A7135D690621D52C706E3297C8CEDB08FAE5083EBEFE121DB91239A9D8C5C410767E36593BEA9371B8B594912FC83A2E4DD5E916E49E6F8DF65263E91FEAA2BBDA80FC5B0DC9BB2D526FD727F77E7DF21ED726E76975B44F25925F485A77FF169DDF4F64794E24E1E14C629E2E25D2613FE1BE77080E75C62FC21F7F896CDFE44CBC52B4B8A7E6E19226EB2B788874353C25FAD55093A9461117459E0A2F5F59516AA972DD55E9909534FCF2560D67A9BBCE893ADCA48B749354AD5C2850AED5FA046510B1F3091E752710546C1C4E652DB95D6D0E0F9ACEE36A730B0E7F6DCEFE5653B9F9FD34BCDA9912FAD578348D96E2D06C3A4F3B762260742FD2A70E81C9ED081F3392873F8DC0ACCD34AAB79B8141DDC118F6DF41F9ADB7A92833B3FEB29B7CB4E72C167D37F1ACE9421CAB9B1352D902FF2A16B8359A4758FB4D0474DD82F76D579CB3640195F774DF3841F2AE1EE4ED9006EA6007B20EB421EB5063B4C71B937B4A1AABD39296CF3692B4FD99A4EC46E45D6B48EE75112DB2F3EFD525F74925D29E1893F4AC165A97C692B25B49AAFF86F4A3F5C8BAD094EC1B6DC8BCDD818CBBDD497FF033516EF389F0DC48A8FF3982421D08888AC62F5649E392E524257B4AD4BA0BCA24E2AC7CB04C625E61C4FBA6E824FAB3F091F2E72BA95E49F3DED2857BCBFD5EF232F57B4B6678F9F397147155E4A9E0225DB1C2CBB9EEA55CE58ACBABAFDFE4F5FBBDFABEF031E400FD4332F05C7B1BCF1E9BB0AA3A954765266255C1945BD52DB8683C87FDFA966CAB62CE9A5A262CAC399C235F4CC7597EFEACC274F67F3E9A535D87E2DE7D208123C79135715CE1FBA1F7B699CCC02A13A9D67F391F6DB88CD1AA47E8CFBFCEC7ABF670A8C35A5CEA2CC4BD92055EC6B371AF3A0BDF4F1712F2CD3A02DBAEC363D703225265016D65BC593A89FCED5D48DB251963F7D764EF6D43F68156641F92AF8F7E25A2A56B3ED98C9C33D2709D152E489A963A9D734536C1E546722B8DE2ADDE445EA94CE2957AE45D1844F631991C4E7E43F29916C49FFB94C44BF5447443B8D7949CBB86643F3626CDAE36499E8D880F6A415C782B62627612157B92B0B84704C6FB89CC149125C2354ADDCEC7476429A9D95D19B7943A2E69FDDF052BDF2BBCFAFE25455E97F23AAF86F63705BF8D37EFA37CAD08B69703B2CACAC7362B8FC8C074420E3AE030E312875ACFE77A79534EEA4DE780E16CF63658CC8646162CAE399647C622A4E62A3C2AADE046C579ECAA34938586266C6D63C18D2EC349E9338C847E53B9DB7E26DF0D9F49B16567315C728B324BAFF0E590D53C6ABA020F11EB28629DABCDC'
+ N'6A59A255EF51610FCF51A42DA6DC2CDF22409EE69DC5E7F8020F321146CEB48C206A9B53B5A93BDF31BB2F688E47DBF4A3EDC52447F21A23F4777A28944B4DC9E154474FAB5263202D624EF7C5D82468CC4A1ED549CFBF4C3776437F22CA42E6FE908977A4B37DE8BDCAB6D493CF939DA3B0668EF5526E74155721ED792145F971C2B49F91E1F4B475E8EE4C08668C225D2631612A939885F920D7EA99E78A747E19A9E807D560C76396192E2F37E8DE2D7795DF8EF087E1BAF4B7D17CA7D95CDE12D23834F8C4E3AEB0C9EA565E195964B984F361B476D65638BF96CA9398B6D1566B2B1A2394B8DA761596D126B0CA670AAF65CAE4894DF2D3F8BEB35D7B2BBDA2A4E979ACACC5A03D8D4AC3FCF3E1B4DD0E7B3593662099F2C3943B92557F878C94966B65F8DB3CCBD8EC69658D79C8D6D8DD938549B856B9DB9F87CB182A0F69B71E8BF05F7CD0FB839610131D306A05BDB9A8C8D2272735BB2B6B6257BBB74CF223A7B8F0817D1DA8312C98745F25119918E4BAD9588D69DFE429AC0A652A3259A254253763626D17238D103A712D26D20516366E16F6A82FBD211781F1949C4A32924B959C8C8389F38B71924B98F26C3B3175AAF6FC9F56E419E572374BE55C8082A4B5A44495263CB93165F93146D4B527493894FBB42584228FEF1A9855DB9B72258115A98965F09FE77B98582D566AF97FC56D82BC16A03F9ABFBBDFEBD22D83E311767191102A58EBC90E642B90CE871D61B8B12BD59A03706F36A53185B6F3A43AB4F6174A5494CAA644AEFEA131951F91776D532E58174C1D7CB4CE2A4C134B6198F6551D519CC379ACB840AE35858653CBF0C5DCAC7CBCE147E726D69CBFD1C68B30E07A3993CAD69C1A35A92E645B09D44B1638D3938355E848744B04DB70DDC1CB913AB517349960E5EB3B009D9EBDAA25DD381CC0DEDC9DCF4FDAFA2656CDAF92DDA3DADD0ED6F89EEC057E41C168EB524E7F85712D192BA4F3797DADC85EC3B22FF7E55324FB6277E936CA6CBC78971B622313654C6A634FC249379C99A7825E4E2272365605C2CA1315E4444D9101DF99084E80B24C4EC2029D692B4B8D16835C3C98FFF05E256529066498E6E0A69BA0524A45D4493E8816F5A12DE12308522DF2958C9EB2A28C377E120FE9A3C45B0F2FDAB19EE755E897DC5ABFB2B2F5A7BC998E41B267538494B90A46ADF67B12CFECA9C65152663567122A3AB4FA5BFC8EC516D2ADDAB98F2BDDE681AD59F48C745A7E973F42183E71D66DEB06DACFFCC929565E7B1E393252C36B06098C158AA0C584EA985A72931FF148DC7EFE64CD365BCA83C8D07B566F04022D84AE4DA579BCB0B89E2270DE660DD762D8FBB6FE7EAB0DDD8FC329F547389B685CDC858D601ED52197356772273AD345B8AE8CDED0A4567ED6883769744B2227ADFD712D1727BF86BD24E7F89461A2FDD1963A9D1D548B93F9690803BF8C5059014A523362E9FA038997FA3B20BFF97567F6944ED5232704CCD92EE394BBA68F9795A8EC85266E454BC13E309D044121A1744943C466C9C3FA949E7494B3F499A761F49391BD0E4AD1496E39BED8377461CDECA63BC8A64B514AD367B29BC2EEE7D04BFFAFED5FD3DA561F39027B6CDCC95314A5274483A89E9053C7914C9A681879922513BE1A3C14CFC640C03CB4DA56BA569B469308B4F8F3A6218AAA5B2551495CE3B52E2FC632A1CBA43F945C7E934702593BE9FC24F0683A93C741F15679DA482F931FA0CDECDF1DA16D8194DE361B5E9DC17A956552445579F87B5D4E13B752D78F0DD4A6EF4D8C1FDA9677838C882B8A9FD885FF50D290B3AA35DDC8DCC955D5E4A5EF7ABE44D22798B74C2DB5A8A68A9C9BB94464CEAF3FEAFD1EDF98AFC03CD49BAF593949D93042587C9DAA56313A594A374ACB33270C891C92247D63343D642D62458B25A8088F61394FF6FD9439A50B7C22C9729E4E2225DB0B3AC9763AA0E873449C7F1B904CA4817245D74808C5681A9F104A587E1A3F5C03B2B586AB36C8C7F0AFE6D14177925E68FF27A1A7FFDE7AFC47AC99328BCBAAF97B4FE5ECAAE951D6A2791EC1C97266D7E08A1494F09F63983D5992D9C9C35853D8386B0B5E308D6B59CC0946F07D0DD722A5FD93EE593A79194BE1B82FEA9EB9490EEB7E89A2B145B718162738E527CC47AEA4E3E4C65B3B39435DDCDD0EEABB95B7B110F0C6672B3CA2C2ED59DC13DC3E9D8555FC4C57AF3D8D77221577A6DE64EFFFDDC1DB29DFBFD261065D28F02F3CEE4CDEA41D6BC1E642EEC4AE6E22E642E93685ED95164B727674D17F2367E4BDA964624EC684BE6BE9FC897884EDD5697981B53D104BEC0232E035739DF0891181DA35C45FAD72CFA3A6F0A78C5AB171DDEC4434A9AA7943805AF94DC42BC657EF693DFA9E19B5A2019817FF24104BF92AB26D855042BAFB57A24E51096E24942FC1612FC7B116FF739190FA5B1B9DA89EC539D483BF82DB1DBBF21784D3BA2A7F6217C4A7FAEAD58CB4049D31D965FE77BF35D34323F4AAD6907A8396A3BF57BAFA346FBC5341AB28372B32E51DE6C3F233AADE05ED5B93C35B2E0762D115C733AF7A41E3FAA369F23D567B2E7AB055C10C1D77AEFE4FED09D3CEC6F4AF0E87EE4987525CFB21719B3BA9331B72BE9F3BB90B1A833E94B657E5DD61EED4A89E4D532DB6E6C45CE66A9C9EBBF2371576762AE9911E3FD8CA8F814296B32F7CBE8E5972663A1D45935B90A6A7215D4E42AA8C97D97603F11EC27625FF1D61AFC7B7828483A79F5B2D73F5FFE4A951351042B97E2E43EAEE9193867A4E219974264EC69B222BA8A'
+ N'F9B268ADF588B66D42F25DA96D67BF266F6F0B72D7CBE2ADE846D4F216C42C6C4FE0B0113CAC6DCA956A4BD9577B16AB44D658A9D303EB4CE707A34954A9320AFDC16B296A799E4AA60730F97E858C58B3792433F5F92A93B95A6326D725359FAF62C9F62AD3D8DF7A19677A6DE15CD78DDC1FBC8B470367E331E867B226F720D7BC2FE9337A9066F123E9B37E205D112D693B63916CC0A5EDC85CD549C4FE08CB5B9227C7177DC11C7FBF67F827EAF097F355E653F754ADD445D9CC85C2FE753DF875D4E42AA8C92DE435B13E69320FFF8A9FFC1B35FC45B0BF38788508FEED05EE77F16F75FA35A9FF2658507E5FF86FA4C678C54BB3119F4754E20334B13D49F2AD2883BE1EBA877A645FAC47F6F13624EF6D4BECB6AEC46D1B44DAAA09A48E1D85DD37C3D95F671CC7A596DE2B67C9866AA658D699C6F8AA5318547E3CAD8C27D2B4EF06CA5B5CA0FEC4FDCCFC66398FAACFE54ECD199CAF3A999B75E7C8BF35679BD154D6579BC6D1B66B38D56333673AACE4F6CFDB45F0521CFA0E26755C5F74A67DC930ED45DAF45E22BA67613467CE91889E277579610772D7F4A660E5CF68677F896E5B6F1975AEE3912A693955222C4152637CA6D4C92C026481BDA4F75093ABA026F79DFC1AB18A545FE95D5EE1A7640B1514A901AFF1DE29FA15AFA76385B7A5681F111C240B10243B3C383596B0D49BD221EE2729781579F69DC97E249172B73B0907BBE169D987274347B0A85E1F7AD5E84AAF6A3FB340227845DDD94CAE37939F8BF5A1BFFE70EA97EC8941B3F1541CB5818FCD76507BC43E3EEDB69429F5A771A1F274CE5437E572CD995CAE3B978D552631BF8A092B255D1F6FBD9A33DD3673BEE34AAEF4D8C483FE6BB1ED3506CD889FC99C20113C49244F15CC047349D9163DC994DA9C36E747F296F4256FFE8F442EE941F4EDAD44C46BF0CA9079549A1C1F89E2A0A46C42248203E59CBDE3640D7E4DC96FA22AF11DBC8AD87F8A95664D41D948EAFC1705BF12F9BA4C6F79A057927F23589A04BFC4645C34893226E516BE2EEA2E39CDC9D61FFB136E1C9E7093D5DF1E6256F5A54C2A61C69492E64C97081D21A3CEB04A660CD61F4B8BD23F51D568183FB49ACD779547514D7F10FA7D1763307E1BD5FAACA16A5333AAD61CCA58A3519CA861CE3E49E317ABCEE6687573E61A8DC5ACE62416D530E340E3855CE8B499AB9DD772B6A334643F6DC0A6D72462860C206D741FD226F4236DA23049BE9EDA9B34B39EA499F79094FDB3D4E81E423BC28FCDC133D44BC44A0A94CC14A05C7090C6CA53D6C0335D49A7522FA534A9C9555093A8E02372D47853AC7FE64BD4E5164816E1DF28A21CDCFBA076D08552DFF859E12610C94A93E598902D272D6D7E840EBBCBBE5C9F728ACBED5770D6D8922D15A6B0B4EC5856184C62B9F10CE657B66472A5114C3234654889890C915A3A7BD87656AFBBCAE99B5E6C5C75837973AFD0BAFF3A0C9A9B52B5D6042A551C4595AA23E95F730A476B2FE4B474D0476BCC629EC17866561ECF5CD930CB8DA7B2BBFE5CCEB6DFC4E51F3772F2DB65DCEFB9099B3E73F1EF3F82B46122F597BE648EE98F76DC4FA49BF421459ABD0C19A3B2CD7AA19BD881E4E563F1767F807D5A061EF15A026403FB4ADAF54C927E43CA93BB34581E92B2BD52A566CAF7EAA80BF6930DA286BF344AAF08904DF54FE4776A04BE4111E5DD06EF83B7487B53E6BBF090938E90C623D63A862BA37773A4D92C6ED599C7154373B6549FC6A63A166CAE3293F565A6B0A4F87866959980B98C36E6CDE7B377E135EE3DF4C72D5A46ABCC6C5E4444C95CADE3C44D7F0CEB0C41CF7818759A59A2FFA939468DA7D3A9E634F65659C409FD592CA86A8249A571CCA93A9595C6D3586B38856D756671A4D56A4E77D9C0C9D6CBB9D77903D67D96E3DA771C4903FA9232B437A992AED347FD4CD2849F489A2C72658C4A1FD789E4193F1373E9A8CCAC313848A47ACB71F829F55145D69F414DD687E0BD05FB88603594415B4D70B03C89EF1D0F6E7C3D8B279FFC82B774B98FABCEE260F1B11C2B65CEDEE293D92772D71B4C6459AB796C9C728C738702090C95262D3109E79C4C8EFB45D36BD5291EB9BB1394A663FCE24394FF621C55DB2DC6A8DD4AF47BADA5E27773695DC794353516B1D1D88211462331AB368905929A57559DCEEA4A53D824297BFF174B38D6762567BF5BCD0D69BA9EF55C85736F13627AF7236598344F23FA12FDCB20E2C70C257DFC007463BA9138A637A107D6111AEB2729395BCE552251A2C857BA5C35597F0635391F8222CA5B483E04DE825AD71896206DFB79671EB55B825BA3F958379CCBE52FE671A3CB26AE74DFCDAD1917B0DE678DC35D6F5E78C7F222592BCD8B325A6939159AC88407DE54DF7417BD2DCF718989C52D398B6E33B763D87D01867D376334601F957BADA3EC0F8BA9DA7C1AFDEBCF64AA74CD1324359B1B99480D9ECC0A89E075C2E61A3338D46C2947DB2CE3D2F71BB8D26A0D4F7E5C8B638FE944F4184CF6A001240DEA4FBC347A19C347A31B223F1BD69394F9B3F072B4C1AE404BA82C5A8872854EEAA1F2129E9A2C05B57AFA2E5E1F6D3E24457C25FADE0B95A856785BEA7693264479439EAF573CAED62138D905E2E61285877461CA7FA2619D95CDB38C6402B3B468D272098ACCE244403C23EF7BF1E9293BCAEFBA479D9D37996C1FC1EDB014669EB1A2E6C855541EB1994AC37653AAF746AA755A4EC51ECB28FDED741AD79FC8CFE54731ABC264E6184D616E25A9ED3203AFAB369D4D32321D6EBC88A3AD44F'
+ N'0B71BB9D2723D0F3AADC7BEFB1CC2BB8F45D76B04E9BD25727F1E4E4E9F6164F61A42FC241312CF5DC63D2E8987393904A415140AF690C5F316316A72155EBF9AF447508BBE0FC17BA7683F3939359434AD265879874280A4B24859980069F75D53B472DF5CC2E2F20889968848D21299A22358C6A93B4169ACB00DA3F6751FCA9C77A2D8817B74BA68CB3EC7706C9CC269B5F824C626DBF878F06AAA4C3A8CFEA02D18F7DF84719FB55495545BA3A5056D6A4F6648C58922D69CC5D5CC58506932CBAB9A15FEB9EA06117D401AADE32D9771B6C56AAE7EB5999BDFAEC5A6EB02C2BA4F25B5EB04927B8E26BD9F44EE8FFD88FB690C21BB8F1010182133BE729D385B1A299904E49CFCE47C956BEC6A7215D424BE0B35391F823F25581975DEE46D823D12654184084D1EBE5159926265949036DF553A4D9B8C7CDC343A7CE20AD8EF9748535B573EB6B6A1E815676AEFBBC60A1B1FEECA622D760DA1F4B4E5949D7A8492938E606079814F066DC468C816EAFCBC964F86AFC3A8E362BEAA3E95E132074FAA3C83C9352C582C42E7E99BB04C6ED7D79C2133B11987EACFE344CBE51C6BBC842B5F6EE6D257ABB0EAB880D01FCD89EB6A4A5C3F1352060E24B5672FC2C64E23D0D683173AAD4C103AE23539D241A78B582D61B2166E5282D4E42AA8497C176A723E046F15ACECD00F81BF10208FF726FEF13984C667E11495CB2CF70CEAD90650FAEE335ADAB9D3D7E9050F225264E3E462F6C41DFD65A7A86C799372E687A934E9101547EEA49C74E406A3F662D06F0B35466DA36E8B1974369EC868E99A271A4DC05430AF64C23C198F9414BDBAB2345992A6F77C368FFD4D9670A6F9122E09575AAEE669C7F5F8749A4B725B1392BA4F40D7632C69FDA6A0B9FE04393C197B44DAAF57945EC7477EAE264BB906ACB6D81F96DFCEC06AFC6D8283E5E756529FFB848651DAD31523376FBADBF9B3C63F91E7D2683D96B979E66337AAAC3E8CE1D27354363D87DE8C23E84F3984E1A403E88DDF43F95F76527DC82E6A765D42D3FA53E96538917152774D2A4DC4CCD8040BE3498582971999FE2A58BA76117CB8C932CE355DCCC5260B258257F0A8D3063C7E5C445887B164B51F4362A709C46C3A4244AC469A299DCCF98ACCDFE2AB5C1EFC55E8BFA12AE443A32EF44DDEDA45FB4A7AFD10289295BFFD791345FCF5D82C86FA07D02F389835B1E9DC97145878B5262607732B0F2A6C384AA955E7283FEF0C35965CA5F4CC23549C7E84F2D30E5266B244EFE81DD41DB88D468DCD6857C5846106939954692A268626D2414F6656D529CCAB3295A595A7B24A042B5DF4BE86F339F6F972CE355AC0C54673B9F8A5320F6FC4A5F74AA27E984C5AF3E1840F5F41A85B205E59CAA7E325E29BF5AF6BBDFFCE5FD7FDFE1E01B291FE087FBD60414DB05F0A856F0FF58CD112A2C9274A9AAC88F84C7C631299FBC20BC3BDA7F978D72DF457DCA2CAB2EB7CBCF00865669D40DFF204A5A6ECA5DC943DD41BBB9BFA1D96F05D35137E92397782A199D45F45F024CCE57676B5A98511AC085E636CCAD69A1685828F345ACE994FE771B9D11CAEB65CC19DCE9BB1EBBB8EA8B65388FE6E3251679E132452FD23B2A47FC8C4333B0F7FA9ABBF458912391F15D4A47C48FEEDAAD63BF8DB527440423E419A2CE225D5452B2FB349F3E29899C571FF20AA5EB8C727476E526CCB0DAAADBC8BD1AA9B7CBCE62CE5E79E11C127293B6D1F554472939F37D2EC5353BA559924CDD53426569AC65889E0F195278BE069FF14BC4CE46E90FABBBDF62CF67C3A977D8D96715C6EAF3699CB9D6FD672B7D356AC7B6EC4A3C32C42161D2329412B8B98475C74011A9D348269321EBD91FAFE859CCBDF4090C8FB23FC6D8203E3A571D16463ABD5E2949C895FBC8E4B42A787D6943B6C4DF9835694D870858A9BA4B95A79998AABAE62B0E002652545D798738AFA93F6D1B0F56CDA561A4F4F113C5452F02F06931826E979AC4835379A8E6595C922780A2BA47BDE5473263BEBCE667783396C6BB884839FCEE6468B053C6AB789FB9DB761F5C37A3CE69C21DC358A106D1E5E32BB7B64CA2694921196A85CC47F1BB2902AA849F990A8C954A3889A949714487A7D3FFCDF863CD69B28F7F7921AE19E9C838F448CB58C4B535E0452EED00D8C0F3B536ADF134AECBF47B1CD5728BBFA3265179EA7C2C273D249EFE1F395E768D27D2DAD8D26D1B9C218FA549EC41089D2E132F30E97F43CD1781AD3AB98BF142C51BCA2D60C36D79BC3AEBA73D955CB927DF5E773B08125D7DBAFE54ECF2D9C6CBB9817C3F6127A2FF0E5A55519E17C937270CB947225B2C285372FE2FF1EEAD1FE7BC8BF9535F923A8C954E3ED829561FE3D50EAD1DB50BBBF72994F59BC50A9C13E29B9EC8E48E4DBDBF6189E7A86F1011B8AEFBD4FB13DCA25CA5B945B7D85F22B8565D7305A7C82EA2337F04DBD597C536122FD0C27D0AF9244B08C42C38DA63252A2788A74CDD38DA74BF49A1646F0C22AA6AC943978DBA70B38D46C255B1BCEE2D2D72BB1FE6603D7BE5CC83999A93D6E78C9D89657B8C81F063581EF464DE0EB3F7B9DD725BE8B0F26D8EF0DA9AFA376FF00F97950420E9112CD2F52739864E74DBDAB3654BEE981FEFEFB94DB711BFDEDF730D87C878A6B6FBC64F97D6A2CBEC46775CD685976321DA4DEF6371A2F0DD6648688C411723B5A5F045736C54C6AF07C03539657B5605DEDB9AC91C85D55C39C95C2DE26B3B9DD66250F5B2EE3E9C0DDF8DF0EC4552BD9A4F075D60F85BAC477A222F075A9AFF3EAF7BF4711E5'
+ N'F54C7564887F0F14C1EF43A074A1E1093A42250D9E9171A9F323678CEEB852EA8607258EDFA59C44AFC1CE87E889E4929B6E505EA8B7F832DF0FDA4EC70A26342A3F91C1FA33E8586938832462874B048F944E7AACC1144C8D24458BE0992278919139AB8D67B0416AF2CE1A9632222DE6FAE773B9DC6139B7965CC4DD318A081DF8A4E5A1FC2DD09BDDEA9F264D36F77BF27AF71B28B55FE1F59FBDCEABDFFF1E4554DF9957C86FA3EE9D8834B5E82D44650194EBD3C129393849D42CF6D3D0FCB107951EFB50E49C1D45CF3FA4ECA14794DDFF94A2FBEE5362FB556A6CBACCF0C53BD9DEC2922F0CFAD0DA6002030D66F083D15849CF668C1014C1130CA7626664C67443532CABCF60A1CCBE2BA5835E5F752ADBEBCDE0D097F3B9316637F6FBADF0970ED027330F0FE9924313F309F9A0CDD11BD1F9477815A122F05504BE19B9FFE4B5FBBC8B0F265855ECAFA82D807F6A3E5EE9B95C8CD332CC3E984F9FFB52F1BE2725CFD908CFA878E839A50FD9F08F43CA676F5CA6C3FA8B5C983289E8561319D0A027CDAA8CA0B344657F198D864AC48E90B43C42DF8409FA5330AB2429BAE264916BCEECCA139969349AA5CD6770C4643F4FF73FC7D93B86B0141DD169CAA8A693A6EFE5BB167D25ABA81DEB9FE30D797F80D705BE12F4FACF5EE77589EFE2EF132C07E99851C0B68004BA3EF3A3D6733FCA5CB3C7E8B203FA275F60BCEF8544B00D1F1FBCCB67DB2F3166F54562BAB5859FC660D5C194A20D7BD3DED89C5E7AD31824513B441991CA8D674CB989988AE429652760F6F120D6D69FC1D5D1C7713BED4D407016DE39E0A293CC91A2FC294D1621720C21D9723C5283FD25A5A91DEB9FE3B7027F0F3581AFFFEC755E97F82E8AA80951503FE8F727281942E48002A4CE05A417102A5113982D7366760E4FA5C9FA25289C86AEFED47F1E4CE92B0E7CF2D08DE2A7EEA17FE43135775A6178F201FD966C24ECFBF1A49AF520795417A27B4CA447B591B42B6F42B74A431827A352CFAA3319F2E952E67D369D556D27B3D97233E7EE3AF0CC33027F791EE56495ACA11C83DA827D68DE5CE8BF8BBF5C70A0D435E589FC254A0294C64A08CA2AC02143C7114D2A43422369E11A4AC38741943FEF4899FB5E94BAF08C5217AD3038F2947E1B6E63F9C344BC064F20657157D2E774C3AF572F4ECFDDCFD18D0F3978E0A67085CB37ECB8FF2C0867C704C2A27309920D14A8FC3585080D2F8C4C69EE2433FDDF132C12FE4A0294C6459EC857E9EAA4918990B14869109EA6EB5811ABA18777205F3A87F1B97514156FFBF0F17D0F4A5EB4C6E092352DEF7961D67F2B87CA75C66DFC58D2D67526776917A24674C567FB7EA2431271C84EC3571E2F22259BF0E4B4C28B271ECA8B03994922385B328896E0D45C5974E5790545B6DCFFAF4439BF37BBD9BF8BBF5C7021B2E8CAFB8E0213F2099519DB43BEBF9E92C5ACA8387A7805F3954714D56C83F9F88E23FFB8FE84DAB79C1974C38FA68B4FF053E97E3897ED8FEFE05F485BD99E9CF9EDC99AD68320D329A47AFBE352A0BCEF1A62E2B34948CD24486AA9A76489C0A874E9D2B3446E36A1E979846541B09CB0D248BD3992FC15A82DF6DF4111B5F4A2A0966EFF0CCA653B45B0F24278A0C85522DA4A641F530447A7D0D72792E62EC15479E2C267361EB4B1F761F01537BA8FDFC5C7C55A33BFC6345C2A8C24B08F29395B3B92B7B623DAC53F9234A21FA1274FE319952C7849B3142F9D7008EE49AE4468A3084FCD22225B4B688644709A56D295A46D65E1155E3BCFBF8A3753E5DFC55F2F58EAB922D94F9E4C91EB25B737D272D99A98C61409E78132030F88C910D1310CBFE7C2D04DE7E9D47709356AF4A56AB91E6CAF3A17CF6A73B8DE7234DA432D49DDF91569BB3AA033E982DFFA65C447A410FAD00E0FF738BCA3DC898C584C42F814E2928F4A64C7C9BC9D2282B344AC92A6E5A4959DFDC6B9FE15A82DF6DF419120597C3594E6E8ED88B437507B0C8560E589242586654AEA946ED631338F4331D1ECD0A6312F3E93F9AE718C3967CF9753B751BFD5389A1AF5A165D9017431184D9BEABF70D8780641551770D06038A9A7EB93B1EF5B928F7D41FEBCCE844DFB99245B679E7BC610B9FC3CC98E7EC4A6DB10193294A4D836C4A58F4093F09498E41C4233B5B2E12475CBF1078B80BF8F0275A43F5023E8BD91E7904DFC8A226A2F75BD1B791015945761D40848C9C52F4516374947B0B680479A34AC753AB6476A1873FA2975DA4D454FBF2BA5ABF4A18EF1CF74ACF60BBD2A4D628CC10CBEAD349C23954CD0D458CCA1A2434817C1F9473B9272A6316CEC4EA2490792CF9DC7332387C84DC7D0581CC3292A9684ACEB24259A90AC2D45A2F627A233AFCB264B12C12F8F5319DBFE2E82654C542344E4A8A12EF1EDBC2EF7BF4570A83C899F343F31804B42324ED9B91C70D7F095C946AAD61F4335BDFE18E9FD4479FD3E542EDD95BEF52730B2BA39530D2CF9B6C220CE543525BDD672CE7C349CAC83CDC93DF72D89979B5070B00B49D3BE2661F97262A22482AD5C886C379E04111DA04D253AD59FC4B489680ABA109EBB51EA7F96A46B5934A9C9858BA7B2F8FF2D28CFAD82B24E6ABC29ECF708914CF93A7FBDE074D99D921E4374CAA7C127B0F59E3375FACCA3747353EA3630A7BEFE783E339E40BD6AA36854BA27636A9930A6D254A65598417BFDC1DCAC370B6D8D655CF9682829EBBF23FB4633E26F8AE02BDF93BAA41949937E21D0D58E4869B622972E22BFE300DCAE3E2638494B62A286B88C1784677A14C'

+ N'592BCA1FBD4FA5534F309E7A80F2DFCDA36AFBE5D4E9B10923F97A72F775EC15A1A76BCDE65095699C33B6E488483ED57D0D9AD874A24FDC27B68509494DC713D37106A98D2C0831DF49942691C4CC6BC4E54C25C7D59CDCF5CA079A7E4FEAC12F604F53D2CF8F223CE6A9084E7D87E03F4EB8FC9B37BBD33F8BDAE32B28CFF13EA83D861A6F15AC360FBE1369464275B20112754CF208E1E30BB67C7ADD8FE267243D1F7D4C895ECB31EE2A91FBC34A8CBBAFA261E785EC1B79901315A772BDEE024E56B3E0A2A105C72B99737EC21E52D27388DE75918836E3496D3A9AB81FCC496C319CF0D90B888ECF202A592BCD4F285A676BD23689D4E332261D6E0947BF20E3643BE2DDB7CB7125CBA27E880856047C18D41EFFCF10A9FD637C30C1E1F2606199B9DCD0C4D0E2990B25AE04617C3D9052979F5269F9794A775E4AD5BE9B29F3D36ACA769BC3902907B93EE608370DCDB859731EE7AACFE6BAE12C8E949FCC936D3749D6E511B5F60861ED2790FBE538127E9C8EE69B5EC4596E25212EB3B0EEFBCA89A604849274EA47D28E3526EF606B38F339C967EA927E6F026169491F48F08743EDF115D4E4BC8B28DD1FE383090E90278D894963459817E51FD860705DC347D77DA87CC381D2E37760DC5BD2F2C06D85FFAD7BD95EB3D8B4D7866BFDB7F2C8703A572ACDE05CD559DC359EC711BD89B85F7346939D4DF8D23D44749D48C1B79349EA368DB8F6BD4832BB415AB48EC0AC083C72B3D044F993F4680CE9471B92BFBF0DB9E71AA0395709ED85EE856352788612E92255163752E93EB35EA549F5857E1B6AB2FE0C6A8FADA026F15DA8C9544304BF59635F52B8DBDF83E02C2D099A7C5ABB8563F02C94620FBD29FBDC9F2AFB1E5261D01AAA8D961A3C7C0F7A0356F3FDD41D38DA26F0A0D36A1E5534E76EED255CAD32871B652671BEE6547C8213484AC9256CFE4E92DB0F23ED8791A4749B42FCF7934899B991F8942CFC52A28857AE79FB8413E771009DA4668ED727E5FA17645D6C40F6A54F49F5B420213E0BEF6CD910D9B9C42B72D3720A8F5789E837797D247A7DE15F17F1266A8FA31025BF53455BF04E64EFFE93989C7F7DFD6729A2168D0A6F0AFC3D8264117DA2F2A8E2E443C917A1947A1182C17D91BCE01495C66CA5D2C87D941EB295B2FD17B3E9963BFECED1DC69B590C7E5A771B3DA7CAE579BCBB5F29378D86E35619A8C428921F33693D56D04DADEA348FA611CF11DC792346B8D8C6159C4EAD270B38FE5E6FE3B68226EA2BBD001CE3621ED560BB4973F25E7CA67C4DAB623313A4046A65C2921D204662B912C82DF90F18AFF538295B4F63E289F6BF13C369FA21E5E14758EA4A46B0486179D29336E27C6A6FB283F6A0F06E3F6D074C64EBC4490EF23771E7F391F5B230BEED55AC0A33A4BB8696C86D7E4B3C44A83A549492764C17AB27B0E47DB6F0489DD4712FFC37012672F23524A4142663AE7B63D64C3903544A7B89075B32FF9179B937AA73939571B9277F573221F972639FC8148CA295C748D72AC3A9D882920528588C24648EEF39B2E5591F9FAF7FF42ED7114A29434AACA6FA5BECEEB72FEEB82E1FF01BBB0237FC99F0D5E0000000049454E44AE426082, CONVERT(bit, ''True''), N''mcadmin'', N''Master'', CONVERT(bit, ''True''), ''7a638ee2-c783-4769-90e4-558bae0f5bdb'', CONVERT(bit, ''True''), ''2024-11-20 02:02:56.447'', ''ec265d61-8be1-9c3d-c930-bcc0b2915a3b'', ''dark'', CONVERT(bit, ''False''))')
GO
SET IDENTITY_INSERT dbo.SD_User_Master OFF
GO

-- 
-- Dumping data for table SD_UserScope
--
PRINT (N'Dumping data for table SD_UserScope')
INSERT dbo.SD_UserScope VALUES (896976904, 'Master', 'Master Scope', CONVERT(bit, 'True'))
GO

-- Table ServiceDesk30_3.dbo.SD_UpdateGrade does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TrackEsclationTicketMailForResol does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TrackEsclationTicketMail does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketNotes does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketIncrementRef does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketFileUpload does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketColumnViewUserwise does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketColumnView does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Technician does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_StatusRestriction does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_StatusRestrict does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Status does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Stage does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovers does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovalStatus_SRDesk does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovalStatus does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLAForResol does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLAConfig does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLA does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Severity does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ServDeskDefn does not contain any data (it is empty)

-- 
-- Dumping data for table SD_roles
--
PRINT (N'Dumping data for table SD_roles')
SET IDENTITY_INSERT dbo.SD_roles ON
GO
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2081, '804', 'My Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (13, '101', 'Roles', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (14, '102', 'Requesters', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (15, '103', 'Technicians', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (17, '104', 'User Scope', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (18, '200', 'Help Desk', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (26, '207', 'SD CustomFields', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (27, '207', 'SD Template', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (28, '208', 'CustomField Values', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (29, '300', 'Instance Configuration', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1061, '1', 'Home', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1062, '800', 'Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1063, '802', 'Create Ticket', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1064, '803', 'Ticket Details', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1067, '400', 'Admin', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1068, '403', 'My Profile', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1069, '500', 'Dashboard', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1070, '502', 'All tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2061, '800', 'Tickets', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2066, '804', 'My Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2063, '802', 'Create Ticket', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2065, '804', 'My Tickets', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2074, '801', 'Archive Ticket', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2076, '406', 'Change Password', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2079, '805', 'All Engineer Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1101, '804', 'My Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2082, '1', 'Dashboard', NULL, 'Active', 'end')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2083, '100', 'Home', NULL, 'Active', 'end')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2084, '1', 'Dashboard', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2085, '11', 'Home', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2086, '901', 'Add Article', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2088, '807', 'Manage Approvals', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2089, '900', 'Knowledge Base', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2090, '901', 'Add Article', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2091, '1', 'Dashboard', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2092, '11', 'Home', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2093, '13', 'Assignee Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2094, '14', 'SLA', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2095, '15', 'Category Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2096, '16', 'Department Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2097, '17', 'Ticket Count', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2098, '18', 'Live Dashboard', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2099, '100', 'Users And Permissions', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2100, '107', 'SD Custom Role', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2101, '206', 'Desk Configure', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2102, '209', 'SD CustomFields', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2103, '214', 'Create Flow Chart', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2104, '215', 'View FLow', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2105, '303', 'Operational Hours', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2106, '304', 'Holidays', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2107, '305', 'Apply Leave', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2108, '400', 'Admin', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2109, '401', 'Add Department', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2110, '402', 'Email Logs', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2111, '403', 'My Profile', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2112, '404', 'Add Location', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2113, '406', 'Change Password', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2114, '500', 'Reports', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2115, '502', 'All tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2116, '506', 'Generate AI Report', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2117, '506', 'User Feedback', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2118, '510', 'Filter Any Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2119, '600', 'Change Management', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2120, '601', 'Change Type', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2121, '602', 'Reason For Change', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2122, '700', 'Templates', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2123, '701', 'Email Template', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2124, '800', 'Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2125, '801', 'Archive Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2126, '802', 'Create Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2127, '803', 'Ticket Details', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2128, '805', 'All Engineer Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2129, '806', '2FA Reset', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2130, '1', 'Dashboard', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2131, '11', 'Home', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2132, '13', 'Assignee Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2133, '14', 'SLA', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2134, '15', 'Category Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2135, '16', 'Department Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2136, '17', 'Ticket Count', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2137, '18', 'Live Dashboard', NULL, 'Active', 'admin')
GO
SET IDENTITY_INSERT dbo.SD_roles OFF
GO

-- 
-- Dumping data for table SD_RolePreference
--
PRINT (N'Dumping data for table SD_RolePreference')
SET IDENTITY_INSERT dbo.SD_RolePreference ON
GO
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (1, 1939788858, 'ReportingManagerEmail', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (2, 1748906969, 'ITManagerEmail', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (3, 1714450183, 'ReportingManagerTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (4, 336000835, 'ITManagerTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (5, 1446576709, 'HODTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (6, 1356817125, 'VOIP_Number', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (7, 1848393299, 'ERP_Tasks_Affected', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (8, 702282998, 'ERP_AdditionalEffort', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (9, 1204482688, 'ERP_AdditionalCost', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (10, 394626866, 'ERP_ImpactonCompletiondate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (11, 55775099, 'ERP_PlanStartDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (12, 143338415, 'ERP_PlanEndDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (13, 1354907257, 'ERP_ChangeacceptedtestedbyIT', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (14, 585456970, 'ERP_ChangesmovedtoUAT', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (15, 185743877, 'ERP_InternalITTesting', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (16, 2146865298, 'ERP_DevelopmentPhase', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (17, 1120074492, 'ERP_TestResults', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (18, 468618184, 'ReasonforChange', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (19, 1132178628, 'DevelopmentStartDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (20, 1407013698, 'DevelopmentEndDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (21, 2063483209, 'ERPComment', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (22, 1350450277, 'HoldStart', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (23, 901773105, 'HoldEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (24, 650489251, 'OpenEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (25, 1048944597, 'WIPStart', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (26, 1446357852, 'WIPEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (27, 596049153, 'StoreCode', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (28, 523205334, 'ChangeExecuterName', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (29, 1896719031, 'ChangeVerifiedBy', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (30, 1398623016, 'MovetoProduction', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (31, 211965085, 'SRType', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (32, 1159270588, 'ERP_CRTypes', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (33, 1939788858, 'ReportingManagerEmail', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (34, 2063483209, 'ERPComment', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (35, 1398623016, 'MovetoProduction', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (36, 211965085, 'SRType', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (37, 1848393299, 'ERP_Tasks_Affected', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (38, 702282998, 'ERP_AdditionalEffort', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (39, 1204482688, 'ERP_AdditionalCost', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (40, 394626866, 'ERP_ImpactonCompletiondate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (41, 55775099, 'ERP_PlanStartDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (42, 143338415, 'ERP_PlanEndDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (43, 1354907257, 'ERP_ChangeacceptedtestedbyIT', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (44, 585456970, 'ERP_ChangesmovedtoUAT', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (45, 185743877, 'ERP_InternalITTesting', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (46, 2146865298, 'ERP_DevelopmentPhase', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (47, 1120074492, 'ERP_TestResults', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (48, 468618184, 'ReasonforChange', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (49, 1132178628, 'DevelopmentStartDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (50, 1407013698, 'DevelopmentEndDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (51, 2063483209, 'ERPComment', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (52, 523205334, 'ChangeExecuterName', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (53, 1896719031, 'ChangeVerifiedBy', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (54, 1398623016, 'MovetoProduction', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (55, 211965085, 'SRType', '1', 'CRM')
GO
SET IDENTITY_INSERT dbo.SD_RolePreference OFF
GO

-- 
-- Dumping data for table SD_Role
--
PRINT (N'Dumping data for table SD_Role')
SET IDENTITY_INSERT dbo.SD_Role ON
GO
INSERT dbo.SD_Role(RoleID, RoleName, InsertBy, InsertDt, UpdateBy, UpdateDt, IsActive) VALUES (21, 'Master', 'hitachi_admin', '2024-12-04 12:04:48.763', NULL, NULL, CONVERT(bit, 'True'))
GO
SET IDENTITY_INSERT dbo.SD_Role OFF
GO

-- Table ServiceDesk30_3.dbo.SD_ResponseReminder does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Resolution does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_RequestType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Priority does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Pool does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_PCVOrgMapping does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_OrgMaster does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_OrgLogo does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Options does not contain any data (it is empty)

-- 
-- Dumping data for table SD_Navigation
--
PRINT (N'Dumping data for table SD_Navigation')
SET IDENTITY_INSERT dbo.SD_Navigation ON
GO
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1, 1, 'Dashboard', '#', 0, 'hsadmin', 'Active', 1, 1, N'material-icons-outlined', 'dashboard')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (2, 100, 'Users And Permissions', '#', 0, 'hsadmin', 'Active', 6, NULL, N'material-icons-outlined', 'view_agenda')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (3, 101, 'Create & Modify Roles', '/frmAddUsersRoles.aspx', 100, 'hsadmin', 'Active', 6, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (4, 102, 'Create User', '/HelpDesk/frmAddRequester.aspx', 100, 'hsadmin', 'Active', 6, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (5, 103, 'User Details', '/HelpDesk/frmSDAccount.aspx', 100, 'hsadmin', 'Active', 6, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (6, 104, 'User Scope', '/HelpDesk/frmAddUserScope.aspx', 100, 'hsadmin', 'Active', 6, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1044, 1000, 'New Menu', '#', 1000, 'hsadmin', 'InActive', 1, NULL, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (9, 200, 'Administration', '#', 0, 'hsadmin', 'Active', 4, NULL, N'material-icons-outlined', 'engineering')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (17, 203, 'Add Custom Field Values', '/HelpDesk/frmAddCustomFieldValues.aspx', 200, 'hsadmin', 'Active', 4, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (18, 202, 'Add Custom Fields', '/HelpDesk/frmSDCustomFieldCnrtl.aspx', 200, 'hsadmin', 'Active', 4, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (22, 300, 'Coverage Schedules', '#', 0, 'hsadmin', 'Active', 5, NULL, N'material-icons-outlined', 'card_giftcard')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (25, 303, 'Operational Hours', '/HelpDesk/frmAddCoverageSch.aspx', 300, 'hsadmin', 'Active', 5, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (26, 304, 'Holidays', '/HelpDesk/frmAddHolidays.aspx', 300, 'hsadmin', 'Active', 5, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (27, 400, 'Admin', '#', 0, 'hsadmin', 'InActive', 7, NULL, N'material-icons-outlined', 'admin_panel_settings')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (28, 207, 'Add Department', '/Admin/frmAddDepartment.aspx', 200, 'hsadmin', 'Active', 7, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (29, 208, 'Email Logs', '/HelpDesk/frmEmailLogs.aspx', 200, 'hsadmin', 'Active', 7, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (30, 403, 'My Profile', '/Admin/frmMyProfile.aspx', 400, 'hsadmin', 'InActive', 7, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (31, 500, 'Reports', '#', 0, 'hsadmin', 'Active', 8, NULL, N'material-icons-outlined', 'description')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (33, 502, 'All tickets', '/Reports/frmOrgWiseTickets.aspx', 500, 'hsadmin', 'Active', 8, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (37, 700, 'Templates', '#', 0, 'hsadmin', 'InActive', 3, NULL, N'material-icons-outlined', 'apps')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (38, 701, 'Email Template', '/frmEmailTemplate.aspx', 700, 'hsadmin', 'Active', 3, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (40, 800, 'Tickets', '#', 0, 'hsadmin', 'Active', 2, NULL, N'material-icons-outlined', 'confirmation_number')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (41, 801, 'Archive Ticket', '/HelpDesk/frmAllArchiveTickets.aspx', 800, 'hsadmin', 'Active', 2, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (42, 802, 'Create Ticket', '/frmAddIncident.aspx', 800, 'hsadmin', 'Active', 2, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (43, 803, 'Ticket Details', '/frmAllTickets.aspx', 800, 'hsadmin', 'Active', 2, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (44, 204, 'Add Location', '/Admin/frmAddLocation.aspx', 200, 'hsadmin', 'Active', 7, 4, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (46, 804, 'My Tickets', '/HelpDesk/frmMyTickets.aspx', 800, 'hsadmin', 'Active', 2, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1001, 107, 'Assign Custom Role', '/frmAddSDRoleWiseCustomFlds.aspx', 100, 'hsadmin', 'Active', 6, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1003, 506, 'User Feedback', '/CSET/frmFeedbackreport.aspx', 500, 'hsadmin', 'Active', 8, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1006, 406, 'Change Password', '/frmChgPass.aspx', 400, 'hsadmin', 'InActive', 7, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1008, 805, 'All Tickets', '/frmAllTicketsEngTransf.aspx', 800, 'hsadmin', 'Active', 2, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1009, 806, 'Manage 2FA', '/HelpDesk/RemeberIIFAEnable.aspx', 100, 'hsadmin', 'Active', 7, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1014, 201, 'Desk Configuration', '/DeskConfiguration.aspx', 200, 'hasdmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1015, 600, 'Change Management', '#', 0, 'hsadmin', 'Active', 9, 1, N'material-icons-outlined', ' change_circle')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1016, 601, 'Change Type', '/ChangeManagement/frmAddChangeType.aspx', 600, 'hsadmin', 'Active', 9, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1017, 602, 'Reason For Change', '/ChangeManagement/frmReasonForChng.aspx', 600, 'hsadmin', 'Active', 9, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1018, 900, 'Knowledge Base', '#', 0, 'hsadmin', 'Active', 10, 1, N'material-icons-outlined', 'school')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1019, 901, 'Add Article', '/frmAddKnowledgeBase.aspx', 900, 'hsadmin', 'Active', 10, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1021, 506, 'Generate AI Report', '/frmGenAIReports.aspx', 500, 'hsadmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1022, 11, 'Home', '/frmDashboard.aspx', 1, 'hsadmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1023, 206, 'Create Flow Chart', '/frmFlowChart.aspx', 200, 'hsadmin', 'Active', 2, 14, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1024, 208, 'View FLow', '/frmViewFlow.aspx', 200, 'hsadmin', 'Active', 2, 15, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1025, 305, 'Add Leave', '/HelpDesk/frmTechLeaveApply.aspx', 300, 'hsadmin', 'Active', 5, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1046, 209, 'Available Licence', '/frmComingSoon.aspx', 200, 'hsadmin', 'Active', 1, NULL, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1030, 13, 'Assignee Wise', '/Dashboard/SDAssigneeCallDetails.aspx', 1, 'hsadmin', 'Active', 1, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1031, 14, 'SLA', '/Dashboard/DBSDSLAII.aspx', 1, 'hsadmin', 'Active', 1, 4, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1033, 15, 'Category Wise', '/Dashboard/SDDBCategoryWise.aspx', 1, 'hsadmin', 'Active', 1, 5, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1034, 16, 'Department Wise', '/Dashboard/SDDepartmentCallDetails.aspx', 1, 'hsadmin', 'Active', 1, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1035, 17, 'Ticket Count', '/Dashboard/SDDBCategoryWise.aspx', 1, 'hsadmin', 'Active', 1, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1037, 18, 'Live Dashboard', '/Dashboard/frmLiveDashboard.aspx', 1, 'hsadmin', 'Active', 1, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1038, 510, 'Filter Any Ticket', '/Reports/frmFilterTickets.aspx', 500, 'hsadmin', 'Active', 1, 10, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1039, 807, 'Pending Approvals', '/frmTicketApprover.aspx', 800, 'hsadmin', 'Active', 1, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1047, 210, 'FeedBack Configuration', '/frmComingSoon.aspx', 200, 'hsadmin', 'Active', 1, NULL, N'nav-icon fas fa-copy', NULL)
GO
SET IDENTITY_INSERT dbo.SD_Navigation OFF
GO

-- 
-- Dumping data for table SD_Mfa
--
PRINT (N'Dumping data for table SD_Mfa')
SET IDENTITY_INSERT dbo.SD_Mfa ON
GO
INSERT dbo.SD_Mfa(MFAID, UserID, MFAStatus, SecretKey, InsertDt) VALUES (139238, 430313502384, CONVERT(bit, 'True'), N'MCPIZRKBW2WPI6XYR3FHFQK4Z7VR6XSA', '2024-11-20 01:59:27.550')
GO
SET IDENTITY_INSERT dbo.SD_Mfa OFF
GO

-- Table ServiceDesk30_3.dbo.SD_Mapping_Check does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Location does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_KnowledgeBase does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Holidays does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_HODApproval does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_History does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_FeedQuestions does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Feedback does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_FeedAnswers does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_EsclateMaster does not contain any data (it is empty)

-- 
-- Dumping data for table SD_ErrorLog
--
PRINT (N'Dumping data for table SD_ErrorLog')
INSERT dbo.SD_ErrorLog VALUES (1878168838, 'hitachi_admin', '2024-12-04 12:40:26.513', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddUserScope.aspxGot ExceptionLine Number :111System.NullReferenceException: Object reference not set to an instance of an object.
   at HelpDesk_frmAddUserScope.GridFormat(DataTable dt) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddUserScope.aspx.cs:line 111
   at HelpDesk_frmAddUserScope.FillScopeDetails() in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddUserScope.aspx.cs:line 80')
INSERT dbo.SD_ErrorLog VALUES (760982562, 'hitachi_admin', '2024-12-04 12:46:45.200', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddRequester.aspxGot ExceptionLine Number :0System.OverflowException: Value was either too large or too small for an Int32.
   at System.Decimal.FCallToInt32(Decimal d)
   at System.Decimal.System.IConvertible.ToInt32(IFormatProvider provider)
   at HelpDesk_frmAddRequester.gvTechnician_RowCommand(Object sender, GridViewCommandEventArgs e) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddRequester.aspx.cs:line 904')
INSERT dbo.SD_ErrorLog VALUES (1810242346, 'hitachi_admin', '2024-12-04 12:46:48.673', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddRequester.aspxGot ExceptionLine Number :0System.OverflowException: Value was either too large or too small for an Int32.
   at System.Decimal.FCallToInt32(Decimal d)
   at System.Decimal.System.IConvertible.ToInt32(IFormatProvider provider)
   at HelpDesk_frmAddRequester.gvTechnician_RowCommand(Object sender, GridViewCommandEventArgs e) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddRequester.aspx.cs:line 904')
GO

-- Table ServiceDesk30_3.dbo.SD_EmailTemplate does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_EmailConfig does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Department does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_DeleteTicketLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_DeletedTechnician does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFldRole does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldValues does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldTicketValues does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldControl does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CoverageSchedule does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CloudTickDetails does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ChangeType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ChangeReasonType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Category_FullPath does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CategorySLA does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Category does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_adminLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDTicketInsertHistory does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDTicketHistory does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncident_InsertLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncidentdeleted does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncidentBulkUpdate does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncident does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.EmployeeMaster does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.Email_FromInbox does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.email does not contain any data (it is empty)

-- 
-- Dumping data for table DynamicFLow
--
PRINT (N'Dumping data for table DynamicFLow')
SET IDENTITY_INSERT dbo.DynamicFLow ON
GO
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (1, '680624893', N'Test 1', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.773', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (2, '680624893', N'Test 2', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.777', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (3, '680624893', N'Test 3', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.780', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (4, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.653', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (5, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.657', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (6, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.657', NULL)
GO
SET IDENTITY_INSERT dbo.DynamicFLow OFF
GO

-- 
-- Dumping data for table CommonLog
--
PRINT (N'Dumping data for table CommonLog')
SET IDENTITY_INSERT dbo.CommonLog ON
GO
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (1, '1368050342', '680624893', 'hitachi_admin', 'frmAddSLA', NULL, NULL, NULL, NULL, 'Category', 'expected response time and resolution time will be set here', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:21:21.400', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (2, NULL, '523843837', 'hitachi_admin', 'frmAddCategory', 'Incident', NULL, NULL, NULL, NULL, NULL, 'Incident||Password', 'Password', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:28:55.310', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (3, NULL, '523843837', 'hitachi_admin', 'frmAddCategory', 'Incident', NULL, NULL, NULL, NULL, NULL, 'Incident||Business Application', 'Business Application', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:30:35.300', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (4, '171055604', '523843837', 'hitachi_admin', 'frmAddServiceDeskName', 'Incident', NULL, '301941129', NULL, NULL, NULL, NULL, NULL, 'Hitachi Incident', 'INC', 'Incident', '1646581461', NULL, '704869537', NULL, '530499579', NULL, '0', NULL, '20', '1453192560', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '738442562', NULL, NULL, '2024-08-13 21:37:05.120', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (5, '749303833', '523843837', 'hitachi_admin', 'frmEmailConfigratn', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'smtp.office365.com', '587', 'msp@hisysmc.com', 'msp@hisysmc.com', 'Kus83888', '5', '', '', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:26.320', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (6, NULL, '523843837', 'hitachi_admin', 'frmAddOrganization', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Hitachi', 'Hitachi', 'Anuj Dogra', '0981893456', 'anuj.dogra.fz@hitachi-systems.com', '                                                  ', '                    ', '                                                                                                    ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:42.670', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (7, NULL, '680624893', 'hitachi_admin', 'frmAddOrganization', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'IMSPL', 'IMSPL', 'Madhav Choudhary', '9149499381', 'madhav.choudhary.wt@hitachi-systems.com', '                                                  ', '                    ', '                                                                                                    ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:55.280', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (8, NULL, '680624893', 'hitachi_admin', 'frmAddSDPriority', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'High', 'High', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:12.240', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (9, NULL, '680624893', 'hitachi_admin', 'frmAddSDPriority', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Low', 'Low in Priority', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:23.330', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (10, '1234252843', '680624893 ', 'hitachi_admin', 'frmAddRequestType', 'Service Request', 'Service Request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:36.550', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (11, '1234252843', '680624893 ', 'hitachi_admin', 'frmAddRequestType', 'Service Request', 'Service Request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:38.103', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (12, NULL, '523843837', 'hitachi_admin', 'frmResolutionType', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Others', 'Others', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:02.603', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (13, '319229559', '680624893', 'hitachi_admin', 'frmSDCustomFieldCnrtl', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'True', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'txt319229559', 'HoldEnd', 'DateTime', 'True', 'ForTechnician', NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:17.910', 'HoldEnd', 'TextBox')
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (14, '255835739', '680624893', 'hitachi_admin', 'frmSDCustomFieldCnrtl', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'True', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'txt255835739', 'WIPStart', 'DateTime', 'True', 'ForTechnician', NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:31.520', 'WIPStart', 'TextBox')
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (15, '1761258871', '523843837', 'hitachi_admin', 'frmAddSeverity', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'S1', 'Severity -1 (Moderate Business Impact)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '15', '210', NULL, NULL, NULL, '2024-08-13 21:39:54.680', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (16, '1761258871', '523843837', 'hitachi_admin', 'frmAddSeverity', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'S2', 'Severity -1 (Moderate Business Impact)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '15', '210', NULL, NULL, NULL, '2024-08-13 21:40:08.070', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (17, '2000292840', '523843837', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, 'WIP', 'WIP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:40:24.390', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (18, '2000292840', '523843837', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, 'WIP1', 'WIP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:40:35.940', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (19, '318981433', '680624893', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, '1790681711', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'WIP', 'WIP', '#000000', '2024-08-13 21:40:53.420', NULL, NULL)
GO
SET IDENTITY_INSERT dbo.CommonLog OFF
GO

-- Table ServiceDesk30_3.dbo.AMS_Asset_Dep_Master does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.ALM_OrgLogo does not contain any data (it is empty)

USE ServiceDesk30_3
GO

IF DB_NAME() <> N'ServiceDesk30_3' SET NOEXEC ON
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter trigger [UpdateStatus] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [UpdateStatus] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.UpdateStatus', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.UpdateStatus
       ON dbo.SDIncident
AFTER  UPDATE
AS
BEGIN
       SET NOCOUNT ON;
 
  --      DECLARE @TicketID numeric(18,0)
		--DECLARE @EsclationLevel VARCHAR(3)
		--DECLARE @TicketNumber VARCHAR(50)
		--DECLARE @UserName VARCHAR(50)
		--DECLARE @UserEmail VARCHAR(100)
		--Declare @ActionType varchar(50)
  --     SELECT @TicketID = a.TicketID ,@TicketNumber=a.TicketNumber,@EsclationLevel=a.EsclationLevel  
	 --  ,@UserName=b.UserName,@UserEmail=b.UserEmail  
  --     FROM INSERTED a
	 --  inner join 
	 --  SD_EsclateMaster b 
	 --  on a.EsclationLevel=b.EsclationLevel
 
  --     IF  update(EsclationLevel)
  --     BEGIN
	 --  SET @ActionType=(select  i.EsclationLevel
  --          from    deleted d
  --                  inner join inserted i   on  d.TicketID = i.TicketID
  --          where   d.EsclationLevel <> i.EsclationLevel and i.EsclationLevel is not null)
		--	if(@ActionType is not null)
		--	BEGIN
  --            Insert into  SD_TrackEsclationTicketMail  (TicketID
  --    ,TicketNumber
  --    ,UserName
  --    ,UserEmail
  --    ,EscLevel
  --    ,Eventdt) values(@TicketID,@TicketNumber,@UserName,@UserEmail,@EsclationLevel,GETDATE())
	 -- END
  --     END
	 
 
    	DECLARE @UpdateCursor CURSOR;
		DECLARE @TicketID numeric(18,0)
		DECLARE @EsclationLevel VARCHAR(3)
		DECLARE @TicketNumber VARCHAR(50)
		DECLARE @Stage numeric(18,0)
		DECLARE @UserEmail VARCHAR(100)
		Declare @ActionType varchar(50)
		Declare @EscMin int;
BEGIN
    SET @UpdateCursor = CURSOR FOR
   SELECT  a.ID,a.Ticketref,a.sdstageFK
	    
       FROM INSERTED a
	  
    OPEN @UpdateCursor 
    FETCH NEXT FROM @UpdateCursor 
    INTO @TicketID,@TicketNumber,@Stage

    WHILE @@FETCH_STATUS = 0
    BEGIN
       IF  update(sdstageFK)
       BEGIN
	   SET @ActionType=(select  i.sdstageFK
            from    deleted d
                    inner join inserted i   on  d.id = i.id
            where   d.sdstageFK <> i.sdstageFK and i.sdstageFK is not null and i.id=@TicketID)
			if(@ActionType is not null)
			BEGIN
			if exists(select * from SD_Status where id=@ActionType)
			BEGIN
			print(@ActionType);
			END
			ELSE
			BEGIN
          update SDIncident set previousStageFK=@ActionType where id=@TicketID
	  END
	  END
       END
			  FETCH NEXT FROM @UpdateCursor 
			   INTO @TicketID,@TicketNumber,@Stage
    END; 

    CLOSE @UpdateCursor ;
    DEALLOCATE @UpdateCursor;
END;
 
END
'
GO

--
-- Create or alter trigger [trg_TicketUpdate] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [trg_TicketUpdate] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.trg_TicketUpdate', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.trg_TicketUpdate ON dbo.SDIncident
AFTER  UPDATE
AS BEGIN



DECLARE @id numeric(26,0)= null
		,@DeskRef varchar(50) =NULL
		,@UserIDForAppro numeric(18,0)=null
		,@Ticketref varchar(50)=Null   
      ,@partitionid numeric(26,0)= null
      ,@orgServDeskDefnFK numeric(26,0)= null
      ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
      ,@sdPriorityFK numeric(26,0)= null
      ,@sdSeverityFK numeric(26,0)= null
      ,@sdSolutionTypeFK numeric(26,0)= null
      ,@sdCategoryFK numeric(26,0)= null
      ,@creationDateTime datetime= null
      ,@closedDateTime datetime= null
      ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@TickNotes nvarchar(max)=null
      ,@submitterType varchar(50)= null
      ,@submitterName varchar(50)= null
      ,@submitterEmailAddr varchar(50)= null
      ,@submitterPhone varchar(50)= null
      ,@assigneeType varchar(50)= null
      ,@assigneePoolFK numeric(26,0)= null
      ,@assigneeParticipantFK numeric(26,0)= null
      ,@actualCompletedDate datetime= null
      ,@expectedDueDate datetime= null
      ,@actualResolutionDate datetime= null
      ,@organizationFK numeric(26,0)= null
        ,@orgStaffFK numeric(26,0)= null
       ,@sdErrorMessage varchar(max)= null
        ,@solutionNote varchar(max)= null
        ,@sourceType varchar(50)= null
        ,@previousStageFK numeric(26,0)= null
        ,@categoryFullText varchar(max)= null
	    ,@sdCategoryRef  varchar(200)=null
	    ,@UserName nvarchar(100)=null
	    ,@SubmitterID varchar(50)=null
	    ,@AssigneName varchar(100)=null
	    ,@TechID numeric(18,0)=null
	    ,@UserID numeric(18,0)=null
		,@InsertBy varchar(200) =NULL
		,@InsertDt datetime =NULL
		,@UpdateBy varchar(200) =NULL
		,@UpdateDt datetime =NULl
		,@Status nvarchar(10) = NULL
		,@TicketAttachMent nvarchar(max)=null
		,@Filename nvarchar(100)=null
		,@location nvarchar(100)=null
		,@Department nvarchar(100)=null
		,@SDRole nvarchar(100)=null
	    ,@Option varchar(100) =NULL
	    ,@ActionDateTime datetime =null
		,@EditedByUser nvarchar(max)=null
	    ,@result VARCHAR(8000) 
	    ,@ActionType varchar(max) 


---- Get data from inserted/ updated
   SELECT 
      @id=id
     , @sdStageFK=sdStageFK
      ,@sdStatusFK=sdStatusFK
      ,@sdPriorityFK=sdPriorityFK
      ,@sdSeverityFK=sdSeverityFK     
      ,@sdCategoryFK=sdCategoryFK               
      ,@TicketDesc=TicketDesc
      ,@TicketSummary=TicketSummary
      ,@submitterName=submitterName
      ,@submitterEmailAddr=submitterEmailAddr
     ,@submitterPhone=submitterPhone
      ,@assigneeType =assigneeType
  --    ,assigneePoolFK
     ,@assigneeParticipantFK=assigneeParticipantFK
     ,@sdSolutionTypeFK=sdSolutionTypeFK
     ,@solutionNote=solutionNote
   ,@organizationFK=organizationFK
     --orgStaffFK
      ,@categoryFullText=categoryFullText
	 ,@Ticketref=ticketref
	 ,@location=location
	 ,@Department=Department
	 ,@submitterType=submitterType
	 ,@EditedByUser=EditedBy
           FROM inserted

	      
	   IF UPDATE(sdStageFK)
       BEGIN
	   DECLARE @OldValue NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue = StageCodeRef 
        FROM deleted d
		inner join SD_Stage st
		on st.ID=d.sdStageFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Stage has been'' +
        '' changed from '' + CAST(@OldValue as varchar) + '' to '' + CAST(sd.StageCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Stage  sd
					on sd.ID=i.sdStageFK

            where  ( d.sdStageFK <> i.sdStageFK and i.sdStageFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	 
	 end
	   END
	   IF UPDATE(sdStatusFK)
       BEGIN
	   DECLARE @OldValue1 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue1 = StatusCodeRef 
        FROM deleted d
		inner join SD_Status st
		on st.ID=d.sdStatusFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Status has been'' +
        '' changed from '' + CAST(@OldValue1 as varchar) + '' to '' + CAST(sd.StatusCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Status  sd
					on sd.ID=i.sdStageFK

            where   (d.sdStatusFK <> i.sdStatusFK and i.sdStatusFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
				SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			    insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	 
	 end
	   END
	   IF UPDATE(sdPriorityFK)
       BEGIN
	   DECLARE @OldValue2 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue2 = PriorityCodeRef 
        FROM deleted d
		inner join SD_Priority st
		on st.ID=d.sdPriorityFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Priority has been'' +
        '' changed from '' + CAST(@OldValue2 as varchar) + '' to '' + CAST(sd.PriorityCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Priority  sd
					on sd.ID=i.sdPriorityFK

            where   (d.sdPriorityFK <> i.sdPriorityFK and i.sdPriorityFK is not null)
			 and i.Ticketref=@Ticketref and d.organizationFK=@organizationFK
			
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			             insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
      
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	  
	  end
	   END
	   IF UPDATE(sdSeverityFK)
       BEGIN
	   DECLARE @OldValue3 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue3 = ServerityCodeRef 
        FROM deleted d
		inner join SD_Severity st
		on st.ID=d.sdSeverityFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select   ''Severity has been'' +
        '' changed from '' + CAST(@OldValue3 as varchar) + '' to '' + CAST(sd.ServerityCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Severity  sd
					on sd.ID=i.sdSeverityFK

            where  ( d.sdSeverityFK <> i.sdSeverityFK and i.sdSeverityFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			        insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
      
	  
	  end
	   END
	   IF UPDATE(sdCategoryFK)
       BEGIN
	   DECLARE @OldValue4 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue4 = Replace (categoryref,''||'','' - '')
        FROM deleted d
		inner join SD_category st
		on st.ID=d.sdCategoryFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''category has been'' +
        '' changed from '' + CAST(@OldValue4 as varchar) + '' to '' + CAST(Replace (sd.categoryref,''||'','' - '') as varchar) +'' for Ticket '' +i.Ticketref
            from    deleted d
                    inner join inserted i  
						
					on  d.Ticketref = i.Ticketref
					and i.organizationFK=d.organizationFK
					inner join SD_category sd
					on sd.ID=i.sdCategoryFK

            where  ( d.sdCategoryFK <> i.sdCategoryFK and i.sdCategoryFK is not null)
			   and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
		 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
	 end
	   END
	   IF UPDATE(TicketDesc)
       BEGIN
	   DECLARE @OldValue5 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue5 = TicketDesc
        FROM deleted d
		where d.Ticketref=@Ticketref  and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''description has been'' +
        '' changed from '' + CAST(@OldValue5 as varchar) + '' to '' + CAST(i.TicketDesc as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
					
						and d.organizationFK=i.organizationFK
            where  ( d.TicketDesc <> i.TicketDesc and i.TicketDesc is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
		SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )

			if(@ActionType is not null)
			begin
	    insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
      
	  
	  end
	   END	
	   IF UPDATE(assigneeParticipantFK)
       BEGIN
	   DECLARE @OldValue6 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue6 = st.TechLoginName 
        FROM deleted d
		inner join SD_Technician st
		on st.TechID=d.assigneeParticipantFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Assignee has been'' +
        '' changed from '' + CAST(@OldValue6 as varchar) + '' to '' + CAST(sd.TechLoginName as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Technician  sd
					on sd.TechID=i.assigneeParticipantFK

            where  ( d.assigneeParticipantFK <> i.assigneeParticipantFK and i.assigneeParticipantFK is not null
			) and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)
		
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
  	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
   
   end
	   END
	    IF UPDATE(location)
       BEGIN
	   DECLARE @OldValue7 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue7 = location 
        FROM deleted d
	
        WHERE d.Ticketref = @Ticketref 
		
		 
		SET @ActionType=(select  ''location has been'' +
        '' changed from '' + CAST(@OldValue7 as varchar) + '' to '' + CAST(i.location as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK

            where   (d.location <> i.location and i.location is not null)
			
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
	  
	  end
	   END
        IF UPDATE(department)
       BEGIN
	   DECLARE @OldValue8 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue8 = Department 
        FROM deleted d
	
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		 
		SET @ActionType=(select  ''department has been'' +
        '' changed from '' + CAST(@OldValue8 as varchar) + '' to '' + CAST(i.Department as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
					and d.organizationFK=i.organizationFK
					

            where  ( d.Department <> i.Department and i.Department is not null)
			
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@UpdateBy,''1'',@submitterType)
 	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
   
	
	end
	   END  
    END
      

  
'
GO

--
-- Create or alter trigger [TicketDeleteDetails] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [TicketDeleteDetails] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.TicketDeleteDetails', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.TicketDeleteDetails
       ON dbo.SDIncident
For  delete
AS
BEGIN
       SET NOCOUNT ON;
 
  --  
	 
 
    	DECLARE @DeleteCursor CURSOR;
		DECLARE @TicketID numeric(18,0)
		DECLARE @EsclationLevel VARCHAR(3)
		DECLARE @TicketNumber VARCHAR(50)
		DECLARE @SDStatusFK numeric(18,0)
		DECLARE @SDCategoryFK numeric(18,0)
		DECLARE @AssigneFK numeric(18,0)
		DECLARE @CreationDate datetime
		DECLARE @SubmitterEmail varchar(200)	
		Declare @ActionType varchar(50)
		Declare @EscMin int;
BEGIN
    SET @DeleteCursor = CURSOR FOR
   SELECT  a.id ,a.Ticketref,a.sdStatusFK,sdCategoryFK,a.assigneeParticipantFK,a.creationDateTime,a.submitterEmailAddr 
	  
       FROM deleted a
	 

    OPEN @DeleteCursor 
    FETCH NEXT FROM @DeleteCursor 
    INTO @TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail

    WHILE @@FETCH_STATUS = 0
    BEGIN
	
   
			
			Delete from SD_SLA where TicketID=@TicketID
			delete from SD_TrackEsclationTicketMail where TicketID=@TicketID
              Insert into SD_DeleteTicketLog (TicketID
      ,TicketNumber
      ,SDStatusFK
      ,SDCategoryFK
      ,AssigneFK
      ,CreationDate
      ,SubmitterEmail,EventDt) values(@TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail,GETDATE())
	
       
			  FETCH NEXT FROM @DeleteCursor 
			  INTO @TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail
    END; 

    CLOSE @DeleteCursor ;
    DEALLOCATE @DeleteCursor;
END;
 
END
'
GO

--
-- Create or alter trigger [MakeCustomField] on table [dbo].[SD_CustomFieldControl]
--
GO
PRINT (N'Create or alter trigger [MakeCustomField] on table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.MakeCustomField', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.MakeCustomField
       ON dbo.SD_CustomFieldControl
AFTER INSERT
AS
BEGIN
       SET NOCOUNT ON;
 
       DECLARE @FieldName nvarchar(500);
	   Declare @FieldMode    nvarchar(100);
 
       SELECT @FieldName = i.FieldValue     ,@FieldMode  =i.FieldMode  
       FROM INSERTED i
 
 Declare @ColumnName varchar(500);
 Declare @ColumnType varchar(100);
 Declare @str varchar(max);
 set @ColumnName=@FieldName;
 set @ColumnType=@FieldMode  ;
 if exists(
 --select @FieldName from SD_CustomFieldValues 
 SELECT * 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = ''SD_CustomFieldValues'' 
    AND COLUMN_NAME = @FieldName)
 BEGIN
 print(''hee'');
 END
 ELSE
 BEGIN
 set @str=''alter table  SD_CustomFieldValues add  ''+@ColumnName+'' ''+@ColumnType+''''

     exec(@str);
	 END
END

'
GO

--
-- Create or alter trigger [DeleteCustomFldVal] on table [dbo].[SD_CustomFieldControl]
--
GO
PRINT (N'Create or alter trigger [DeleteCustomFldVal] on table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.DeleteCustomFldVal', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.DeleteCustomFldVal
    ON  dbo.SD_CustomFieldControl
    FOR DELETE
AS

Declare @ColumnName varchar(500);
Declare @FieldName varchar(500);
  SELECT  @FieldName=d.FieldValue FROM deleted d

  Declare @str nvarchar(max);
  set @ColumnName=@FieldName
  if exists(select @ColumnName from SD_CustomFieldValues)
  BEGIN
  set @str=''alter table SD_CustomFieldValues drop column ''+@ColumnName+''''
  exec(@str);
  END
  
'
GO

SET NOEXEC OFF
=======
END;
'
GO

--
-- Create or alter function [dbo].[ResolTimeBuisneInMin]
--
GO
PRINT (N'Create or alter function [dbo].[ResolTimeBuisneInMin]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ResolTimeBuisneInMin') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.ResolTimeBuisneInMin (
    @TicketCreated1 NVARCHAR(100),
    @TicketResolved1 NVARCHAR(100),
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(MAX),
    @OrgId NUMERIC(18,0)
)
RETURNS int
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);
    DECLARE @TicketCreated DATETIME;
    DECLARE @TicketResolved DATETIME;

    -- Safe conversion of input parameters to datetime
    SET @TicketCreated = TRY_CONVERT(datetime, @TicketCreated1, 120);
    SET @TicketResolved = TRY_CONVERT(datetime, @TicketResolved1, 120);

    -- Validate the conversion result


    -- Fetch holiday dates as a comma-separated string
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays 
        WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);

    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- Same-day ticket creation and resolution handling
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- First day: from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- Resolution day: from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- Full working day calculation
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    RETURN CAST(@TotalResolutionMinutes AS NVARCHAR(100));
END;
'
GO

--
-- Create or alter function [dbo].[ResolTimeBuisne]
--
GO
PRINT (N'Create or alter function [dbo].[ResolTimeBuisne]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ResolTimeBuisne') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.ResolTimeBuisne (
    @TicketCreated1 DATETIME,
    @TicketResolved1 DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId NUMERIC(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);
	    DECLARE @TicketCreated DATETIME;
    DECLARE @TicketResolved DATETIME;

    -- Safe conversion of input parameters to datetime
    SET @TicketCreated = TRY_CONVERT(datetime, @TicketCreated1, 120);
    SET @TicketResolved = TRY_CONVERT(datetime, @TicketResolved1, 120);
    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE) AND CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If ticket creation and resolution are on the same day
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, @TicketResolved);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TicketCreated = CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @TicketCreated, CAST(CAST(@TicketCreated AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME));
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TicketResolved = CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessEndTime AS DATETIME);

                    SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(CAST(@TicketResolved AS DATE) AS DATETIME) + CAST(@BusinessStartTime AS DATETIME), @TicketResolved);
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
   -- DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes  / 60);
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
      --  CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTimeInMin]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTimeInMin]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTimeInMin') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.GetTicketResolutionTimeInMin (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,

    @WorkingDays VARCHAR(max),
	@OrgID numeric(18,0)

)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100)
-- Initialize variables
DECLARE @TotalResolutionMinutes INT = 0

  DECLARE @HolidayDates VARCHAR(MAX);
SELECT @HolidayDates = (
    SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
    FROM SD_Holidays where OrgID=@OrgID
    FOR XML PATH('''')
);
-- Calculate the total elapsed time in minutes
DECLARE @ElapsedMinutes INT = DATEDIFF(MINUTE, @TicketCreated, @TicketResolved)

-- Calculate the total business minutes per day
DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime)

-- Calculate the remaining business minutes for the first day
DECLARE @RemainingBusinessMinutesFirstDay INT = 0
IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
    SET @RemainingBusinessMinutesFirstDay = @BusinessMinutesPerDay
ELSE IF CAST(@TicketCreated AS TIME) >= @BusinessEndTime
    SET @RemainingBusinessMinutesFirstDay = 0
ELSE
    SET @RemainingBusinessMinutesFirstDay =DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME),@BusinessEndTime)
--	print @RemainingBusinessMinutesFirstDay
	 
-- Calculate the total business minutes for each day until the resolution date
DECLARE @CurrentDate DATETIME = @TicketCreated
declare @counter int=0;
--------------------------------------- working under sla till resolved of ticket
WHILE @CurrentDate < @TicketResolved
BEGIN
	
    -- Check if the current day is a working day and not a holiday
  IF  EXISTS (SELECT top 1 * FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
   -- IF CHARINDEX(DATENAME(WEEKDAY, @CurrentDate), @WorkingDays) > 0
    BEGIN
--	print @CurrentDate
        IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN


           if( Cast(@TicketCreated as date)=cast(@CurrentDate as date))
			  BEGIN
			--  print @counter
					  if(Cast(@TicketCreated as date)=cast(@TicketResolved as date))
						  begin
								  set @TotalResolutionMinutes=0
							  end
					  else
							  begin
									set @TotalResolutionMinutes+=@RemainingBusinessMinutesFirstDay
										--	 print(''IN IF-- same date'')
							           --   print @TotalResolutionMinutes
								 end
				
			END
			else 
				  BEGIN
				--  print(''In else'')
				  set @TotalResolutionMinutes +=@BusinessMinutesPerDay
				  END
        END
    END

    -- Move to the next day
    SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate)
	set @counter+=1

    -- Subtract the minutes accounted for
  --  SET @ElapsedMinutes -= @BusinessMinutesPerDay
END

-- Check if the resolution day is a working day and not a holiday
IF CHARINDEX(DATENAME(WEEKDAY, @TicketResolved), @WorkingDays) > 0
BEGIN
--print(''in resolution'')
    IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @TicketResolved, 23))
    BEGIN
--	print(''in resolution2'')
	if(cast(@TicketCreated as date)=cast(@TicketResolved as date))
		BEGIN
		--	print(''in resolution4'')
		--	print CAST(@TicketResolved AS TIME) 
			 if(CAST(@TicketResolved AS TIME) >= @BusinessEndTime)
				BEGIN
				--	print(''in resolution5'')
			  DECLARE @RemainingBusinessMinutesafterwork INT =datediff(minute, CAST(@BusinessEndTime AS TIME) ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutesafterwork
				END
				IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
				BEGIN
				--	print(''in resolution5'')
					  DECLARE @Remaining INT =Datediff(MINUTE, @TicketCreated  ,@TicketResolved)
					set @TotalResolutionMinutes+= @Remaining
					--	print @Remaining
				END
		END
        -- Calculate the remaining business minutes for the resolution day
      else  IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
        BEGIN
		--	print(''in resolution3'')
            DECLARE @RemainingBusinessMinutes INT =datediff(minute, @BusinessStartTime ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutes
      
			--print(''in resol'')
			--print @TotalResolutionMinutes
        END

		
    END
END


return @TotalResolutionMinutes
END
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_new]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_new]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_new') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.GetTicketResolutionTime_new (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
	@OrgId numeric(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100)
-- Initialize variables
DECLARE @TotalResolutionMinutes INT = 0

  DECLARE @HolidayDates VARCHAR(MAX);
SELECT @HolidayDates = (
    SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
    FROM SD_Holidays where OrgID=@OrgId
    FOR XML PATH('''')
);
-- Calculate the total elapsed time in minutes
DECLARE @ElapsedMinutes INT = DATEDIFF(MINUTE, @TicketCreated, @TicketResolved)

-- Calculate the total business minutes per day
DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime)

-- Calculate the remaining business minutes for the first day
DECLARE @RemainingBusinessMinutesFirstDay INT = 0
IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
    SET @RemainingBusinessMinutesFirstDay = @BusinessMinutesPerDay
ELSE IF CAST(@TicketCreated AS TIME) >= @BusinessEndTime
    SET @RemainingBusinessMinutesFirstDay = 0
ELSE
    SET @RemainingBusinessMinutesFirstDay =DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME),@BusinessEndTime)
--	print @RemainingBusinessMinutesFirstDay
	 
-- Calculate the total business minutes for each day until the resolution date
DECLARE @CurrentDate DATETIME = @TicketCreated
declare @counter int=0;
--------------------------------------- working under sla till resolved of ticket
WHILE @CurrentDate < @TicketResolved
BEGIN
	
    -- Check if the current day is a working day and not a holiday
  IF  EXISTS (SELECT top 1 * FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
   -- IF CHARINDEX(DATENAME(WEEKDAY, @CurrentDate), @WorkingDays) > 0
    BEGIN
--	print @CurrentDate
        IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
        BEGIN

            -- Calculate the total business minutes for the current day
   --         IF @RemainingBusinessMinutesFirstDay > 0
   --         BEGIN
   --             SET @TotalResolutionMinutes += CASE
   --                 WHEN @ElapsedMinutes > @RemainingBusinessMinutesFirstDay THEN @RemainingBusinessMinutesFirstDay
   --                 ELSE @ElapsedMinutes
   --             END
			--	print(''IN if'')
			--	print(@TotalResolutionMinutes)
   --             SET @RemainingBusinessMinutesFirstDay = 0
   --         END
   --         ELSE
   --         BEGIN
			--print(''In else'')
   --             SET @TotalResolutionMinutes += CASE
   --                 WHEN @ElapsedMinutes > @BusinessMinutesPerDay THEN @BusinessMinutesPerDay
   --                 ELSE @ElapsedMinutes
			
   --             END
			--			print(@TotalResolutionMinutes)
   --         END
           if( Cast(@TicketCreated as date)=cast(@CurrentDate as date))
			  BEGIN
			--  print @counter
					  if(Cast(@TicketCreated as date)=cast(@TicketResolved as date))
						  begin
								  set @TotalResolutionMinutes=0
							  end
					  else
							  begin
									set @TotalResolutionMinutes+=@RemainingBusinessMinutesFirstDay
										--	 print(''IN IF-- same date'')
							           --   print @TotalResolutionMinutes
								 end
				
			END
			else 
				  BEGIN
				--  print(''In else'')
				  set @TotalResolutionMinutes +=@BusinessMinutesPerDay
				  END
        END
    END

    -- Move to the next day
    SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate)
	set @counter+=1

    -- Subtract the minutes accounted for
  --  SET @ElapsedMinutes -= @BusinessMinutesPerDay
END

-- Check if the resolution day is a working day and not a holiday
IF CHARINDEX(DATENAME(WEEKDAY, @TicketResolved), @WorkingDays) > 0
BEGIN
--print(''in resolution'')
    IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @TicketResolved, 23))
    BEGIN
--	print(''in resolution2'')
	if(cast(@TicketCreated as date)=cast(@TicketResolved as date))
		BEGIN
		--	print(''in resolution4'')
		--	print CAST(@TicketResolved AS TIME) 
			 if(CAST(@TicketResolved AS TIME) >= @BusinessEndTime)
				BEGIN
				--	print(''in resolution5'')
			  DECLARE @RemainingBusinessMinutesafterwork INT =datediff(minute, CAST(@BusinessEndTime AS TIME) ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutesafterwork
				END
				IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
				BEGIN
				--	print(''in resolution5'')
					  DECLARE @Remaining INT =Datediff(MINUTE, @TicketCreated  ,@TicketResolved)
					set @TotalResolutionMinutes+= @Remaining
					--	print @Remaining
				END
		END
        -- Calculate the remaining business minutes for the resolution day
      else  IF CAST(@TicketResolved AS TIME) >= @BusinessStartTime AND CAST(@TicketResolved AS TIME) <= @BusinessEndTime
        BEGIN
		--	print(''in resolution3'')
            DECLARE @RemainingBusinessMinutes INT =datediff(minute, @BusinessStartTime ,CAST(@TicketResolved AS TIME))
			set @TotalResolutionMinutes+=@RemainingBusinessMinutes
      
			--print(''in resol'')
			--print @TotalResolutionMinutes
        END

		
    END
END

-- Calculate the total resolution time
--SET @TotalResolutionMinutes += @ResolutionMinutes

-- Calculate days, hours, and minutes
DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24)
DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60
DECLARE @Minutes INT = @TotalResolutionMinutes % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '' 0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '' 0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)

return @ResolutionTime
END
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_HIREL_IN_Min]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_HIREL_IN_Min]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_HIREL_IN_Min') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.GetTicketResolutionTime_HIREL_IN_Min (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId numeric(18,0)
)
RETURNS int
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE IF CAST(@TicketCreated AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME), @BusinessEndTime);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @BusinessStartTime, CAST(@TicketResolved AS TIME));
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    --DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    --DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    --DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    ---- Format the resolution time
    --SET @ResolutionTime = CONCAT(
    --    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
    --    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
    --    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    --);

    RETURN @TotalResolutionMinutes;
END;
'
GO

--
-- Create or alter function [dbo].[GetTicketResolutionTime_HIREL]
--
GO
PRINT (N'Create or alter function [dbo].[GetTicketResolutionTime_HIREL]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetTicketResolutionTime_HIREL') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.GetTicketResolutionTime_HIREL (
    @TicketCreated DATETIME,
    @TicketResolved DATETIME,
    @BusinessStartTime TIME,
    @BusinessEndTime TIME,
    @WorkingDays VARCHAR(max),
    @OrgId numeric(18,0)
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @ResolutionTime NVARCHAR(100);
    DECLARE @TotalResolutionMinutes INT = 0;
    DECLARE @HolidayDates VARCHAR(MAX);

    -- Fetch holiday dates
    SELECT @HolidayDates = (
        SELECT CAST(HolidayDate AS NVARCHAR(500)) + '',''
        FROM SD_Holidays WHERE OrgID = @OrgId
        FOR XML PATH('''')
    );

    -- Calculate business minutes per day
    DECLARE @BusinessMinutesPerDay INT = DATEDIFF(MINUTE, @BusinessStartTime, @BusinessEndTime);
    
    -- Initialize current date
    DECLARE @CurrentDate DATETIME = @TicketCreated;

    -- Loop through each day from ticket creation to ticket resolution
    WHILE CAST(@CurrentDate AS DATE) <= CAST(@TicketResolved AS DATE)
    BEGIN
        -- Check if it''s a working day and not a holiday
        IF EXISTS (SELECT 1 FROM STRING_SPLIT(@WorkingDays, '','') WHERE value = DATENAME(dw, @CurrentDate))
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM STRING_SPLIT(@HolidayDates, '','') WHERE value = CONVERT(VARCHAR, @CurrentDate, 23))
            BEGIN
                -- Calculate working minutes for the current day
                IF CAST(@CurrentDate AS DATE) = CAST(@TicketCreated AS DATE)
                BEGIN
                    -- If it''s the first day, calculate from ticket creation time to business end time
                    IF CAST(@TicketCreated AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE IF CAST(@TicketCreated AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, CAST(@TicketCreated AS TIME), @BusinessEndTime);
                END
                ELSE IF CAST(@CurrentDate AS DATE) = CAST(@TicketResolved AS DATE)
                BEGIN
                    -- If it''s the resolution day, calculate from business start time to ticket resolution time
                    IF CAST(@TicketResolved AS TIME) < @BusinessStartTime
                        SET @TotalResolutionMinutes += 0;
                    ELSE IF CAST(@TicketResolved AS TIME) > @BusinessEndTime
                        SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                    ELSE
                        SET @TotalResolutionMinutes += DATEDIFF(MINUTE, @BusinessStartTime, CAST(@TicketResolved AS TIME));
                END
                ELSE
                BEGIN
                    -- For full working days between creation and resolution dates
                    SET @TotalResolutionMinutes += @BusinessMinutesPerDay;
                END
            END
        END

        -- Move to the next day
        SET @CurrentDate = DATEADD(DAY, 1, @CurrentDate);
    END

    -- Calculate the total resolution time in days, hours, and minutes
    DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24);
    DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60;
    DECLARE @Minutes INT = @TotalResolutionMinutes % 60;

    -- Format the resolution time
    SET @ResolutionTime = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days '' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours '' END,
        CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
    );

    RETURN @ResolutionTime;
END;
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddHoliday]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddHoliday]')
GO
IF OBJECT_ID(N'dbo.SD_spAddHoliday', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddHoliday
(
	@StatusID int = NULL,
@HolidayName varchar(50)=null,
      @HolidayDate date=null,
	@ID numeric(18,0)=NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgID numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddHoliday'')
	
	BEGIN
	INSERT INTO	SD_Holidays(ID
      ,HolidayName
      ,HolidayDate,OrgID)
	values(@ID
      ,@HolidayName
      ,@HolidayDate,@OrgID)	
	END
		if(@Option=''see'')
	
	BEGIN
select a.*,b.Org_ID,b.OrgName from	SD_Holidays a 
inner join SD_OrgMaster b
on a.OrgID=b.Org_ID
	END

		if(@Option=''UpdateHoliday'')
	
	BEGIN
	update 	SD_Holidays set HolidayName=@HolidayName
      ,HolidayDate=@HolidayDate where ID=@ID and OrgID=@OrgID
	
	END
		if(@Option=''DeleteHoliday'')
	
	BEGIN
	Delete from SD_Holidays where   ID=@ID 
	END
	if(@Option=''AddHolidayBulk'')
	
	BEGIN
	INSERT INTO	SD_Holidays(ID
      ,HolidayName
      ,HolidayDate,OrgID)
	values(@ID
      ,@HolidayName
      ,@HolidayDate,@OrgID)	
	END

	END





'
GO

--
-- Create table [dbo].[SD_HODApproval]
--
PRINT (N'Create table [dbo].[SD_HODApproval]')
GO
IF OBJECT_ID(N'dbo.SD_HODApproval', 'U') IS NULL
CREATE TABLE dbo.SD_HODApproval (
  ID int IDENTITY,
  Name nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmailID nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_History]
--
PRINT (N'Create table [dbo].[SD_History]')
GO
IF OBJECT_ID(N'dbo.SD_History', 'U') IS NULL
CREATE TABLE dbo.SD_History (
  ID int IDENTITY,
  PageName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionType nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionBy nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ActionDate datetime NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_FeedQuestions]
--
PRINT (N'Create table [dbo].[SD_FeedQuestions]')
GO
IF OBJECT_ID(N'dbo.SD_FeedQuestions', 'U') IS NULL
CREATE TABLE dbo.SD_FeedQuestions (
  QuestionId int IDENTITY,
  Question varchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Feedback]
--
PRINT (N'Create table [dbo].[SD_Feedback]')
GO
IF OBJECT_ID(N'dbo.SD_Feedback', 'U') IS NULL
CREATE TABLE dbo.SD_Feedback (
  FeedbackID int NULL,
  Feedback varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_FeedAnswers]
--
PRINT (N'Create table [dbo].[SD_FeedAnswers]')
GO
IF OBJECT_ID(N'dbo.SD_FeedAnswers', 'U') IS NULL
CREATE TABLE dbo.SD_FeedAnswers (
  ID int IDENTITY,
  FeedbackID int NULL,
  TicketID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  QuestionId int NULL,
  Answer varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterEmail varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Insertdt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[CSATsp_Details]
--
GO
PRINT (N'Create or alter procedure [dbo].[CSATsp_Details]')
GO
IF OBJECT_ID(N'dbo.CSATsp_Details', 'P') IS NULL
EXEC sp_executesql N'
			create OR ALTER procedure dbo.CSATsp_Details

			(
					@ID int =NULL,
					@QuestionId int =NULL,
					@Question_option varchar(250) =NULL,
					@Question varchar(250) =NULL,
					@Status varchar(10) =NULL,
					@FeedbackID int =NULL,
					@TicketID varchar(10)=NULL,
					@Answer varchar(10) =NULL,
					@Date_Time datetime =NULL,
					@Feedback varchar(500) =NULL,
					@Option varchar(50) =NULL,
					@smileysANS varchar(50) =NULL,

					@SubmitterName varchar(50) =NULL,
					@SubmitterEmail varchar(100) =NULL,
					@tempStr varchar(500)=null
			)

			AS

			BEGIN
			if(@Option=''CustomerValidation'')
			BEGIN

			select * from SD_FeedAnswers  where TicketID=@TicketID

			END

			if(@Option=''SelectAllFeedbacks'')
			BEGIN

			select distinct TOP 100 feedbackid,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time from [dbo].[pcv_FeedAnswers] order by feedbackid desc

			END

			if(@Option=''SelectFeedback'')
			BEGIN

			select distinct  Feedback from pcv_Feedback where  feedbackid=@FeedbackID

			END


			if(@Option=''SelectFeedbackDetail'')
			BEGIN

			select   FeedbackID as ID,TicketID,Question,Answer, FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time 
			from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on [dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId   
			where  feedbackid=@FeedbackID order by FeedbackID desc

			END

			if(@Option=''SelectAllQues'')
			BEGIN


			select * from CSAT_Questions order by QuestionId asc

			END

			if(@Option=''SelectAllQuesStatus'')
			BEGIN

			select count(Answer) as Counts,Answer ,Question from (select   FeedbackID,TicketID,Question,Answer,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time,Status from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId  and pcv_FeedQuestions.Status=''Active''   )
			 as ABC  --where Answer=''Very Good''
			group by Answer,Question

			END

			if(@Option=''SelectQues'')
			BEGIN

			select * from pcv_FeedQuestions where Status=''Active''

			END

			if(@Option=''SelectDashboardDet'')
			BEGIN

			select * from (select   distinct TicketID,kasadmin.vSDTicket.SubmitterName,pcv_FeedQuestions.QuestionId,Question,Answer,FORMAT(Date_Time, ''yyyy-MM-dd'') as Date_Time from [dbo].[pcv_FeedAnswers] join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId 
			join kasadmin.vSDTicket on  [pcv_FeedAnswers].TicketID=kasadmin.vSDTicket.TicketNumber
			  where pcv_FeedQuestions.Status=''Active''   ) as DASHBOARD
			where DASHBOARD.QuestionId=@QuestionId and Answer=@Answer  order by TicketID desc
			END

			if(@Option=''QuesInsert'')
			BEGIN

			Insert into pcv_FeedQuestions(Question,Status)values(@Question,@Status)

			END

			if(@Option=''QuesUpdate'')
			BEGIN

			Update pcv_FeedQuestions  SET Question=@Question,Status=@Status where QuestionId=@QuestionId

			END

			if(@Option=''FeedbackInsert'')
			BEGIN

			DECLARE @TotalCounts int; 
			SET @TotalCounts = (SELECT COUNT(*)  TotalCounts FROM  SD_FeedAnswers where  TicketID=@TicketID);
			

			IF(@TotalCounts=5 )
				BEGIN
					SET @tempStr=''Error: Survey already completed'';
			    RAISERROR (@tempStr, 11, 1)
						
			    END
				ELSE
				BEGIN

			INSERT INTO SD_FeedAnswers
							 ( FeedbackID,TicketID, QuestionId, Answer, SubmitterName, SubmitterEmail, Insertdt)
					   VALUES(@FeedbackID,@TicketID, @QuestionId, @Answer, @SubmitterName, @SubmitterEmail, Getdate())

				END
					
				IF NOT EXISTS (select * from SD_Feedback where FeedbackID=@FeedbackID )
				BEGIN
						insert into SD_Feedback (FeedbackID,Feedback)values(@FeedbackID,@Feedback)
				END
			END

			if(@Option=''FeedbackComment'')
			BEGIN

			INSERT INTO SD_FeedAnswers
                         ( FeedbackID,TicketID, QuestionId, Answer, SubmitterName, SubmitterEmail, Insertdt)
				   VALUES(@FeedbackID,@TicketID, @QuestionId, @Answer, @SubmitterName, @SubmitterEmail, Getdate())

			END

			if(@Option=''OptionAdd'')
			BEGIN

			Insert into pcv_FeedQuestionsOptions(QuestionId,Question_option)
			values(@QuestionId,@Question_option)

			END

			if(@Option=''OptionUpdate'')
			BEGIN

			Update pcv_FeedQuestionsOptions SET Question_option=@Question_option
			 where ID=@ID and QuestionId=@QuestionId

			END

			if(@Option=''OptionDelete'')
			BEGIN
			delete from pcv_FeedQuestionsOptions  
			where ID=@ID and QuestionId=@QuestionId and Question_option=@Question_option

			END

			if(@Option=''TicketIDValidation'')
			BEGIN
			select ref from kasadmin.SDIncident where ref=@TicketID
			
			END

			if(@Option=''FeedbackValidation'')
			BEGIN
			select TicketID from pcv_FeedAnswers where TicketID=@TicketID
			
			END

			if(@Option=''LoadSurvey'')
			BEGIN
			
				
						select QuestionId,Question from SD_FeedQuestions where Status=''Active''
			  
				
			END

			if(@Option=''FillOptions'')
			BEGIN
			SELECT   * from SD_Options where QuestionId = @QuestionId
			END

			if(@Option=''FillQuesOptions'')
			BEGIN
			select pcv_FeedQuestionsOptions.id,Question,[pcv_FeedQuestions].QuestionId,Question_option from [dbo].[pcv_FeedQuestions] join pcv_FeedQuestionsOptions on  pcv_FeedQuestionsOptions.[QuestionId] =[pcv_FeedQuestions].QuestionId where [pcv_FeedQuestions].QuestionId = @QuestionId
			END

			if(@Option=''SurveyChart'')
			BEGIN
			select  QuestionId,Question from pcv_FeedQuestions where Status=''Active''
			END
			--Survey Dashboard
			if(@Option=''SurveyPieChart'')
			BEGIN
			select  distinct Answer ,count(Answer) as Counts,Question from 
			(select   FeedbackID,TICKETID,Question,Answer,Date_Time,Status from [dbo].[pcv_FeedAnswers] 
			join[dbo].pcv_FeedQuestions 
			on[dbo].[pcv_FeedAnswers].QuestionId =[dbo].pcv_FeedQuestions.QuestionId  
			and pcv_FeedQuestions.Status = ''Active''   )as ABC 
			WHERE Question = @Question  group by Answer,Question
			END

			
END


'
GO

--
-- Create table [dbo].[SD_EsclateMaster]
--
PRINT (N'Create table [dbo].[SD_EsclateMaster]')
GO
IF OBJECT_ID(N'dbo.SD_EsclateMaster', 'U') IS NULL
CREATE TABLE dbo.SD_EsclateMaster (
  ID int IDENTITY (1456754, 1),
  EsclationLevel nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TimeForEsclatn int NULL,
  OrgRef numeric NULL,
  Status bit NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddUserEcslevel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddUserEcslevel]')
GO
IF OBJECT_ID(N'dbo.SD_spAddUserEcslevel', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddUserEcslevel
(
	@StatusID int = NULL,
@EsclationLevel nvarchar(50)=null,
      @UserName nvarchar(50)=null,
      @UserEmail nvarchar(50)=null,
      @Mobile nvarchar(50)=null,
	@ID numeric(18,0)=null,
	@TimeForEsclatn int=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgRef numeric(18,0)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddEsclationUser'')
	
	BEGIN
	INSERT INTO	SD_EsclateMaster(EsclationLevel
      ,UserName
      ,UserEmail
      ,Mobile
	  ,TimeForEsclatn,OrgRef)
	values(@EsclationLevel
      ,@UserName
      ,@UserEmail
      ,@Mobile
	  ,@TimeForEsclatn,@OrgRef)	
	END
		if(@Option=''see'')
	
	BEGIN
select a.*,b.OrgName,b.Org_ID from	SD_EsclateMaster a left join sd_orgmaster b 
on a.OrgRef=b.Org_ID
order by EsclationLevel,TimeForEsclatn asc


	END

		if(@Option=''UpdateUserEcslevel'')
	
	BEGIN
	update 	SD_EsclateMaster set 
	EsclationLevel=@EsclationLevel
      ,UserName=@UserName
      ,UserEmail=@UserEmail
      ,Mobile=@Mobile,TimeForEsclatn=@TimeForEsclatn,OrgRef=@OrgRef where ID=@ID
	END
		if(@Option=''DeleteEcslevel'')
	
	BEGIN
	delete  from 	SD_EsclateMaster
	where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_ErrorLog]
--
PRINT (N'Create table [dbo].[SD_ErrorLog]')
GO
IF OBJECT_ID(N'dbo.SD_ErrorLog', 'U') IS NULL
CREATE TABLE dbo.SD_ErrorLog (
  ID numeric NOT NULL,
  adminName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  eventTime datetime NULL,
  description varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddLogs]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddLogs]')
GO
IF OBJECT_ID(N'dbo.SD_spAddLogs', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_spAddLogs
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@eventTime datetime =NULL,
	@description varchar(2000)= NULL,
	@IsActive bit =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''InsertErrorLogs'')
	
	BEGIN
	INSERT INTO	SD_ErrorLog(ID,adminName ,eventTime,description
     )
	values(@Id,@adminName
      ,GETDATE()
      ,@description)	
	END

	END



'
GO

--
-- Create table [dbo].[SD_EmailTemplate]
--
PRINT (N'Create table [dbo].[SD_EmailTemplate]')
GO
IF OBJECT_ID(N'dbo.SD_EmailTemplate', 'U') IS NULL
CREATE TABLE dbo.SD_EmailTemplate (
  ID int IDENTITY (1583, 176),
  TemplateName nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  Summary nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBasicCode nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBody nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DefaultEmailBody nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateBodyEncode nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  ReqRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[SD_EmailBodyOther]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBodyOther]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBodyOther') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SD_EmailBodyOther
(
    @UserName nvarchar(200),
	@Otp int ,
	@TemplateName nvarchar(200),
	@OrgID numeric(18,0)

)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
Declare @TicketNumber nvarchar(max);
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(500);
	Declare @SubmitterName nvarchar(100);

   
  set @EmailBody=  (SELECT  top 1
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreationDate}'', COALESCE(@CreationDate, ''{CreationDate}'')),
                        ''{Category}'', COALESCE(ISNULL(@Category,''1900-01-01''), ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{OTP}'', COALESCE(@Otp, ''{OTP}'')),
			  ''{UserName}'', COALESCE(@UserName, ''{UserName}''))
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and OrgRef=@OrgID)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName and OrgRef=@OrgId )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter procedure [dbo].[SD_spEmailTemplate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spEmailTemplate]')
GO
IF OBJECT_ID(N'dbo.SD_spEmailTemplate', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spEmailTemplate
(
	@TemplateBodyEncode varchar(max) =NULL,
	@TemplateName varchar(100) =NULL,
	@TemplateUpdtName varchar(100) =NULL,
	@TemplateBody varchar(max) =NULL,
	@DefaultEmailBody varchar(max) =NULL,
	@OrgRef numeric(18,0) =NULL,
	@PriorityCodeRef varchar(50)=NULL,
	@ID numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Summary nvarchar(1000) = NULL,
	@ReqRef nvarchar(100)=NULL,
	@TemplateBasicCode varchar(max) =NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''GetTemplate'')
	
	BEGIN
	select distinct TemplateName from SD_EmailTemplate 	where ReqRef=@ReqRef  and OrgRef=@OrgRef
	END
	if(@Option=''GetTemplateBody'')
	
	BEGIN
	select distinct  * from SD_EmailTemplate 	 where TemplateName=@TemplateName and OrgRef=@OrgRef
	END

	if(@Option=''UpdateTemplateBody'')
	
	BEGIN
	declare @emailheader nvarchar(max);

set @emailheader=''<!DOCTYPE html>  
<html xmlns="http://www.w3.org/1999/xhtml">  
<head>      <title></title>   
<style>         
@font-face {  
font-family: "Cambria Math"; 
panose-1: 2 4 5 3 5 4 6 3 2 4;  
}    
@font-face { 
font-family: Calibri; 
panose-1: 2 15 5 2 2 2 4 3 2 4; 
}     
/* Style Definitions */  
p.MsoNormal, li.MsoNormal, div.MsoNormal {              margin: 0in;              margin-bottom: .0001pt;              font-size: 11.0pt;              font-family: "Calibri",sans-serif;          }            h1 {              mso-style-priority: 9;              mso-style-link: "Heading 1 Char";              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 24.0pt;              font-family: "Calibri",sans-serif;              font-weight: bold;          }            h4 {              mso-style-priority: 9;              mso-style-link: "Heading 4 Char";              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 12.0pt;              font-family: "Calibri",sans-serif;              font-weight: bold;          }            a:link, span.MsoHyperlink {              mso-style-priority: 99;              color: blue;              text-decoration: underline;          }            a:visited, span.MsoHyperlinkFollowed {              mso-style-priority: 99;              color: purple;              text-decoration: underline;          }            p.msonormal0, li.msonormal0, div.msonormal0 {              mso-style-name: msonormal;              mso-margin-top-alt: auto;              margin-right: 0in;              mso-margin-bottom-alt: auto;              margin-left: 0in;              font-size: 11.0pt;              font-family: "Calibri",sans-serif;          }            span.Heading1Char {              mso-style-name: "Heading 1 Char";              mso-style-priority: 9;              mso-style-link: "Heading 1";              font-family: "Calibri Light",sans-serif;              color: #2F5496;          }            span.Heading4Char {              mso-style-name: "Heading 4 Char";              mso-style-priority: 9;              mso-style-link: "Heading 4";              font-family: "Calibri Light",sans-serif;              color: #2F5496;              font-style: italic;          }            span.EmailStyle21 {              mso-style-type: personal-reply;              font-family: "Calibri",sans-serif;              color: windowtext;          }            .MsoChpDefault {              mso-style-type: export-only;              font-size: 10.0pt;          }          .TdHead{              width: 120.0pt; border: solid #CCCCCC 1.0pt;font-weight:bold;  padding: 3.75pt 7.5pt 3.75pt 7.5pt; text-align:right          }          @page WordSection1 {              size: 8.5in 11.0in;              margin: 1.0in 1.0in 1.0in 1.0in;          }            div.WordSection1 {              page: WordSection1;          }      </style>  </head> <body>@body</body></html>''
 if Exists(select * from SD_EmailTemplate where  TemplateName=@TemplateName and ReqRef=@ReqRef and OrgRef=@OrgRef)
 BEGIN
	update SD_EmailTemplate 	 set 
	TemplateBody=@TemplateBody, TemplateBodyEncode=@TemplateBodyEncode,Summary=@Summary where TemplateName=@TemplateUpdtName
 and	OrgRef=@OrgRef and ReqRef=@ReqRef;
	END
	ELSE
	BEGIN
	insert into SD_EmailTemplate (TemplateName
      ,Summary
      ,TemplateBasicCode
      ,TemplateBody
      ,DefaultEmailBody
      ,TemplateBodyEncode
      ,OrgRef,ReqRef)values(@TemplateName
      ,@Summary
      ,@emailheader
      ,@TemplateBody
      ,@DefaultEmailBody
      ,@TemplateBodyEncode
      ,@OrgRef,@ReqRef)
	END
	END

	END
	


'
GO

--
-- Create table [dbo].[SD_EmailConfig]
--
PRINT (N'Create table [dbo].[SD_EmailConfig]')
GO
IF OBJECT_ID(N'dbo.SD_EmailConfig', 'U') IS NULL
CREATE TABLE dbo.SD_EmailConfig (
  ID numeric NOT NULL,
  Hostname nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Port int NULL,
  UserName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Email nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Password nvarchar(250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Retry int NULL,
  ClientID nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientSecretKey nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TenantID nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  MailType nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DeskRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PK_SD_EmailConfig PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Department]
--
PRINT (N'Create table [dbo].[SD_Department]')
GO
IF OBJECT_ID(N'dbo.SD_Department', 'U') IS NULL
CREATE TABLE dbo.SD_Department (
  ID int IDENTITY,
  DepartmentCode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepartmentName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertDt datetime NULL,
  UpdateBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  OrgID numeric NULL,
  PRIMARY KEY CLUSTERED (DepartmentCode)
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spDepartment_Master]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDepartment_Master]')
GO
IF OBJECT_ID(N'dbo.SD_spDepartment_Master', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spDepartment_Master    
  (    
   @StateID int =NULL,    
   @DepartmentCode varchar(50) = NULL,   
   @DepartmentName varchar(50) = NULL,    
   @InsertBy numeric(18,0) =NULL,    
   @InsertDt datetime =NULL,    
   @UpdateBy numeric(18,0) =NULL,    
   @UpdateDt datetime =NULL,    
   @OrgID varchar(50)=null,    
   @IsActive bit  =NULL,  
   @ID varchar(50)  =NULL,  
   @Option varchar(50)    
  )    
  AS    
  BEGIN    
  if(@Option=''Insert'')    
       BEGIN    
    
        INSERT INTO SD_Department (DepartmentCode,DepartmentName, InsertBy, InsertDt, IsActive,OrgID)   
  VALUES (@DepartmentCode,@DepartmentName,@InsertBy, GETDATE(), ''True'',@OrgID)    
  END    
  if(@Option=''Update'')    
       BEGIN    
    
        UPDATE SD_Department SET DepartmentCode=@DepartmentCode,DepartmentName=@DepartmentName, UpdateBy=@UpdateBy, UpdateDt=GETDATE(), IsActive=''True''    
  where ID=@ID 
    
    
  END    
  if(@Option=''SelectAll'')    
       BEGIN    
    
      select a.*,b.Org_ID,b.OrgName from SD_Department a     
    
inner join SD_OrgMaster b     
on a.OrgID=b.Org_ID    
    
  END    
    
   if(@Option=''see'')    
       BEGIN    
    
 Select * from SD_Department    
where  OrgID=@OrgID    
    
  END    
  if(@Option=''Delete'')    
       BEGIN    
    
        Delete from SD_Department where ID=@ID 
    
  END    
  END    


  '
GO

--
-- Create or alter view [dbo].[SD_vUser]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vUser]')
GO
IF OBJECT_ID(N'dbo.SD_vUser', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vUser
as 
(
select a.SD_UID
      ,a.UserID
      ,a.EmpID
      ,a.UserName
      ,a.FirstName
      ,a.LastName
      ,a.EmailID
      ,a.LoginName
      ,a.Pass
      ,a.UserScope as ''UserScopeID''
      ,a.UserRole
      ,a.DepCode
      ,a.Manager_UserID
      ,a.Designation
      ,a.ContactNo
      ,a.UserRemarks
      ,a.AccountCreatnDt
      ,a.LastLoginDt
      ,a.LastPassChngDt
      ,a.LoginAttempts
      ,a.Accontlock
      ,a.InsertBy
      ,a.InsertDt
      ,a.UpdateBy
      ,a.UpdateDt
      ,a.Status
      ,a.DomainType
	  ,a.ISMfa,a.UserType 
      ,a.Org_ID,sdscop.ScopeName as ''UserScope'',ScopeDesc,sdrol.RoleName,
	  sdmfa.MFAStatus,sdmfa.SecretKey,sdloc.LocCode,sdloc.LocName,a.SDRole
	  ,sddep.DepartmentName,sdorg.OrgName,
	  a.LoginStatus,a.LoginSessionID,a.RememberISMfa, a.RememberISMfaTime,a.Serialno,a.Theme,a.ThemeModify
	  from SD_User_Master a 
left join SD_Role sdrol on a.UserRole=sdrol.RoleName
left join SD_UserScope sdscop on a.UserScope=sdscop.ScopeID
left join SD_Department sddep on a.DepCode=sddep.DepartmentCode and a.Org_ID=sddep.OrgID
left join  SD_orgmaster sdorg on sdorg.Org_ID=a.Org_ID
left join SD_Mfa sdmfa on sdmfa.UserID=a.UserID
left join SD_Location sdloc on sdloc.LocCode=a.LocCode and sdloc.OrgID=a.Org_ID 


)
'
GO

--
-- Create or alter procedure [dbo].[SD_getCustomField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_getCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_getCustomField', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_getCustomField
AS
BEGIN
select * from SD_vUser
END
'
GO

--
-- Create table [dbo].[SD_DeleteTicketLog]
--
PRINT (N'Create table [dbo].[SD_DeleteTicketLog]')
GO
IF OBJECT_ID(N'dbo.SD_DeleteTicketLog', 'U') IS NULL
CREATE TABLE dbo.SD_DeleteTicketLog (
  ID int IDENTITY (3867245, 1),
  TicketID numeric NULL,
  TicketNumber varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDStatusFK numeric NULL,
  SDCategoryFK numeric NULL,
  AssigneFK numeric NULL,
  CreationDate datetime NULL,
  SubmitterEmail nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EventDt datetime NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_DeletedTechnician]
--
PRINT (N'Create table [dbo].[SD_DeletedTechnician]')
GO
IF OBJECT_ID(N'dbo.SD_DeletedTechnician', 'U') IS NULL
CREATE TABLE dbo.SD_DeletedTechnician (
  DelTechID int IDENTITY,
  TechID int NULL,
  RefUserID numeric NULL,
  TechLoginName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  RequstTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryFK nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CreatedDt datetime NULL,
  CreatedBy nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsActive bit NULL,
  UpdatedDt datetime NULL,
  UpdatedBy varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddTechnician]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddTechnician]')
GO
IF OBJECT_ID(N'dbo.SD_spAddTechnician', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Proc dbo.SD_spAddTechnician
(
	
     @RefUserID numeric(18,0)=null
     ,@TechLoginName varchar(50)=null
     ,@RequstTypeRef varchar(50)=null
     ,@CategoryFK varchar(50)=null
	,@CreatedDt datetime =NULL
	,@CreatedBy nvarchar(50) =NULL
	,@OrgRef numeric(18,0)=NULL
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	    if(@Option=''AddTechnician'')
	
		BEGIN
		if exists (select * from SD_Technician where RefUserID=@RefUserID)
		BEGIN
		print (''hello'');
		END 
		ELSE 
		BEGIN
				INSERT INTO	SD_Technician( RefUserID ,TechLoginName
      ,RequstTypeRef
      ,CategoryFK
      ,CreatedDt
      ,CreatedBy
      ,IsActive,OrgRef)
	values(
      @RefUserID
      ,@TechLoginName
      ,@RequstTypeRef
      ,@CategoryFK
      ,GETDATE()
      ,@CreatedBy
      ,''1'',@OrgRef)	
		END
		END

    	if(@Option=''UpdateTechnician'')
	
	BEGIN
	Update SD_Technician set 
      TechLoginName=@TechLoginName
      ,RequstTypeRef=@RequstTypeRef
      ,CategoryFK=@CategoryFK
      ,UpdatedDt=GETDATE()
      ,UpdatedBy=''''
      ,IsActive=''1'',OrgRef=@OrgRef
	  where RefUserID=@RefUserID
	
	END
		if(@Option=''see'')	
		BEGIN
			select * from	SD_Technician
		END

		if(@Option=''DeleteTechnician'')
		BEGIN

		----------------------when user delete than add in backup table so that assigne ticket will visible under his mail---
		insert into SD_DeletedTechnician  ([TechID],[RefUserID],[TechLoginName] ,[RequstTypeRef],[CategoryFK],[CreatedDt]
      ,[CreatedBy],[IsActive] ,[OrgRef])
		select [TechID],[RefUserID],[TechLoginName] ,[RequstTypeRef],[CategoryFK],[CreatedDt]
      ,[CreatedBy],[IsActive] ,[OrgRef] from SD_Technician where RefUserID=@RefUserID

	  -------------------delte from technician table -----------------
			Delete from SD_Technician where RefUserID=@RefUserID
		END
	
		if(@Option=''GetTech'')
	BEGIN
	select a.*,b.Org_ID from	SD_Technician a
	inner join SD_User_Master b 
	on a.RefUserID=b.UserID 
	and a.OrgRef=b.Org_ID
	where a.OrgRef=@OrgRef
	
	END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spAddRequester]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddRequester]')
GO
IF OBJECT_ID(N'dbo.SD_spAddRequester', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_spAddRequester  
(  
@UserID numeric(18,0) =null  
  ,@EmpID nvarchar(50) =null  
      ,@UserName nvarchar(50) =null  
      ,@FirstName nvarchar(50) =null  
      ,@LastName nvarchar(50) =null  
      ,@EmailID nvarchar(50) =null  
      ,@LoginName nvarchar(50) =null  
      ,@Pass nvarchar(1000) =null  
      ,@UserScope nvarchar(50) =null  
      ,@UserRole nvarchar(50) =null  
      ,@LocCode nvarchar(50) =null  
      ,@DepCode nvarchar(50) =null  
      ,@Manager_UserID nvarchar(50) =null  
      ,@Designation nvarchar(50) =null  
      ,@ContactNo nvarchar(50) =null  
      ,@UserRemarks nvarchar(50) =null  
      ,@InsertBy  int =null  
      ,@InsertDt datetime =null  
      ,@UpdateBy nvarchar(100) =null  
      ,@UpdateDt datetime=null  
      ,@Status  varchar(10)=null  
      ,@DomainType varchar(10)=null  
      ,@Org_ID  numeric(18,0)=null  
   ,@UserRefid numeric(18,0)=null  
   ,@ReqRef varchar(50)=null  
   ,@IsTechnicianLogin int =null  
   ,@CategoryFK varchar(50)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Error varchar(200) =null out  
     
     
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequester'')  
   
 BEGIN  
 if(@IsTechnicianLogin=1)  
 BEGIN  
 INSERT INTO SD_User_Master(UserID, EmpID  
      ,UserName  
      ,FirstName  
      ,LastName  
      ,EmailID  
      ,LoginName  
      ,Pass  
      ,UserScope  
      ,UserRole  
      ,LocCode  
      ,DepCode  
      ,Manager_UserID  
      ,Designation  
      ,ContactNo  
      ,UserRemarks  
      ,Status  
      ,DomainType,Org_ID,ISMfa,InsertDt,SDRole  
      )  
 values(  
 @UserID  
,@EmpID  
      ,@UserName  
      ,@FirstName  
      ,@LastName  
      ,@EmailID  
      ,@LoginName  
      ,@Pass  
      ,@UserScope  
      ,@UserRole  
      ,@LocCode  
      ,@DepCode  
      ,''''  
      ,@Designation  
      ,@ContactNo  
      ,''''  
       
      ,''1''  
      ,@DomainType,@Org_ID,''0'',GETDATE(),@SDRole  
      )   
   SET @UserRefid=(select UserID from SD_User_Master where SD_UID=SCOPE_IDENTITY())  
   exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
      ,@RequstTypeRef=@ReqRef  
      ,@CategoryFK=@CategoryFK  
    
      ,@CreatedBy='''',@OrgRef=@Org_ID  
      insert into SD_Mfa (UserID,MFAStatus,InsertDt)values(@UserRefid,''1'',GETDATE())  
   END  
   else   
   BEGIN   
   INSERT INTO SD_User_Master(UserID, EmpID  
      ,UserName  
      ,FirstName  
      ,LastName  
      ,EmailID  
      ,LoginName  
      ,Pass  
      ,UserScope  
      ,UserRole  
      ,LocCode  
      ,DepCode  
      ,Manager_UserID  
      ,Designation  
      ,ContactNo  
      ,UserRemarks  
      ,Status  
      ,DomainType,Org_ID,ISMfa,InsertDt,SDRole  
      )  
 values(  
 @UserID  
,@EmpID  
      ,@UserName  
      ,@FirstName  
      ,@LastName  
      ,@EmailID  
      ,@LoginName  
      ,@Pass  
      ,@UserScope  
      ,@UserRole  
      ,@LocCode  
      ,@DepCode  
      ,''''  
      ,@Designation  
      ,@ContactNo  
      ,''''  
       
      ,''1''  
      ,@DomainType,@Org_ID,''0'',GETDATE(),@SDRole  
      )   
        insert into SD_Mfa (UserID,MFAStatus,InsertDt)values(@UserRefid,''1'',GETDATE())  
   END  
 END  
 if(@Option=''see'')  
   
 BEGIN  
  select * from SD_User_Master  
  
  
 END  
  
 if(@Option=''UpdateRequestorWithPass'')  
   
  BEGIN  
   if(@IsTechnicianLogin=1)  
  BEGIN  
   SET @UserRefid=@UserID  
  update  SD_User_Master set   
  EmpID=@EmpID  
    ,UserName=@UserName  
    ,FirstName=@FirstName  
    ,LastName=@LastName  
    ,EmailID=@EmailID  
    ,LoginName=@LoginName  
    ,Pass=@Pass  
    ,UserScope=@UserScope  
    ,UserRole=@UserRole  
    ,LocCode=@LocCode  
    ,DepCode=@DepCode  
    ,Manager_UserID=''''  
    ,Designation=@Designation  
    ,ContactNo=@ContactNo  
    ,UserRemarks=''''  
    ,Status=@Status  
    ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
    where UserID=@UserID  
    if EXISTS(select * from SD_Technician where RefUserID=@UserID)  
    BEGIN  
       exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''UpdateTechnician'',@TechLoginName=@LoginName  
    ,@RequstTypeRef=@ReqRef  
    ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
    END  
    else  
    BEGIn  
   exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
    ,@RequstTypeRef=@ReqRef  
    ,@CategoryFK=@CategoryFK  
    
    ,@CreatedBy='''',@OrgRef=@Org_ID  
        
    END  
  
   END  
   Else   
   BEGIN  
    update  SD_User_Master set   
  EmpID=@EmpID  
    ,UserName=@UserName  
    ,FirstName=@FirstName  
    ,LastName=@LastName  
    ,EmailID=@EmailID  
    ,LoginName=@LoginName  
    ,Pass=@Pass  
    ,UserScope=@UserScope  
    ,UserRole=@UserRole  
    ,LocCode=@LocCode  
    ,DepCode=@DepCode  
    ,Manager_UserID=@Manager_UserID  
    ,Designation=@Designation  
    ,ContactNo=@ContactNo  
    ,UserRemarks=@UserRemarks  
    ,Status=@Status  
    ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
    where UserID=@UserID  
   END  
   
  END  
  
 if(@Option=''UpdateRequestorWithoutPass'')  
   
  BEGIN  
  
   if(@IsTechnicianLogin=1)  
   BEGIN  
    SET @UserRefid=@UserID  
   update  SD_User_Master set   
   EmpID=@EmpID  
     ,UserName=@UserName  
     ,FirstName=@FirstName  
     ,LastName=@LastName  
     ,EmailID=@EmailID  
     ,LoginName=@LoginName  
       
     ,UserScope=@UserScope  
     ,UserRole=@UserRole  
     ,LocCode=@LocCode  
     ,DepCode=@DepCode  
     ,Manager_UserID=''''  
     ,Designation=@Designation  
     ,ContactNo=@ContactNo  
     ,UserRemarks=''''  
     ,Status=@Status  
     ,DomainType=@DomainType,Org_ID=@Org_ID,SDRole=@SDRole  
     where UserID=@UserID  
    
    if EXISTS(select * from SD_Technician where RefUserID=@UserID)  
     BEGIN  
        exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''UpdateTechnician'',@TechLoginName=@LoginName  
     ,@RequstTypeRef=@ReqRef  
     ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
     END  
     else  
     BEGIn  
    exec SD_spAddTechnician @RefUserID=@UserRefid,@Option=''AddTechnician'',@TechLoginName=@LoginName  
     ,@RequstTypeRef=@ReqRef  
     ,@CategoryFK=@CategoryFK,@OrgRef=@Org_ID  
    
     
        
     END  
    END  
    Else   
    BEGIN  
     update  SD_User_Master set   
   EmpID=@EmpID  
     ,UserName=@UserName  
     ,FirstName=@FirstName  
     ,LastName=@LastName  
     ,EmailID=@EmailID  
     ,LoginName=@LoginName  
     
     ,UserScope=@UserScope  
     ,UserRole=@UserRole  
     ,LocCode=@LocCode  
     ,DepCode=@DepCode  
     ,Manager_UserID=@Manager_UserID  
     ,Designation=@Designation  
     ,ContactNo=@ContactNo  
     ,UserRemarks=@UserRemarks  
     ,Status=@Status  
     ,DomainType=@DomainType,SDRole=@SDRole  
     where UserID=@UserID  
    END  
   
  END  
 if(@Option=''AddRequesterBulk'')  
   
  BEGIN  
   
    if exists (select * from SD_User_Master where EmpID=@EmpID and EmailID=@EmailID )  
  BEGIN   
 set @Error=@EmpID +''Already Exist''  
  END  
  ELSE  
  BEGIN  
  INSERT INTO SD_User_Master(UserID, EmpID  
    ,UserName  
    ,FirstName  
    ,LastName  
    ,EmailID  
    ,LoginName  
    ,Pass  
    ,UserScope  
    ,UserRole  
    ,LocCode  
    ,DepCode  
    ,Manager_UserID  
    ,Designation  
    ,ContactNo  
    ,UserRemarks  
    ,Status  
    ,DomainType,SDRole  
    )  
  values(  
  @UserID  
   ,@EmpID  
    ,@UserName  
    ,@FirstName  
    ,@LastName  
    ,@EmailID  
    ,@LoginName  
    ,@Pass  
    ,@UserScope  
    ,@UserRole  
    ,@LocCode  
    ,@DepCode  
    ,''''  
    ,@Designation  
    ,@ContactNo  
    ,''''  
       
    ,''1''  
    ,@DomainType,@SDRole  
    )   
  END  
        
    
   
  END  
 if(@Option=''DeleteRequestor'')  
   
  BEGIN  
   Delete  from  SD_User_Master  
    where  UserID=@UserID  
  
    exec SD_spAddTechnician @RefUserID=@UserID,@Option=''DeleteTechnician''  
    delete from SD_Mfa where UserID=@UserID  
  
  END  
   
 if(@Option=''AssignTechnician'')  
 BEGIN  
 select *from SD_Technician  
 END  
  
 if(@Option=''UpdatePassword'')  
 BEGIN  
 update SD_User_Master set Pass=@Pass,LastPassChngDt=GETDATE() where LoginName=@LoginName and EmailID=@EmailID  
 END  
  if(@Option=''UpdatePassFromPortal'')  
 BEGIN  
 update SD_User_Master set Pass=@Pass,LastPassChngDt=GETDATE() where LoginName=@LoginName   
 END  
 END  
  
  
  '
GO

--
-- Create or alter view [dbo].[SD_vOldnNewTech]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vOldnNewTech]')
GO
IF OBJECT_ID(N'dbo.SD_vOldnNewTech', 'V') IS NULL
EXEC sp_executesql N'

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE OR ALTER view dbo.SD_vOldnNewTech as
(
select * from
(
SELECT   [TechID],[RefUserID],[TechLoginName],[RequstTypeRef]
          ,[CategoryFK],[IsActive] ,[OrgRef]
  FROM [dbo].[SD_Technician]

  union
  SELECT   [TechID],[RefUserID],[TechLoginName],[RequstTypeRef]
          ,[CategoryFK],[IsActive] ,[OrgRef]
  FROM [dbo].[SD_DeletedTechnician]
  )alltech
  
  )
'
GO

--
-- Create table [dbo].[SD_CustomFldRole]
--
PRINT (N'Create table [dbo].[SD_CustomFldRole]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFldRole', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFldRole (
  ID int IDENTITY,
  MenuID varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuName varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  MenuStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserRole varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_CustomFieldValues]
--
PRINT (N'Create table [dbo].[SD_CustomFieldValues]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldValues', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldValues (
  ID int IDENTITY (63954211, 1),
  RequestRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddSDCustomFieldValue]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSDCustomFieldValue]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSDCustomFieldValue', 'P') IS NULL
EXEC sp_executesql N'









CREATE OR ALTER Proc dbo.SD_spAddSDCustomFieldValue
(
	
	@ColumnName nvarchar(50)=null,
	@ColumnValue nvarchar(50)=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomFieldValue'')
	
	BEGIN
	IF exists (SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = N''SD_CustomFieldValues'' and COLUMN_NAME=@ColumnName)
BEGIN
	DECLARE @doit NVARCHAR(max);
	DECLARE @ColumnName1 NVARCHAR(max);
	DECLARE @ColumnValue1 NVARCHAR(max);
	SET @ColumnName1=@ColumnName;
	SET @ColumnValue1=@ColumnValue;
set @doit = (''INSERT INTO SD_CustomFieldValues (''+@ColumnName1+'') VALUES (''''''+@ColumnValue1+'''''')'');
PRINT (@doit);
EXEC (@doit);
--INSERT INTO SD_CustomFieldValues (Location) VALUES (@ColumnValue);
	END
	END
	
		if(@Option=''see'')
	
	BEGIN
		select * from	SD_CustomFieldValues
	END

	
	END



'
GO

--
-- Create table [dbo].[SD_CustomFieldTicketValues]
--
PRINT (N'Create table [dbo].[SD_CustomFieldTicketValues]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldTicketValues', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldTicketValues (
  ID int IDENTITY,
  TicketNo nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldValue nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId numeric NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spCustomFieldPivot]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomFieldPivot]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomFieldPivot', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spCustomFieldPivot
AS
BEGIN
    DECLARE @columns NVARCHAR(MAX), @sql NVARCHAR(MAX);

    -- Get distinct fieldnames for dynamic column creation
    SELECT @columns = COALESCE(@columns + '', '', '''') + QUOTENAME(fieldname)
    FROM SD_CustomFieldTicketValues
    GROUP BY fieldname;

    -- Dynamic SQL for pivoting
    SET @sql = N''
    SELECT ticketno, '' + @columns + ''
    FROM (
        SELECT ticketno, fieldname, fieldvalue
        FROM SD_CustomFieldTicketValues
    ) AS SourceTable
    PIVOT (
        MAX(fieldvalue)
        FOR fieldname IN ('' + @columns + '')
    ) AS PivotTable;'';

    -- Execute the dynamic SQL
    EXEC sp_executesql @sql;
END;
'
GO

--
-- Create or alter view [dbo].[vResponsetime]
--
GO
PRINT (N'Create or alter view [dbo].[vResponsetime]')
GO
IF OBJECT_ID(N'dbo.vResponsetime', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.vResponsetime
as
select CASE
 WHEN FieldValue IS NOT NULL THEN
 Datediff(MINUTE, creationDateTime, cast( FieldValue as datetime))
ELSE
Datediff(MINUTE, creationDateTime, expectedDueDate)
 END AS response_time ,
 a.Ticketref
 from SDIncident a
left join SD_CustomFieldTicketValues b on a.Ticketref=b.TicketNo and a.organizationFK=b.OrgID
where FieldName like ''%openend%''


		'
GO

--
-- Create or alter view [dbo].[SD_vTickCustomField]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vTickCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_vTickCustomField', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view  dbo.SD_vTickCustomField

as
(
select *
from 
(
  select TicketNo, Fieldname, FieldValue
  from SD_CustomFieldTicketValues 
) src
pivot
(
  max(FieldValue)
   FOR Fieldname IN (Access_Type,Customer_Name)
) piv)
'
GO

--
-- Create or alter view [dbo].[SD_vGetTotalHoldDuration]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vGetTotalHoldDuration]')
GO
IF OBJECT_ID(N'dbo.SD_vGetTotalHoldDuration', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.SD_vGetTotalHoldDuration
as
(

SELECT  TicketNo, HoldStart, HoldEnd, ISNULL( DATEDIFF(minute, HoldStart, HoldEnd) ,0) 

 

AS TotalHoldMin,OrgId
FROM 
(
    SELECT TicketNo,FieldName,FieldValue,OrgId FROM SD_CustomFieldTicketValues WITH(NOLOCK)
     where FieldName in (''HoldStart'',''HoldEnd'')
  and FieldValue is not null
) AS SourceTable
PIVOT 
(
    MAX(FieldValue) FOR FieldName IN ([HoldStart], [HoldEnd])
) AS PivotTable );
'
GO

--
-- Create table [dbo].[SD_CustomFieldControl]
--
PRINT (N'Create table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.SD_CustomFieldControl', 'U') IS NULL
CREATE TABLE dbo.SD_CustomFieldControl (
  ID numeric NOT NULL,
  Deskref varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldID nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldValue nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldMode nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status bit NULL,
  IsFieldReq bit NULL,
  FieldScope nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TextboxCount int NULL,
  DropDownCount int NULL,
  ReqFldValidID varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef numeric NULL,
  SDRole nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spSDCustomField_View]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDCustomField_View]')
GO
IF OBJECT_ID(N'dbo.SD_spSDCustomField_View', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spSDCustomField_View
(
	@StatusID int = NULL,
  	@DeskRef varchar(50) =NULL,
    @TicketNo varchar(100)=Null,
    @FieldName varchar(100)=null,
    @FieldValue varchar(100)=null,
	@ID numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@OrgRef numeric(18,0)=NULL,
	@SDRole nvarchar(100)=NULL,
	@OrgId numeric(18,0)=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''ShowOddTxtCustomFld'')
	
	BEGIN
	Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 1 
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	and Deskref=@DeskRef and OrgRef=@OrgId

--and OrgRef=@OrgRef
	END
	
	if(@Option=''ShowOddDdlCustomFld'')
	
	BEGIN
	Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 1  and
( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	and Deskref=@DeskRef and OrgRef=@OrgId


--and OrgRef=@OrgRef
	END
		if(@Option=''ShowOddTxtCustomFldTech'')
	
			BEGIN
				Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.* ,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
				oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 1 and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''
					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
				if(@Option=''ShowOddDDlCustomFldTech'')
	
			BEGIN
		Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.* ,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 1  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END


			if(@Option=''ShowEvenTxtCustomFld'')
	
	BEGIN
Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 0 
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''	
and Deskref=@DeskRef and OrgRef=@OrgId
--and OrgRef=@OrgRef
	END
	
	if(@Option=''ShowEvenDdlCustomFld'')
	
	BEGIN
Select * from(select ROW_NUMBER() over(order By ID) as RowNUM,* from	SD_CustomFieldControl)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 0
and ( FieldScope=''ForUser'' or FieldScope=''ForBoth'') and Status=''1''
and Deskref=@DeskRef and OrgRef=@OrgId
--and OrgRef=@OrgRef
	END
		if(@Option=''ShowEvenTxtCustomFldTech'')
	
			BEGIN
			Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,UserRole as''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName)
oddSDCust where FieldID like ''%txt%'' and (RowNUM % 2) = 0  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
				if(@Option=''ShowEvenDDlCustomFldTech'')
	
			BEGIN
		Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,UserRole as ''SDRoleP'' from	SD_CustomFieldControl a 
		inner join sd_customFldRole b on a.FieldValue=b.MenuName
		)
oddSDCust where FieldID like ''%ddl%'' and (RowNUM % 2) = 0  and ( FieldScope=''ForTechnician'' or FieldScope=''ForBoth'') and Status=''1''

					and Deskref=@DeskRef and SDRoleP=@SDRole and OrgRef=@OrgId
			--and OrgRef=@OrgRef
			END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomFieldCntl]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomFieldCntl]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomFieldCntl', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER   Proc dbo.SD_spCustomFieldCntl  
(  
 @StatusID int = NULL  
 ,@DeskRef varchar(50) =NULL  
 ,@ColumnName varchar(50)=null  
 ,@OrgDeskRef numeric(18,0) =NULl  
 ,@ReqFldValidID varchar(200)=null  
 , @TicketRef varchar(200)=null  
 ,@ID numeric(18,0)=null  
     , @FieldID  varchar(200) = null  
      ,@FieldName  text = null  
      ,@FieldMode  text= null  
      ,@Status bit  = null  
      ,@IsFieldReq  bit = null  
      ,@FieldScope  varchar(50) = null  
      ,@TextboxCount int = null  
      ,@DropDownCount int  = null  
   ,@FieldType varchar(50)=null  
   ,@OrgRef numeric(18,0)=null  
   ,@FieldValue nvarchar(200)=null  
 ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddCustomField'')  
  
 BEGIN  
 INSERT INTO SD_CustomFieldControl(ID  
 ,[Deskref]  
      ,[FieldID]  
      ,[FieldName]  
      ,[FieldMode]  
      ,[Status]  
      ,[IsFieldReq]  
      ,[FieldScope]  
      ,[TextboxCount]  
      ,[DropDownCount]  
   ,[ReqFldValidID],[FieldType],[OrgRef],FieldValue)  
 values(@ID  
 ,@DeskRef  
      ,@FieldID  
      ,@FieldName  
      ,@FieldMode  
      ,@Status  
      ,@IsFieldReq  
      ,@FieldScope  
      ,@TextboxCount  
      ,@DropDownCount  
   ,''rfv''+@FieldID ,@FieldType,@OrgRef,@FieldValue)   
 END  
  if(@Option=''see'')  
   
 BEGIN  
Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,b.OrgName,b.Org_ID  from SD_CustomFieldControl a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
)  
oddSDCust   
  
 END  
  
  if(@Option=''CustomerWsie'')  
   
 BEGIN  
Select * from(select ROW_NUMBER() over(order By a.ID) as RowNUM,a.*,b.OrgName,b.Org_ID  from SD_CustomFieldControl a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
)  
oddSDCust  where  Org_ID=@OrgRef  
  
 END  
  if(@Option=''UpdateCustomField'')  
   
 BEGIN  
 update  SD_CustomFieldControl set   
   DeskRef=@DeskRef  
  
     
      ,Status=@Status  
      ,IsFieldReq=@IsFieldReq  
      ,FieldScope=@FieldScope  
     ,OrgRef=@OrgRef  
 where ID=@ID   
 END  
  if(@Option=''GetCustomFldVal'')  
   
 BEGIN  
Declare @ColName varchar(50)=@ColumnName;  
Declare @str varchar(max);  
set @str= ''Select distinct ''+@ColName+'' from  SD_CustomFieldValues where ''+@ColName+'' is not null ''  
 exec(@str);  
 END  
  
  if(@Option=''DeleteCustomField'')  
   
 BEGIN  
Delete from SD_CustomFieldControl where ID=@ID and Deskref=@DeskRef and OrgRef=@OrgRef  
  
 END  
  if(@Option=''TicketWiseCustomField'')  
   
 BEGIN  
Declare @CustFieldName varchar(50)=@ColumnName;  
Declare @TicketNumber varchar(50)=@TicketRef;  
Declare @OrgID numeric(18,0)=Convert(numeric(18,0),@OrgRef);  
--Declare @str1 varchar(max);  
--set @str1= ''select fieldvalue from SD_CustomFieldTicketValues where ticketno=''''''+@TicketNumber+'''''' and fieldname=''''''+@CustFieldName+''''''''  
-- exec(@str1);  
 DECLARE @sql NVARCHAR(MAX);  
  
SET @sql = ''SELECT fieldvalue FROM SD_CustomFieldTicketValues WHERE ticketno = @TicketNumber AND fieldname = @CustFieldName AND OrgID = @OrgID'';  
  
EXEC sp_executesql @sql,   
     N''@TicketNumber NVARCHAR(50), @CustFieldName NVARCHAR(50), @OrgID numeric(18,0)'',   
     @TicketNumber, @CustFieldName, @OrgID;  
  
 END  
 END  
  
  
  
   
'
GO

--
-- Create or alter procedure [dbo].[SD_spCreateCustomField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCreateCustomField]')
GO
IF OBJECT_ID(N'dbo.SD_spCreateCustomField', 'P') IS NULL
EXEC sp_executesql N'







CREATE OR ALTER Proc dbo.SD_spCreateCustomField
(
	

       @Ticketref nvarchar(100)=null
   ,@Desk nvarchar(100)=null
   ,@OrgId numeric(18,0)=null
   	  ,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomField'')
	
	BEGIN
	declare   @FieldName nvarchar(max)=null   
  --(select distinct @FieldName =FieldName from SD_CustomFieldControl)
insert into SD_CustomFieldTicketValues (TicketNo,FieldName,OrgId)
select @Ticketref,FieldValue,OrgRef from SD_CustomFieldControl  where Deskref=@Desk  and OrgRef=@OrgId


	END
		
	
	END


'
GO

--
-- Create table [dbo].[SD_CoverageSchedule]
--
PRINT (N'Create table [dbo].[SD_CoverageSchedule]')
GO
IF OBJECT_ID(N'dbo.SD_CoverageSchedule', 'U') IS NULL
CREATE TABLE dbo.SD_CoverageSchedule (
  ID numeric NULL,
  ScdhuleName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DaysCovered nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HoursCovered nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BeginHour time NULL,
  EndHour time NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spAddCoverageSch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddCoverageSch]')
GO
IF OBJECT_ID(N'dbo.SD_spAddCoverageSch', 'P') IS NULL
EXEC sp_executesql N'










CREATE OR ALTER Proc dbo.SD_spAddCoverageSch
(
	@ID numeric(18,0)=null
      ,@ScdhuleName nvarchar(50)=null
      ,@DaysCovered nvarchar(max)=null
      ,@HoursCovered nvarchar(200)=null
      ,@BeginHour time(7)=null
      ,@EndHour time(7)=null
	
	,@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddDeskCvrgSch'')
	
	BEGIN
	INSERT INTO	SD_CoverageSchedule(ID
      
      ,ScdhuleName
      ,DaysCovered
      ,HoursCovered
      ,BeginHour
      ,EndHour)
	values(@ID
      ,@ScdhuleName
      ,@DaysCovered
      ,@HoursCovered
      ,@BeginHour
      ,@EndHour)	
	END
		if(@Option=''see'')
	
	BEGIN
select * from	SD_CoverageSchedule
	END

		if(@Option=''UpdateDeskCvrgSch'')
	
	BEGIN
	update 	SD_CoverageSchedule set 

    ScdhuleName=@ScdhuleName
      ,DaysCovered=@DaysCovered
      ,HoursCovered=@HoursCovered
      ,BeginHour=@BeginHour
      ,EndHour=@EndHour
	 where ID=@ID
	END
		if(@Option=''DeleteDeskCvrgSch'')
	
	BEGIN
	Delete  from 	SD_CoverageSchedule
 where ID=@ID
	END
	END



'
GO

--
-- Create table [dbo].[SD_CloudTickDetails]
--
PRINT (N'Create table [dbo].[SD_CloudTickDetails]')
GO
IF OBJECT_ID(N'dbo.SD_CloudTickDetails', 'U') IS NULL
CREATE TABLE dbo.SD_CloudTickDetails (
  ID int IDENTITY,
  TicketRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Agentguid numeric NULL,
  UserEmail nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  AccountID nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Permisssions nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DurationFrom datetime NULL,
  DurationTo datetime NULL,
  EmailChangeReason nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TicketForSelf nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgID numeric NULL,
  UserEmpCode nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SerialNo nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spCloudTickDetails1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCloudTickDetails1]')
GO
IF OBJECT_ID(N'dbo.SD_spCloudTickDetails1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spCloudTickDetails1    
(    
 @StatusID int = NULL,    
   @TicketRef nvarchar(100)=null,    
      @Agentguid numeric(18,0)=null,    
      @UserEmail nvarchar(100)=null,    
      @AccountID varchar(500)=null,    
      @Permisssions nvarchar(500)=null,    
      @DurationFrom datetime =null,    
      @DurationTo  datetime=null,    
 @ID numeric(18,0)=null,    
 @EmailChangeReason nvarchar(max)=null,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @OrgRef numeric(18,0)=NULL,    
  @TicketForSelf nvarchar(100)=null,    
  @SerialNo nvarchar(100)=null,    
 @UserEmpCode nvarchar(50)=null,    
       
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddTickDetails'')    
     
 BEGIN    
insert into SD_CloudTickDetails ( TicketRef    
      ,Agentguid    
      ,UserEmail    
      ,AccountID    
      ,Permisssions    
      ,DurationFrom    
      ,DurationTo,EmailChangeReason,SerialNo, OrgID) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@AccountID    
      ,@Permisssions    
      ,@DurationFrom    
      ,@DurationTo,@EmailChangeReason, @SerialNo, @OrgRef)    
 END    
    
 if(@Option=''AddTickImsplDetails'')    
     
 BEGIN    
  insert into SD_CloudTickDetails ( TicketRef    
    ,Agentguid    
   ,UserEmail              
       ,EmailChangeReason    
    ,TicketForSelf    
    ,UserEmpCode    
    ,OrgID,SerialNo    
    ) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@EmailChangeReason    
   ,@TicketForSelf    
   ,@UserEmpCode    
   ,@OrgRef,@SerialNo    
   )    
 END    
    
    
    
 END    
    
    
     
'
GO

--
-- Create or alter procedure [dbo].[SD_spCloudTickDetails]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCloudTickDetails]')
GO
IF OBJECT_ID(N'dbo.SD_spCloudTickDetails', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spCloudTickDetails    
(    
 @StatusID int = NULL,    
   @TicketRef nvarchar(100)=null,    
      @Agentguid numeric(18,0)=null,    
      @UserEmail nvarchar(100)=null,    
      @AccountID varchar(500)=null,    
      @Permisssions nvarchar(500)=null,    
      @DurationFrom datetime =null,    
      @DurationTo  datetime=null,    
 @ID numeric(18,0)=null,    
 @EmailChangeReason nvarchar(max)=null,    
 @InsertBy int =NULL,    
 @InsertDt datetime =NULL,    
 @UpdateBy int =NULL,    
 @UpdateDt datetime =NULL,    
 @Status nvarchar(10) = NULL,    
 @OrgRef numeric(18,0)=NULL,    
  @TicketForSelf nvarchar(100)=null,    
  @SerialNo nvarchar(100)=null,    
 @UserEmpCode nvarchar(50)=null,    
       
 @Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddTickDetails'')    
     
 BEGIN    
insert into SD_CloudTickDetails ( TicketRef    
      ,Agentguid    
     ,SerialNo, OrgID) values(@TicketRef    
      ,@Agentguid ,   
      @SerialNo, @OrgRef)    
 END    
    
 if(@Option=''AddTickImsplDetails'')    
     
 BEGIN    
  insert into SD_CloudTickDetails ( TicketRef    
    ,Agentguid    
   ,UserEmail              
       ,EmailChangeReason    
    ,TicketForSelf    
    ,UserEmpCode    
    ,OrgID,SerialNo    
    ) values(@TicketRef    
      ,@Agentguid    
      ,@UserEmail    
      ,@EmailChangeReason    
   ,@TicketForSelf    
   ,@UserEmpCode    
   ,@OrgRef,@SerialNo    
   )    
 END    
    
    
    
 END    
    
    
     
'
GO

--
-- Create table [dbo].[SD_ChangeType]
--
PRINT (N'Create table [dbo].[SD_ChangeType]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeType', 'U') IS NULL
CREATE TABLE dbo.SD_ChangeType (
  id numeric NULL,
  ChangeTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ChangeTypeDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spChangeType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spChangeType]')
GO
IF OBJECT_ID(N'dbo.SD_spChangeType', 'P') IS NULL
EXEC sp_executesql N'  
  
  
  
  
  
create OR ALTER Proc dbo.SD_spChangeType  
(  
 @StatusID int = NULL,  
 @ChangeTypeRef varchar(50) =NULL,  
 @ChangeTypeDef varchar(1000) =NULL,  
 @OrgRef varchar(50) =NULL,  
 @InsertBy int =NULL,  
 @ReqPrefix varchar(3)=null,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
   
 @ID numeric(18,0)=NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequestType'')  
   
 BEGIN  
   
 INSERT INTO SD_ChangeType(ID,ChangeTypeRef,ChangeTypeDef,OrgRef)values(@ID,@ChangeTypeRef,@ChangeTypeDef,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_ChangeType a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
 END  
  
 if(@Option=''UpdateRequestType'')  
   
 BEGIN  
 update SD_ChangeType set ChangeTypeRef=@ChangeTypeRef,ChangeTypeDef=@ChangeTypeDef,OrgRef=@OrgRef where id=@ID   
 END  
 if(@Option=''DelRequestType'')  
   
 BEGIN  
  Delete from SD_ChangeType  where id=@ID   
 END  
 END  
  
  
'
GO

--
-- Create table [dbo].[SD_ChangeReasonType]
--
PRINT (N'Create table [dbo].[SD_ChangeReasonType]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeReasonType', 'U') IS NULL
CREATE TABLE dbo.SD_ChangeReasonType (
  id numeric NULL,
  ReasonTypeRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  ReasonDef nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgRef nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spReasonType]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spReasonType]')
GO
IF OBJECT_ID(N'dbo.SD_spReasonType', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER Proc dbo.SD_spReasonType  
(  
 @StatusID int = NULL,  
 @ReasonTypeRef varchar(50) =NULL,  
 @ReasonDef varchar(1000) =NULL,  
 @OrgRef varchar(50) =NULL,  
 @InsertBy int =NULL,  
 @ReqPrefix varchar(3)=null,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
   
 @ID numeric(18,0)=NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddRequestType'')  
   
 BEGIN  
   
 INSERT INTO SD_ChangeReasonType(ID,ReasonTypeRef,ReasonDef,OrgRef)values(@ID,@ReasonTypeRef,@ReasonDef,@OrgRef)   
  
 END  
  if(@Option=''see'')  
  
 BEGIN  
select a.*,b.OrgName,b.Org_ID from SD_ChangeReasonType a left join sd_orgmaster b   
on a.OrgRef=b.Org_ID  
 END  
  
 if(@Option=''UpdateRequestType'')  
   
 BEGIN  
 update SD_ChangeReasonType set ReasonTypeRef=@ReasonTypeRef,ReasonDef=@ReasonDef,OrgRef=@OrgRef where id=@ID   
 END  
 if(@Option=''DelRequestType'')  
   
 BEGIN  
  Delete from SD_ChangeReasonType  where id=@ID   
 END  
 END  
'
GO

--
-- Create table [dbo].[SD_CategorySLA]
--
PRINT (N'Create table [dbo].[SD_CategorySLA]')
GO
IF OBJECT_ID(N'dbo.SD_CategorySLA', 'U') IS NULL
CREATE TABLE dbo.SD_CategorySLA (
  ID int IDENTITY,
  DeskRef nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ParentCategoryRef nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseTime int NULL,
  ResolutionTime int NULL,
  OrgID numeric NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Category_FullPath]
--
PRINT (N'Create table [dbo].[SD_Category_FullPath]')
GO
IF OBJECT_ID(N'dbo.SD_Category_FullPath', 'U') IS NULL
CREATE TABLE dbo.SD_Category_FullPath (
  id int IDENTITY,
  sdCategoryFK numeric(26) NOT NULL,
  CategoryLevel int NULL,
  CategoryPath varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[SD_Category]
--
PRINT (N'Create table [dbo].[SD_Category]')
GO
IF OBJECT_ID(N'dbo.SD_Category', 'U') IS NULL
CREATE TABLE dbo.SD_Category (
  ID numeric(26) NOT NULL,
  DeskRef nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Categoryref varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  CategoryCodeRef varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  rowDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sdCategoryFK numeric(26) NULL,
  OrgDeskRef numeric NULL,
  inUse bit NOT NULL,
  partitionid int NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[fnGetCategoryFullPathForPartition]
--
GO
PRINT (N'Create or alter function [dbo].[fnGetCategoryFullPathForPartition]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fnGetCategoryFullPathForPartition') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.fnGetCategoryFullPathForPartition 
(
	@PartitionId NUMERIC(26,0),
	@OrgId numeric(18,0)
)

RETURNS @CategoryParents TABLE
 (
  id numeric(26,0),
  sdCategoryFK numeric(26,0),
  Categoryref varchar(100),
  CategoryCodeRef varchar(100),
  [Level] int,
 
  CategoryPath varchar(650)
 )
 AS
 BEGIN
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], categoryPath) 
	AS 
		( 
		SELECT id, sdCategoryFK, Categoryref, CategoryCodeRef, 1 AS [Level], CAST(c.CategoryCodeRef AS varchar(1000)) ''CategoryPath''
		FROM SD_Category c  
		WHERE c.partitionid = ''1'' and OrgDeskRef=@OrgId and c.sdCategoryFK is null

		UNION ALL 

		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1, CAST(ch.CategoryPath+'' - ''+c.CategoryCodeRef AS varchar(1000))
		FROM SD_Category c 
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
		) 
	
	INSERT INTO @CategoryParents
		SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level],  categoryPath
		FROM Hierarchy 
		ORDER BY [LEVEL], CategoryCodeRef
		
	RETURN 
	
END	
'
GO

--
-- Create or alter function [dbo].[fnGetCategoryFullPathForDesk]
--
GO
PRINT (N'Create or alter function [dbo].[fnGetCategoryFullPathForDesk]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fnGetCategoryFullPathForDesk') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.fnGetCategoryFullPathForDesk 
(
	@DeskREF VARCHAR(100), 
	@OrgId numeric(18,0),
	@PartitionId NUMERIC(26,0)
)

RETURNS @CategoryParents TABLE
 (
  id numeric(26,0),
    sdCategoryFK numeric(26,0),
  Categoryref varchar(100),
  CategoryCodeRef varchar(100),
  [Level] int,
  Processed bit, 
  CategoryPath varchar(650),

  inUse bit 
   
 )
 AS
 BEGIN
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], categoryPath, inUse) 
	AS 
		( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, CategoryCodeRef, 1 AS [Level], CAST(c.CategoryCodeRef AS varchar(1000)) ''CategoryPath'', inUse 
		FROM [dbo].[SD_Category] c 
		--WITH (INDEX(IX_SDCategory_orgServDeskDefnFK), NOLOCK)
		--JOIN [kasadmin].[orgServDeskDefn] o  WITH (NOLOCK) ON c.orgServDeskDefnFK = o.id
		WHERE c.partitionid = @PartitionId and c.Deskref = @DeskREF and c.OrgDeskRef=@OrgId  and c.sdCategoryFK is null

		UNION ALL 

		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1, CAST(ch.CategoryPath+'' - ''+c.CategoryCodeRef AS varchar(1000)), c.inUse
		FROM [dbo].[SD_Category] c --WITH (INDEX(IX_SD_Category_sdCategoryFK), NOLOCK)
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
		) 

	INSERT INTO @CategoryParents
		SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], 0, categoryPath, inUse
		FROM Hierarchy 
		ORDER BY [LEVEL], CategoryCodeRef
	 		
	RETURN 	
END
'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryPathByRef]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryPathByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryPathByRef') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryPathByRef 
(
	@Categoryref varchar(100), 
	@PartitionId numeric(26,0)
)
RETURNS varchar(650)
AS
BEGIN
	
	DECLARE @Id numeric(26,0)
	DECLARE @CategoryPath varchar(650)
	DECLARE @CategoryParents TABLE
	(
		id numeric(26,0),
		sdCategoryFK numeric(26,0),
		Categoryref varchar(100),
		CategoryCodeRef varchar(100),
		[Level] int,
		Processed bit
	);
	
	WITH Hierarchy(id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Categoryref
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, c.CategoryCodeRef, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, sdCategoryFK, Categoryref, CategoryCodeRef, [Level], 0
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	IF (SELECT COUNT(1) FROM @CategoryParents) = 1
	BEGIN
		SELECT @CategoryPath = CategoryCodeRef
		FROM @CategoryParents
	END
	ELSE
	BEGIN
		SELECT @CategoryPath = ''('' + CategoryCodeRef + '')''
		FROM @CategoryParents
		WHERE Categoryref = @Categoryref
		
		WHILE (SELECT COUNT(1) FROM @CategoryParents WHERE Processed = 0) > 0 
		BEGIN 
			SELECT TOP 1 @Id = Id, @CategoryPath = @CategoryPath + '' - '' + CategoryCodeRef
			FROM @CategoryParents
			WHERE Processed = 0
			AND [Level] = (SELECT MAX([Level]) FROM @CategoryParents WHERE Processed = 0)
			
			UPDATE @CategoryParents SET Processed = 1 WHERE Id = @Id
		END
	END
	
	RETURN @CategoryPath
	
END

--SELECT [dbo].[fn_GetCategoryPathByRef](''KnowledgeBase||Hardware'', 1)
'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryParents]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryParents]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryParents') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryParents 
(
@ChildCategoryId numeric(26,0), 
@PartitionId NUMERIC(26,0)
)
RETURNS @CategoryParents TABLE
(
	id numeric(26,0),
	ref varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, sdCategoryFK, ref, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.id = @ChildCategoryId
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, ref, [Level] 
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	RETURN 
	
END

--SELECT * FROM [kasadmin].[fn_GetCategoryParents](114041267388519, 1)
'
GO

--
-- Create or alter procedure [dbo].[SD_GetUpdateTicketCategory]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_GetUpdateTicketCategory]')
GO
IF OBJECT_ID(N'dbo.SD_GetUpdateTicketCategory', 'P') IS NULL
EXEC sp_executesql N'








CREATE OR ALTER Proc dbo.SD_GetUpdateTicketCategory
(
   @CategoryID numeric(18,0)=null,
   @RowID int=null,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	IF(@Option=''GetUpdateTicket'')
	BEGIN
select * from (	SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,
* FROM [dbo].[fn_GetCategoryParents](@CategoryID, 1)
) tab where
Row_Num=@RowID
order by Level desc
END
	END



'
GO

--
-- Create or alter function [dbo].[fn_GetCategoryChildrenByRef]
--
GO
PRINT (N'Create or alter function [dbo].[fn_GetCategoryChildrenByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.fn_GetCategoryChildrenByRef') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.fn_GetCategoryChildrenByRef 
(
@Categoryref varchar(100), 
@PartitionId NUMERIC(26,0),
@OrgId numeric(18,0)
)
RETURNS @CategoryChildren TABLE
(
	id numeric(26,0),
	Categoryref varchar(100),
	CategoryCodeRef varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, Categoryref, CategoryCodeRef,[Level]) 
	AS 
	( 
		SELECT id, Categoryref,CategoryCodeRef, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Categoryref
		AND partitionid = @PartitionId
		and OrgDeskRef=@OrgId
		UNION ALL 
		SELECT c.id, c.Categoryref,c.CategoryCodeRef, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.sdCategoryFK = ch.id 
	) 
	
	INSERT INTO @CategoryChildren
	SELECT DISTINCT id, Categoryref, CategoryCodeRef,[Level]
	FROM Hierarchy
	ORDER BY [Level]
	
	RETURN
	
END

--SELECT * FROM [dbo].[fn_GetCategoryChildrenByRef](''Incident||Hardware'', 1) where level=''2''

'
GO

--
-- Create or alter function [dbo].[dbo.[fn_GetCategoryParentsByRef]
--
GO
PRINT (N'Create or alter function [dbo].[dbo.[fn_GetCategoryParentsByRef]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.[dbo.[fn_GetCategoryParentsByRef]') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.[dbo.[fn_GetCategoryParentsByRef] 
(
@Ref varchar(100), 
@PartitionId NUMERIC(26,0)
)
RETURNS @CategoryParents TABLE
(
	id numeric(26,0),
	ref varchar(100),
	[Level] int
)
AS
BEGIN

	WITH Hierarchy(id, sdCategoryFK, ref, [Level]) 
	AS 
	( 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, 1 AS [Level]
		FROM [dbo].[SD_Category] c 
		WHERE c.Categoryref = @Ref
		AND partitionid = @PartitionId
		UNION ALL 
		SELECT c.id, c.sdCategoryFK, c.Categoryref, ch.[Level] + 1 
		FROM [dbo].[SD_Category] c 
		INNER JOIN Hierarchy ch 
		ON c.id = ch.sdCategoryFK 
	) 
	
	INSERT INTO @CategoryParents
	SELECT DISTINCT id, ref, [Level] 
	FROM Hierarchy 
	ORDER BY [LEVEL]
	
	RETURN 
	
END

--SELECT * FROM [kasadmin].[fn_GetCategoryParentsByRef](''724495334748409'', 1)
'
GO

--
-- Create or alter procedure [dbo].[SP_getDashboardData_Old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getDashboardData_Old]')
GO
IF OBJECT_ID(N'dbo.SP_getDashboardData_Old', 'P') IS NULL
EXEC sp_executesql N'    
CREATE OR ALTER PROCEDURE dbo.SP_getDashboardData_Old    
(    
    @ReqType Varchar(50) = null,    
    @Category varchar(50) = null,    
    @frmDate DateTime = null,    
    @toDate DateTime = null,    
    @UserID varchar(50) = null,    
    @Orgid varchar(100) = null    
)    
AS    
BEGIN    
    -- Adjust Date Conditions    
    DECLARE @EffectiveFromDate DateTime = CASE     
                                            WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE() - 7    
                                            ELSE @frmDate     
                                          END    
    DECLARE @EffectiveToDate DateTime = CASE     
                                          WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE()    
                                          ELSE @toDate     
                                        END    
        
    -- Main Dashboard Query    
    SELECT   distinct  
        COUNT(Ticketref) AS TotalTickets,     
        COUNT(CASE WHEN StageCodeRef = ''Open'' THEN Ticketref END) AS OpenTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Hold'' THEN Ticketref END) AS HoldTickets,    
        COUNT(CASE WHEN StageCodeRef = ''WIP'' THEN Ticketref END) AS WIPTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Closed'' THEN Ticketref END) AS ClosedTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Resolved'' THEN Ticketref END) AS ResolvedTickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S1'' THEN Ticketref END) AS S1Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S2'' THEN Ticketref END) AS S2Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S3'' THEN Ticketref END) AS S3Tickets,    
        COUNT(CASE WHEN PriorityCodeRef = ''High'' THEN Ticketref END) AS HighPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Medium'' THEN Ticketref END) AS MediumPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Low'' THEN Ticketref END) AS LowPriority    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Stage st WITH(NOLOCK) ON s.sdStageFK = st.ID    
    LEFT JOIN SD_Severity sv WITH(NOLOCK) ON s.sdSeverityFK = sv.ID    
    LEFT JOIN SD_Priority sp WITH(NOLOCK) ON s.sdPriorityFK = sp.ID    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END;    
    
    -- Day-wise Ticket Data    
    SELECT   distinct  
        CAST(creationDateTime AS DATE) AS TicketDate,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
     -- AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
    GROUP BY CAST(creationDateTime AS DATE)    
    ORDER BY TicketDate;    
    
    -- Location-wise Ticket Data    
    SELECT   distinct  
        s.location LocName,     
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    --LEFT JOIN SD_Location loc WITH(NOLOCK) ON s.location = loc.LocCode    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND s.location IS NOT NULL    
    GROUP BY s.location    
    ORDER BY s.location;    
    
    -- Category-wise Ticket Data    
    SELECT   distinct  
        CategoryCodeRef AS Category,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    LEFT JOIN SD_Category sc WITH(NOLOCK) ON s.sdCategoryFK = sc.ID    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND s.sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN s.sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND CategoryCodeRef IS NOT NULL    
    GROUP BY CategoryCodeRef    
    ORDER BY CategoryCodeRef;    
    
    -- Technician-wise Ticket Data    
    SELECT   distinct  
        UserName AS Technician,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND UserName IS NOT NULL    
    GROUP BY UserName    
    ORDER BY UserName;    
 --exec SP_getDashboardData_old @frmDate=''2024-01-01'',@toDate=''2024-09-21'',@ReqType=''0'',@Category=''0'',@UserID='''',@Orgid=''''    
END '
GO

--
-- Create or alter procedure [dbo].[SP_getDashboardData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getDashboardData]')
GO
IF OBJECT_ID(N'dbo.SP_getDashboardData', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_getDashboardData    
(    
    @ReqType Varchar(50) = null,    
    @Category varchar(50) = null,    
    @frmDate DateTime = null,    
    @toDate DateTime = null,    
    @UserID varchar(50) = null,
	@SubmitterEmail varchar(200)=null,
    @Orgid varchar(100) = null    
)    
AS    
BEGIN    
    DECLARE @EffectiveFromDate DateTime = CASE     
                                            WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE() - 7    
                                            ELSE @frmDate     
                                          END    
    DECLARE @EffectiveToDate DateTime = CASE     
                                          WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN GETDATE()    
                                          ELSE @toDate     
                                        END 
    SELECT   distinct  
        COUNT(Ticketref) AS TotalTickets,     
        COUNT(CASE WHEN StageCodeRef = ''Open'' THEN Ticketref END) AS OpenTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Hold'' THEN Ticketref END) AS HoldTickets,    
        COUNT(CASE WHEN StageCodeRef = ''WIP'' THEN Ticketref END) AS WIPTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Closed'' THEN Ticketref END) AS ClosedTickets,    
        COUNT(CASE WHEN StageCodeRef = ''Resolved'' THEN Ticketref END) AS ResolvedTickets,    
		COUNT(CASE WHEN StageCodeRef Like ''%Awaiting%'' THEN Ticketref END) AS ApprovalPending,    
		COUNT(CASE WHEN StageCodeRef Like ''%Approved%'' THEN Ticketref END) AS Approved,  
		COUNT(CASE WHEN StageCodeRef Like ''%Rejected%'' THEN Ticketref END) AS Rejected, 
        COUNT(CASE WHEN Serveritycoderef = ''S1'' THEN Ticketref END) AS S1Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S2'' THEN Ticketref END) AS S2Tickets,    
        COUNT(CASE WHEN Serveritycoderef = ''S3'' THEN Ticketref END) AS S3Tickets,    
        COUNT(CASE WHEN PriorityCodeRef = ''High'' THEN Ticketref END) AS HighPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Medium'' THEN Ticketref END) AS MediumPriority,    
        COUNT(CASE WHEN PriorityCodeRef = ''Low'' THEN Ticketref END) AS LowPriority    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Stage st WITH(NOLOCK) ON s.sdStageFK = st.ID    
    LEFT JOIN SD_Severity sv WITH(NOLOCK) ON s.sdSeverityFK = sv.ID    
    LEFT JOIN SD_Priority sp WITH(NOLOCK) ON s.sdPriorityFK = sp.ID    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID  
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END 
	  AND s.submitterEmailAddr=CASE WHEN ISNULL(@SubmitterEmail, '''') = '''' THEN s.submitterEmailAddr ELSE @SubmitterEmail END 
	   AND ( @UserID = ''0'' OR (@UserID = '''' AND se.RefUserID IS NULL) 
        OR (se.RefUserID = @UserID) 
		)


    -- Day-wise Ticket Data    
    SELECT   distinct  
        CAST(creationDateTime AS DATE) AS TicketDate,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID   
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
     -- AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
    GROUP BY CAST(creationDateTime AS DATE)    
    ORDER BY TicketDate;    
    
    -- Location-wise Ticket Data    
    SELECT   distinct  
        s.location LocName,     
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    --LEFT JOIN SD_Location loc WITH(NOLOCK) ON s.location = loc.LocCode    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      --AND su.UserID = CASE WHEN ISNULL(@UserID, '''') = '''' THEN su.UserID ELSE @UserID END    
      AND s.location IS NOT NULL    
    GROUP BY s.location    
    ORDER BY s.location;    
    
    -- Category-wise Ticket Data    
    SELECT   distinct  
        CategoryCodeRef AS Category,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    --LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    LEFT JOIN SD_Category sc WITH(NOLOCK) ON s.sdCategoryFK = sc.ID    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND s.sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN s.sdCategoryFK ELSE @Category END    
       AND ( @UserID = ''0'' OR (@UserID = '''' AND se.RefUserID IS NULL) 
        OR (se.RefUserID = @UserID) 
		)   
      AND CategoryCodeRef IS NOT NULL    
    GROUP BY CategoryCodeRef    
    ORDER BY CategoryCodeRef;    
    
    -- Technician-wise Ticket Data    
    SELECT   distinct  
        UserName AS Technician,    
        COUNT(Ticketref) AS TotalTickets    
    FROM SDIncident s WITH(NOLOCK)    
    LEFT JOIN SD_Technician se WITH(NOLOCK) ON s.assigneeParticipantFK = se.TechID    
    LEFT JOIN SD_User_Master su WITH(NOLOCK) ON se.TechLoginName = su.LoginName    
    WHERE organizationFK = CASE WHEN ISNULL(@Orgid, '''') = '''' THEN organizationFK ELSE @Orgid END    
      AND CAST(creationDateTime AS DATE) BETWEEN @EffectiveFromDate AND @EffectiveToDate    
      AND orgServDeskDefnFK = CASE WHEN ISNULL(@ReqType, ''0'') = ''0'' THEN orgServDeskDefnFK ELSE @ReqType END    
      AND sdCategoryFK = CASE WHEN ISNULL(@Category, ''0'') = ''0'' THEN sdCategoryFK ELSE @Category END    
      AND su.UserID = CASE WHEN ISNULL(@UserID, ''0'') = ''0'' THEN su.UserID ELSE @UserID END    
      AND UserName IS NOT NULL    
    GROUP BY UserName    
    ORDER BY UserName;    
 --exec SP_getDashboardData @frmDate=''2024-09-30'',@toDate=''2024-10-31'',@ReqType=''0'',@Category=''0'',@UserID=''0'',@Orgid=''''    
END 


'
GO

--
-- Create or alter procedure [dbo].[SD_spServDeskDefn]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spServDeskDefn]')
GO
IF OBJECT_ID(N'dbo.SD_spServDeskDefn', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spServDeskDefn  
(  
 @id numeric (26, 0) = NULL,  
 @Deskref varchar (100) = NULL,  
 @partitionid numeric (26, 0) = NULL,  
 @DeskDesc varchar (80) =NULL,   
 @sdPrefix varchar (32)= NULL,   
 @sdStageFK numeric (26, 0)= NULL,  
 @sdStatusFK numeric (26, 0) =NULL,  
 @sdPriorityFK numeric (26, 0)= NULL,  
 @sdSeverityFK numeric (26, 0)= NULL,  
 @sdSolutionTypeFK numeric (26, 0)= NULL,  
 @sdCategoryFK numeric (26, 0)= NULL,   
 @templateName varchar (256)=NULL,  
 @sdRolePermissionFK numeric (26, 0) =NULL,   
 @sdCategoryRef nvarchar(50)=null,  
 @autoArchiveTime int   =NULL,  
 @SLA varchar(50)=null,  
 @CoverageSch varchar(50)=null,  
 @OrgFk numeric(18,0)=NULL,
 @Error varchar(200)=NULL OUTPUT,
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddServDeskDefn'')  
   
 BEGIN  
 set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef)  
 if not exists(select * from SD_ServDeskDefn where Deskref=@Deskref and OrgFk= @OrgFk)
 begin
 INSERT INTO SD_ServDeskDefn( id   
      , Deskref   
      , partitionid   
      , DeskDesc   
      , sdPrefix   
      , sdStageFK   
      , sdStatusFK   
      , sdPriorityFK   
      , sdSeverityFK   
    ,sdSolutionTypeFK  
      , sdCategoryFK   
      , templateName   
      
      , autoArchiveTime,SLA,CoverageSch ,OrgFk)  
 values(@id   
      ,@Deskref   
      ,''1''  
      ,@DeskDesc   
      ,@sdPrefix   
      ,@sdStageFK   
      ,@sdStatusFK   
      ,@sdPriorityFK   
      ,@sdSeverityFK   
      ,@sdSolutionTypeFK  
      ,@sdCategoryFK   
      ,@templateName   
   
      ,@autoArchiveTime ,@SLA,@CoverageSch,@OrgFk)   
  
   insert into SD_TicketIncrementRef(ReqRef,ReqPrefix,LastUpdatedID,OrgRef)values(@Deskref,@sdPrefix,''0000000'',@OrgFk)
   end
   else 
   begin
   SET @Error=''Desk Already Configured for this Organisation !''
   end
 END  
  if(@Option=''see'')  
   
 BEGIN  
select * from SD_ServDeskDefn  
 END  
  
  if(@Option=''UpdateServDeskDefn'')  
   
 BEGIN  
  set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef)  
 update  SD_ServDeskDefn set   
   
       Deskref =@Deskref  
      , partitionid =''1''  
      , DeskDesc =@DeskDesc  
      , sdPrefix =@sdPrefix  
      , sdStageFK =@sdStageFK  
      , sdStatusFK =@sdStatusFK  
      , sdPriorityFK =@sdPriorityFK  
      , sdSeverityFK =@sdSeverityFK  
      , sdSolutionTypeFK =@sdSolutionTypeFK  
      , sdCategoryFK =@sdCategoryFK  
   --   , templateName =@templateName  
    --  , sdRolePermissionFK =@sdRolePermissionFK  
      , autoArchiveTime =@autoArchiveTime  
   ,SLA=@SLA  
   ,CoverageSch=@CoverageSch,OrgFk=@OrgFk  
   where id=@id  
 END  
  if(@Option=''DeleteServDeskDefn'')  
   
 BEGIN  
 Delete  from  SD_ServDeskDefn  
  where id=@id  
 END  
 END  
  
  
  
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddCategory]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddCategory]')
GO
IF OBJECT_ID(N'dbo.SD_spAddCategory', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spAddCategory  
(  
 @ID numeric(26,0) = NULL,  
 @DeskRef varchar(5000) =NULL,  
 @Categoryref varchar(5000) =NULL,  
 @rowDesc varchar(1000) =NULL,  
 @OrgDeskRef numeric(18,0) =NULL,  
 @CategoryCodeRef varchar(1000)=NULL,  
 @sdCategoryFK numeric(26,0)=NULL,  
 @sdParentCategoryFK numeric(26,0)=NULL,  
 @RefID  varchar(200)=NULL,  
 @CategoryLevel int=NULL,  
 @inUse bit =null,  
 @InsertBy int =NULL,  
 @InsertDt datetime =NULL,  
 @UpdateBy int =NULL,  
 @UpdateDt datetime =NULL,  
 @Status nvarchar(10) = NULL,  
 @CategoryUpdateCodeRef varchar(1000)=NULL,  
 @CategoryUpdateref varchar(1000) =NULL,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddCategory'')  
   
  BEGIN  
    INSERT INTO SD_Category( ID  
      ,DeskRef  
      ,Categoryref  
      ,CategoryCodeRef  
      ,rowDesc  
      ,sdCategoryFK  
      ,partitionid  
      ,inUse,OrgDeskRef  
      )  
    values(@ID,@DeskRef,@Categoryref,@CategoryCodeRef,@rowDesc,@sdCategoryFK,''1'',''1'',@OrgDeskRef)  
  
    Insert into SD_Category_FullPath( sdCategoryFK  
      ,CategoryLevel  
      ,CategoryPath)Values(@ID,@CategoryLevel,@Categoryref)  
   
  END  
 if(@Option=''AddChildCategory'')  
   
   BEGIN  
 set @sdParentCategoryFK=(Select top 1 ID  from SD_Category where Categoryref=@RefID)  
     INSERT INTO SD_Category( ID  
       ,DeskRef  
       ,Categoryref  
       ,CategoryCodeRef  
       ,rowDesc  
       ,sdCategoryFK  
       ,partitionid  
       ,inUse,OrgDeskRef  
       )  
     values(@ID,@DeskRef,@Categoryref,@CategoryCodeRef,@rowDesc,@sdParentCategoryFK,''1'',''1'',@OrgDeskRef)  
      
     Insert into SD_Category_FullPath( sdCategoryFK  
       ,CategoryLevel  
       ,CategoryPath)Values(@ID,@CategoryLevel,@Categoryref)  
   
 END  
  
 if(@Option=''see'')  
   
  BEGIN  
   select * from SD_Category  
   --select * from SD_Category_FullPath  
  END  
 if(@Option=''FillParentCategory'')  
   
  BEGIN  
   select * from SD_Category  
  
  END  
 if(@Option=''UpdateCategory'')  
 BEGIN  
 declare @SD_CategoryFK numeric(18,0);  
 set @SD_CategoryFK=(select id from SD_Category where Categoryref=@CategoryUpdateref)  
  update SD_Category set CategoryCodeRef=@CategoryCodeRef,Categoryref=@Categoryref  
  where Categoryref=@CategoryUpdateref and DeskRef=@DeskRef  
  and OrgDeskRef=@OrgDeskRef  
  update SD_Category   
set Categoryref=REPLACE(Categoryref,@CategoryUpdateref,@Categoryref)  
  
  update SD_Category_FullPath set CategoryPath=@Categoryref where sdCategoryFK=@SD_CategoryFK  
  update SD_Category_FullPath set CategoryPath=REPLACE(CategoryPath,@CategoryUpdateref,@Categoryref)  
 END  
  
   if(@Option=''CheckDupliactePrentCategory'')  
  BEGIN
  if exists(select * from SD_Category where DeskRef=@ID and Categoryref=@DeskRef and CategoryCodeRef=@Categoryref and rowDesc=@CategoryCodeRef and
	sdCategoryFK=@sdCategoryFK and partitionid=''1'' and inUse=''1'' and OrgDeskRef=@OrgDeskRef) begin select ''True'' as [Type] end
  END
   
 END  
  
    
  
'
GO

--
-- Create or alter view [dbo].[vSDTicket_cloud]
--
GO
PRINT (N'Create or alter view [dbo].[vSDTicket_cloud]')
GO
IF OBJECT_ID(N'dbo.vSDTicket_cloud', 'V') IS NULL
EXEC sp_executesql N'



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE OR ALTER view  dbo.vSDTicket_cloud
AS
(
select distinct SDINC.id,
SDReq.ReqTypeRef as''ServiceDesk'',
SDINC.Ticketref as ''TicketNumber'',
SDINC.TicketSummary as ''Summary'',
SDINC.partitionid,
SDINC.categoryFullText as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDINC.creationDateTime as ''CreationDate'',

SDINC.TicketDesc as ''Description'',
SDINC.submitterType as ''SubmitterType'',
SDINC.submitterName as ''SubmitterName'',
SDINC.submitterEmailAddr as ''SubmitterEmail'',
SDINC.submitterPhone as ''SubmitterPhone'',
SDINC.sourceType as ''SourceType'',
SDINC.expectedDueDate as ''DueDate'',
SDINC.SubmitterID,
SDINC.sdCategoryFK,
SDINC.sdStatusFK,
SDINC.sdSeverityFK,
SDINC.sdPriorityFK,sdinc.assigneeParticipantFK,
SDtech.TechLoginName,
SDINC.previousStageFK,
SDINC.actualResolutionDate as ''ExpectedResolutionDt'',
SDINC.closedDateTime as ''ClosedDate'',
SDSever.ResponseTime,
SDSever.ResolutionTime,
Agentguid
      ,UserEmail
      ,AccountID
      ,Permisssions
      ,DurationFrom
      ,DurationTo
	  ,EmailChangeReason
	  ,sdv_Cust.Access_Type
	  ,sdv_Cust.Customer_Name
	  ,SDINC.organizationFK as ''OrgId''



from 

SDIncident  SDINC left outer join 
SD_Category SDCat  on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Priority SDPrio on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever on SDINC.sdSeverityFK=SDSever.ID left outer join
SD_RequestType SDReq on SDINC.orgServDeskDefnFK=SDReq.id  left outer join
SD_Technician SDtech on SDINC.assigneeParticipantFK=SDtech.TechID  left outer join

SD_CloudTickDetails sdc on sdc.TicketRef=SDINC.Ticketref left outer join

SD_vTickCustomField sdv_Cust on  sdv_Cust.TicketNo=SDINC.Ticketref
)
'
GO

--
-- Create or alter function [dbo].[SD_EmailSubject]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailSubject]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailSubject') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SD_EmailSubject
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OrgId numeric(18,0)
	
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailSubject nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(100);
	Declare @SubmitterName nvarchar(100);
	declare @Assignee nvarchar(200);
	declare @ApproverLevel nvarchar(200);
	declare @AccountID nvarchar(200);
	declare @CustomerName nvarchar(200);
	declare @AccessType nvarchar(200);
  
  declare @Desk nvarchar(100);
   select @Desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=Cast(ISNULL(CreationDate,0) as nvarchar(20)) ,@AccountID=AccountID,
  @CustomerName=Customer_Name,@AccessType=Access_Type
 
   from vSDTicket_cloud  
   
   
   where TicketNumber=@TicketNumber  and OrgId=@OrgId
   set @ApproverLevel=@OtherParam
  set @EmailSubject= 

  (SELECT  top 1
    
	Replace( 
    Replace( 
	Replace(
	Replace( 
	Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        Summary, 
                                       ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			 ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),	
			  ''{AccountID}'', COALESCE(@AccountID, ''{AccountID}'')),
			   ''{AccessType}'', COALESCE(@AccessType, ''{AccessType}'')),
			    ''{CustomerName}'', COALESCE(@CustomerName, ''{CustomerName}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}'')) AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
    RETURN  @EmailSubject

END
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody_Cloud_old]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody_Cloud_old]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody_Cloud_old') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.SD_EmailBody_Cloud_old
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OtherParam2 nvarchar(200)
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
	Declare @AccountID nvarchar(200);
	Declare @CustomerName nvarchar(200);
	Declare @AccessType nvarchar(200);
	Declare @Assignee nvarchar(100);
	Declare @ApproverLevel nvarchar(200);

   select @Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=CreationDate,@AccountID=AccountID ,
  @CustomerName=Customer_Name,@AccessType=Access_Type,@Assignee=TechLoginName
 
   from vSDTicket_cloud where TicketNumber=@TicketNumber 
    set @ApproverLevel=@OtherParam

  set @EmailBody=  (SELECT 
   Replace(
  Replace(
  Replace(
   Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),
			   ''{Account}'', COALESCE(@AccountID,''{Account}'')),
			   ''{AccessType}'', COALESCE(@AccessType, ''{AccessType}'')),
			    ''{CustomerName}'', COALESCE(@CustomerName, ''{CustomerName}'')),
			    ''{Approver}'', COALESCE(@OtherParam2, ''{Approver}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter view [dbo].[vSDTicket]
--
GO
PRINT (N'Create or alter view [dbo].[vSDTicket]')
GO
IF OBJECT_ID(N'dbo.vSDTicket', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view  dbo.vSDTicket
AS
(
select distinct SDINC.id,
SDReq.ReqTypeRef as''ServiceDesk'',
SDINC.Ticketref as ''TicketNumber'',
SDINC.TicketSummary as ''Summary'',
SDINC.partitionid,

SDINC.categoryFullText as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDINC.creationDateTime as ''CreationDate'',

SDINC.TicketDesc as ''Description'',
SDINC.submitterType as ''SubmitterType'',
SDINC.submitterName as ''SubmitterName'',
SDINC.submitterEmailAddr as ''SubmitterEmail'',
SDINC.submitterPhone as ''SubmitterPhone'',
SDINC.sourceType as ''SourceType'',
SDINC.expectedDueDate as ''DueDate'',
SDINC.SubmitterID,
SDINC.sdCategoryFK,
SDINC.sdStatusFK,
SDINC.sdSeverityFK,
SDINC.sdPriorityFK,sdinc.assigneeParticipantFK,
SDtech.TechLoginName,
SDINC.previousStageFK,
SDINC.actualResolutionDate as ''ExpectedResolutionDt'',
SDINC.expectedDueDate as ''ExpectedResponseDt'',
SDINC.closedDateTime as ''ClosedDate'',
SDSever.ResponseTime,
SDSever.ResolutionTime,
SDINC.location,
sdinc.Department,
SDINC.sdStageFK,
SDStag.StageCodeRef as ''Stage'',
SDResol.ResolutionCodeRef as ''Resolution'',
SDINC.sdSolutionTypeFK,
SDINC.solutionNote,
SDINC.TickResolvedDt as ResolutionDt,
SDINC.organizationFK as OrgId,
SDStat.StatusColorCode as StatusColorCode




from 

SDIncident  SDINC  with(Nolock) left outer join 
SD_Category SDCat   with(Nolock) on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat  with(Nolock) on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Stage  SDStag  with(Nolock) on SDINC.sdStageFK=SDStag.ID  left outer join
SD_Priority SDPrio  with(Nolock) on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever  with(Nolock) on SDINC.sdSeverityFK=SDSever.ID left outer join
SD_RequestType SDReq  with(Nolock) on SDINC.orgServDeskDefnFK=SDReq.id  left outer join
SD_vOldnNewTech SDtech  with(Nolock) on SDINC.assigneeParticipantFK=SDtech.TechID  left outer join
SD_DeletedTechnician SDtech1  with(Nolock) on SDINC.assigneeParticipantFK=SDtech1.TechID  left outer join
SD_Resolution SDResol  with(Nolock) on SDINC.sdSolutionTypeFK=SDResol.ID


)
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody_Cloud]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody_Cloud]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody_Cloud') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

CREATE OR ALTER FUNCTION dbo.SD_EmailBody_Cloud
(
    @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OtherParam2 nvarchar(200),
	@OrgId numeric(18,0)
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
		Declare @ResolutionDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
	Declare @AccountID nvarchar(200);
	Declare @CustomerName nvarchar(200);
	Declare @AccessType nvarchar(200);
	Declare @Assignee nvarchar(100);
	Declare @ApproverLevel nvarchar(200);
	Declare @ApproverName nvarchar(200);
declare @Desk nvarchar(100);


 select @desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=Cast(ISNULL(CreationDate,0) as nvarchar(20)) ,
  @Assignee=TechLoginName,@ResolutionDate=Cast(ISNULL(ResolutionDt,0) as nvarchar(20)) 
 
   from vSDTicket where TicketNumber=@TicketNumber  and OrgId=@OrgId
    set @ApproverLevel=@OtherParam
	set @ApproverName=@OtherParam2
   set @EmailBody=  (SELECT  top 1
    Replace(
    Replace(
  Replace(
    Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),
			''{ResolvedDt}'', COALESCE(@ResolutionDate, ''{ResolvedDt}'')),			
			''{Approver}'', COALESCE(@ApproverName, ''{Approver}'')),
			''{Remarks}'', COALESCE(@OtherParam, ''{Remarks}'')),
			''{OrgId}'', COALESCE(@OrgId, ''{OrgId}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select top 1 Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId )
    RETURN  @EmailBodyFinal

END
'
GO

--
-- Create or alter function [dbo].[SD_EmailBody]
--
GO
PRINT (N'Create or alter function [dbo].[SD_EmailBody]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SD_EmailBody') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.SD_EmailBody
(
  @TicketNumber nvarchar(200),
	@TemplateName nvarchar(200),
	@OtherParam nvarchar(200),
	@OrgId numeric(18,0)
	
)
RETURNS varchar(max) -- or whatever length you need
AS
BEGIN
    Declare @EmailBody nvarchar(max);
	Declare @Summary nvarchar(1000);
	Declare @Category nvarchar(1000);
	Declare @Priority nvarchar(1000);
	Declare @Status nvarchar(1000);
	Declare @Severity nvarchar(1000);
	Declare @CreationDate nvarchar(20);
	Declare @SubmitterName nvarchar(100);
		Declare @Assignee nvarchar(100);
		declare @ApproverLevel nvarchar(200);
		declare @AccountID nvarchar(200);
		declare @AccountID1 nvarchar(200);
	declare @CustomerName nvarchar(200);
	declare @AccessType nvarchar(200);
	declare @Desk nvarchar(100);
		declare @ticknote nvarchar(max);
		declare @TickResolvedDt nvarchar(30);

   select @desk=ServiceDesk,@Summary=Summary,@Category=Category,@Priority=Priority,@Status=Status,@Severity=Severity,
  @SubmitterName=SubmitterName,@CreationDate=CreationDate ,@TickResolvedDt=ResolutionDt
  ,@Assignee=TechLoginName
 
   from vSDTicket where TicketNumber=@TicketNumber and OrgID=@OrgId
    set @ApproverLevel=@OtherParam
		
set @ticknote=(select top 1 EngineerNote from SD_TicketNotes where Ticketref=@TicketNumber order by EditedDt desc)



  set @EmailBody=  (SELECT top 1
    Replace(
    Replace(
  Replace(
  Replace(
    Replace(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(
									 REPLACE(
                                        TemplateBody, 
                                        ''{TicketNumber}'', COALESCE(@TicketNumber, ''{TicketNumber}'')),
                                    ''{Summary}'', COALESCE(@Summary, ''{Summary}'')),
                                ''{SubmitterName}'', COALESCE(@SubmitterName, ''{SubmitterName}'')),
                            ''{CreatedDt}'', COALESCE(@CreationDate, ''{CreatedDt}'')),
                        ''{Category}'', COALESCE(@Category, ''{Category}'')),
                    ''{Status}'', COALESCE(@Status, ''{Status}'')),
                ''{Priority}'', COALESCE(@Priority, ''{Priority}'')),
            ''{Severity}'', COALESCE(@Severity, ''{Severity}'')),
			 ''{Assignee}'', COALESCE(@Assignee, ''{Assignee}'')),
			  ''{ApproverLevel}'', COALESCE(@ApproverLevel, ''{ApproverLevel}'')),		
			    ''{ResolvedDt}'', COALESCE(@TickResolvedDt, ''{ResolvedDt}'')),		
			  ''{Notes}'', COALESCE(@ticknote, ''{Notes}'')),
			    ''{OrgID}'', COALESCE(@OrgId, ''{OrgID}'')),
			  ''{EscalationLevel}'', COALESCE(@OtherParam, ''{EscalationLevel}''))
			
			AS ModifiedTemplate
FROM sd_emailtemplate where TemplateName=@TemplateName and ReqRef=@Desk and OrgRef=@OrgId)
declare @EmailBodyFinal nvarchar(max);
set @EmailBodyFinal=(select top 1 Replace(TemplateBasicCode,''@body'',@emailbody) from SD_EmailTemplate where TemplateName=@TemplateName  and ReqRef=@Desk and OrgRef=@OrgId)
    RETURN  @EmailBodyFinal

END

'
GO

--
-- Create or alter procedure [dbo].[sp_TicketAutoClosedStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_TicketAutoClosedStatus]')
GO
IF OBJECT_ID(N'dbo.sp_TicketAutoClosedStatus', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER PROCEDURE dbo.sp_TicketAutoClosedStatus
(
@TicketID numeric(18,0)=NULL
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
				declare @OrgId numeric(18,0);
				declare @ServiceDesk nvarchar(100);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,ResolutionDt,GETDATE()) as ''EscMin'',OrgId,ServiceDesk--,@Summary=Summary		
  from vSDTicket where (Status =''Resolved'' ) --and ServiceDesk =''Incident''
  and DATEDIFF(DAY,ResolutionDt,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId,@ServiceDesk

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  declare @sdStatusFk numeric(18,0);
	    declare @sdStageFk numeric(18,0);
		  declare @sdPrevStageFk numeric(18,0);
		  declare @organizationFK numeric(18,0);
	   set @sdStatusFk =(select top 1 id from SD_Status where StatusCodeRef like ''%closed%'' and DeskRef=@ServiceDesk and OrgDeskRef=@OrgId)
	  	  set @sdStageFk =(select top 1 id from SD_Stage where StageCodeRef like ''%closed%'' and DeskRef=@ServiceDesk and OrgDeskRef=@OrgId)
		  set @sdPrevStageFk=(select sdStageFK from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
	--  set @organizationFK=(select organizationFK from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
	
	
	update SDIncident set sdStatusFK=@sdStatusFk ,sdStageFK=@sdStageFk,previousStageFK=@sdPrevStageFk,closedDateTime=DATEADD(DAY,1,TickResolvedDt),EditedBy=''System'' 
	where Ticketref=@TicketNumber and organizationFK=@OrgId

	 exec  SD_spAddTicketNotes @Ticketref=@TicketNumber,@sdStatusFK=@sdStatusFK,@NoteDesc=''Auto Change'',@EdityBy=''System'',@Option=''AddNotes'',@organizationFK=@OrgId
 
			 
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  
			  FETCH NEXT FROM @MyCursor 
			   INTO @TicketID,@TicketNumber,@EscMin,@OrgId,@ServiceDesk
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END


'
GO

--
-- Create or alter procedure [dbo].[sp_TicketAutoClosed]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_TicketAutoClosed]')
GO
IF OBJECT_ID(N'dbo.sp_TicketAutoClosed', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER PROCEDURE dbo.sp_TicketAutoClosed
(
@TicketID numeric(18,0)=NULL
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
declare @Desk nvarchar(100);
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(DAY,ResolutionDt,GETDATE()) as ''EscMin'',ServiceDesk--,@Summary=Summary		
  from vSDTicket where (Status=''Resolved'') and ServiceDesk =''Incident''
and datediff(day,ResolutionDt,GETDATE())>=1
and ResolutionDt is not null

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@Desk

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	
-------------- if record doesn''t exist , this will make esclation upto 1st level
declare @sdclosedStageFk numeric(18,0);
declare @sdclosedStatusFk numeric(18,0);
declare @sdresolvedFk numeric(18,0);
set @sdclosedStatusFk=(select ID from SD_Status where StatusCodeRef like ''%closed%''
and DeskRef=@Desk)
set @sdresolvedFk=(select ID from SD_Status where StatusCodeRef like ''%resolved%''
and DeskRef=@Desk)
set @sdclosedstageFk=(select ID from SD_Stage where StageCodeRef like ''%closed%''
and DeskRef=@Desk)
	update SDIncident set sdStageFK=@sdclosedStageFk,sdStatusFK=@sdclosedStatusFk,previousStageFK=@sdresolvedFk 
,closedDateTime=DATEADD(DAY,1,TickResolvedDt) where 
 Ticketref=@TicketNumber and datediff(day,TickResolvedDt,GETDATE())>=1

declare  @TicketNotes nvarchar(max);
		set @TicketNotes= CONCAT( ''<p>Auto Generated : Previous Status was'' ,''Resolved'','' Now '',''Closed'',''<br/> status was updated by : '',''System'',''<br/>'')

							
									INSERT INTO	SD_TicketNotes(TicketID
											  ,Ticketref
											  ,EdityBy
											  ,EditedDt
											  ,NoteDesc,organizationFK,EngineerNote)
											values(@TicketID
											  ,@TicketNumber
											  ,''System''
											  ,getdate()
											  ,@TicketNotes,''523843837'',@TicketNotes)	
	    
			  FETCH NEXT FROM @MyCursor 
			    INTO @TicketID,@TicketNumber,@EscMin,@Desk
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[SP_Getdata]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_Getdata]')
GO
IF OBJECT_ID(N'dbo.SP_Getdata', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_Getdata(          
@agentguid varchar(50)=null,        
@ReqType varchar(50)=null,      
@frmdate varchar(20)=null,      
@Todate varchar(20)=null,     
@option varchar(50)=null,    
@ServiceDesk varchar(50)=null,    
@Status varchar(50)=null,    
@Msg varchar(50) Output        
)          
AS          
BEGIN        
if(@option = ''TicketDetailsDeptWise'')    
BEGIN       
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',        
     v.ClosedDate from         
     vSDTicket v         
     where  ServiceDesk= case when ISNULL(@ServiceDesk,''0'')=''0'' then ServiceDesk else @ServiceDesk end      
  and OrgId=680624893       
 AND CAST(CreationDate AS DATE) >= CASE WHEN ISNULL(@frmdate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @frmdate END      
  AND CAST(CreationDate AS DATE) <= CASE WHEN ISNULL(@Todate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @Todate END      
  and  Status=@Status       
  and Department in (  SELECT departmentname from SelfService   where agentguid=@agentguid )        
END    
ELSE    
BEGIN    
    
if exists(SELECT departmentname Status from SelfService   where agentguid=@agentguid) 
begin        
select Count(distinct vSDTicket.TicketNumber) as [Ticket Count], Status          
from vSDTicket where Department in (        
SELECT departmentname Status from SelfService   where agentguid=@agentguid )        
and ServiceDesk= case when ISNULL(@ReqType,'''')='''' then ServiceDesk else @ReqType end      
AND CAST(CreationDate AS DATE) >= CASE WHEN ISNULL(@frmDate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @frmDate END      
  AND CAST(CreationDate AS DATE) <= CASE WHEN ISNULL(@toDate, ''1900-01-01'') = ''1900-01-01'' THEN CAST(CreationDate AS DATE) ELSE @toDate END      
  AND OrgId=680624893    
group by Status
select @option
end        
else        
begin        
set @Msg=''AgentGuid is not Mapped''        
end      
    
END    
END       
    
    


--exec SP_Getdata @ReqType=''Incident'',@Status=''Closed'',@agentguid=''166723515374445'',@frmdate=''1900-01-01'',@Todate=''1900-01-01''
--,@Msg='''',@option=''TicketDetailsDeptWise''
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicket_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicket_old]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicket_old', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER Procedure dbo.SD_spGetTicket_old

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
  from dbo.vSDTicket a
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 END 
 else
 BEGIN
 Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,Convert(varchar,case 
 
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())

  End )as ''TicketDayWise''
  from dbo.vSDTicket a
 
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  
  
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise<=@TicketDayWise
 order by CreationDate desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.*,c.StatusColorCode ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.vSDTicket   a
 
   inner join  SD_Status c
   on a.sdStatusFK=c.ID
  
  
  where SubmitterID=@SubmitterID)tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1

 order by CreationDate desc

 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetResponseSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_spGetResponseSLA', 'P') IS NULL
EXEC sp_executesql N'








create OR ALTER Proc dbo.SD_spGetResponseSLA
(
	 @TicketID numeric(18,0)=NULL,
 @TicketNumber varchar(50)=NULL,
 @EscMin int=NULL,
    @L1Min int =NULL,
	    @L2Min int =NULL,
	     @L3Min int=NULL,
		  @L4Min int =NULL,
		   @L5Min int= NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	
	

	DECLARE @MyCursor CURSOR;


    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin''--,@Summary=Summary
		


					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID)
	  BEGIN
	
		  set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'')
		    set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'')
			  set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'')
			    set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'')
				  set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'')
				  if exists( Select * from SD_SLA where TicketID= @TicketID and EsclationLevel=''L5'' )

				BEGIN
				print(''esc '');
				END
				ELSE 
				BEGIN
			 IF @EscMin>@L1Min and @EscMin<=@L2Min
					 BEGIN
					  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
				ELse IF (@EscMin>@L2Min and @EscMin<=@L3Min)
					 BEGIN
					  update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>@L3Min and @EscMin<=@L4Min)
					 BEGIN
					  update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5'',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>@L4Min)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel='''',EscDt=GETDATE()
					  where  TicketID=@TicketID
			 END
			 END
	  END

	  ELSE
		 BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,EscDt) 
				(select id,TicketNumber,''L1'',''1'',''L2'',GETDATE()--,@Summary=Summary	
					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1 and id=@TicketID)
	  END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;



	END



'
GO

--
-- Create or alter procedure [dbo].[SD_spGetArchiveTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetArchiveTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spGetArchiveTicket', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_spGetArchiveTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
  from dbo.vSDTicket a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 END 
 else
 BEGIN
 Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,Convert(varchar,case 
 
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then DATEDIFF(DAY,CreationDate,GETDATE())
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then DATEDIFF(DAY,CreationDate,GETDATE())
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then DATEDIFF(DAY,CreationDate,GETDATE())

  End )as ''TicketDayWise''
  from dbo.vSDTicket  a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise<=@TicketDayWise
 order by CreationDate desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.vSDTicket  a inner join 
    SD_ServDeskDefn b on a.ServiceDesk=b.Deskref 
	and a.OrgId=b.OrgFk
	where DATEDIFF(day,ClosedDate,GETDATE())>= b.autoArchiveTime and Status=''Closed'')tab
  
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1

 order by CreationDate desc

 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spAddSDCustomTicketField]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spAddSDCustomTicketField]')
GO
IF OBJECT_ID(N'dbo.SD_spAddSDCustomTicketField', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Proc dbo.SD_spAddSDCustomTicketField
(
	@StatusID int = NULL,
  	@DeskRef varchar(50) =NULL,
    @TicketNo varchar(100)=Null,
    @FieldName varchar(100)=null,
    @FieldValue varchar(100)=null,
	@ID numeric(18,0)=null,
	@OrgId numeric(18,0)=null,
	@InsertBy int =NULL,
	@InsertDt datetime =NULL,
	@UpdateBy int =NULL,
	@UpdateDt datetime =NULL,
	@Status nvarchar(10) = NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AddCustomField'')
	
	BEGIN
	INSERT INTO	SD_CustomFieldTicketValues(TicketNo
      ,FieldName
      ,FieldValue,OrgId)
	values(@TicketNo
      ,@FieldName
      ,@FieldValue,@OrgId)	
	END
		if(@Option=''see'')
	
	BEGIN
		select * from	SD_CustomFieldTicketValues
	END
		if(@Option=''UpdateCustomField'')
	
	BEGIN
	 if exists(select * from SD_CustomFieldTicketValues where TicketNo=@TicketNo and OrgId=@OrgId)
	 BEGIN
	update	SD_CustomFieldTicketValues
	set FieldValue=@FieldValue where TicketNo=@TicketNo and FieldName=@FieldName
	and OrgId=@OrgId
	END
	ELSE
	BEGIN
	set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@TicketNo and OrgId=@OrgId)
--	set @OrgId=(select top 1 OrgId from vSDTicket where TicketNumber=@TicketNo)
	exec SD_spCreateCustomField @Ticketref=@TicketNo,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@OrgId

		update	SD_CustomFieldTicketValues
	set FieldValue=@FieldValue where TicketNo=@TicketNo and FieldName=@FieldName
	and OrgId=@OrgId
	END
	END

	
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMainTech]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMainTech]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMainTech', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMainTech
(
@FCategory varchar(50)=NULL,
@TicketStatus varchar(50)=NULL,
@Scope varchar(50)=NULL,
@TechLoginName nvarchar(400)=NULL,
@OrgID numeric(18,0)=NULL,
@Option varchar(50)
)
AS
BEGIN

	if(@Option=''DashboardsCounts'')
	BEGIN
		SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (
		select count(*) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  from vSDTicket WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
		Union
		select 0 ''SevenDaysTotal'',count(*) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  from vSDTicket WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		Union
		select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(*) as TodayTotal,0 ''Total'' from vSDTicket WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		Union
		select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(*) as Total  from vSDTicket  where ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
		) AS Final  
	END

	if(@Option=''SevenDaysTickets'')
	BEGIN		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		
 
 
 WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	END

	if(@Option=''ThirtyDaysTickets'')
	BEGIN	
		   select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate

       from vSDTicket a 	

   
 	WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	END

	if(@Option=''TodayTickets'')
	BEGIN
		
	  select  distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
	

	WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName
	
		
	END
	if(@Option=''TotalTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket  where ServiceDesk=''Incident'' and TechLoginName=@TechLoginName group by Status 
		
	END
	if(@Option=''TodayTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName group by Status 
		
	END
	if(@Option=''TodayTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
	
	
WHERE  (a.ServiceDesk = ''Incident'')  and TechLoginName=@TechLoginName
					AND CreationDate >= DATEADD(DAY, 0, CAST(CAST(GETDATE() as Date)as datetime))
	and a.Status= @TicketStatus 
		
	END
	if(@Option=''Last7DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	

	
	
	WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))
	and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus
	
		
	END

	if(@Option=''Last30DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a
		

	WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())
	and ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus 
		
	END

	if(@Option=''OverAllTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		 WHERE
	 ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	and a.Status= @TicketStatus 
		
	END
	if(@Option=''OverAllTickets'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 	
		 WHERE
	 ServiceDesk=''Incident''  and TechLoginName=@TechLoginName
	
		
	END

	if(@Option=''Last7DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status
    from vSDTicket a 	
WHERE CreationDate >= DATEADD(DAY, -7, GETDATE())	and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName 	 group by a.Status 
		
	END


	if(@Option=''Last30DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,Status
from vSDTicket WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())	and ServiceDesk=''Incident'' and TechLoginName=@TechLoginName	 group by Status 
		
	END

	if(@Option=''ResponseSLAPie'')
	BEGIN
		
	  SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''responsesla'' and Desk=''Incident'' 
			group by CustomFieldValue  
		
	END
	if(@Option=''ResolutionSLAPie'')
	BEGIN
		
	  SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''resolutionsla'' and Desk=''Incident''  and Status=''Closed''
			group by CustomFieldValue  
		
	END
	if(@Option=''SeverityWisePie'')
	BEGIN
	
		
		 select  Severity ,COUNT(TicketNumber) as TotalTickets from vSDTicket
		 where ServiceDesk=''Incident''  
		 group by Severity 
	END
	if(@Option=''SeverityWiseResolvedPie'')
	BEGIN
		 select  Severity ,COUNT(TicketNumber) as TotalTickets from vSDTicket
		 where ServiceDesk=''Incident''  and Status=''Closed''
		 group by Severity 
	END
		if(@Option=''SeverityWiseResponse'')
	BEGIN
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
		 select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s
		 join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber
		 where
		 s.ServiceDesk=''Incident''  and dd.CustomFieldName=''responsesla''
		 group by s.Severity,CustomFieldValue 
		) AS A	  order by Severity asc
		
		END

		if(@Option=''SeverityWiseResolution'')
	BEGIN
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
		 select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s
		 join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber
		 where
		 s.ServiceDesk=''Incident''  and dd.CustomFieldName=''resolutionsla'' and s.Status=''Closed''
		 group by s.Severity,CustomFieldValue 
		) AS A	  order by Severity asc
		
		END
	if(@Option=''SeverityWisePieeeee'')
	BEGIN
	
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
	 select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''
				  group by s.Severity,d.CustomFieldValue

				  union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''
				  group by s.Severity,d.CustomFieldValue
					union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''
				  group by s.Severity,d.CustomFieldValue
				  ) AS A
			 
			 
		
	END
	if(@Option=''SeverityWiseResolutionPie'')
	BEGIN
	
	select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from 
	(
	 select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''
				  group by s.Severity,d.CustomFieldValue
				   union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity2''
				  group by s.Severity,d.CustomFieldValue
				  union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''
				  group by s.Severity,d.CustomFieldValue
					union
				   select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s
		  join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber
				where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''
				  group by s.Severity,d.CustomFieldValue
				  ) AS A
			 
			 
		
	END

	if(@Option=''FirstCategoryWiseTickets'')

	BEGIN
	select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSDTicket where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''

	END

END

'
GO

--
-- Create or alter procedure [dbo].[SD_GetResponseSLA]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_GetResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_GetResponseSLA', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_GetResponseSLA

(
--@userName varchar(100)=null,
@ID numeric(18,0)=null,

@Summary NVARCHAR (1000) = NULL,
@AttachmentFile nvarchar(max)=NULL,
@MailBody  varchar (max) =NULL,
@Option varchar(50)=null
)

AS
BEGIN

		if(@Option=''GetResponse'')
		BEGIN
	DECLARE @ResponseCursor CURSOR;
DECLARE @TicketID numeric(18,0);
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @ResponseCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin''--,@Summary=Summary
		


					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1   

    OPEN @ResponseCursor 
    FETCH NEXT FROM @ResponseCursor 
    INTO @TicketID,@TicketNumber,@EscMin

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID)
	  BEGIN
		 IF @EscMin>10 and @EscMin<20
			  BEGIN
					  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
					  where  TicketID=@TicketID
			 END
		ELse IF (@EscMin>20 and @EscMin<30)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
					  where  TicketID=@TicketID
			 END
			 	ELse IF (@EscMin>30 and @EscMin<40)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
					  where  TicketID=@TicketID
			 END
			 	 	ELse IF (@EscMin>40)
		 BEGIN
					  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
					  where  TicketID=@TicketID
			 END
	  END

	  ELSE
		 BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel) 
				(select id,TicketNumber,''L1'',''1'',''L2''--,@Summary=Summary	
					from vSDTicket where Status=''Open'' 
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1 and id=@TicketID)
	  END
			  FETCH NEXT FROM @ResponseCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin
    END; 

    CLOSE @ResponseCursor ;
    DEALLOCATE @ResponseCursor;
END;

		END

	END
'
GO

--
-- Create or alter procedure [dbo].[CP_SDDashboardSLAWithCal]
--
GO
PRINT (N'Create or alter procedure [dbo].[CP_SDDashboardSLAWithCal]')
GO
IF OBJECT_ID(N'dbo.CP_SDDashboardSLAWithCal', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.CP_SDDashboardSLAWithCal
(
	 @ServiceDesk  varchar(50)=null,
	 @FROM varchar(50)=null,
	 @TO varchar(50)=null,
	 @FCategory varchar(50)=NULL,
	 @Scope varchar(100)=NULL,
	 @TicketStatus varchar(50)=NULL,
	 @Option varchar(50)
)
AS
BEGIN

	if(@Option=''DashboardsCounts'')
	BEGIN
		SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (
		select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  
		from vSDTicket a 
	
	
		WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident'' 
		Union
		select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  
		from vSDTicket  a 

		
		WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	 and ServiceDesk=''Incident'' 
		Union
		select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total'' 
		from vSDTicket  a 
	
		WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident''
		Union
		select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total 
		from vSDTicket  a 
		
		where ServiceDesk=''Incident'' 
		) AS Final  
	END

	---------------------Counts Start-----------------------
	if(@Option=''SevenDaysTickets'')
	BEGIN		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
      
      ,CreationDate
      ,ClosedDate
 from vSDTicket
 
 a 
		
		
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))		and ServiceDesk=''Incident''

	END --7 Days Tickets Report

	if(@Option=''ThirtyDaysTickets'')
	BEGIN	
		   select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
     
      ,CreationDate
      ,ClosedDate
   from vSDTicket
   
   a 
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))
   and ServiceDesk=''Incident''	
  
	END --30 Days Tickets Report

	if(@Option=''TodayTickets'')
	BEGIN
		
	  select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
 
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
		
		WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident''

		
	END --Today Tickets Report

	if(@Option=''TotalTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
		           FROM  vSDTicket AS a 
					WHERE  (a.ServiceDesk = ''Incident'') 
		group by a.Status  
		
	END

	---------------------Counts END-----------------------

	---------------------Second Row Start-----------------------

	if(@Option=''TodayTicketsPie'')
	BEGIN	
	        SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status
					FROM  vSDTicket AS a 
					
					WHERE  (a.ServiceDesk = ''Incident'')
					AND (CONVERT(varchar(10), a.CreationDate, 120) = CONVERT(varchar(10), GETDATE(), 120))
            GROUP BY a.Status		
	END

	if(@Option=''TodayTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   

      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
	 WHERE  cast(CreationDate as Date)= cast(getdate() as Date) 
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus  
		
	END --Today Tickets Report

	if(@Option=''Last7DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
    
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
	 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))	
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus 
		
	END

	if(@Option=''Last30DaysTicketsStatusWise'')
	BEGIN
		
	 select distinct  TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,a.Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
  
      ,CreationDate
      ,ClosedDate
    from vSDTicket a 
		 WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))	
	and ServiceDesk=''Incident'' 
	and a.Status= @TicketStatus 
		
	END

	---------------------Second Row END-----------------------

	if(@Option=''OverAllTicketsStatusWise'')
	BEGIN
		
	 select   TicketNumber ''Ticket Number''
      ,Summary ''Ticket Summary''
      ,Status     
      ,Severity
      ,Category
      ,SubmitterName ''Submitter Name''
      ,SubmitterEmail ''Submitter Email''
      ,SubmitterPhone ''Submitter Phone''
      ,TechLoginName   
    
      ,CreationDate
      ,ClosedDate
    from vSDTicket  WHERE
	 ServiceDesk=''Incident'' 
	and Status= @TicketStatus
		
	END

	if(@Option=''Last7DaysTicketsPie'')
	BEGIN
		
	  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
                 from vSDTicket a
				
				 where ServiceDesk=''Incident''  
				   
				 AND CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))		 group by a.Status  
		
	END

	if(@Option=''Last30DaysTicketsPie'')
	BEGIN
		
	 select COUNT( distinct TicketNumber) as TotalTickets ,a.Status 
     from vSDTicket a
			
				 where ServiceDesk=''Incident''  
				  
		and CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))		 group by a.Status  
		
	END

	--if(@Option=''ResponseSLAPie'')
	--BEGIN
		
	--  SELECT [String5] as CustomFieldValue,COUNT( distinct  TicketNumber)  as TotalTickets
 --           from vSDTicket a
	--	         INNER JOIN sd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--		group by [String5]  
		
	--END

	--if(@Option=''ResolutionSLAPie'')
	--BEGIN
		
	-- SELECT [String6] as CustomFieldValue,COUNT( distinct  TicketNumber)  as TotalTickets
 --           from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope     and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND Created >=   @FROM and Created <= @TO
	--		group by [String6]  
	--		UNION
	--		 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets   from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope     and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND Created >=   @FROM and Created <= @TO
		
	--END

	--if(@Option=''SeverityWisePie'')
	--BEGIN
	--	 select  Severity ,COUNT(TicketNumber) as TotalTickets  from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by Severity 
	--END

	--if(@Option=''SeverityWiseResolvedPie'')
	--BEGIN
	--	 select  Severity ,COUNT(TicketNumber) as TotalTickets  from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by Severity 
	--	 UNION
	--	 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
		
	--END

 --   if(@Option=''SeverityWiseResponse'')
	--BEGIN

	--select (Severity +'' (''+[String5]+'')'') as Severity, TotalTickets from 
	--(
	--	 select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,[String5] from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--	 group by a.Severity,[String5] 
	--	) AS A	  order by Severity asc
		
	
	--	END

 --   if(@Option=''SeverityWiseResolution'')
	--		BEGIN
	--		select (Severity +'' (''+[String6]+'')'') as Severity, TotalTickets from 
	--    (
	--			select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.[String6] 
	--			 from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''  
	--			 AND (a.Status=''Closed'' OR a.Status=''Resolved'') 
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--			 group by a.Severity,d.[String6]
	--	) AS A	 
	--			UNION
	--	 select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope    
	--			 AND Created >=   @FROM and Created <= @TO
	--	 order by Severity asc
	--		END

	--if(@Option=''SeverityWiseResolutionPie'')
	--BEGIN
	
	--select (Severity +'' (''+[String6]+'')'') as Severity, TotalTickets from 
	--(
	--             select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.[String6] 
	--			from kasadmin.vSDTicket a
	--	         INNER JOIN ksd.CustomFieldsValues d on a.id=d.id
	--			 INNER JOIN CP_vScope o ON a.Organization=o.orgName
	--			 where ServiceDesk=''Incident''    and (Status=''Closed'' OR  Status=''Resolved'')
	--			 AND o.ScopeName=@Scope   
	--			 AND Created >=   @FROM and Created <= @TO
	--			 group by a.Severity,d.[String6]
		
 --  ) AS A		 
		
	--END

	if(@Option=''FirstCategoryWiseTickets'')

	BEGIN

	select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSDTicket where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''

	END

END

'
GO

--
-- Create or alter procedure [dbo].[_sp_GetTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[_sp_GetTicket]')
GO
IF OBJECT_ID(N'dbo._sp_GetTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo._sp_GetTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
select ROW_NUMBER() OVER(Order by ID) as RowNum,* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
 into #tempTicket from dbo.vSDTicket
 Select @TotalRow=Count(RowNum) from #tempTicket

select *
 from #tempTicket
  
 
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 and TicketDayWise=@TicketDayWise
 order by CreationDate desc
 drop table #tempTicket
 END
'
GO

--
-- Create or alter view [dbo].[SD_vColorForTickEscl]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vColorForTickEscl]')
GO
IF OBJECT_ID(N'dbo.SD_vColorForTickEscl', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.SD_vColorForTickEscl as
(
select TicketNo, case when (response_time-ResponseTime)<=10
 then ''green''
 when (response_time-ResponseTime)  >10 and  response_time<ResponseTime
 then ''yellow''
 else 
 ''red''
 end as ''color'',response_time,OrgID
 
 from (select TicketNo,FieldName,FieldValue,DueDate,CreationDate ,a.ResponseTime,a.OrgId, --TicketNo,
CASE
            WHEN FieldValue IS NOT NULL THEN
                Datediff(MINUTE, CreationDate, cast( FieldValue as datetime))
            ELSE
                Datediff(MINUTE, CreationDate, ExpectedResponseDt)
        END AS response_time
		from vSDTicket a 
left join 
SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
and a.OrgiD=b.OrgID
where FieldName like ''%openend%'')tt
)'
GO

--
-- Create or alter view [dbo].[SD_vSDTicketDetails]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vSDTicketDetails]')
GO
IF OBJECT_ID(N'dbo.SD_vSDTicketDetails', 'V') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER view dbo.SD_vSDTicketDetails as
(
select distinct a.[id]
      ,[ServiceDesk]
      ,[TicketNumber]
      ,[Summary]
      ,[partitionid]
      ,[Category]
      ,[Priority]
      ,[Status]
      ,[Severity]
      ,[CreationDate]
      ,[Description]
      ,[SubmitterType]
      ,[SubmitterName]
      ,[SubmitterEmail]
      ,[SubmitterPhone]
      ,[SourceType]
      ,[DueDate]
      ,[SubmitterID]
      ,[sdCategoryFK]
      ,[sdStatusFK]
      ,[sdSeverityFK]
      ,[sdPriorityFK]
      ,[assigneeParticipantFK]
      ,[TechLoginName]
      ,[previousStageFK]
      ,[ExpectedResolutionDt]
      ,[ClosedDate]
      ,[ResponseTime]
      ,[ResolutionTime]
      ,[location] 
	  ,Department
	,cc.SerialNo
      ,[sdStageFK],
	  a.OrgId
      ,[Stage],case when  color  is null 
then ''orange''
else 
color
end as ''color''

from vSDTicket a 
left join 
SD_vColorForTickEscl b 
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgID
left join 
SD_CloudTickDetails cc on a.TicketNumber=cc.TicketRef and a.OrgId=cc.OrgID
)
'
GO

--
-- Create or alter procedure [dbo].[SP_CheckMapping]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_CheckMapping]')
GO
IF OBJECT_ID(N'dbo.SP_CheckMapping', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SP_CheckMapping(
@DeskRef nvarchar(50),
@StatusID numeric(18,0),
@OrgDeskRef numeric (18, 0) NULL,
@ScopeName varchar (50) NULL,
@PrevStage varchar (50) NULL,
@Ticketref varchar (50) NULL,
@msg nvarchar(max) out
)
AS
BEGIN
DECLARE @newstage varchar(50)

set @newstage= (select StatusCodeRef from SD_Status where ID=@StatusID)  
 
 set @prevstage=(select  b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a   
inner join  SD_Status b  on a.sdStatusFK=b.ID where TicketNumber=@Ticketref)

if(@newstage!=@prevstage)
begin
if exists(select * from SD_Mapping_Check where StatusRef=@newstage and ScopeName =@ScopeName and OrgDeskRef=@OrgDeskRef and DeskRef=@DeskRef)
begin
SET @msg=''You are not authorized to change the Status.''
end
end
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_old]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_old', 'P') IS NULL
EXEC sp_executesql N'



create OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_old

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'') )tab
   
WHERE  (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'') and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status !=''Open'' and Status !=''Closed'' and Status !=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_IMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_IMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_IMSPL', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_IMSPL

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName  or TechLoginName is null  ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status =''WIP'')  and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status =''WIP'') )tab
   
WHERE  (Status =''WIP'')  and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and ( status!=''Closed'' and Status!=''Resolved'') and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END
  IF(@Option=''Hold'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName  or TechLoginName is null  ) and Status=''Hold''  )tab
   
WHERE Status=''Hold'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Hold''
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_Hirel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise_Hirel]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise_Hirel', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise_Hirel

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Open''  )tab
   
WHERE Status=''Open'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Open''
order by TicketNumber desc 


 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c 
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId
  and ( TechLoginName=@TechLoginName   )   and (Status =''WIP'')  )tab
   
WHERE  (Status =''WIP'')  and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
			where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
order by TicketNumber desc 


 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null)
  and OrgId=@OrgId and ServiceDesk=@Desk  and ( TechLoginName=@TechLoginName ) and ( status!=''Closed'' and Status!=''Resolved'') )tab
   
WHERE TechLoginName=@TechLoginName and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and TechLoginName=@TechLoginName and OrgId=@OrgId and ( status!=''Closed'' and Status!=''Resolved'')
order by TicketNumber desc 


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null )
  and OrgId=@OrgId and ServiceDesk=@Desk   and ( TechLoginName is null ) 
  )tab
   
WHERE   TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
order by TicketNumber desc 


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  
  
  and ( TechLoginName=@TechLoginName  ) and  ( status!=''Closed'' and Status!=''Resolved'') and  DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
order by TicketNumber desc 


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk 
  and ( TechLoginName=@TechLoginName ) and DATEDIFF(MINUTE,DueDate,GETDATE())>0  
  and ( status!=''Closed'' and Status!=''Resolved'')
  
  )tab
   
WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
	where ServiceDesk=@Desk and ( status!=''Closed'' and Status!=''Resolved'') and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
order by TicketNumber desc 


 END

  IF(@Option=''Hold'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
     and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) 
  and ServiceDesk=@Desk  and OrgId=@OrgId and ( TechLoginName=@TechLoginName   ) and Status=''Hold''  )tab
   
WHERE Status=''Hold'' and    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
where Status=''Hold''
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTechStatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTechStatusWise', 'P') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER Procedure dbo.SD_spGetTicketTechStatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@OrgName nvarchar(200)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN

 IF(@Option=''Open'')
BEGIN
set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk and OrgId=@OrgId)
  set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Open'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Open'',@TotalRow=@TotalRow
  END



 END
  IF(@Option=''WIP'')
BEGIN
 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status!=''Open'' or Status!=''Resolved'' or Status!=''Closed'') and ServiceDesk=@Desk and OrgId=@OrgId)

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''WIP'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''WIP'',@TotalRow=@TotalRow
  END




 END
  IF(@Option=''Assigned'')
BEGIN
	Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName=@TechLoginName and ServiceDesk=@Desk and OrgId=@OrgId

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Assigned'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Assigned'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''AssignedOther'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where  TechLoginName is  null and ServiceDesk=@Desk and OrgId=@OrgId
 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''AssignedOther'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''AssignedOther'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''DueSoon'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''DueSoon'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''DueSoon'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''OverDue'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

 set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''OverDue'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''OverDue'',@TotalRow=@TotalRow
  END


 END
  IF(@Option=''Hold'')
BEGIN
set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''hold'' and ServiceDesk=@Desk and OrgId=@OrgId)
  set @OrgName=(select OrgName from SD_OrgMaster where Org_ID=@OrgId)
  if(@OrgName=''Hitachi'')
  BEGIN

  exec SD_spGetTicketTechStatusWise_Hirel @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Hold'',@TotalRow=@TotalRow
  END 

  if(@OrgName=''IMSPL'')
  BEGIN 
 exec   SD_spGetTicketTechStatusWise_IMSPL @Desk=@Desk,@OrgId=@OrgId,@PageIndex=@PageIndex,@PageSize=@PageSize
  ,@TechLoginName=@TechLoginName,@SubmitterID=@SubmitterID,@EngLocation=@EngLocation,@Option=''Hold'',@TotalRow=@TotalRow
  END



 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTech]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTech]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTech', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Procedure dbo.SD_spGetTicketTech

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
@EngLocation nvarchar(100)=NULL,
@OrgId nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
		Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,c.StatusColorCode,a.* ,Convert(varchar,case 
			when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
					then ''Last1Hour''
			when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
					then cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
					then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
					then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
			when DATEDIFF(DAY,CreationDate,GETDATE())>90 
					then ''Morethan90Days'' 
			End ) as ''TicketDayWise''
								from dbo.SD_vSDTicketDetails a 
																left join  SD_Status c
																						 on a.sdStatusFK=c.ID
															 inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref 
    and
  a.OrgId=b.OrgFk
  
  where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null  )tab
  
WHERE 
  TicketDayWise=@TicketDayWise
  and ServiceDesk=@Desk and OrgId=@OrgId and (TechLoginName=@TechLoginName or TechLoginName is null  ) and location=@EngLocation
 order by CreationDate desc
 END 
 else
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate desc ) as RowNum,c.StatusColorCode,a.* ,Convert(int,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then 0
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  left join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
    and
  a.OrgId=b.OrgFk
  where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and 
  ServiceDesk=@Desk and OrgId=@OrgId  and (TechLoginName=@TechLoginName or TechLoginName is null )  
 -- and location=@EngLocation 
  )tab
  
WHERE 
 
  TicketDayWise<=@TicketDayWise

 order by TicketNumber desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket where ServiceDesk=@Desk and OrgId=@OrgId 

select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID and a.OrgId=c.OrgDeskRef
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
    and
  a.OrgId=b.OrgFk
  where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId  and ( TechLoginName=@TechLoginName  or TechLoginName is null ) --and location=@EngLocation 
  )tab
   
WHERE ServiceDesk=@Desk  and OrgId=@OrgId  and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
order by TicketNumber desc 


 END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketAllEngineerstatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketAllEngineerstatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketAllEngineerstatusWise', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER Procedure dbo.SD_spGetTicketAllEngineerstatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@OrgId nvarchar(100)=NULL,
	@IsActive bit =NULL,

	@Location nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
	
IF(@Option=''Open'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Open'' and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open'' and OrgId=@OrgId )tab
   
							WHERE   Status=''Open'' and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId
									order by TicketNumber desc 


		END
IF(@Option=''WIP'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where (Status =''WIP'')  and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
													left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime
							or ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'')  and Org_ID=@OrgId )tab
   
							WHERE (Status =''WIP'')  and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and (Status =''WIP'') 
									order by TicketNumber desc 


		END
IF(@Option=''Assigned'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName is not null

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId )tab
   
							WHERE TechLoginName is not null and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is not null
									order by TicketNumber desc 


		END
IF(@Option=''AssignedOther'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where TechLoginName is null

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where   (DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is  null and OrgId=@OrgId )tab
   
							WHERE  TechLoginName is  null and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName is  null
									order by TicketNumber desc 


		END
IF(@Option=''DueSoon'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())<5

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5 )tab
   
							WHERE  DATEDIFF(MINUTE,DueDate,GETDATE())<5 and   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())<5
									order by TicketNumber desc 


		END
IF(@Option=''OverDue'')
	BEGIN
			Select @TotalRow=Count(id) from dbo.vSDTicket where DATEDIFF(MINUTE,DueDate,GETDATE())>0

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
													left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and (Status!=''Closed'' and status!=''Resolved'') and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 )tab
   
							WHERE DATEDIFF(MINUTE,DueDate,GETDATE())>0 and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId and  DATEDIFF(MINUTE,DueDate,GETDATE())>0
									order by TicketNumber desc 


		END
		IF(@Option=''Hold'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSDTicket where Status=''Hold'' and ServiceDesk=@Desk)

			select * from(Select * from (select ROW_NUMBER() OVER(order by TicketNumber desc) as RowNum,c.StatusColorCode,a.* ,case 
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
								then ''Last1Hour1''
							when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
								then ''Last24Hours''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
								then ''Last30Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
								then ''Last90Days''
							when DATEDIFF(DAY,CreationDate,GETDATE())>90 
								then ''Morethan90Days''
							End as ''TicketDayWise''
							from dbo.SD_vSDTicketDetails a 
														left join SD_Status c
																	on a.sdStatusFK=c.ID and  a.OrgId=c.OrgDeskRef
															inner join  SD_ServDeskDefn b on 
																	a.ServiceDesk=b.Deskref and a.OrgId=b.OrgFk
																	inner join SD_OrgMaster cc
																	on a.OrgId=cc.Org_ID
							where  ( DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Hold'' and OrgId=@OrgId )tab
   
							WHERE   Status=''Hold'' and  RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1)sd
									where ServiceDesk=@Desk and OrgId=@OrgId
									order by TicketNumber desc 


		END
 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicket

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@SubmitterEmail nvarchar(500)=null,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
IF(@Option=''WithFilter'')
BEGIN
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket)
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate asc ) as RowNum,c.StatusColorCode,a.* ,Convert(varchar,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then  cast(DATEDIFF(DAY,CreationDate,GETDATE()) as nvarchar)
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days'' 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref where  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null  )tab
  
WHERE 
  TicketDayWise=@TicketDayWise
 -- and ServiceDesk=@Desk
 and SubmitterID=@SubmitterID
 order by CreationDate asc
 END 
 else
 BEGIN
Select * from (select ROW_NUMBER() OVER(order by CreationDate asc ) as RowNum,c.StatusColorCode,a.* ,Convert(int,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then 0
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then cast(DATEDIFF(DAY,CreationDate,GETDATE())as int)
 
  End ) as ''TicketDayWise''
   from dbo.SD_vSDTicketDetails a 
   left join  SD_Status c
   on a.sdStatusFK=c.ID
  left join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref where 
  DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and   SubmitterID=@SubmitterID
  
  )tab
  
WHERE 
 
  TicketDayWise<=@TicketDayWise

 order by TicketNumber desc
   END
 END
 IF(@Option=''WithoutFilter'')
BEGIN
 Select @TotalRow=Count(id) from dbo.vSDTicket

Select * from (select ROW_NUMBER() OVER(order by TicketNumber asc) as RowNum,c.StatusColorCode,a.* ,case 
  when DATEDIFF(HOUR,CreationDate,GETDATE())<=1
 then ''Last1Hour1''
 when DATEDIFF(HOUR,CreationDate,GETDATE())<=24
 then ''Last24Hours''
 when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 30
 then ''Last30Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())> 1 and DATEDIFF(DAY,CreationDate,GETDATE())<= 90
 then ''Last90Days''
  when DATEDIFF(DAY,CreationDate,GETDATE())>90 
  then ''Morethan90Days''
  End as ''TicketDayWise''
  from dbo.SD_vSDTicketDetails a 
  left join SD_Status c
  on a.sdStatusFK=c.ID
  inner join  SD_ServDeskDefn b on 
  a.ServiceDesk=b.Deskref
  where   DATEDIFF(day,ClosedDate,GETDATE())<= b.autoArchiveTime  or ClosedDate is null and   SubmitterID=@SubmitterID  )tab
   
--WHERE   RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber asc 


 END

 if(@Option=''UserWise'')
BEGIN
select TicketNumber,Summary,Category,Priority,Severity,
cast(CreationDate as DateTime) CreationDate,SubmitterName,SubmitterEmail,cast(ClosedDate as DateTime) ClosedDate,location,Status from SD_vSDTicketDetails
where SubmitterID=@SubmitterID
END

 if(@Option=''UserWiseViaEmail'')
BEGIN
select TicketNumber,Summary,Category,Priority,Severity,
cast(CreationDate as DateTime) CreationDate,SubmitterName,SubmitterEmail,cast(ClosedDate as DateTime) ClosedDate,location,Status from SD_vSDTicketDetails
where SubmitterEmail like ''%''+ @SubmitterEmail +''%''
END


 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCheckTicketStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCheckTicketStatus]')
GO
IF OBJECT_ID(N'dbo.SD_spCheckTicketStatus', 'P') IS NULL
EXEC sp_executesql N'





CREATE OR ALTER Proc dbo.SD_spCheckTicketStatus
(
	
	   @prevStageFK numeric(26,0)= null
	   ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
	  ,	 @Status varchar(100)= null
	  	  ,@PrevStage varchar(100)= null
	    , @Ticketref varchar(20)= null
     ,@organizationFK numeric(26,0)= null
	,@newstage nvarchar(100)=null
	,@Error nvarchar(max) out
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''Checkstatus'')
 
 
set @newstage= (select StageCodeRef from SD_Stage where ID=@sdStageFK and OrgDeskRef=@organizationFK)
 print(@prevstage);
 --if exists(select previousStageFK from SDIncident where Ticketref=@Ticketref and previousStageFK is null)
 --BEGIN
 set @prevstage=(select  top 1

b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a 
inner join 
SD_Status b 
on a.sdStatusFK=b.ID and b.OrgDeskRef=a.OrgId where TicketNumber=@Ticketref  and a.OrgId=@organizationFK)
-- END 
-- ELSE 
-- BEGIN 
-- set @prevstage=
--(select 

--b.StatusCodeRef as ''PrevStage'' from SD_vSDTicketDetails a 
--inner join 
--SD_Status b 
--on a.previousStageFK=b.ID  where TicketNumber=@Ticketref)
-- END
if(@prevstage=''Open'')
	BEGIN
			if(@newstage =''WIP'' or @newstage=''Hold'' or @newstage=''Open'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
				 set @Error=(''prev stage is open and cannot go in closed or resolved'')
				END
	END
	if(@prevstage=''WIP'')
	BEGIN
			if(@newstage =''Hold'' or @newstage=''Resolved'' or @newstage=''WIP'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
			 set @Error=(''prev stage is WIP and cannot go in open  or closed'')
				END
	END
	if(@prevstage=''Resolved'')
	BEGIN
			if(@newstage =''Closed'' or @newstage=''Resolved'' )
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
				 set @Error=(''prev stage is Resolved and cannot go in open  or wip or hold'')
				END
	END
	if(@prevstage=''Hold'')
	BEGIN
			if(@newstage =''WIP''  or @newstage=''Hold'')
				BEGIN
				 set @Error= (''change'')
				END
				else 
				BEGIN 
			 set @Error=(''prev stage is Hold and cannot go in open  or resolved'')
				END
	END

	
	END

'
GO

--
-- Create or alter view [dbo].[vSDOrgDeskDef]
--
GO
PRINT (N'Create or alter view [dbo].[vSDOrgDeskDef]')
GO
IF OBJECT_ID(N'dbo.vSDOrgDeskDef', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view  dbo.vSDOrgDeskDef
AS
(
select SDINC.id,
SDINC.templateName as ''TemplateName'',
SDINC.Deskref ,
SDINC.sdPrefix as ''DeskPrefix'',
SDINC.DeskDesc as ''DeskDesc'',
SDINC.partitionid,
SDINC.sdCategoryFK,
SDINC.sdStageFK,
SDINC.sdStatusFK,
SDINC.sdPriorityFK,
SDINC.sdSeverityFK,
SDINC.autoArchiveTime,
SDCat.CategoryCodeRef as ''Category'',
SDPrio.PriorityCodeRef as ''Priority'',
SDStat.StatusCodeRef  as ''Status'',
SDSever.Serveritycoderef as ''Severity'',
SDCat.Categoryref as ''CategoryRef'',
SDRes.ResolutionCodeRef as ''Resolution'',
SDINC.sdSolutionTypeFK ,
SDINC.CoverageSch as ''CoverageID'',
SDcvr.ScdhuleName as ''CoverageName'',
SDINC.SLA as ''SLAID'',
sla.slaName as ''SLAName'',


SDCvr.DaysCovered,
SDCvr.HoursCovered,
SDCvr.BeginHour,
SDCvr.EndHour,
SDINC.OrgFk,
SDOrg.OrgName,
sdst.StageCodeRef
from 

SD_ServDeskDefn  SDINC WITH(NOLOCK) left outer join 
SD_Category SDCat WITH(NOLOCK)  on SDINC.sdCategoryFK=SDCat.ID left outer join
SD_Status  SDStat WITH(NOLOCK)  on SDINC.sdStatusFK=SDStat.ID  left outer join
SD_Priority SDPrio WITH(NOLOCK) on SDINC.sdPriorityFK=SDPrio.ID left outer join
SD_Severity SDSever WITH(NOLOCK) on SDINC.sdSeverityFK=SDSever.ID  left outer join 
SD_Resolution SDRes WITH(NOLOCK) on SDINC.sdSolutionTypeFK=SDRes.ID left outer join
SD_SLAConfig sla WITH(NOLOCK) on SDINC.SLA=sla.id  left outer join 
SD_CoverageSchedule  SDCvr WITH(NOLOCK) on SDINC.CoverageSch=SDCvr.ID inner join
SD_Stage sdst WITH(NOLOCK) on SDINC.sdStageFK=sdst.ID inner join
sd_orgmaster SDOrg WITH(NOLOCK) on  SDINC.OrgFk=SDOrg.Org_ID


)
'
GO

--
-- Create or alter function [dbo].[GetResponseDueDtForCategory_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetResponseDueDtForCategory_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetResponseDueDtForCategory_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetResponseDueDtForCategory_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetResponseDueDtForCategory_New (@created2,@DeskRef,@orgStaffFK,@CategoryRef);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		RETURN dbo.GetResponseDueDtForCategory_New (@created2,@DeskRef,@orgStaffFK,@CategoryRef);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDateWithChange]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateWithChange]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateWithChange') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateWithChange
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0)

	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
					Declare @ResponseDt Datetime;
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef  );
					set @TicketDay=datename(WEEKDAY,@created);
				--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					-- set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
				set	@DueMin=(select ResponseTime from SD_Severity where Deskref=@DeskRef and id=@Severity )
				--	print(@TicketTime)
					--if exists(select * from SD_CoverageSchedule where DaysCovered like ''%''+@TicketDay+''%'' )
					--	BEGIN
					
						if(@HoursCovered=''UseTheseHours'')
								BEGIN

								DECLARE @workingDays VARCHAR(100)= (select DaysCovered from SD_CoverageSchedule);
							    -- Check if the ticket creation date is on a working day
								DECLARE @ticketCreationDayOfWeek INT
								--SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
								--	WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
								--BEGIN
								--	SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
								--END


										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=10 )
															 BEGIN
																	 DECLARE @actualResponseDateTime DATETIME;
																	 set @created=DATEADD(DAY,1,@created)
																	SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
																		WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
																			BEGIN
																				SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
																			END

																-- print ''in if condition''
												
																			 set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																			set @ResponseDt= @timein

																END
											else if(@TicketTime>@Endhour )
																BEGIN 
																					set @created=DATEADD(DAY,1,@created)
																					SET @ticketCreationDayOfWeek = DATEPART(WEEKDAY, @created) - 1 -- Sunday is considered as 0
																					WHILE CHARINDEX(DATENAME(WEEKDAY, @created), @workingDays) = 0
																						BEGIN
																								SET @created = DATEADD(DAY, 1, @created) -- Move to the next day
																						END

																					set @actualResponseDateTime=CAST(@created as date)
																					set @timein=DATEADD(MINUTE,@DueMin,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @ResponseDt= @timein
																END

											else 
																BEGIN 
																								
																		--	set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			set @ResponseDt= @timein
																END
									
							
									END
						
					--	print(convert(datetime, @timein, 20))
					--END
	return @ResponseDt
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolutionCategory]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolutionCategory]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolutionCategory') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolutionCategory
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @CategoryRef  nvarchar(500),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @CategoryRef1  nvarchar(300);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResolutionTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResolutionDateTime DATETIME;		
																			set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResolutionDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
					END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  						set @deskref2=@DeskRef;
										 set @CategoryRef1=@CategoryRef;
	
							  RETURN dbo.GetDueDateForResolutionCategory (@created2,@DeskRef,@CategoryRef,@orgStaffFK);
	
	
	  
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolution_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolution_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolution_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolution_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
					DECLARE @actualResponseDateTime DATETIME;
					DECLARE @CurrentDate DATETIME = @created

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResolutionTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity and OrgDeskRef=@orgStaffFK )
					--	print(@TicketTime)
					if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDateForResolution_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDateForResolution_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDateForResolution]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateForResolution]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateForResolution') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

 CREATE OR ALTER FUNCTION dbo.GetDueDateForResolution
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	    @orgStaffFK numeric(26,0)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;
							
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select top 1 HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Beginhour=(select  top 1 BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK);
					set @Endhour=(select top 1 EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)

					
					set	@DueMin=(select top 1 ISNULL(ResolutionTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity and OrgDeskRef=@orgStaffFK )
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResolutionDateTime DATETIME;		
																			set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResolutionDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
					END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResolutionDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResolutionDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  						set @deskref2=@DeskRef;
										 set @Severity1=@Severity;
	
							  RETURN dbo.GetDueDateForResolution (@created2,@DeskRef,@Severity,@orgStaffFK);
	
	
	  
    END;

'
GO

--
-- Create or alter function [dbo].[GetDueDate_PriorityResol]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_PriorityResol]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_PriorityResol') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_PriorityResol
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT Resolutiontime 
         FROM SD_Priority 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_Priority]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_Priority]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_Priority') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_Priority
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResponseTime 
         FROM SD_Priority 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_New]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_New]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_New') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_New
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity  and OrgDeskRef=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetResponseDueDtForCategory]
--
GO
PRINT (N'Create or alter function [dbo].[GetResponseDueDtForCategory]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetResponseDueDtForCategory') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetResponseDueDtForCategory
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
 
	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);
 
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
					DECLARE @CurrentDate DATETIME = @created
					DECLARE @actualResponseDateTime DATETIME;
if exists( select * from  SD_Holidays where CAST(HolidayDate AS DATE) = CAST(@CurrentDate  AS DATE) and OrgID=@orgStaffFK)
BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
			set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
			set @created2=@timein
			set @created = @timein
			RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
END
ELSE
BEGIN
--	print(@TicketTime)
if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
  BEGIN			
		if(@HoursCovered=''UseTheseHours'')
		BEGIN								
				if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
			BEGIN
				-- if ticket is loged than add 1 day  , then call function again
				 --DECLARE @actualResponseDateTime DATETIME;		
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
 
			else if (@TicketTime<@Beginhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=CAST(@created as date)--DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>@Endhour )
			BEGIN 
				-- if ticket is loged than 1 day, then call function again	
				set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
				set @created2=@timein
			END
			else if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
			BEGIN 
				--	set @actualResponseDateTime=CAST(@created as date)
				set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
				return @timein
			END
		END
		else if(@HoursCovered=''24hrCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END				
  END
		else if(@HoursCovered=''NoCoverage'')
		BEGIN 
			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
			return @timein
		END
		else 
		BEGIN
			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
		set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																	set @created2=@timein
		END
		--	print(convert(datetime, @timein, 20))
    END
		set @deskref2=@DeskRef;
		set @Severity1=@Severity;
		RETURN dbo.GetDueDate_New (@created2,@DeskRef,@Severity,@orgStaffFK);
 
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klres]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klres]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klres') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDueDate_klres
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResolutionTime 
         FROM SD_Severity 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klCatresol]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klCatresol]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klCatresol') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_klCatresol
(
   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL((select ISNULL(ResolutionTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
, 0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_klCat]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_klCat]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_klCat') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_klCat
(
   @created datetime,
	   @DeskRef nvarchar(50),
	   @orgStaffFK numeric(26,0),
	   @CategoryRef nvarchar(50)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL((select ISNULL(ResponseTime,0) from SD_CategorySLA where DeskRef=@DeskRef and  ParentCategoryRef=@CategoryRef  and OrgID=@orgStaffFK)
, 0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate_kl]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate_kl]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate_kl') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetDueDate_kl
(
    @created datetime,
    @DeskRef nvarchar(50),
    @Severity numeric(26,0),
    @orgStaffFK numeric(26,0)
)
RETURNS Datetime
AS
BEGIN
    DECLARE @timein Datetime;
    DECLARE @DueMin int;
    DECLARE @TicketTime time(7);
    DECLARE @HoursCovered nvarchar(50);
    DECLARE @Beginhour time(7);
    DECLARE @Endhour time(7);
    DECLARE @NextWorkingDay DATETIME;
    DECLARE @RemainingMinutes int;
    
    -- Get configuration settings
    SELECT TOP 1
        @HoursCovered = HoursCovered,
        @Beginhour = BeginHour,
        @Endhour = EndHour
    FROM vSDOrgDeskDef 
    WHERE Deskref = @DeskRef 
    AND OrgFk = @orgStaffFK;

    -- Get severity response time in minutes
    SET @DueMin = ISNULL(
        (SELECT ResponseTime 
         FROM SD_Severity 
         WHERE Deskref = @DeskRef 
         AND id = @Severity 
         AND OrgDeskRef = @orgStaffFK),
        0
    );

    SET @TicketTime = CAST(@created AS time);

    -- Check if ticket created after hours, so calculation starts from next working day
    IF @TicketTime > @Endhour
    BEGIN
        -- Move to next day and initialize @NextWorkingDay to start at @Beginhour
        SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

        -- Skip holidays and non-working days
        WHILE EXISTS (
            SELECT 1 
            FROM SD_Holidays 
            WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
            AND OrgID = @orgStaffFK
        ) OR NOT EXISTS (
            SELECT 1 
            FROM vSDOrgDeskDef 
            WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
            AND Deskref = @DeskRef 
            AND OrgFk = @orgStaffFK
        )
        BEGIN
            SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
        END

        -- Start time for calculation is at the beginning of next working day
        RETURN DATEADD(MINUTE, @DueMin, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
    END

    -- Handle cases within working hours
    IF @TicketTime BETWEEN @Beginhour AND @Endhour
    BEGIN
        -- Calculate remaining minutes in current day
        DECLARE @MinutesLeftToday int = DATEDIFF(MINUTE, @TicketTime, @Endhour);

        -- If we can complete within today''s business hours
        IF @MinutesLeftToday >= @DueMin
        BEGIN
            RETURN DATEADD(MINUTE, @DueMin, @created);
        END
        -- Otherwise, move to next working day and continue
        ELSE
        BEGIN
            SET @RemainingMinutes = @DueMin - @MinutesLeftToday;
            SET @NextWorkingDay = DATEADD(day, 1, CAST(@created AS DATE));

            -- Skip holidays and non-working days
            WHILE EXISTS (
                SELECT 1 
                FROM SD_Holidays 
                WHERE CAST(HolidayDate AS DATE) = @NextWorkingDay 
                AND OrgID = @orgStaffFK
            ) OR NOT EXISTS (
                SELECT 1 
                FROM vSDOrgDeskDef 
                WHERE DaysCovered LIKE ''%'' + DATENAME(WEEKDAY, @NextWorkingDay) + ''%''
                AND Deskref = @DeskRef 
                AND OrgFk = @orgStaffFK
            )
            BEGIN
                SET @NextWorkingDay = DATEADD(day, 1, @NextWorkingDay);
            END

            -- Continue calculation from the start of the next working day
            RETURN DATEADD(MINUTE, @RemainingMinutes, CAST(@NextWorkingDay AS DATETIME) + CAST(@Beginhour AS DATETIME));
        END
    END

    -- If created before working hours, start calculation at begin hour
    RETURN DATEADD(MINUTE, @DueMin, CAST(CAST(@created AS DATE) AS DATETIME) + CAST(@Beginhour AS DATETIME));
END
'
GO

--
-- Create or alter function [dbo].[GetDueDate]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDate]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDate') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'

 CREATE OR ALTER FUNCTION dbo.GetDueDate
    (
	   @created datetime,
	   @DeskRef nvarchar(50),
	   @Severity numeric(26,0),
	   @orgStaffFK numeric(26,0)

	 
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
					Declare @timein Datetime;						
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					Declare @str nvarchar(max);
					Declare @created2 nvarchar(100);
					Declare @deskref2 nvarchar(100);
					Declare  @Severity1 numeric(26,0);
					Declare	@OrgFk1 numeric(26,0);

					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK );
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef and OrgFk=@orgStaffFK  );
					set @TicketDay=datename(WEEKDAY,@created);
					--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
					
					set	@DueMin=(select ISNULL(ResponseTime,0) from SD_Severity where Deskref=@DeskRef and id=@Severity  and OrgDeskRef=@orgStaffFK)
					--	print(@TicketTime)
					if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+@TicketDay+''%'' and Deskref=@DeskRef and OrgFk=@orgStaffFK )
						BEGIN
					
							if(@HoursCovered=''UseTheseHours'')
								BEGIN								
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) <=@DueMin )
															 BEGIN

															 -- if ticket is loged than add 1 day  , then call function again
																		    DECLARE @actualResponseDateTime DATETIME;		
																			set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
																			--set @timein=DATEADD(MINUTE,@DueMin-DATEDIFF(MINUTE,@TicketTime,@Endhour),(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																				set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
															END
											else if(@TicketTime>@Endhour or @TicketTime<@Beginhour )

																BEGIN 
																-- if ticket is loged than 1 day, then call function again	
																					set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
																					set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
																END

											else	if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour and DATEDIFF(MINUTE,@TicketTime,@Endhour) >@DueMin )
										
																BEGIN 
																								
																		--	set @actualResponseDateTime=CAST(@created as date)
																			set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
																			return @timein
																END


									
							
									END
						else 	if(@HoursCovered=''24hrCoverage'')

							BEGIN 
									
									
														set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
														return @timein

										

						     END
							 else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
							
							
				END
				
						else 	if(@HoursCovered=''NoCoverage'')

							BEGIN 

									set @timein=DATEADD(MINUTE,@DueMin,(CAST(@created AS DATETIME) ) )
									return @timein
							END
						else 
						BEGIN
							set @actualResponseDateTime=DateADD(day,1,CAST(@created as date))
						set @timein=DATEADD(MINUTE,0,(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)) )
																					set @created2=@timein
						END
					--	print(convert(datetime, @timein, 20))
				  	  set @deskref2=@DeskRef;
										 set @Severity1=@Severity;
			
									 RETURN dbo.GetDueDate (@created2,@DeskRef,@Severity,@orgStaffFK);
	
	
    END

'
GO

--
-- Create or alter function [dbo].[GetDueDateold]
--
GO
PRINT (N'Create or alter function [dbo].[GetDueDateold]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDueDateold') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'  create OR ALTER function dbo.GetDueDateold
    (
	   @created datetime,
	   @DeskRef nvarchar(50)
    )
    RETURNS Datetime -- return type
    AS
    BEGIN
		Declare @timein Datetime;
							BEGIN
					Declare @TicketDay nvarchar(50);
					Declare @DueMin int;
					Declare @TicketTime nvarchar(50);
					Declare @HoursCovered nvarchar(50);
					Declare @Beginhour time(7);
					Declare @Endhour time(7);
					set @HoursCovered=(select HoursCovered from vSDOrgDeskDef  where Deskref=@DeskRef);
					set @Beginhour=(select BeginHour from vSDOrgDeskDef where Deskref=@DeskRef);
					set @Endhour=(select EndHour from vSDOrgDeskDef where Deskref=@DeskRef);
					set @TicketDay=datename(WEEKDAY,@created);
				--	print(@ticketday)
					set @TicketTime=CAST(@created as time)
				--	print(@TicketTime)
					if exists(select * from SD_CoverageSchedule where DaysCovered like ''%''+@TicketDay+''%'' )
						BEGIN
							if(@HoursCovered!=''UseTheseHours'')
								BEGIN
									set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
									set @timein=DATEADD(MINUTE,@DueMin,@created)
								--	print(@timein)
								END
						ELSE 	if(@HoursCovered=''UseTheseHours'')
								BEGIN
								--    print(@TicketTime);
								--	print(@Beginhour);
								--	print(@Endhour);
										if(@TicketTime>=@Beginhour and @TicketTime<=@Endhour)
											 BEGIN
												 set @DueMin=(select ResponseTime from vSDOrgDeskDef where Deskref=@DeskRef)
												-- print ''in if condition''
												set @timein=DATEADD(MINUTE,@DueMin,@created)
								--	print(@timein)
											 END
										 ELSE
											 BEGIN
										--	 print(''in else loop'')
											 Declare @str nvarchar(max);
											 Declare @created2 nvarchar(100);
											 Declare @deskref2 nvarchar(100);
											 set @created2=DATEADD(MINUTE,Datediff(MINUTE,@Beginhour,@TicketTime),@created)
										--	 print(Convert(datetime,@created2,20))
											 -- add difference of time that is calculated from 
											  --begin hour se mins krke ticke ke time ko add krna hei created at mei
											--  abb new createdad  wo bn jayeghi aur function dobara cal hogha
											 set @deskref2=@DeskRef;
								exec @str= dbo.GetDueDate  @created=@created2,@DeskRef=@deskref2
						
											 END
								END
						END
					--	print(convert(datetime, @timein, 20))
					END
	
	    RETURN @timein ;
    END;

'
GO

--
-- Create or alter function [dbo].[GetActualResponse_new]
--
GO
PRINT (N'Create or alter function [dbo].[GetActualResponse_new]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetActualResponse_new') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
 create OR ALTER FUNCTION dbo.GetActualResponse_new
(
	@created datetime,
	@DeskRef nvarchar(50),
	@Severity numeric(26,0)
)
RETURNS Datetime -- return type
AS
BEGIN
	DECLARE @timein Datetime;						
	DECLARE @TicketDay nvarchar(50);
	DECLARE @DueMin int;
	DECLARE @TicketTime nvarchar(50);
	DECLARE @HoursCovered nvarchar(50);
	DECLARE @Beginhour time(7);
	DECLARE @Endhour time(7);
	DECLARE @str nvarchar(max);
	DECLARE @created2 nvarchar(100);
	DECLARE @deskref2 nvarchar(100);
	DECLARE @Severity1 numeric(26,0);
	DECLARE @OrgFk1 numeric(26,0);

	SET @HoursCovered = (SELECT HoursCovered FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Beginhour = (SELECT BeginHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Endhour = (SELECT EndHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @TicketDay = DATENAME(WEEKDAY, @created);
	SET @TicketTime = CAST(@created as time);
	SET @DueMin = (SELECT ResponseTime FROM SD_Severity WHERE Deskref = @DeskRef AND id = @Severity);

	-- Check if the ticket''s day is covered by working hours
	IF EXISTS (SELECT * FROM vSDOrgDeskDef WHERE DaysCovered LIKE ''%'' + @TicketDay + ''%'' AND Deskref = @DeskRef)
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
				DECLARE @actualResponseDateTime DATETIME;	
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END
	ELSE IF (@HoursCovered = ''NoCoverage'')
	BEGIN
		-- If there is no coverage, add the due time to the current due date and return the calculated due date.
		SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
		RETURN @timein;
	END
	ELSE
	BEGIN
		-- If the ticket''s day is not covered by working hours, add 1 day to the current due date and set the day''s time to the Beginhour.
		IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
		BEGIN
			-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
			-- add 1 day to the current due date and continue the loop.
			
			SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
			SET @created = @timein;
		END
		ELSE 
		BEGIN
			-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
		
			SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
			SET @created = @timein;
		END
	END

	-- Iterative Loop for calculating due date
	WHILE 1 = 1
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
		
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour), CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
			
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END

	-- This will never be reached, but the function needs a return statement outside the loop.
	RETURN NULL;
END
'
GO

--
-- Create or alter function [dbo].[GetActualResponse]
--
GO
PRINT (N'Create or alter function [dbo].[GetActualResponse]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetActualResponse') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.GetActualResponse
(
	@created datetime,
	@DeskRef nvarchar(50),
	@Severity numeric(26,0)
)
RETURNS Datetime -- return type
AS
BEGIN
	DECLARE @timein Datetime;						
	DECLARE @TicketDay nvarchar(50);
	DECLARE @DueMin int;
	DECLARE @TicketTime nvarchar(50);
	DECLARE @HoursCovered nvarchar(50);
	DECLARE @Beginhour time(7);
	DECLARE @Endhour time(7);
	DECLARE @str nvarchar(max);
	DECLARE @created2 nvarchar(100);
	DECLARE @deskref2 nvarchar(100);
	DECLARE @Severity1 numeric(26,0);
	DECLARE @OrgFk1 numeric(26,0);

	SET @HoursCovered = (SELECT HoursCovered FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Beginhour = (SELECT BeginHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @Endhour = (SELECT EndHour FROM vSDOrgDeskDef WHERE Deskref = @DeskRef);
	SET @TicketDay = DATENAME(WEEKDAY, @created);
	SET @TicketTime = CAST(@created as time);
	SET @DueMin = (SELECT ResponseTime FROM SD_Severity WHERE Deskref = @DeskRef AND id = @Severity);

	-- Check if the ticket''s day is covered by working hours
	IF EXISTS (SELECT * FROM vSDOrgDeskDef WHERE DaysCovered LIKE ''%'' + @TicketDay + ''%'' AND Deskref = @DeskRef)
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.
				DECLARE @actualResponseDateTime DATETIME;	
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				declare @AddResp int=DATEDIFF(MINUTE, @TicketTime, @Endhour);
				SET @timein = DATEADD(MINUTE,(@DueMin -@AddResp), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST (CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, cast(@DueMin as int), CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END
	ELSE IF (@HoursCovered = ''NoCoverage'')
	BEGIN
		-- If there is no coverage, add the due time to the current due date and return the calculated due date.
		SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
		RETURN @timein;
	END
	ELSE
	BEGIN
		-- If the ticket''s day is not covered by working hours, add 1 day to the current due date and set the day''s time to the Beginhour.
		--IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
		--	BEGIN
		--		-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
		--		-- add 1 day to the current due date and continue the loop.
				
		--		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
		--		SET @timein = DATEADD(MINUTE,cast( @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour) as int), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
		--		SET @created = @timein;
		--	END
		--	ELSE 
		--	BEGIN
		--		-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
		--		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
		--		SET @timein = DATEADD(MINUTE, 0, CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
		--		SET @created = @timein;
		--	END
			
		SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as datetime));
		SET @timein = DATEADD(day, 1, CAST(@created as datetime));--DATEADD(MINUTE, DATEDIFF(MINUTE, @TicketTime, @Beginhour), (CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME)));
		SET @created = @timein;
	END

	-- Iterative Loop for calculating due date
	WHILE 1 = 1
	BEGIN
		IF @HoursCovered = ''UseTheseHours''
		BEGIN
			IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) <= @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is less than the due time,
				-- add 1 day to the current due date and continue the loop.

				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
			SET @timein = DATEADD(MINUTE,cast( @DueMin - DATEDIFF(MINUTE, @TicketTime, @Endhour) as int), CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime > @Endhour OR @TicketTime < @Beginhour)
			BEGIN
				-- If ticket is logged after working hours, add 1 day to the current due date and continue the loop.
				SET @actualResponseDateTime = DATEADD(day, 1, CAST(@created as date));
				SET @timein = DATEADD(MINUTE, 0, CAST(CAST(@actualResponseDateTime AS DATETIME) + CAST(@Beginhour AS DATETIME) as datetime));
				SET @created = @timein;
			END
			ELSE IF (@TicketTime >= @Beginhour AND @TicketTime <= @Endhour AND DATEDIFF(MINUTE, @TicketTime, @Endhour) > @DueMin)
			BEGIN
				-- If ticket is logged within working hours and the time difference with the end hour is greater than 15 minutes,
				-- add the due time to the current due date and return the calculated due date.
				SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
				RETURN @timein;
			END
		END
		ELSE IF (@HoursCovered = ''24hrCoverage'')
		BEGIN
			-- If there is no coverage or 24-hour coverage, add the due time to the current due date and return the calculated due date.
			SET @timein = DATEADD(MINUTE, @DueMin, CAST(@created AS DATETIME));
			RETURN @timein;
		END
	END

	-- This will never be reached, but the function needs a return statement outside the loop.
	RETURN NULL;
END
'
GO

--
-- Create or alter view [dbo].[vSDGenAIBased]
--
GO
PRINT (N'Create or alter view [dbo].[vSDGenAIBased]')
GO
IF OBJECT_ID(N'dbo.vSDGenAIBased', 'V') IS NULL
EXEC sp_executesql N'



CREATE OR ALTER VIEW dbo.vSDGenAIBased
AS
select  Ticketref as TicketNumber, o.OrgName, r.ReqTypeRef as ReqType, st.StageCodeRef As Stage , stu.StatusCodeRef as Status,
p.PriorityCodeRef as Priority, se.Serveritycoderef as Severity, c.CategoryCodeRef as Category,
re.ResolutionCodeRef as Resolution, re.ResolutionDesc as ResolutionDescription, 
solutionNote,sourceType,TicketSummary,TicketDesc as TicketDescription,submitterType,submitterName,submitterEmailAddr as submitterEmailAddress,submitterPhone,
location,Department,Branch , t.TechLoginName as TechnicianAssigned,creationDateTime as CreationTime,
expectedDueDate DUEDATE, se.ResolutionTime, se.ResponseTime,TickResolvedDt as TicketResolvedDate,GETDATE() as [CURRENT_DATE]
from SDIncident s WITH(NOLOCK)
INNER JOIN SD_OrgMaster o WITH(NOLOCK) on o.Org_ID=s.organizationFK
LEFT JOIN SD_RequestType r  WITH(NOLOCK) on r.id=s.orgServDeskDefnFK and r.OrgRef=o.Org_ID
LEFT JOIN SD_Stage st  WITH(NOLOCK) on st.ID=s.sdStageFK and st.OrgDeskRef=s.organizationFK and st.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Status stu WITH(NOLOCK) on stu.ID=s.sdStatusFK and stu.OrgDeskRef=s.organizationFK and stu.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Priority p WITH(NOLOCK) on p.ID= s.sdPriorityFK and p.OrgDeskRef=s.organizationFK and p.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Severity se  WITH(NOLOCK) on se.ID=s.sdSeverityFK and se.OrgDeskRef=s.organizationFK and se.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Category c  WITH(NOLOCK) on c.ID=s.sdCategoryFK and c.OrgDeskRef=s.organizationFK and c.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Resolution re WITH(NOLOCK) on re.ID=s.sdSolutionTypeFK and re.OrgDeskRef=s.organizationFK and re.DeskRef=r.ReqTypeRef
LEFT JOIN SD_Technician t WITH(NOLOCK) on t.TechID = s.assigneeParticipantFK and t.OrgRef=s.organizationFK and t.RequstTypeRef=r.ReqTypeRef


'
GO

--
-- Create or alter view [dbo].[vSD_Tickets]
--
GO
PRINT (N'Create or alter view [dbo].[vSD_Tickets]')
GO
IF OBJECT_ID(N'dbo.vSD_Tickets', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.vSD_Tickets
AS
  
   select  s.ID ,req.ReqTypeRef ServiceDesk,
			s.Ticketref TicketNumber,s.TicketSummary Summary,s.partitionid partitionid,s.categoryFullText Category,
			p.PriorityCodeRef Priority,a.StatusCodeRef Status,se.Serveritycoderef Severity, s.creationDateTime CreationDate,
			s.TicketDesc Description,s.submitterType SubmitterType,s.submitterName SubmitterName,
			s.submitterEmailAddr SubmitterEmail,s.submitterPhone SubmitterPhone,s.sourceType SourceType,
			s.expectedDueDate DueDate,
			s.SubmitterID SubmitterID,s.sdCategoryFK,s.sdStatusFK,s.sdSeverityFK,s.sdPriorityFK,s.assigneeParticipantFK,
			t.TechLoginName TechLoginName,s.previousStageFK,s.TickResolvedDt ExpectedResolutionDt,s.closedDateTime ClosedDate,
			se.ResponseTime ResponseTime,se.ResolutionTime ResolutionTime,
			s.Department,s.location,cl.SerialNo,s.sdStageFK,s.organizationFK OrgId,st.StageCodeRef Stage,s.TickResolvedDt as ResolutionDt,
			case when (
			(CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			-			
			se.ResponseTime)<=10
			 then ''green''
			 when (
			 (CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			 -se.ResponseTime)  >10 and  
			 (CASE  WHEN FieldValue IS NOT NULL THEN Datediff(MINUTE, s.creationDateTime, cast( FieldValue as datetime))
			ELSE Datediff(MINUTE, s.creationDateTime, s.expectedDueDate) END)
			 <se.ResponseTime
			 then ''yellow''
			 else 
			 ''red''
			 end as ''color'',
			 a.StatusColorCode,
			 CASE 
                WHEN DATEDIFF(HOUR, creationDateTime, GETDATE()) <= 1 THEN ''Last1Hour1''
                WHEN DATEDIFF(HOUR, creationDateTime, GETDATE()) <= 24 THEN ''Last24Hours''
                WHEN DATEDIFF(DAY, creationDateTime, GETDATE()) <= 30 THEN ''Last30Days''
                WHEN DATEDIFF(DAY, creationDateTime, GETDATE()) <= 90 THEN ''Last90Days''
                ELSE ''Morethan90Days''
            END AS ''TicketDayWise'' ,
			sv.autoArchiveTime autoArchiveTime,
			s.orgServDeskDefnFK,s.solutionNote,
			re.ResolutionCodeRef as ''Resolution''
			from SDIncident s  With(NOLOCK)
left join SD_Status a With(NOLOCK) on s.sdStatusFK=a.ID
left join SD_Category c With(NOLOCK) on s.sdCategoryFK=c.ID
left join SD_Priority p With(NOLOCK) on s.sdPriorityFK=p.ID
left join SD_Severity se With(NOLOCK) on s.sdSeverityFK=se.ID
left join SD_Technician t With(NOLOCK) on s.assigneeParticipantFK=t.TechID
left join SD_CloudTickDetails cl With(NOLOCK) on cl.TicketRef=s.Ticketref and cl.OrgID=s.organizationFK
left join SD_Stage st With(NOLOCK) on s.sdStageFK=st.ID
left join SD_CustomFieldTicketValues b With(NOLOCK) on s.Ticketref=b.TicketNo and s.organizationFK=b.OrgId and  FieldName like ''%openend%''
INNER JOIN SD_RequestType req on req.id=s.orgServDeskDefnFK and req.OrgRef=s.organizationFK
INNER JOIN SD_ServDeskDefn sv WITH (NOLOCK) ON req.ReqTypeRef = sv.Deskref and sv.OrgFk=s.organizationFK
left join SD_Resolution re WITH (NOLOCK) ON s.sdSolutionTypeFK=re.ID
'
GO

--
-- Create or alter procedure [dbo].[SP_getFilterData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_getFilterData]')
GO
IF OBJECT_ID(N'dbo.SP_getFilterData', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROC dbo.SP_getFilterData
(
@OrgId varchar(100)=null,
@TicketNumber varchar(100)=null,
@Summary  varchar(1000)=null,
@Priority  varchar(100)=null,
@Severity  varchar(100)=null,
@Status  varchar(100)=null,
@ServiceDesk varchar(50)=null,
@fromdt Datetime=null,
@todt Datetime =null,
@option varchar(50)=null
)

AS
BEGIN
if(@option=''FILTER'')
begin
Select distinct * from vSD_Tickets
  where OrgId=@OrgId 
	  and ISNULL(ServiceDesk,'''') LIKE CASE WHEN ISNULL(@ServiceDesk,'''')='''' THEN ISNULL(ServiceDesk,'''') else ''%''+@ServiceDesk+''%'' END
end
else
begin
Select distinct * from vSD_Tickets
  where OrgId=@OrgId 
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END
	  and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END
	  and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END
	  and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END
	  and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END
	  and ISNULL(ServiceDesk,'''') LIKE CASE WHEN ISNULL(@ServiceDesk,'''')='''' THEN ISNULL(ServiceDesk,'''') else ''%''+@ServiceDesk+''%'' END
	  and cast(CreationDate as date) between cast(@fromdt as date) and cast(@todt as date)
end
END


'
GO

--
-- Create or alter procedure [dbo].[SP_FilterDataArc]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_FilterDataArc]')
GO
IF OBJECT_ID(N'dbo.SP_FilterDataArc', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER PROC dbo.SP_FilterDataArc  
(  
@OrgId varchar(100),  
@TicketNumber varchar(100),  
@Summary  varchar(1000),  
@Priority  varchar(100),  
@Severity  varchar(100),  
@Status  varchar(100)  
)  
  
  
AS  
BEGIN  
Select distinct * from vSD_Tickets  
  where OrgId=@OrgId AND (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1)  
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END  
   and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END  
   and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END  
   and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END  
   and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END  
   and  ( Status=''Closed'' or Status=''Resolved'' ) 
END  
  
  
  
  
  
  
  
  
  
  
  '
GO

--
-- Create or alter procedure [dbo].[SP_FilterData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_FilterData]')
GO
IF OBJECT_ID(N'dbo.SP_FilterData', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROC dbo.SP_FilterData
(
@OrgId varchar(100),
@TicketNumber varchar(100),
@Summary  varchar(1000),
@Priority  varchar(100),
@Severity  varchar(100),
@Status  varchar(100)
)


AS
BEGIN
Select distinct * from vSD_Tickets
  where OrgId=@OrgId AND (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1)
    and TicketNumber LIKE CASE WHEN ISNULL(@TicketNumber,'''')='''' THEN TicketNumber else ''%''+@TicketNumber+''%'' END
	  and Summary LIKE CASE WHEN ISNULL(@Summary,'''')='''' THEN Summary else ''%''+@Summary+''%'' END
	  and ISNULL([Priority],'''') LIKE CASE WHEN ISNULL(@Priority,'''')='''' THEN ISNULL([Priority],'''') else ''%''+@Priority+''%'' END
	  and ISNULL(Severity,'''') LIKE CASE WHEN ISNULL(@Severity,'''')='''' THEN ISNULL(Severity,'''') else ''%''+@Severity+''%'' END
	  and ISNULL(Status,'''') LIKE CASE WHEN ISNULL(@Status,'''')='''' THEN ISNULL(Status,'''') else ''%''+@Status+''%'' END
END











  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketTech_Arch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketTech_Arch]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketTech_Arch', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketTech_Arch  
  
(  
@PageIndex Int =1,  
@PageSize int =5,  
@TicketDayWise varchar(50)=null,  
@Option varchar(50)=null,  
@SubmitterID varchar(100)=null,  
@Desk nvarchar(100)=NULL,  
@TechLoginName nvarchar(100)=NULL,  
@EngLocation nvarchar(100)=NULL,  
@OrgID numeric(18,0)=null,  
@TotalRow int output  
  
)  
AS   
SET NOCOUNT ON  
BEGIN  
IF(@Option=''WithFilter'')  
BEGIN  
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets)  
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')  
 BEGIN 
 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' ) AND
 TicketDayWise=@TicketDayWise  
  and ServiceDesk=@Desk and (TechLoginName=@TechLoginName  ) and location=@EngLocation 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc 
 
 END   
 else  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )
   AND ServiceDesk=@Desk and (TechLoginName=@TechLoginName )  and location=@EngLocation 
   AND TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc  
   END  
 END  
 IF(@Option=''WithoutFilter'')  
BEGIN 
set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )  and ServiceDesk=@Desk  and 
 ( TechLoginName=@TechLoginName  --or TechLoginName is null  
 and OrgId=@OrgID ));
  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  (ClosedDate is not null and  DATEDIFF(day, ClosedDate, getdate()) >= 1 )  and ServiceDesk=@Desk  and 
 ( TechLoginName=@TechLoginName  --or TechLoginName is null  
 and OrgId=@OrgID  )
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc 
 END  
 END  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMasterstatusWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMasterstatusWise]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMasterstatusWise', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_spGetTicketMasterstatusWise

(
@PageIndex Int =1,
@PageSize int =5,
@TicketDayWise varchar(50)=null,
@Option varchar(50)=null,
@SubmitterID varchar(100)=null,
@Desk nvarchar(100)=NULL,
@TechLoginName nvarchar(100)=NULL,
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@OrgId nvarchar(100)=NULL,
	@IsActive bit =NULL,

	@Location nvarchar(100)=NULL,
@TotalRow int output

)
AS 
SET NOCOUNT ON
BEGIN
	
IF(@Option=''Open'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  
		 or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open'' and OrgId=@OrgId );
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and Status=''Open''
	and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc 


		END
IF(@Option=''WIP'')
	BEGIN
		 set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime or 
		 ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'') and OrgID=@OrgId)  ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime or ClosedDate is null )and ServiceDesk=@Desk and (Status =''WIP'') and OrgID=@OrgId  
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc			

		END
IF(@Option=''Assigned'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets  where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName is not null and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc	

		END
IF(@Option=''AssignedOther'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName 
 is null and OrgId=@OrgId ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and TechLoginName 
   is null and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END
IF(@Option=''DueSoon'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) 
and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and (Status!=''Closed'' and status!=''Resolved'') and OrgId=@OrgId   and DATEDIFF(MINUTE,DueDate,GETDATE())<5
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END

IF(@Option=''OverDue'')
	BEGIN
Select @TotalRow=Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) 
and (Status!=''Closed'' and status!=''Resolved'') 
   and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 ;

WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and (Status!=''Closed'' and status!=''Resolved'') 
   and ServiceDesk=@Desk and OrgId=@OrgId and DATEDIFF(MINUTE,DueDate,GETDATE())>0 
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc

END
IF(@Option=''Hold'')
	BEGIN
set @TotalRow=(select Count(id) from dbo.vSD_Tickets where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and 
   Status=''Hold'' and OrgId=@OrgId);
			
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where ( DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and 
   Status=''Hold'' and OrgId=@OrgId
 )
SELECT *
FROM RankedTickets
	where    RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
order by TicketNumber desc
END

 END
'
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMaster_Arch]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMaster_Arch]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMaster_Arch', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketMaster_Arch  
(  
@PageIndex Int =1,  
@PageSize int =5,  
@TicketDayWise varchar(50)=null,  
@Option varchar(50)=null,  
@SubmitterID varchar(100)=null,  
@TechLoginName nvarchar(100)=NULL,  
@Desk nvarchar(100)=NULL,  
@EngLocation nvarchar(100)=NULL,  
@OrgId numeric(18,0)=NULL,  
@TotalRow int output  
  
)  
AS   
SET NOCOUNT ON  
BEGIN  
 IF(@Option=''WithFilter'')  
BEGIN  
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)  
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets    
 where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  
   and  TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END 
   and ServiceDesk=@Desk  and OrgId=@OrgId 
   )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc 
 END   
 else  
 BEGIN  
WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  and ServiceDesk=@Desk
 and  TicketDayWise=CASE WHEN ISNULL(@TicketDayWise,''0'')=''0'' then TicketDayWise else @TicketDayWise END  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc
   END  
 END  
 IF(@Option=''WithoutFilter'')  
 BEGIN  
   set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where DATEDIFF(day,ClosedDate,GETDATE())>=1   and
   ( Status=''Closed'' or Status=''Resolved'' )  and
ServiceDesk=@Desk and OrgId=@OrgId) ;
   
   WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
   where  DATEDIFF(day,ClosedDate,GETDATE())>=1   and ( Status=''Closed'' or Status=''Resolved'' )  and ServiceDesk=@Desk  and OrgId=@OrgId
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by TicketNumber desc
  END  
 END  '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketMaster]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketMaster]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketMaster', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Procedure dbo.SD_spGetTicketMaster
(      
@PageIndex Int =1,      
@PageSize int =5,      
@TicketDayWise varchar(50)=null,      
@Option varchar(50)=null,      
@SubmitterID varchar(100)=null,      
@TechLoginName nvarchar(100)=NULL,      
@Desk nvarchar(100)=NULL,      
@OrgId nvarchar(100)=NULL,      
@TotalRow int output      
      
)      
AS       
SET NOCOUNT ON      
BEGIN      
 IF(@Option=''WithFilter'')      
BEGIN      
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSDTicket where ServiceDesk=@Desk)      
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')      
 BEGIN 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
 where  DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc      
 END       
 else      
 BEGIN 
 WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets   
 where  (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and OrgId=@OrgId     
 and (Stage !=''Resolved'' and Stage !=''Closed'') and TicketDayWise<=@TicketDayWise 
     )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 

   END      
 END      
 IF(@Option=''WithoutFilter'')      
 BEGIN      
   Select @TotalRow=Count(id) from dbo.vSD_Tickets where ServiceDesk=@Desk and  (Status !=''Resolved'' and status!=''Closed'') and OrgId=@OrgId;    
     WITH RankedTickets AS 
  (  
   select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets 
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
	   and  (Status !=''Resolved'' and status!=''Closed'')
       )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 
  END      
 END '
GO

--
-- Create or alter procedure [dbo].[SD_spGetTicketAllEngineer]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spGetTicketAllEngineer]')
GO
IF OBJECT_ID(N'dbo.SD_spGetTicketAllEngineer', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_spGetTicketAllEngineer
(      
@PageIndex Int =1,      
@PageSize int =5,      
@TicketDayWise varchar(50)=null,      
@Option varchar(50)=null,      
@SubmitterID varchar(100)=null,      
@TechLoginName nvarchar(100)=NULL,      
@Desk nvarchar(100)=NULL,      
@OrgId nvarchar(100)=NULL,      
@TotalRow int output      
      
)      
AS       
SET NOCOUNT ON      
BEGIN      
 IF(@Option=''WithFilter'')      
BEGIN      
 set @TotalRow=(Select cast(Count(id) as int) from dbo.vSD_Tickets where DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId)      
 if(@TicketDayWise=''Last1Hour'' or @TicketDayWise=''Morethan90Days'')      
 BEGIN 
  WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, *  from vSD_Tickets  
 where  DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null  and  (Stage !=''Resolved'' and Stage !=''Closed'') 
 and  TicketDayWise=@TicketDayWise  and ServiceDesk=@Desk  and OrgId=@OrgId 
 )
SELECT *
FROM RankedTickets
WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
 order by CreationDate desc      
 END       
 else      
 BEGIN 
 WITH RankedTickets AS 
  (
 select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets   
 where  (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk and OrgId=@OrgId     
 and (Stage !=''Resolved'' and Stage !=''Closed'') and TicketDayWise<=@TicketDayWise 
     )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 

   END      
 END      
 IF(@Option=''WithoutFilter'')      
 BEGIN      
   Select @TotalRow=Count(id) from dbo.vSD_Tickets where ServiceDesk=@Desk and  (Status !=''Resolved'' and status!=''Closed'') and OrgId=@OrgId;    
     WITH RankedTickets AS 
  (  
   select distinct ROW_NUMBER() OVER (ORDER BY TicketNumber DESC) AS RowNum, * from  vSD_Tickets 
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
	   and  (Status !=''Resolved'' and status!=''Closed'')
       )
SELECT *
FROM RankedTickets WHERE RowNum BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
         order by TicketNumber desc 
  END      
 END '
GO

--
-- Create or alter procedure [dbo].[SD_spDashboardCount1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDashboardCount1]')
GO
IF OBJECT_ID(N'dbo.SD_spDashboardCount1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spDashboardCount1      
(      
 @ID numeric(18,0) = NULL,      
 @adminName varchar(100) = NULL,      
 @SecretKey nvarchar(max) =NULL,      
 @Desk nvarchar(100)= NULL,      
 @IsActive bit =NULL,      
 @TechLoginName nvarchar(100)=NULL,      
 @Location nvarchar(100)=NULL,      
  @OrgId nvarchar(100)=NULL,      
  @Status nvarchar(100)=NULL,   
 @Option varchar(50)      
       
 )      
 AS      
 BEGIN      
       
 if(@Option=''AllTicketStatus'')     
 BEGIN     
  select Status,count(TicketNumber) as ''Count'' from  vSD_Tickets with (NOLOCK)    
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  
  group by Status 
  union
    select ''UnAssigned'' UnAssigned,count(TicketNumber) as ''Count'' from  vSD_Tickets  with (NOLOCK)
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  and assigneeParticipantFK is null
	union
    select ''Assigned'' Assigned,count(TicketNumber) as ''Count'' from  vSD_Tickets  with (NOLOCK)
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId     
    and  (Status !=''Resolved'' and status!=''Closed'')  and assigneeParticipantFK is not null
END     
 if(@Option=''TicketStatusDetail'')  
 BEGIN
 if(@Status=''UnAssigned'')
 begin
 select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
   and assigneeParticipantFK is null    
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end
 else if(@Status=''Assigned'')
 begin
  select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId 
   and assigneeParticipantFK is not null    
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end
 else
 begin
  select * from  vSD_Tickets  WITH(NOLOCK)      
   where (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) and ServiceDesk=@Desk  and OrgId=@OrgId and Status=@Status   
    and  (Status !=''Resolved'' and status!=''Closed'')  
 order by CreationDate desc  
 end  
  END
 END 

'
GO

--
-- Create or alter procedure [dbo].[SD_spDashboardCount]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spDashboardCount]')
GO
IF OBJECT_ID(N'dbo.SD_spDashboardCount', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spDashboardCount
(
	@ID numeric(18,0) = NULL,
	@adminName varchar(100) = NULL,
	@SecretKey nvarchar(max) =NULL,
	@Desk nvarchar(100)= NULL,
	@IsActive bit =NULL,
	@TechLoginName nvarchar(100)=NULL,
	@Location nvarchar(100)=NULL,
		@OrgId nvarchar(100)=NULL,
	@Option varchar(50)
	
	)
	AS
	BEGIN
	
	if(@Option=''AllTicketStatus'')
	
	BEGIN

SELECT 
sum(case when (Status =''open'' or stage = ''open'') then 1 else 0 end) AS [Open],
sum(case when (Status =''wip'' or stage = ''wip'') then 1 else 0 end) AS WIP,
sum(case when (Status =''Hold'' or stage = ''Hold'') then 1 else 0 end) AS Hold,
sum(case when (TechLoginName is Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null))
then 1 else 0 end) AS AssignedOther,
sum(case when (TechLoginName is not Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null)
) then 1 else 0 end) AS Assigned,
sum(case when (DATEDIFF(MINUTE,DueDate,GETDATE())<5 and ( Status !=''Closed'' and Status!=''Resolved'')
or  DATEDIFF(MINUTE,DueDate,GETDATE())>0 and ( Status !=''Closed'' and Status!=''Resolved'')) then 1 else 0 end) AS OverDue
from vSD_Tickets where  ServiceDesk=@Desk and OrgId=@OrgId

	END
	if(@Option=''AllTicketStatusTech'')
	

	BEGIN
	SELECT 
sum(case when (Status =''open'' or stage = ''open'') then 1 else 0 end) AS [Open],
sum(case when (Status =''wip'' or stage = ''wip'') then 1 else 0 end) AS WIP,
sum(case when (Status =''Hold'' or stage = ''Hold'') then 1 else 0 end) AS Hold,
sum(case when (TechLoginName is Null and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null)) then 1 else 0 end) AS AssignedOther,
sum(case when (TechLoginName is not Null) and (DATEDIFF(day,ClosedDate,GETDATE())<= autoArchiveTime  or ClosedDate is null) then 1 else 0 end) AS Assigned,
sum(case when (DATEDIFF(MINUTE,DueDate,GETDATE())<5 and ( Status !=''Closed'' and Status!=''Resolved'')
or  DATEDIFF(MINUTE,DueDate,GETDATE())>0 and ( Status !=''Closed'' and Status!=''Resolved'')) then 1 else 0 end) AS OverDue
from vSD_Tickets where  ServiceDesk=@Desk and OrgId=@OrgId and TechLoginName=@TechLoginName

	END
	END



'
GO

--
-- Create or alter procedure [dbo].[SD_ServiceDeskCallAgingDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ServiceDeskCallAgingDashboard]')
GO
IF OBJECT_ID(N'dbo.SD_ServiceDeskCallAgingDashboard', 'P') IS NULL
EXEC sp_executesql N' CREATE OR ALTER procedure dbo.SD_ServiceDeskCallAgingDashboard  
  (          
     @Assignee varchar(50)=null,  
     @Aging varchar(50)=null,  
     @ServiceDesk varchar(50)=null,  
     @FROM varchar(50)=null,  
     @TO varchar(50)=null,  
     @OrgId numeric(18,0)=null,  
     @Option varchar(50)   
  )  
  AS  
  BEGIN  
    if(@Option=''Age'')  
    BEGIN  
      
  SELECT TechLoginName ''Assignee'',[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM   
  (   
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,TechLoginName FROM   
  (  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (SELECT  v.TicketNumber,v.TechLoginName,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age  
    FROM vSD_Tickets AS v  with(nolock)  
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId and ServiceDesk=@ServiceDesk 
	 and CreationDate between  @FROM and  @TO   and TechLoginName is not null
     ) SourceTable  
    )PVT GROUP BY Aging,TechLoginName  
     )PVTT  
     PIVOT  
     (  
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])  
     )FINAL  
  
    END  
  
    if(@Option=''AgeDetails'')  
    BEGIN  
  
  SELECT * FROM(  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName ''Assignee'',v.CreationDate ''Created date'',DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age  
    FROM vSD_Tickets AS v  with(nolock)
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId and ServiceDesk=@ServiceDesk and CreationDate 
	 between  @FROM and  @TO   and TechLoginName is not null
     )   
     SourceTable  
     )SourceTable1 WHERE  Aging=@Aging AND Assignee=@Assignee  
  
    END  
  END  



'
GO

--
-- Create or alter procedure [dbo].[SD_ServiceDeskAssigneeCallDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ServiceDeskAssigneeCallDashboard]')
GO
IF OBJECT_ID(N'dbo.SD_ServiceDeskAssigneeCallDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.SD_ServiceDeskAssigneeCallDashboard        
  (                
    @Assignee varchar(50)=null,        
    @Aging varchar(50)=null,        
    @Status varchar(50)=null,        
     @ServiceDesk varchar(50)=null,        
     @FROM varchar(50)=null,        
     @TO varchar(50)=null,        
     @OrgId numeric(18,0)=null,        
     @Option varchar(50)         
        
        
--NULL        
--Hold        
--Resolved        
--Closed        
--Open        
--WIP        
  )        
  AS        
  BEGIN        
        
        if(@Option=''NotOpenClosedPie'')        
     BEGIN        
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status        
       from dbo.vSD_Tickets with(nolock)    
    where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO and   
    (Status!=''Closed'' and Status!=''Resolved'')        
      group by  Status        
    END        
        
     if(@Option=''TicketDetails'')        
     BEGIN        
     SELECT  v.TicketNumber ''Ticket Number'',max(v.Summary) Summary,max(v.TechLoginName) TechLoginName,max(v.CreationDate) ''CreationDate date'',      
   max(DATEDIFF(MINUTE, v.CreationDate,  GETDATE())) AS Age        
  FROM dbo.vSD_Tickets AS v  WITH(NOLOCK)      
    where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CAST(CreationDate AS DATE) between  @FROM and  @TO and v.Status=@Status          
        and  (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')       
  group by v.TicketNumber      
    END        
        
    if(@Option=''OpenClosedPie'')        
     BEGIN        
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status        
       from dbo.vSD_Tickets WITH(NOLOCK)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO       
    and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')        
      group by  Status        
        
    END        
     if(@Option=''NotOpenClosed'')        
     BEGIN        
      SELECT TechLoginName ''Assignee'',           
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved]         
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)) as Total        
      FROM          
      (select TechLoginName, Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status        
       from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO       
    and TechLoginName is not null      
      group by  TechLoginName, Status) AS SourceTable          
      PIVOT          
      (          
      MAX([Ticket Count])          
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved] )          
      ) AS PivotTable;          
        
    END        
     if(@Option=''OpenClosed'')        
     BEGIN        
   --       SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]        
        
   --      ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]         
                  
   --    FROM          
   --     (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status        
   --      from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO        
   --      UNION        
   --      select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status        
   --      from dbo.vSD_Tickets with(nolock) where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CAST(CreationDate AS DATE) between  @FROM and  @TO and Status!=''Closed'' and Status!=''Resolved''         
   --      UNION        
   --      select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status        
   --      from dbo.vSD_Tickets with(nolock)  where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable          
   --PIVOT          
   --    (          
   --    MAX([Ticket Count])          
   --    FOR status IN ([Total], [Open],[Closed])          
   --    ) AS PivotTable;        

   SELECT  
    SUM(ISNULL([Total], 0)) AS [Total], 
    SUM(ISNULL([Open], 0)) AS [Open], 
    SUM(ISNULL([Closed], 0)) AS [Closed],
    CASE 
        WHEN SUM(ISNULL([Total], 0)) = 0 THEN 0 -- Handle division by zero
        ELSE (SUM(ISNULL([Closed], 0)) * 100 / SUM(ISNULL([Total], 0))) 
    END AS [Closed Percent]
FROM  
    (
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Total'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK)  
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO
        UNION        
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Open'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK) 
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO 
            AND Status NOT IN (''Closed'', ''Resolved'')         
        UNION        
        SELECT 
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count], 
            ''Closed'' AS Status        
        FROM dbo.vSD_Tickets WITH (NOLOCK)  
        WHERE 
            ServiceDesk = @ServiceDesk 
            AND OrgId = @OrgId  
            AND CAST(CreationDate AS DATE) BETWEEN @FROM AND @TO 
            AND Status IN (''Closed'', ''Resolved'') 
    ) AS SourceTable          
PIVOT          
    (
        MAX([Ticket Count])          
        FOR Status IN ([Total], [Open], [Closed])          
    ) AS PivotTable;

        
        
    END        
        
            
  END   
  
  
  
  
  '
GO

--
-- Create or alter procedure [dbo].[sd_SDDepartmentCallDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[sd_SDDepartmentCallDashboard]')
GO
IF OBJECT_ID(N'dbo.sd_SDDepartmentCallDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.sd_SDDepartmentCallDashboard    
  (            
    @Assignee varchar(50)=null,    
    @Aging varchar(50)=null,    
     @ServiceDesk varchar(50)=null,    
     @FROM varchar(50)=null,    
     @OrgId numeric(18,0)=null,    
     @TO varchar(50)=null,    
     @Status varchar(50)=null,    
     @Option varchar(50)     
    
    
--NULL    
--Hold    
--Resolved    
--Closed    
--Open    
--WIP    
  )    
  AS    
  BEGIN    
    
        if(@Option=''NotOpenClosedPie'')    
     BEGIN    
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status    
       from vSD_Tickets      
       where Status is not null and ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO --and Status!=''Closed'' and Status!=''Resolved''    
      group by  Status    
    
    END    
     if(@Option=''TicketDetails'')    
     BEGIN    
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',    
     v.ClosedDate from     
     vSD_Tickets v     
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and Status=@Status --order by  v.TicketNumber asc    
          
    END    
    if(@Option=''OpenClosedPie'')    
     BEGIN    
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status    
       from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')    
      group by  Status    
    
    END    
     if(@Option=''NotOpenClosed'')    
     BEGIN    
    SELECT Department,       
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved] ,ISNULL([Under Process],0) as [Under Process]    
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)+ ISNULL([Under Process],0)) as Total    
      FROM      
      (select Department as ''Department'',count(TicketNumber) as [Ticket Count],Status    
      from    
      vSD_Tickets b  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO    
      group by  Department, Status) AS SourceTable      
      PIVOT      
      (      
      MAX([Ticket Count])      
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved],[Under Process])      
      ) AS PivotTable;      
    
    END    
     if(@Option=''OpenClosed'')    
     BEGIN    
          SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]    
    
         ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]     
              
       FROM      
        (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO    
         UNION    
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk and OrgId=@OrgId and CreationDate between  @FROM and  @TO and Status!=''Closed'' and Status!=''Resolved''     
         UNION    
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status    
         from vSD_Tickets  where ServiceDesk=@ServiceDesk  and OrgId=@OrgId and CreationDate between  @FROM and  @TO and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable      
       PIVOT      
       (      
       MAX([Ticket Count])      
       FOR status IN ([Total], [Open],[Closed])      
       ) AS PivotTable;    
    
    
    END    
    
        
  END '
GO

--
-- Create or alter procedure [dbo].[sd_SDDepartmentCallAgingDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[sd_SDDepartmentCallAgingDashboard]')
GO
IF OBJECT_ID(N'dbo.sd_SDDepartmentCallAgingDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER procedure dbo.sd_SDDepartmentCallAgingDashboard  
  (          
     @Assignee varchar(50)=null,  
     @Aging varchar(50)=null,  
     @ServiceDesk varchar(50)=null,  
     @FROM varchar(50)=null,  
     @OrgId numeric(18,0)=null,  
     @TO varchar(50)=null,  
     @Option varchar(50)   
  )  
  AS  
  BEGIN  
    if(@Option=''Age'')  
    BEGIN  
      
  SELECT Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM   
  (   
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM   
  (  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a  
right join   
dbo.vSD_Tickets v on    
a.TicketNo=v.TicketNumber     
and  
a.OrgId=v.OrgId  
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved'' and ServiceDesk=@ServiceDesk and a.OrgId=@OrgId and CreationDate between  @FROM and  @TO) SourceTable  
    )PVT GROUP BY Aging,Department  
     )PVTT  
     PIVOT  
     (  
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])  
     )FINAL  
  
    END  
  
    if(@Option=''AgeDetails'')  
    BEGIN  
  
  SELECT distinct * FROM(  
  SELECT *,  
  CASE  
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''  
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''  
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''  
   ELSE ''More than 10 Days''  
  END AS Aging  
  FROM (select Department as ''Department'',TicketNumber,v.Summary  
  ,v.CreationDate ''Created date'',DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age   
  from SD_CustomFieldTicketValues a  
right join   
dbo.vSD_Tickets v on    
a.TicketNo=v.TicketNumber    
and  
a.OrgId=v.OrgId  
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved''   
     and ServiceDesk=@ServiceDesk and v.OrgId=@OrgId and CreationDate between  @FROM and  @TO   
     )   
     SourceTable  
     )SourceTable1 WHERE  Aging=@Aging AND Department=@Assignee  
  
    END  
  END  '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMain]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMain]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMain', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMain  
(  
@FCategory varchar(50)=NULL,  
@TicketStatus varchar(50)=NULL,  
@OrgId numeric(18,0)=null,  
@Scope varchar(50)=NULL,  
@Option varchar(50)  
)  
AS  
BEGIN  
  
 if(@Option=''DashboardsCounts'')  
 BEGIN  
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (  
  select count(*) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''  from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select 0 ''SevenDaysTotal'',count(*) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''  from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(*) as TodayTotal,0 ''Total'' from vSD_Tickets WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and OrgId=@OrgId and ServiceDesk=''Incident''  
  Union  
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(*) as Total  from vSD_Tickets  where ServiceDesk=''Incident'' and OrgId=@OrgId  
  ) AS Final    
 END  
  
 if(@Option=''SevenDaysTickets'')  
 BEGIN    
   select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
    
   
   
 WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''   
 END  
  
 if(@Option=''ThirtyDaysTickets'')  
 BEGIN   
     select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
  
       from vSD_Tickets a    
  
     
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''   
 END  
  
 if(@Option=''TodayTickets'')  
 BEGIN  
    
   select  distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   
  
 WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId  
   
    
 END  
 if(@Option=''TotalTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets  where ServiceDesk=''Incident'' and Status is not null  group by Status   
    
 END  
 if(@Option=''TodayTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and OrgId=@OrgId and ServiceDesk=''Incident'' group by Status   
    
 END  
 if(@Option=''TodayTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   
   
WHERE  (a.ServiceDesk = ''Incident'')   
     AND CreationDate >= DATEADD(DAY, 0, CAST(CAST(GETDATE() as Date)as datetime))  and OrgId=@OrgId 
 and a.Status= @TicketStatus   
    
 END  
 if(@Option=''Last7DaysTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
  
   
   
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  
 and ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus  
   
    
 END  
  
 if(@Option=''Last30DaysTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a  
    
  
 WHERE CreationDate >= DATEADD(DAY, -30, GETDATE())  
 and ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus   
  
    
 END  
  
 if(@Option=''OverAllTicketsStatusWise'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   WHERE  
  ServiceDesk=''Incident''  and OrgId=@OrgId  
 and a.Status= @TicketStatus   
    
 END  
 if(@Option=''OverAllTickets'')  
 BEGIN  
    
  select distinct  TicketNumber ''Ticket Number''  
      ,Summary ''Ticket Summary''  
      ,a.Status       
      ,Severity  
      ,Category  
      ,SubmitterName ''Submitter Name''  
      ,SubmitterEmail ''Submitter Email''  
      ,SubmitterPhone ''Submitter Phone''  
      ,TechLoginName     
        
      ,CreationDate  
      ,ClosedDate  
    from vSD_Tickets a    
   WHERE  
  ServiceDesk=''Incident''  and OrgId=@OrgId  
   
    
 END  
  
 if(@Option=''Last7DaysTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status  
    from vSD_Tickets a    
WHERE CreationDate >= DATEADD(DAY, -7, GETDATE()) and ServiceDesk=''Incident'' and OrgId=@OrgId   group by a.Status   
    
 END  
  
  
 if(@Option=''Last30DaysTicketsPie'')  
 BEGIN  
    
   select COUNT( distinct TicketNumber) as TotalTickets ,Status  
from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, GETDATE()) and ServiceDesk=''Incident'' and OrgId=@OrgId  group by Status   
    
 END  
  
 if(@Option=''ResponseSLAPie'')  
 BEGIN  
    
   SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets  
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''responsesla'' and Desk=''Incident''   
   group by CustomFieldValue    
    
 END  
 if(@Option=''ResolutionSLAPie'')  
 BEGIN  
    
   SELECT CustomFieldValue,COUNT( distinct TicketNumber)  as TotalTickets  
            FROM  kasadmin.vSDCustomFieldDetails  where CustomFieldName=''resolutionsla'' and Desk=''Incident''  and Status=''Closed''  
   group by CustomFieldValue    
    
 END  
 if(@Option=''SeverityWisePie'')  
 BEGIN  
   
    
   select  Severity ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets  
   where ServiceDesk=''Incident''    
   group by Severity   
 END  
 if(@Option=''SeverityWiseResolvedPie'')  
 BEGIN  
   select  Severity ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets  
   where ServiceDesk=''Incident''  and Status=''Closed''  
   group by Severity   
 END  
  if(@Option=''SeverityWiseResponse'')  
 BEGIN  
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
   select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s  
   join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber  
   where  
   s.ServiceDesk=''Incident''  and dd.CustomFieldName=''responsesla''  
   group by s.Severity,CustomFieldValue   
  ) AS A   order by Severity asc  
    
  END  
  
  if(@Option=''SeverityWiseResolution'')  
 BEGIN  
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
   select  s.Severity ,COUNT(s.TicketNumber) as TotalTickets,CustomFieldValue from kasadmin.vSDTicket s  
   join kasadmin.vSDCustomFieldDetails dd on s.TicketNumber=dd.TicketNumber  
   where  
   s.ServiceDesk=''Incident''  and dd.CustomFieldName=''resolutionsla'' and s.Status=''Closed''  
   group by s.Severity,CustomFieldValue   
  ) AS A   order by Severity asc  
    
  END  
 if(@Option=''SeverityWisePieeeee'')  
 BEGIN  
   
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
  select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''  
      group by s.Severity,d.CustomFieldValue  
  
      union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''  
      group by s.Severity,d.CustomFieldValue  
     union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''  
      group by s.Severity,d.CustomFieldValue  
      ) AS A  
      
      
    
 END  
 if(@Option=''SeverityWiseResolutionPie'')  
 BEGIN  
   
 select (Severity +'' (''+CustomFieldValue+'')'') as Severity, TotalTickets from   
 (  
  select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity1''  
      group by s.Severity,d.CustomFieldValue  
       union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity2''  
      group by s.Severity,d.CustomFieldValue  
      union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity3''  
      group by s.Severity,d.CustomFieldValue  
     union  
       select s.Severity,COUNT(s.TicketNumber) as TotalTickets,d.CustomFieldValue from kasadmin.vSDTicket s  
    join kasadmin.vSDCustomFieldDetails d on s.TicketNumber=d.TicketNumber  
    where ServiceDesk=''Incident''  and d.CustomFieldName=''responsesla'' and Severity=''Severity4''  
      group by s.Severity,d.CustomFieldValue  
      ) AS A  
      
      
    
 END  
  
 if(@Option=''FirstCategoryWiseTickets'')  
  
 BEGIN  
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets where ServiceDesk=''Incident'' and OrgId=@OrgId AND  category like ''%''+@FCategory+''%''  
  
 END  
  
END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardDayWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardDayWise]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardDayWise', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardDayWise    
(    
  @ServiceDesk  varchar(50)=null,    
  @FROM varchar(50)=null,    
  @TO varchar(50)=null,    
  @FCategory varchar(50)=NULL,    
  @Scope varchar(50)=NULL,    
  @TicketStatus varchar(50)=NULL,    
   @OrgId numeric(18,0)=NULL,    
  @Days  int=null,    
  @TechLoginName nvarchar(100)=NULL,    
  @Option varchar(50)    
)    
AS    
BEGIN    
    
 if(@Option=''DashboardsCounts'')    
 BEGIN    
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (    
  select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
      
  WHERE CreationDate >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident'' and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
      
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total''     
  from vSD_Tickets  a     
      
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total     
  from vSD_Tickets  a   
      
  where ServiceDesk=''Incident'' and OrgId=@OrgId    
  ) AS Final      
 END    
    
 if(@Option=''SevenDaysTickets'')    
 BEGIN      
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
 from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId  and ServiceDesk=''Incident''    
 END --7 Days Tickets Report    
    
 if(@Option=''ThirtyDaysTickets'')    
 BEGIN     
     select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
       
      ,CreationDate    
      ,ClosedDate    
   from vSD_Tickets WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime)) and ServiceDesk=''Incident''     
   and OrgId=@OrgId    
 END --30 Days Tickets Report    
    
 if(@Option=''TodayTickets'')    
 BEGIN    
      
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  a      
      
     
 WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
      
 END --Today Tickets Report    
    
 if(@Option=''TotalTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
             FROM  vSD_Tickets AS a     
     WHERE  (a.ServiceDesk = ''Incident'') and OrgId=@OrgId and a.Status is not null    
  group by a.Status      
      
 END    
    
 if(@Option=''TodayTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
               ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets WHERE  cast(CreationDate as Date)= cast(getdate() as Date)     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END --Today Tickets Report    
    
 if(@Option=''Last7DaysTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''Last30DaysTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''OverAllTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
          
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE    
  ServiceDesk=''Incident'' and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''TicketsDayWisePie'')    
 BEGIN     
         SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status    
     FROM  vSD_Tickets AS a     
         
     WHERE  (a.ServiceDesk = ''Incident'') and Status is not null   
    and OrgId=@OrgId AND CreationDate >= DATEADD(DAY, @Days, CAST(CAST(GETDATE() as Date)as datetime))    
            GROUP BY a.Status      
 END    
    
 if(@Option=''FirstCategoryWiseTickets'')    
    
 BEGIN    
    
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets where ServiceDesk=''Incident'' AND  category like ''%''+@FCategory+''%''    
    
 END    
    
END    '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboard_CategoryWise]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboard_CategoryWise]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboard_CategoryWise', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboard_CategoryWise      
(      
@FROM varchar(50)=null,      
@TO varchar(50)=null,      
@ServiceDesk varchar(50)=null,      
@Assignee varchar(100)=null,      
@Category  varchar(100)=null,      
@Status varchar(100)=null,      
@Scope varchar(100)=null,      
@OrgId numeric(18,0)=null,      
@Option varchar(50)      
)      
      
AS      
      
BEGIN      
      
      
      
      
     if(@Option=''MultiStatus'')      
    BEGIN      
          
  SELECT ISNULL(Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets       
   WHERE CAST(CreationDate as date)  between @FROM and @TO and ServiceDesk =@ServiceDesk and Orgid=@OrgId and Category like ''%'' + @Category + ''%'' and [Status]=@Status      
     group by  Status      
      
            
    END      
      
      
  if(@Option=''StatusWiseChart'')      
  BEGIN      
  if(@Category=''Total Tickets'')      
  BEGIN      
  SELECT ISNULL(a.Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets      
  a       
              
             
            
         WHERE OrgId=@OrgId and CAST(CreationDate as date) between   @FROM and @TO and ServiceDesk =@ServiceDesk      
   group by  a.Status      
  END      
      
     ELSE      
   BEGIN      
   SELECT ISNULL(a.Status,''NoStatus'')as Status, COUNT(distinct ticketnumber) as TotalCounts from vSD_Tickets      
   a       
              
    WHERE OrgId=@OrgId and CAST(CreationDate as date) between   @FROM and @TO  and  ServiceDesk =@ServiceDesk       
    and Category like ''%'' + @Category + ''%''      
         
   group by  a.Status      
      
    END      
  END      
      
  if(@Option=''StatusWiseChartDetails'')      
  BEGIN      
   if(@Category=''Total Tickets'')      
   BEGIN      
    SELECT TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'',       
        SubmitterEmail AS ''Submitter Email'', TechLoginName, CAST(CreationDate as date),ClosedDate      
      FROM vSD_Tickets       
       a       
            
      WHERE OrgId=@OrgId and  CAST(CreationDate as date) between   @FROM and @TO and ServiceDesk = @ServiceDesk and a.Status =@Status       
           
   END      
      
   ELSE      
      
   BEGIN      
    SELECT TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'',       
       SubmitterEmail AS ''Submitter Email'', TechLoginName, CAST(CreationDate as date),ClosedDate      
     FROM  vSD_Tickets a       
             
                 WHERE CAST(CreationDate as date) between   @FROM and @TO and OrgId=@OrgId and      
     ServiceDesk = @ServiceDesk and a.Status =@Status       
     and Category like ''%'' + @Category + ''%''       
   END      
  END      
      
  if(@Option=''CategoryWiseBar'')      
  BEGIN      
  SELECT Category2,count(Category2) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets      
    a       
             
      
    WHERE        
     CAST(CreationDate as date) between   @FROM and @TO  and OrgId=@OrgId      
    and ServiceDesk=@ServiceDesk--and Category like ''%NOC%''      
          
    ) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT   
 where [Category2] is not null  
 GROUP BY Category2      
          
    ORDER BY Category2 ASC      
                  END      
  if(@Option=''AllCategoryBar'')      
  BEGIN      
    SELECT Category1,count(Category1) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets WHERE CAST(CreationDate as date) between        
    @FROM and @TO and ServiceDesk=@ServiceDesk  and OrgId=@OrgId) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT GROUP BY Category1      
    UNION      
    select ''Total Tickets'' ''Category1'',SUM(TotalCounts)TotalCounts from       
    (      
    SELECT Category1,count(Category1) TotalCounts FROM(SELECT       
      SUBSTRING(a, 1, ISNULL(p1 - 1, LEN(a))) [Category1],      
      SUBSTRING(a, p1 + 1, ISNULL(p2, LEN(a) + 1) - p1 - 1) [Category2],      
      SUBSTRING(a, p2 + 1, ISNULL(p3, LEN(a) + 1) - p2 - 1) [Category3],      
      SUBSTRING(a, p3 + 1, ISNULL(p4, LEN(a) + 1) - p3 - 1) [Category4],      
      SUBSTRING(a, p4 + 1, LEN(a) - p4) [Category5]      
    FROM(SELECT  Category FROM vSD_Tickets WHERE CAST(CreationDate as date) between @FROM and @TO and OrgId=@OrgId      
    and ServiceDesk=@ServiceDesk ) a(a)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a), 0))) b(p1)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p1 + 1), 0))) c(p2)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p2 + 1), 0))) d(p3)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p3 + 1), 0))) e(p4)      
    CROSS APPLY(VALUES(NULLIF(CHARINDEX(''-'', a, p4 + 1), 0))) f(p5)      
    ) as TOT GROUP BY Category1      
    )b      
      
    ORDER BY Category1 ASC      
  END      
      
  if(@Option=''CategoryWiseTicketsDetails'')      
  BEGIN      
      
  if(@Category=''Total Tickets'')      
  BEGIN      
            SELECT  TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'', SubmitterEmail AS ''Submitter Email'',       
                         TechLoginName, CAST(CreationDate as date), ClosedDate      
    FROM   vSD_Tickets      
     a       
             
        WHERE  (CAST(CreationDate as date) BETWEEN @FROM AND @TO) AND (ServiceDesk = @ServiceDesk)  and OrgId=@OrgId      
          
    ORDER BY Category      
      
    END      
      
    else      
    BEGIN      
      SELECT  TicketNumber AS ''Ticket Number'', Summary AS ''Ticket Summary'', a.Status, Severity, Category, SubmitterName AS ''Submitter Name'', SubmitterEmail AS ''Submitter Email'',       
                         TechLoginName, CAST(CreationDate as date), ClosedDate      
    FROM   vSD_Tickets      
     a       
            
        WHERE  (CAST(CreationDate as date) BETWEEN @FROM AND @TO) AND (ServiceDesk = @ServiceDesk) and OrgId=@OrgId  AND (Category LIKE ''%'' + @Category + ''%'')      
    ORDER BY Category      
      
    END      
      
          
  END      
      
      
END '
GO

--
-- Create or alter view [dbo].[SD_vResolutionSLA_Imspl]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vResolutionSLA_Imspl]')
GO
IF OBJECT_ID(N'dbo.SD_vResolutionSLA_Imspl', 'V') IS NULL
EXEC sp_executesql N'
  CREATE OR ALTER view dbo.SD_vResolutionSLA_Imspl
  as
  (

 --select TicketNumber,dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as TotalTime,
 -- CASE 
 -- WHEN Cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as int)-
 --cast( dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,a.OrgId) as int)
  
 select  TicketNumber ,DATEDIFF(MINUTE,CreationDate,ResolutionDt) as TotalTime,
 case 
 when  cast(DATEDIFF(MINUTE,CreationDate,ResolutionDt) as int)
  <=a.ResolutionTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResolutionSLA,
  a.ResolutionTime  as DefinedResolutionTime,a.OrgId  from vSD_Tickets a
  inner join 
  vSDOrgDeskDef b 
  on a.ServiceDesk=b.Deskref
  and a.OrgId=b.OrgFk
  left join SD_vGetTotalHoldDuration dd
  on a.TicketNumber=dd.TicketNo and a.OrgId=dd.OrgId
  where (a.Status=''Resolved'' or a.Status=''Closed'') and a.OrgId=''680624893''

  )
'
GO

--
-- Create or alter view [dbo].[SD_vResolutionSLA]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vResolutionSLA]')
GO
IF OBJECT_ID(N'dbo.SD_vResolutionSLA', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vResolutionSLA
  as
  (

  select TicketNumber,dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as TotalTime,
  CASE 
  WHEN Cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,a.OrgId) as int)-
 cast( dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,a.OrgId) as int)
  
  
  <=a.ResolutionTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResolutionSLA,
  a.ResolutionTime  as DefinedResolutionTime,a.OrgId  from vSD_Tickets a WITH(NOLOCK)
  inner join 
  vSDOrgDeskDef b  WITH(NOLOCK)
  on a.ServiceDesk=b.Deskref
  and a.OrgId=b.OrgFk
  left join SD_vGetTotalHoldDuration dd WITH(NOLOCK)
  on a.TicketNumber=dd.TicketNo and a.OrgId=dd.OrgId
  )
'
GO

--
-- Create or alter view [dbo].[SD_ResponseSLA]
--
GO
PRINT (N'Create or alter view [dbo].[SD_ResponseSLA]')
GO
IF OBJECT_ID(N'dbo.SD_ResponseSLA', 'V') IS NULL
EXEC sp_executesql N'
  CREATE OR ALTER view dbo.SD_ResponseSLA
  as
  (
  select TicketNumber,DATEDIFF(MINUTE,CreationDate,FieldValue) as TotalTime,
  CASE 
  WHEN DATEDIFF(MINUTE,CreationDate,FieldValue)<=ResponseTime THEN ''Achieved'' 
  ELSE ''Missed'' END AS ResponseSLA,
  FieldValue  as DefinedResponseTime ,c.OrgId from vSD_Tickets c WITH(NOLOCK)
  join SD_CustomFieldTicketValues h WITH(NOLOCK) on h.TicketNo=c.TicketNumber and c.OrgId=h.OrgId
  where FieldName=''WIPStart''
  )
'
GO

--
-- Create or alter procedure [dbo].[SP_LiveDashboardFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_LiveDashboardFilter]')
GO
IF OBJECT_ID(N'dbo.SP_LiveDashboardFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_LiveDashboardFilter    
(    
@TicketStatus VARCHAR(100) = NULL,    
@OrgID  VARCHAR(100) = NULL,    
@Option  VARCHAR(100) = NULL    
)    
AS    
BEGIN    
if(@Option=''ResponseSLAPieDetails'')      
 BEGIN      
  select max(ResponseSLA) ResponseSLA,  a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status )     Status     
      ,max(Severity  )  Severity  
      ,max(a.Category )   Category  
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) from SD_ResponseSLA b  WITH(NOLOCK)
inner join vSD_Tickets a WITH(NOLOCK)            
 on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId
 where  ResponseSLA=''Missed''
and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and a.OrgId=@OrgID    
 group by a.TicketNumber

 END     
 --------------------------------------------------------------------------------------------------    
 if(@Option=''SeverityWisePieDetails'')      
 BEGIN      
 select TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
      ,max(Severity  )  Severity  
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate 
    from vSD_Tickets WITH(NOLOCK) WHERE  CreationDate >= DATEADD(DAY, -30, GETDATE())  
and Severity= @TicketStatus  and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and OrgId=@OrgID    
 group by TicketNumber
 END      
 --------------------------------------------------------------------------------------------------    
 if(@Option=''ResolutionSLAPieDetails'')      
 BEGIN      
        
   select max(ResolutionSLA) ResolutionSLA,  a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status ) Status         
      ,max(Severity  )  Severity  
      ,max(a.Category )   Category  
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName )  TechLoginName
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) from vSD_Tickets a WITH(NOLOCK)      
  inner join SD_vResolutionSLA b  WITH(NOLOCK)    
  on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId   where     
   (a.Status=''Closed'' OR  a.Status=''Resolved'') and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and a.OrgId=@OrgID   
   group by a.TicketNumber
 END      
 --------------------------------------------------------------------------------------------------    
 if(@Option=''SeverityWiseResponseDetails'')      
 BEGIN      
select  * from ( 
select max(ResponseSLA) ResponseSLA, 
a.TicketNumber ''Ticket Number''      
      ,max(a.Summary) ''Ticket Summary''      
      ,max(a.Status )  Status
	  ,max((Severity +'' (''+ResponseSLA+'')'') ) as SeverityWithStatus 
      ,max(a.Category )    Category 
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(a.TechLoginName ) TechLoginName 
      ,max(CreationDate )CreationDate     
      ,max(ClosedDate) ClosedDate from vSD_Tickets a WITH(NOLOCK)     
inner join SD_ResponseSLA dd  WITH(NOLOCK)    
 on a.TicketNumber=dd.TicketNumber and a.OrgId=dd.OrgId            
   where CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and  a.OrgId=@OrgID
   group by a.TicketNumber
  ) tab      
  where SeverityWithStatus=@TicketStatus      
  END      
  --------------------------------------------------------------------------------------------------    
  if(@Option=''SeverityWiseResolvedPieDetails'')      
 BEGIN      
   select   TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
      ,max(Severity  )  Severity  
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate     
    from vSD_Tickets WITH(NOLOCK) WHERE  Severity= @TicketStatus  and (Status=''Closed'' OR  Status=''Resolved'') 
and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and OrgId=@OrgID    
group by TicketNumber
 END    
 --------------------------------------------------------------------------------------------------    
  if(@Option=''SeverityWiseResolutionDetails'')      
   BEGIN      
  select * from ( 
  select max(ResolutionSLA) ResolutionSLA, 
  a.TicketNumber ''Ticket Number''      
      ,max(Summary) ''Ticket Summary''      
      ,max(Status ) Status         
       ,max((Severity +'' (''+ResolutionSLA+'')'')) as SeverityWithStatus   
      ,max(Category )  Category   
      ,max(SubmitterName) ''Submitter Name''      
      ,max(SubmitterEmail) ''Submitter Email''      
      ,max(SubmitterPhone )''Submitter Phone''      
      ,max(TechLoginName ) TechLoginName 
      ,max(CreationDate )  CreationDate   
      ,max(ClosedDate) ClosedDate
	  from vSD_Tickets a   WITH(NOLOCK)   
inner join SD_vResolutionSLA dd   WITH(NOLOCK)   
 on a.TicketNumber=dd.TicketNumber  and a.OrgId=dd.OrgId       
 where CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) AND a.OrgId=@OrgID 
 group by a.TicketNumber
  ) tab      
  where  SeverityWithStatus=@TicketStatus      
   END      
END '
GO

--
-- Create or alter procedure [dbo].[SP_LiveDashboard]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_LiveDashboard]')
GO
IF OBJECT_ID(N'dbo.SP_LiveDashboard', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER   PROC dbo.SP_LiveDashboard        
(        
@OrgId varchar(50) = null,        
@Aging varchar(100) = null,        
@Assignee varchar(100) = null,        
@Status varchar(100) = null,        
@Department varchar(100) = null,       
@Option varchar(100) = null        
)        
AS        
BEGIN        
if(@Option=''Totcount'')        
BEGIN        
SELECT count(Distinct TicketNumber) as Total           
  from vSD_Tickets  a           
  where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and OrgId=@OrgId          
END        
 if(@Option=''ResponseSLAPie'')          
 BEGIN          
            
   SELECT ResponseSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets          
           from  SD_ResponseSLA a          
   inner join           
   vSD_Tickets b           
   on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId
   where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
   and a.OrgId=@OrgId          
   group by ResponseSLA   
 END          
 -------------------------------------------------------------------------------        
 if(@Option=''ResolutionSLAPie'')          
 BEGIN          
            
  SELECT ResolutionSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets          
           from  SD_vResolutionSLA a          
   inner join           
   vSD_Tickets b           
   on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId          
   where CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status=''Closed'' and Status=''Resolved'')  and a.OrgId  =@OrgId        
   group by ResolutionSLA           
            
 END          
 -------------------------------------------------------------------------------        
  if(@Option=''SeverityWiseResponse'')          
 BEGIN          
          
 select (Severity +'' (''+ResponseSLA+'')'') as Severity, TotalTickets from           
 (          
   select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,ResponseSLA from vSD_Tickets a          
           INNER JOIN SD_ResponseSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
             
     where (Severity +'' (''+ResponseSLA+'')'') is not null and a.OrgId=@OrgId  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)          
   group by a.Severity,ResponseSLA          
  ) AS A   order by Severity asc          
  END         
        
   if(@Option=''SeverityWiseResolution'')          
   BEGIN          
   select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from           
     (          
    select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA           
     from vSD_Tickets a          
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
              
     where a.OrgId=@OrgId          
     AND (a.Status=''Closed'' OR a.Status=''Resolved'')           
                 
     AND  CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)           
     group by a.Severity,d.ResolutionSLA          
  ) AS A            
    UNION          
   select  ''Total'' as ''Severity'' ,COUNT(a.TicketNumber) as TotalTickets from vSD_Tickets a          
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId          
              
     where  a.OrgId=@OrgId   and (Status=''Closed'' OR  Status=''Resolved'')          
              
     AND  CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   order by Severity asc          
   END          
        
   -------------------------------------------------------------------------------        
 if(@Option=''SeverityWisePie'')          
 BEGIN          
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a    
   where Severity is not null and OrgId=@OrgId   AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   group by Severity           
 END         
        
if(@Option=''SeverityWiseResolvedPie'')          
 BEGIN          
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a          
                 
     where Severity is not null and OrgId=@OrgId   and (Status=''Closed'' OR  Status=''Resolved'')  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
   group by Severity           
   UNION          
   select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets a          
     where Severity is not null and OrgId=@OrgId  and (Status=''Closed'' OR  Status=''Resolved'')  AND CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)         
 END          
        
 -------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosedPie'')          
     BEGIN          
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where  OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status!=''Closed'' and Status!=''Resolved'')          
      group by  Status          
    END          
 -------------------------------------------------------------------------------------        
if(@Option=''OpenClosedPie'')          
     BEGIN          
     select ISNULL(Count(distinct vSD_Tickets.TicketNumber),0) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where  OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE) and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')          
      group by  Status          
    END          
 -------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosed'')          
     BEGIN          
      SELECT TechLoginName ''Assignee'',             
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved]           
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)) as Total          
      FROM            
      (select TechLoginName, Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from dbo.vSD_Tickets  where OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
      group by  TechLoginName, Status) AS SourceTable            
      PIVOT            
      (            
      MAX([Ticket Count])            
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved] )            
      ) AS PivotTable;            
          
    END         
 -------------------------------------------------------------------------------------         
 if(@Option=''Age'')          
    BEGIN          
              
  SELECT TechLoginName ''Assignee'',[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,TechLoginName FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (SELECT  v.TicketNumber,v.TechLoginName,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age          
    FROM vSD_Tickets AS v            
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId  and CAST(CreationDate  as DATE)= CAST(GETDATE() as DATE)        
     ) SourceTable          
    )PVT GROUP BY Aging,TechLoginName          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
    END          
-------------------------------------------------------------------------------------         
 IF (@Option = ''OpenClosed'')        
BEGIN        
    SELECT         
        SUM(ISNULL([Total], 0)) AS [Total],        
        SUM(ISNULL([Open], 0)) AS [Open],        
        SUM(ISNULL([Closed], 0)) AS [Closed],        
        CASE         
            WHEN SUM(ISNULL([Total], 0)) > 0         
            THEN (SUM(ISNULL([Closed], 0)) * 100.0 / SUM(ISNULL([Total], 0)))        
            ELSE 0        
        END AS [Closed Percent]        
    FROM         
    (        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Total'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
        
        UNION          
        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Open'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
        AND Status != ''Closed''         
        AND Status != ''Resolved''        
        
        UNION          
        
        SELECT         
            COUNT(DISTINCT vSD_Tickets.TicketNumber) AS [Ticket Count],        
            ''Closed'' AS Status          
        FROM dbo.vSD_Tickets         
        WHERE OrgId = @OrgId         
        AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
        AND (Status = ''Closed'' OR Status = ''Resolved'')        
    ) AS SourceTable        
        
    PIVOT         
    (        
        MAX([Ticket Count])         
        FOR Status IN ([Total], [Open], [Closed])        
    ) AS PivotTable;        
END        
        
        
-------------------------------------------------------------------------------------        
if(@Option=''AgeDetails'')          
    BEGIN          
          
  SELECT * FROM(          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName ''Assignee'',v.CreationDate ''Created date'',        
  DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age          
    FROM vSD_Tickets AS v            
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'') and OrgId=@OrgId AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
     )           
     SourceTable          
     )SourceTable1 WHERE  Aging=@Aging AND Assignee=@Assignee          
          
    END          
-------------------------------------------------------------------------------------        
 if(@Option=''TicketDetails'')          
     BEGIN          
     SELECT  v.TicketNumber ''Ticket Number'',v.Summary,v.TechLoginName,v.CreationDate ''CreationDate date'',        
  DATEDIFF(MINUTE, v.CreationDate, GETDATE()) AS Age          
    FROM dbo.vSD_Tickets AS v             
    where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)  and v.Status=@Status            
    END        
-------------------------------------------------------------------------------------        
  if(@Option=''TicketDetailsDept'')          
     BEGIN          
     select v.TicketNumber ''Ticket Number'',v.Summary,Department as ''Department'',v.Status,v.CreationDate ''CreationDate date'',          
     v.ClosedDate from           
     vSD_Tickets v           
     where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status=@Status         
    END         
-------------------------------------------------------------------------------------        
if(@Option=''NotOpenClosedDept'')          
     BEGIN          
    SELECT Department,             
      ISNULL([Open],0) as[Open], ISNULL([WIP],0) as [WIP], ISNULL([Hold],0) as [Hold],ISNULL([Closed],0) as [Closed],ISNULL([Resolved],0) as [Resolved] ,ISNULL([Under Process],0) as [Under Process]          
      ,(ISNULL([Open],0)+ ISNULL([WIP],0)+ ISNULL([Hold],0)+ ISNULL([Closed],0)+ ISNULL([Resolved],0)+ ISNULL([Under Process],0)) as Total          
      FROM            
      (select Department as ''Department'',count(TicketNumber) as [Ticket Count],Status          
      from          
      vSD_Tickets b  where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)         
      group by  Department, Status) AS SourceTable            
      PIVOT            
      (            
      MAX([Ticket Count])            
      FOR status IN ([Open], [WIP], [Hold],[Closed],[Resolved],[Under Process])            
      ) AS PivotTable;            
     
    END          
-------------------------------------------------------------------------------------        
  if(@Option=''Age'')          
    BEGIN          
              
  SELECT Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a          
right join           
dbo.vSD_Tickets v on            
a.TicketNo=v.TicketNumber             
and          
a.OrgId=v.OrgId          
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved'' and a.OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)) SourceTable          
    )PVT GROUP BY Aging,Department          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
          
    END         
-------------------------------------------------------------------------------------        
 if(@Option=''NotOpenClosedPieDept'')          
     BEGIN          
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from vSD_Tickets            
       where  OrgId=@OrgId and  CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status != ''Closed'' and Status!=''Resolved''          
      group by  Status          
          
    END          
-------------------------------------------------------------------------------------        
 if(@Option=''OpenClosedDept'')          
     BEGIN          
          SELECT  SUM(ISNULL([Total],0)) as [Total],SUM(ISNULL([Open],0)) as [Open], SUM(ISNULL([Closed],0)) as [Closed]         
         ,(SUM(ISNULL([Closed],0))* 100/(SUM(ISNULL([Total],0)))) AS [Closed Percent]           
                    
       FROM            
        (select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count],''Total'' as Status          
         from vSD_Tickets where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
         UNION          
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Open'' as Status          
         from vSD_Tickets where  OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and Status!=''Closed'' and Status!=''Resolved''           
         UNION          
         select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], ''Closed'' as Status          
         from vSD_Tickets where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE) and (Status=''Closed'' or Status=''Resolved'') ) AS SourceTable            
       PIVOT            
       (            
       MAX([Ticket Count])            
       FOR status IN ([Total], [Open],[Closed])            
       ) AS PivotTable;          
    END          
-------------------------------------------------------------------------------------        
if(@Option=''OpenClosedPieDept'')          
     BEGIN          
     select Count(distinct vSD_Tickets.TicketNumber) as [Ticket Count], Status          
       from vSD_Tickets  where OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)        
    and (Status=''Closed'' or Status=''Open'' or Status=''Resolved'')          
      group by  Status          
          
    END          
-------------------------------------------------------------------------------------        
if(@Option=''AgeDept'')          
    BEGIN          
              
  SELECT distinct Department,[0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days] FROM           
  (           
  SELECT COUNT(DISTINCT TicketNumber) AS [Total Count],Aging,Department FROM           
  (          
  SELECT *,          
  CASE          
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''          
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''          
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''          
   ELSE ''More than 10 Days''          
  END AS Aging          
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a          
right join           
dbo.vSD_Tickets v on            
a.TicketNo=v.TicketNumber             
and          
a.OrgId=v.OrgId          
     WHERE v.Status!=''Closed'' and v.Status!=''Resolved''         
and a.OrgId=@OrgId and CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)  
  ) SourceTable          
    )PVT GROUP BY Aging,Department          
     )PVTT          
     PIVOT          
     (          
     MAX([Total Count]) FOR Aging IN([0 to 3 Days],[4 to 7 Days],[8 to 10 Days],[More than 10 Days])          
     )FINAL          
          
    END        
      
 -----------------------------------------------------------------------------------      
 if(@Option=''AgeDetailsDept'')        
    BEGIN        
        
  SELECT distinct * FROM(        
  SELECT *,        
  CASE        
   WHEN age >= 0 and age <= 3 THEN  ''0 to 3 Days''        
   WHEN age >= 4 and age <= 7 THEN  ''4 to 7 Days''        
   WHEN age >= 8 and age <= 10 THEN ''8 to 10 Days''        
   ELSE ''More than 10 Days''        
  END AS Aging        
  FROM (select Department as ''Department'',TicketNumber,DATEDIFF(DAY, v.CreationDate, GETDATE()) AS Age from SD_CustomFieldTicketValues a        
right join         
dbo.vSD_Tickets v on          
a.TicketNo=v.TicketNumber           
and        
a.OrgId=v.OrgId          
     WHERE ( v.Status!=''Closed'' and v.Status!=''Resolved'')and v.OrgId=@OrgId       
  AND CAST(CreationDate AS DATE) = CAST(GETDATE() AS DATE)       
     )         
     SourceTable        
     )SourceTable1 WHERE  Aging=@Aging AND Department=@Department       
        
    END      
 -----------------------------------------------------------------------------------      
END '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardSLAWithCal]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardSLAWithCal]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardSLAWithCal', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardSLAWithCal    
(    
  @ServiceDesk  varchar(50)=null,    
  @FROM varchar(50)=null,    
  @TO varchar(50)=null,    
  @FCategory varchar(50)=NULL,    
  @Scope varchar(100)=NULL,    
  @TicketStatus varchar(50)=NULL,    
    @OrgId numeric(18,0)=null,    
  @Option varchar(50)    
)    
AS    
BEGIN    
    
 if(@Option=''DashboardsCounts'')    
 BEGIN    
  SELECT SUM(SevenDaysTotal) AS SevenDaysTotal,SUM(ThirtyDaysTotal) AS ThirtyDaysTotal,SUM(TodayTotal) AS TodayTotal,SUM(Total) AS Total FROM (    
  select count(Distinct TicketNumber) as SevenDaysTotal,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets a     
     
     
  WHERE CAST(CreationDate as DATE) >=DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
  Union    
  select 0 ''SevenDaysTotal'',count(Distinct TicketNumber) as ThirtyDaysTotal,0 ''TodayTotal'',0 ''Total''      
  from vSD_Tickets  a     
    
      
  WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))  and ServiceDesk=''Incident''  and OrgId=@OrgId    
  Union    
  select  0 ''SevenDaysTotal'',0 ''ThirtyDaysTotal'',count(Distinct TicketNumber) as TodayTotal,0 ''Total''     
  from vSD_Tickets  a     
     
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date) and ServiceDesk=''Incident'' and OrgId=@OrgId    
  Union    
  select 0 ''SevenDaysTotal'' ,0 ''ThirtyDaysTotal'',0 ''TodayTotal'',count(Distinct TicketNumber) as Total     
  from vSD_Tickets  a     
      
  where ServiceDesk=''Incident'' and OrgId=@OrgId    
  ) AS Final      
 END    
    
 ---------------------Counts Start-----------------------    
 if(@Option=''SevenDaysTickets'')    
 BEGIN      
   select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
          
      ,CreationDate    
      ,ClosedDate    
 from vSD_Tickets    
     
 a     
      
      
 WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime)) and OrgId=@OrgId and ServiceDesk=''Incident''    
    
 END --7 Days Tickets Report    
    
 if(@Option=''ThirtyDaysTickets'')    
 BEGIN     
     select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
   from vSD_Tickets    
       
   a     
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))    
   and ServiceDesk=''Incident''  and OrgId=@OrgId    
      
 END --30 Days Tickets Report    
    
 if(@Option=''TodayTickets'')    
 BEGIN    
      
   select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
     
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
      
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)and ServiceDesk=''Incident'' and OrgId=@OrgId    
    
      
 END --Today Tickets Report    
    
 if(@Option=''TotalTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
             FROM  vSD_Tickets AS a     
     WHERE  (a.ServiceDesk = ''Incident'')  and OrgId=@OrgId    
  group by a.Status      
      
 END    
    
 ---------------------Counts END-----------------------    
    
 ---------------------Second Row Start-----------------------    
    
 if(@Option=''TodayTicketsPie'')    
 BEGIN     
         SELECT  COUNT(DISTINCT a.TicketNumber) AS TotalTickets, a.Status    
  FROM  vSD_Tickets AS a     
         
     WHERE  (a.ServiceDesk = ''Incident'') and OrgId=@OrgId    
     AND (CONVERT(varchar(10), a.CreationDate, 120) = CONVERT(varchar(10), GETDATE(), 120))    
            GROUP BY a.Status      
 END    
    
 if(@Option=''TodayTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
    
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
  WHERE  cast(CreationDate as Date)= cast(getdate() as Date)     
 and ServiceDesk=''Incident''   and OrgId=@OrgId    
 and a.Status= @TicketStatus      
      
 END --Today Tickets Report    
    
 if(@Option=''Last7DaysTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
        
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
  WHERE CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and a.Status= @TicketStatus     
      
 END    
    
 if(@Option=''Last30DaysTicketsStatusWise'')    
 BEGIN    
      
  select distinct  TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
      
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets a     
   WHERE CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))     
 and ServiceDesk=''Incident''  and OrgId=@OrgId    
 and a.Status= @TicketStatus     
      
 END    
    
 ---------------------Second Row END-----------------------    
    
 if(@Option=''OverAllTicketsStatusWise'')    
 BEGIN    
      
  select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
        
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets  WHERE    
  ServiceDesk=''Incident''  and OrgId=@OrgId    
 and Status= @TicketStatus    
      
 END    
    
 if(@Option=''Last7DaysTicketsPie'')    
 BEGIN    
      
   select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
                 from vSD_Tickets a    
        
     where ServiceDesk=''Incident''   and OrgId=@OrgId    
           
     AND CreationDate >= DATEADD(DAY, -7, CAST(CAST(GETDATE() as Date)as datetime))   group by a.Status      
      
 END    
    
 if(@Option=''Last30DaysTicketsPie'')    
 BEGIN    
      
  select COUNT( distinct TicketNumber) as TotalTickets ,a.Status     
     from vSD_Tickets a    
       
     where ServiceDesk=''Incident''   and OrgId=@OrgId    
          
  and CreationDate >= DATEADD(DAY, -30, CAST(CAST(GETDATE() as Date)as datetime))   group by a.Status      
      
 END    
    
 if(@Option=''ResponseSLAPie'')    
 BEGIN    
      
   SELECT ResponseSLA as CustomFieldValue,COUNT( distinct  a.TicketNumber)  as TotalTickets    
           from  SD_ResponseSLA a WITH(NOLOCK)   
   inner join     
   vSD_Tickets b WITH(NOLOCK)    
   on a.TicketNumber=b.TicketNumber and a.OrgId=b.OrgId    
    
     where CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and ServiceDesk=@ServiceDesk
     and a.OrgId=@OrgId and ResponseSLA is not null   
   group by ResponseSLA     
      
 END    
    
 if(@Option=''ResolutionSLAPie'')    
 BEGIN    
      
  SELECT ResolutionSLA as CustomFieldValue,COUNT( distinct b.TicketNumber)  as TotalTickets    
           from 
    SD_vResolutionSLA a  WITH(NOLOCK)  
   inner join     
   vSD_Tickets b    WITH(NOLOCK)    
   on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId    
    where CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and a.OrgId=@OrgId and ServiceDesk=@ServiceDesk 
	and Resolution is not null 
   group by ResolutionSLA
      
 END    
    
 if(@Option=''SeverityWisePie'')    
 BEGIN    
   select  Severity ,COUNT(distinct TicketNumber) as TotalTickets  from vSD_Tickets a  WITH(NOLOCK)        
     where ServiceDesk=@ServiceDesk   and OrgId=@OrgId and Severity is not null
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
   group by Severity     
 END    
    
 if(@Option=''SeverityWiseResolvedPie'')    
 BEGIN    
   select  Severity ,COUNT(TicketNumber) as TotalTickets  from vSD_Tickets a WITH(NOLOCK)    
           
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId  and Severity is not null 
         
     AND CAST(CreationDate as date) >=   @FROM and CAST(CreationDate as date)  <= @TO    
   group by Severity     
   UNION    
   select  ''Total'' as ''Severity'' ,COUNT(TicketNumber) as TotalTickets from vSD_Tickets a WITH(NOLOCK) 
     where ServiceDesk=@ServiceDesk and OrgId=@OrgId  
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE)  <= @TO  and Severity is not null   
      
 END    
    
    if(@Option=''SeverityWiseResponse'')    
 BEGIN    
    
 select (Severity +'' (''+ResponseSLA+'')'') as Severity, TotalTickets from     
 (    
   select  a.Severity ,COUNT(a.TicketNumber) as TotalTickets,ResponseSLA from vSD_Tickets a with(NOLOCK)   
           INNER JOIN SD_ResponseSLA d with(NOLOCK) on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
       
     where ServiceDesk=@ServiceDesk     and a.OrgId=@OrgId and  a.Severity is not null  
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
   group by a.Severity,ResponseSLA    
  ) AS A   order by Severity asc    
      
     
  END    
    
    if(@Option=''SeverityWiseResolution'')    
   BEGIN    
   select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from     
     (    
    select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA     
     from vSD_Tickets a WITH(NOLOCK)    
           INNER JOIN SD_vResolutionSLA d  WITH(NOLOCK) on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
        
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId and  a.Severity is not null
           
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
     group by a.Severity,d.ResolutionSLA    
  ) AS A      
    UNION    
   select  ''Total'' as ''Severity'' ,COUNT(distinct a.TicketNumber) as TotalTickets from vSD_Tickets a    
           INNER JOIN SD_vResolutionSLA d on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId 
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and  a.Severity is not null   
   order by Severity asc    
   END    
    
 if(@Option=''SeverityWiseResolutionPie'')    
 BEGIN    
     
 select (Severity +'' (''+ResolutionSLA+'')'') as Severity, TotalTickets from     
 (    
              select a.Severity,COUNT( distinct a.TicketNumber) as TotalTickets,d.ResolutionSLA     
    from vSD_Tickets a WITH(NOLOCK)   
           INNER JOIN SD_vResolutionSLA d WITH(NOLOCK)    on a.TicketNumber=d.TicketNumber and a.OrgId=d.OrgId    
       
     where ServiceDesk=@ServiceDesk  and a.OrgId=@OrgId  and a.Severity is not null    
       
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO    
     group by a.Severity,d.ResolutionSLA    
      
   ) AS A       
      
 END    
    
 if(@Option=''FirstCategoryWiseTickets'')    
    
 BEGIN    
    
 select TicketNumber,Summary,Status,Severity,Category,TechLoginName,CreationDate,ClosedDate from vSD_Tickets  
 where ServiceDesk=''Incident'' and OrgId=@OrgId AND  category like ''%''+@FCategory+''%''    
    
 END    
    
END    '
GO

--
-- Create or alter procedure [dbo].[SD_SDDashboardMainWithFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SDDashboardMainWithFilter]')
GO
IF OBJECT_ID(N'dbo.SD_SDDashboardMainWithFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_SDDashboardMainWithFilter    
(    
@FCategory varchar(50)=NULL,    
@ServiceDesk nvarchar(50)=NULL,    
@FROM varchar(50)=null,    
@TO varchar(50)=null,    
@TicketStatus varchar(50)=NULL,    
@OrgID numeric(18,0)=NULL,    
@Option varchar(50)    
)    
AS    
BEGIN        
 if(@Option=''ResponseSLAPieDetails'')    
 BEGIN    
     
  select max(ResponseSLA) ResponseSLA,  a.TicketNumber ''Ticket Number''    
      ,max(a.Summary) ''Ticket Summary''    
      ,max(a.Status )  Status
      ,max(Severity )   Severity
      ,max(a.Category) Category
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone) ''Submitter Phone''    
      ,max(a.TechLoginName) TechLoginName
      ,max(CreationDate) CreationDate
      ,max(ClosedDate) from SD_ResponseSLA b  WITH(NOLOCK)    
inner join vSD_Tickets a WITH(NOLOCK) 
 on a.TicketNumber=b.TicketNumber    and a.OrgId=b.OrgId
 where   CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and ServiceDesk=@ServiceDesk
     and a.OrgId=@OrgId and ResponseSLA is not null and ResponseSLA=@TicketStatus 
       group by a.TicketNumber
 END    
  if(@Option=''SeverityWisePieDetails'')    
 BEGIN    
 select  TicketNumber ''Ticket Number''    
      ,max(Summary) ''Ticket Summary''    
      ,max(Status)    Status     
      ,max(Severity)  Severity  
      ,max(Category )  Category 
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone )''Submitter Phone''    
      ,max(TechLoginName)TechLoginName
      ,max(CreationDate ) CreationDate  
      ,max(ClosedDate)   ClosedDate 
    from vSD_Tickets WITH(NOLOCK) WHERE  --CreationDate >= DATEADD(DAY, -30, GETDATE())   and   
 ServiceDesk=@ServiceDesk    
 and Severity= @TicketStatus and   CAST(CreationDate as date) BETWEEN   @FROM and @TO  and OrgId=@OrgID and Severity is not null  
      group by TicketNumber
 END    
  if(@Option=''SeverityWiseResponseDetails'')    
 BEGIN    
select * from ( select ResponseSLA,  a.TicketNumber ''Ticket Number''    
      ,a.Summary ''Ticket Summary''    
      ,a.Status         
     
   ,(Severity +'' (''+ResponseSLA+'')'') as SeverityWithStatus    
      ,a.Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,a.TechLoginName      
  ,ServiceDesk    
    
      ,CreationDate    
      ,ClosedDate from vSD_Tickets a    
inner join SD_ResponseSLA dd    
 on a.TicketNumber=dd.TicketNumber and a.OrgId=dd.OrgId    
  -- where   dd.CustomFieldName=''responsesla''    
      
   where    CAST(CreationDate as date) BETWEEN   @FROM and @TO  and a.OrgId=@OrgID  
  ) tab    
  where ServiceDesk=@ServiceDesk and SeverityWithStatus=@TicketStatus    
  END    
   if(@Option=''ResolutionSLAPieDetails'')    
 BEGIN    
      
   select distinct ResolutionSLA,  a.TicketNumber ''Ticket Number''    
      ,a.Summary ''Ticket Summary''    
      ,a.Status         
      ,Severity    
      ,a.Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,a.TechLoginName   
      ,CreationDate    
      ,ClosedDate from vSD_Tickets a WITH(NOLOCK)
  inner join SD_vResolutionSLA b    WITH(NOLOCK)
  on a.TicketNumber=b.TicketNumber  and a.OrgId=b.OrgId 
    
  where    
  ServiceDesk=@ServiceDesk and a.OrgId=@OrgID   
  and   CAST(CreationDate as date) BETWEEN   @FROM and @TO    
   and b.ResolutionSLA=@TicketStatus    and Resolution is not null   
  
 END    
  if(@Option=''SeverityWiseResolvedPieDetails'')    
 BEGIN    
   select   TicketNumber ''Ticket Number''    
      ,Summary ''Ticket Summary''    
      ,Status         
      ,Severity    
      ,Category    
      ,SubmitterName ''Submitter Name''    
      ,SubmitterEmail ''Submitter Email''    
      ,SubmitterPhone ''Submitter Phone''    
      ,TechLoginName       
         
      ,CreationDate    
      ,ClosedDate    
    from vSD_Tickets WHERE    
  ServiceDesk=@ServiceDesk
 and Severity= @TicketStatus  and   CAST(CreationDate as date) BETWEEN   @FROM and @TO AND OrgId=@OrgID  and Severity is not null 
      
 END    
    if(@Option=''SeverityWiseResolutionDetails'')    
   BEGIN    
  select * from ( select max(ResolutionSLA) ResolutionSLA,  a.TicketNumber ''Ticket Number''    
      ,max(a.Summary) ''Ticket Summary''    
      ,max(a.Status )  Status
   ,(max(Severity) +'' (''+max(ResolutionSLA)+'')'') as SeverityWithStatus    
      ,max(a.Category)   Category 
      ,max(SubmitterName) ''Submitter Name''    
      ,max(SubmitterEmail) ''Submitter Email''    
      ,max(SubmitterPhone) ''Submitter Phone''    
      ,max(a.TechLoginName)  TechLoginName   
		,max(ServiceDesk) ServiceDesk  
      ,max(CreationDate) CreationDate   
      ,max(ClosedDate) ClosedDate from vSD_Tickets a  WITH(NOLOCK)  
inner join SD_vResolutionSLA dd WITH(NOLOCK)   
 on a.TicketNumber=dd.TicketNumber  and a.OrgId=dd.OrgId
   where ServiceDesk=@ServiceDesk   and a.OrgId=@OrgID
     AND CAST(CreationDate as DATE) >=   @FROM and CAST(CreationDate as DATE) <= @TO and  a.Severity is not null 
	 group by a.TicketNumber     
  ) tab    
  where SeverityWithStatus=   case when isnull(@TicketStatus,''Total'')=''Total'' then SeverityWithStatus else @TicketStatus end  
   END    
END    
    '
GO

--
-- Create or alter view [dbo].[SD_vTechDetails]
--
GO
PRINT (N'Create or alter view [dbo].[SD_vTechDetails]')
GO
IF OBJECT_ID(N'dbo.SD_vTechDetails', 'V') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER view dbo.SD_vTechDetails 
as
(
Select a.*,b.CategoryCodeRef,b.ID,b.DeskRef from SD_Technician a 
inner join SD_Category b 
on a.CategoryFK=b.Categoryref
)

'
GO

--
-- Create table [dbo].[SD_adminLog]
--
PRINT (N'Create table [dbo].[SD_adminLog]')
GO
IF OBJECT_ID(N'dbo.SD_adminLog', 'U') IS NULL
CREATE TABLE dbo.SD_adminLog (
  ID numeric NOT NULL,
  adminName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  eventTime datetime NULL,
  description varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[EmployeeMaster]
--
PRINT (N'Create table [dbo].[EmployeeMaster]')
GO
IF OBJECT_ID(N'dbo.EmployeeMaster', 'U') IS NULL
CREATE TABLE dbo.EmployeeMaster (
  EmpId numeric IDENTITY,
  EmployeeCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmployeeName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FirstName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  LastName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Email varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mobile varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerName_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerCode_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerEmail_1 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerName_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerCode_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReportingManagerEmail_2 varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  EmploymentStatus varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Division varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubDivision varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Branch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BUHeadCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  BUHeadName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (EmpId)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[Email_FromInbox]
--
PRINT (N'Create table [dbo].[Email_FromInbox]')
GO
IF OBJECT_ID(N'dbo.Email_FromInbox', 'U') IS NULL
CREATE TABLE dbo.Email_FromInbox (
  ID int IDENTITY,
  created_datetime datetime NULL,
  type nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SubmitterName nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailfrom nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailto nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Mailcc nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  subject nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  body nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  param1 nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SD_spMailFromServerInbox]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spMailFromServerInbox]')
GO
IF OBJECT_ID(N'dbo.SD_spMailFromServerInbox', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER procedure dbo.SD_spMailFromServerInbox
@message_id varchar(max)=NULL
,@to varchar(max)=NULL, 
@from varchar(max)=NULL,
@cc varchar(max)=null
,@subject varchar(max)=NULL
,@SubmitterName varchar(200)=NULL
,@body varchar(max)=NULL,
@received_time datetime=NULL
as
begin
--IF NOT EXISTS( SELECT 1 from Email_FromInbox where param1 = @message_id )
insert into Email_FromInbox( created_datetime, type,SubmitterName, [Mailfrom], [Mailto], Mailcc, [subject], body)--, param1 )
values( @received_time, ''receive_supportmail'',@SubmitterName, @from, @to, @cc, @subject, @body)--, @message_id)

end
'
GO

--
-- Create table [dbo].[email]
--
PRINT (N'Create table [dbo].[email]')
GO
IF OBJECT_ID(N'dbo.email', 'U') IS NULL
CREATE TABLE dbo.email (
  id int IDENTITY (385031, 123),
  [from] varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [to] varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  cc varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bcc varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  subject nvarchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyFileName varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyContent nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyType char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  created datetime NOT NULL,
  sent datetime NULL,
  expiration datetime NULL,
  sendTime datetime NULL,
  priority int NOT NULL,
  uniqueTag varchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  sendStatus int NULL,
  partitionId numeric(26) NULL CONSTRAINT DF_email_partitionId DEFAULT (1),
  headers xml NULL,
  messageID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  bodyEncoding int NULL,
  OrgID numeric NULL,
  PickedTime datetime NULL,
  RetryCount int NULL DEFAULT (0),
  DeskRef nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CONSTRAINT PKEmail PRIMARY KEY CLUSTERED (id)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[sp_GetMailToSend]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_GetMailToSend]')
GO
IF OBJECT_ID(N'dbo.sp_GetMailToSend', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.sp_GetMailToSend  
(  
@Option nvarchar(100)=NULL  
)  
as   
BEGIN  
--------------this will send mail to user accoridingly to organization  
  
select * from  
(  
  
-----------This will get hirel email and send mail   
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef and a.Deskref=b.Deskref  
where sendStatus in (''0'', ''4'')  and b.OrgRef=''523843837''  and MailType=''Outbound''  
and a.PickedTime is NULL AND a.RetryCount < 6  
union all  
  
-- this will get IMSPL mail and send mail  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''1644669286'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''103319509'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  
  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''970118232'' and MailType=''Outbound''  
and a.PickedTime is NULL AND a.RetryCount < 6  
  
union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'')  and b.OrgRef=''2141137785'' and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6  

union all  
SELECT  a.*,b.Hostname,b.Port,b.UserName,b.Email,b.Password,b.Retry,b.OrgRef  FROM email a  
inner join SD_EmailConfig b  
on a.[from]=b.Email and a.OrgID=b.OrgRef  and a.Deskref=b.Deskref 
where sendStatus in (''0'', ''4'') 
--and b.OrgRef=''2141137785'' 
and MailType=''Outbound''   
and a.PickedTime is NULL AND a.RetryCount < 6 
  
)s  
  
order by created desc  

  
END




'
GO

--
-- Create or alter procedure [dbo].[SP_AssignAndEscalation]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AssignAndEscalation]')
GO
IF OBJECT_ID(N'dbo.SP_AssignAndEscalation', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AssignAndEscalation  
AS  
BEGIN  
    DECLARE @Ticketref VARCHAR(20), @Techid INT, @TicketCount INT, @orgid INT;  
  
    -- Cursor to handle multiple tickets that are between 30 minutes and 2 hours overdue  
    DECLARE lvl30_cursor CURSOR FOR  
    SELECT Ticketref   
    FROM SDIncident   
    WHERE sdStatusFK = ''738442562''   
      --AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) >= 30   
      --AND DATEDIFF(HOUR, expectedDueDate, GETDATE()) <= 2;  
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) >= 2
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) <= 5;  
  
    OPEN lvl30_cursor;  
    FETCH NEXT FROM lvl30_cursor INTO @Ticketref;  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
        -- Select the Technician ID with the lowest ticket count who is at level L2  
        SELECT TOP 1 @Techid = TechID   
        FROM SD_Technician   
        WHERE TechLevel = ''L2''   
        ORDER BY TicketCount ASC;  
  
        -- Update the incident to assign the technician  
        UPDATE SDIncident   
        SET assigneeParticipantFK = @Techid   
        WHERE Ticketref = @Ticketref   
          AND organizationFK = @orgid;  
  
        -- Update the technician''s ticket count  
        SELECT @TicketCount = TicketCount   
        FROM SD_Technician   
        WHERE TechID = @Techid;  
  
        UPDATE SD_Technician   
        SET TicketCount = @TicketCount + 1   
        WHERE TechID = @Techid;  
  
        FETCH NEXT FROM lvl30_cursor INTO @Ticketref;  
    END  
  
    CLOSE lvl30_cursor;  
    DEALLOCATE lvl30_cursor;  
  
    -- Repeat for tickets that are more than 2 hours overdue  
    DECLARE lvl90_cursor CURSOR FOR  
    SELECT Ticketref   
    FROM SDIncident   
    WHERE sdStatusFK = ''738442562''   
      --AND DATEDIFF(HOUR, expectedDueDate, GETDATE()) > 2;  
	  AND DATEDIFF(MINUTE, expectedDueDate, GETDATE()) > 5;
  
    OPEN lvl90_cursor;  
    FETCH NEXT FROM lvl90_cursor INTO @Ticketref;  
  
    WHILE @@FETCH_STATUS = 0  
    BEGIN  
        -- Select the Technician ID with the lowest ticket count who is at level L2  
        --==------  
  insert into email([from],[to],created,priority,sendStatus,partitionId,OrgID)  
  values(''msp@hisysmc.com'',''anuj.dogra.fz@hitachi-systems.com'',GETDATE(),''1'',''0'',''1'',523843837)  
        FETCH NEXT FROM lvl90_cursor INTO @Ticketref;  
    END  
  
    CLOSE lvl90_cursor;  
    DEALLOCATE lvl90_cursor;  
END;  
  
'
GO

--
-- Create or alter procedure [dbo].[sp_AddEMail]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_AddEMail]')
GO
IF OBJECT_ID(N'dbo.sp_AddEMail', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.sp_AddEMail
(
	@PARTITIONID NUMERIC (26,0),
	@FROM NVARCHAR(1000),
	@TO NVARCHAR (1000),
	@CC NVARCHAR (1000) = NULL,
	@BCC NVARCHAR (1000) = NULL,
	@SUBJECT NVARCHAR(256),
	@BODYCONTENT NVARCHAR(MAX) = NULL,
	@BODYFILENAME NVARCHAR(256) = NULL,
	@BODYTYPE CHAR(1),
	@PRIORITY INT = 1,
	@bodyEncoding INT = NULL
)
AS
BEGIN
	DECLARE @ReturnStatus bit
	INSERT INTO [dbo].[EMAIL] ( [FROM], [TO], [CC], [BCC],
		[SUBJECT], [BODYFILENAME], [BODYCONTENT], [BODYTYPE], [CREATED],  [PRIORITY], [SENDSTATUS], [PARTITIONID], bodyEncoding)
	VALUES (@FROM, @TO, @CC, @BCC,
		@SUBJECT, @BODYFILENAME, @BODYCONTENT, @BODYTYPE, GETDATE(),  @PRIORITY, 0, @PARTITIONID, @bodyEncoding)
	SET @ReturnStatus = @@ERROR

RETURN @ReturnStatus
END




'
GO

--
-- Create or alter procedure [dbo].[SDsp_Emaillog]
--
GO
PRINT (N'Create or alter procedure [dbo].[SDsp_Emaillog]')
GO
IF OBJECT_ID(N'dbo.SDsp_Emaillog', 'P') IS NULL
EXEC sp_executesql N'  
CREATE OR ALTER PROC dbo.SDsp_Emaillog  
(  
@id varchar(50)=null,  
@Search varchar(100)=null,  
@Option varchar(50)  
)  
AS  
BEGIN  
  
  if (@Option=''Select'')  
   BEGIN  
     SELECT     id,   [from], [to], cc, bcc, subject, bodyContent, created, priority, sendStatus  
     FROM            email order  by created desc  
      END  
  
   if (@Option=''Details'')  
   BEGIN  
     SELECT        *  
     FROM            email where id=@id order  by created desc  
      END  
  
   if (@Option=''Filter'')  
   BEGIN  
     SELECT id, [from], [to], cc, bcc, subject, bodyFileName, bodyContent, bodyType, created, sent, expiration, sendTime, priority, uniqueTag, sendStatus, partitionId, headers, messageID, bodyEncoding  
     FROM     email  
     WHERE  ([from] LIKE ''%'' + @Search + ''%'') OR  
           ([to] LIKE  ''%'' + @Search + ''%'') OR  
           (cc LIKE ''%'' + @Search + ''%'') OR  
           (bcc LIKE ''%'' + @Search + ''%'') OR  
           (subject LIKE  ''%'' + @Search + ''%'') --OR  
           --(created = ''%'' + @Search + ''%'')  
     ORDER BY created DESC  
        END  
END  
'
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRFix]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRFix]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_SRFix', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_SRFix    
(    
@userName varchar(100)=null,    
@Subject nvarchar(1000)=NULL,    
@EmailBody nvarchar(max)=NULL,    
@To varchar(500)=null,    
@MailBody  varchar (max) =NULL,    
@UserEmail nvarchar(200)=NULL,    
@User nvarchar(200)=NULL,    
@cc nvarchar(200)=NULL,    
@AssigneeEmail nvarchar(200)=NULL,    
@UserID numeric(18,0) = NULL,    
@Ticketref  varchar(100) = NULL,    
@Approval1Name varchar(100)= NULL,    
@Approval1Email varchar(100)= NULL,    
@Approval1Status varchar(50)=NULL,    
@Approval1Remarks varchar(max)=NULL,    
@Approval1Grade varchar(20)=NULL,    
@Approval2Name varchar(100)= NULL,    
@Approval2Email varchar(100)= NULL,    
@Approval2Status varchar(50)=NULL,    
@Approval2Remarks varchar(max)=NULL,    
@Approval2Grade varchar(20)=NULL,    
@Approval3Name varchar (100) =NULL,    
@Approval3Email  varchar (100) =NULL,    
@Approval3Status varchar(50)=NULL,    
@Approval3Remarks varchar(max)=NULL,    
@Approval3Grade varchar(20)=NULL,    
@Approval4Name varchar (100) =NULL,    
@Approval4Email varchar(100)= NULL,    
@Approval4Status varchar(50)=NULL,    
@Approval4Remarks varchar(max)=NULL,    
@Approval4Grade varchar(20)=NULL,    
@Approval5Name varchar (100)= NULL,    
@Approval5Email varchar (100) =NULL,    
@Approval5Status varchar(50) =NULL,    
@Approval5Grade varchar(20)=NULL,    
@Remarks varchar(max)=NULL,    
@ApproverLevel varchar(10)=NULL,    
@StatusFk numeric(18,0)=NULL,    
@Approval1IsActive bit=NULL,    
@Approval2IsActive bit=NULL,    
@Approval3IsActive bit=NULL,    
@Approval4IsActive bit=NULL,    
@Approval5IsActive bit=NULL,    
@PrevStage numeric(18,0)=null,    
@ToEmail nvarchar(100)=null,    
@assigneeParticipantFK numeric(18,0) =null,    
 @HODApproval nvarchar(10)=null,    
 @OrgId numeric(18,0)=null,    
@Option varchar(50)   =null 
     
 )    
 AS    
 BEGIN  ----main begin start    
    
    
     
  if(@Option=''TicketAssigned'')    
  BEGIN    
     
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
       
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a     
inner join      
SD_User_Master b     
on a.RefUserID=b.UserID    
where     
REplace(CategoryFK,''||'','' - '') in    
(select Category from vSDTicket where TicketNumber=@Ticketref)    
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref    
     if(@ToEmail is not null)    
      BEGIN    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
    
           
       END      
  END    
  if(@Option=''AddSrApprovalStatus'')    
     
  BEGIN    
    --select     
    -- @Approval1Name=Approval1Name,@Approval1Email=Approval1Email    
    --,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email    
    --,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email    
    --,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email    
    --,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email    
    --from SD_User_SRApproval_SRDesk where UserID=@UserID     
    -------------------------Previous is on the basis of Userbased -------------now it is on the basis of Single Approval for all user---    
    set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
    ------------------ enteries will insert so that to monitor    
        
        
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID    
         
      ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status    
      ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status    
      ,Approval5Name,Approval5Email,Approval5Status,UATAccept,OrgId )    
        values(@TicketRef,@UserID     
        ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''    
      ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''    
      ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'',@OrgId)     
  END    
      
    
  if(@Option=''UpdateRequest'')    
 BEGIN    
  declare @location nvarchar(100);    
  declare @M2Status nvarchar(100);    
  declare @EmpCode nvarchar(40);    
   declare @Severity nvarchar(40);    
  declare @StatusFk1 numeric(18,0);    
  declare @sdStageFk numeric(18,0);    
  declare @FromEmail nvarchar(100);    
  declare @PrevStatus numeric(18,0);    
   SET @FromEmail=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);    
      
     --select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,    
     --       @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,    
     --       @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name    
     --      ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active     
     --     from SD_User_SRApproval_SRDesk where EmpID=@EmpCode    
    set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
         
     set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
     set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
     --if(@Approval1IsActive=''1'')    
     --  BEGIN    
       if(@ApproverLevel=''L1'')    
         BEGIN    
     --set status to Awaiting IT Manager Approval    
            set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved By Reporting Manager%''  and OrgDeskRef=@OrgId)    
            set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved By Reporting Manager%'' and OrgDeskRef=@OrgId)    
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
            update SD_SRApprovalStatus set Approval1Status=''Approved''     
              ,Approval1Remarks=@Remarks    
              where TicketRef=@Ticketref    and orgid=@OrgId      
             
          
           ----------check if L2 exits  ? send mail to L2 : update status Approved     
        if exists(select * from SD_SRApprovers where  ApproverLevel=''L2'')    
        BEGIN    
         set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));    
               set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
             
        set @ToEmail=(@Approval2Email);    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId)    
      END    
      --------------------- as L2 doesn''t exist than update status only     
      else     
       BEGIN     
           set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
             set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
          set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved''  and OrgDeskRef=@OrgId)    
          set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved'' and OrgDeskRef=@OrgId)    
          update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
       END    
          
                     
                            
         
         
         
    END    
   --END    
   ----------- for IT manager Update    
        
      if(@ApproverLevel=''L2'')    
      BEGIN    
          
      if(@HODApproval=''Yes'')    
      BEGIN    
    
      ---------status will set to awaiting hod approval    
       set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
       update SD_SRApprovalStatus set Approval2Status=''Pending''     
                              ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and OrgId=@OrgId    
    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])    
      
                
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));    
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
       ELSE    
        BEGIN    
          set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
          set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
        update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and orgid=@OrgId    
             
    
    
     -----------now ticket will visible to pool  according to location of ticket     
     --set @location=(select location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
     --set @ToEmail=(select Engineer from  SD_Pool where Location=@location  and OrgId=@OrgId)    
           if exists(select * from SD_SRApprovers where  ApproverLevel=''L3'')    
        BEGIN    
         set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));    
               set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval2Name,@OrgId));    
         SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
             
        set @ToEmail=(@Approval2Email);    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
      --------------------- as L3 doesn''t exist than update status only     
      else     
       BEGIN     
           set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
             set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    
          set @StatusFk1=(select  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved''  and OrgDeskRef=@OrgId)    
          set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef like ''%Approved'' and OrgDeskRef=@OrgId)    
          update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId    
       END    
           
             
         
        END    
          
      END    
        
     if(@Approval3IsActive=''1'')    
     BEGIN    
       if(@ApproverLevel=''L3'')    
       BEGIN    
    
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request     
       --------------than IT manager will take action on it    
       set @StatusFk1=(select ID FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval3Status=''Approved''     
        ,Approval3Remarks=@Remarks    
   set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
            if(@Approval4IsActive=''1'')    
  BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L4'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L4'',@Approval4Name,@OrgId));    
      SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --       insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       
           
           
       END    
  END    
     END    
     if(@Approval4IsActive=''1'')    
     BEGIN    
      if(@ApproverLevel=''L4'')    
      BEGIN    
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
      update SD_SRApprovalStatus set Approval4Status=''Approved''     
  ,Approval4Remarks=@Remarks    
   if(@Approval5IsActive=''1'')    
   BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));    
      SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
      END    
      END    
     END    
     if(@Approval5IsActive=''1'')    
     BEGIN    
    if(@ApproverLevel=''L5'')    
   BEGIN    
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
   update SD_SRApprovalStatus set Approval5Status=''Approved''     
  ,Approval5Remarks=@Remarks    
   END    
   END    
  END    
    
  if(@Option=''RejectRequest'')    
   BEGIN    
     
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
    
      --select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active    
      -- ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active     
      --from SD_User_SRApproval_SRDesk where EmpID=@EmpCode    
    set    @Approval1Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval1Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')    
    set    @Approval2Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    set    @Approval2Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')    
    
   set    @Approval3Name= (select top 1 UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
   set    @Approval3Email=(select top 1 UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')    
       set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
             set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
     --if(@Approval1IsActive=''1'')    
     --BEGIN    
       if(@ApproverLevel=''L1'')    
       BEGIN-- reject by manager    
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
    
             
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
   
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
    
            update SD_SRApprovalStatus set Approval1Status=''Rejected''     
         ,Approval1Remarks=@Remarks    
       where TicketRef=@Ticketref  and orgid=@OrgId    
                
       END    
    -- END    
       
         --if(@Approval2IsActive=''1'')    
         --  BEGIN    
              if(@ApproverLevel=''L2'')    
               BEGIN    
               --Rejected by IT manager     
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''     
                   ,Approval2Remarks=@Remarks    
                   where TicketRef=@Ticketref  and orgid=@OrgId    
                         
             
             
        
               END    
          -- END    
         
         if(@Approval3IsActive=''1'')    
          BEGIN    
           if(@ApproverLevel=''L3'')    
             BEGIN    
              set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId    
              update SD_SRApprovalStatus set Approval3Status=''Rejected''     
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId    
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
                
             set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
                
            END    
      
          END    
        --END    
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)    
     --   BEGIN    
           if(@Approval4IsActive=''1'')    
            BEGIN    
             if(@ApproverLevel=''L4'')    
              BEGIN    
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
                update SD_SRApprovalStatus set Approval4Status=''Rejected''     
                ,Approval4Remarks=@Remarks    
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
              END    
            END    
       -- END    
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)    
     -- BEGIN    
         if(@Approval5IsActive=''1'')    
          BEGIN    
                  
           if(@ApproverLevel=''L5'')    
            BEGIN    
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
               update SD_SRApprovalStatus set Approval5Status=''Rejected''     
               ,Approval5Remarks=@Remarks    
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       
             END    
          END    
      --END    
   END    
    
    
    
    
 END  ----main end closes    
     '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus  
(  
  @userName varchar(100)=null,  
@Subject nvarchar(1000)=NULL,  
 @EmailBody nvarchar(max)=NULL,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@UserID numeric(18,0) = NULL,  
@Ticketref  varchar(100) = NULL,  
@Approval1Name varchar(100)= NULL,  
@Approval1Email varchar(100)= NULL,  
@Approval1Status varchar(50)=NULL,  
@Approval1Remarks varchar(max)=NULL,  
@Approval1Grade varchar(20)=NULL,  
@Approval2Name varchar(100)= NULL,  
@Approval2Email varchar(100)= NULL,  
@Approval2Status varchar(50)=NULL,  
@Approval2Remarks varchar(max)=NULL,  
@Approval2Grade varchar(20)=NULL,  
@Approval3Name varchar (100) =NULL,  
@Approval3Email  varchar (100) =NULL,  
@Approval3Status varchar(50)=NULL,  
@Approval3Remarks varchar(max)=NULL,  
@Approval3Grade varchar(20)=NULL,  
@Approval4Name varchar (100) =NULL,  
@Approval4Email varchar(100)= NULL,  
@Approval4Status varchar(50)=NULL,  
@Approval4Remarks varchar(max)=NULL,  
@Approval4Grade varchar(20)=NULL,  
@Approval5Name varchar (100)= NULL,  
@Approval5Email varchar (100) =NULL,  
@Approval5Status varchar(50) =NULL,  
@Approval5Grade varchar(20)=NULL,  
@Remarks varchar(max)=NULL,  
@ApproverLevel varchar(10)=NULL,  
@StatusFk numeric(18,0)=NULL,  
@Approval1IsActive bit=NULL,  
@Approval2IsActive bit=NULL,  
@Approval3IsActive bit=NULL,  
@Approval4IsActive bit=NULL,  
@Approval5IsActive bit=NULL,  
@OrgID numeric(18,0)=null,  
@Option varchar(50)  
   
 )  
 AS  
 BEGIN  ----main begin start  
  
  
   
  if(@Option=''CheckForAppproval'')  
  BEGIN  
   select * from SD_SRApprovalStatus --where TicketRef=@Ticketref and OrgID=@OrgID  
  END  
  
  if(@Option=''AddSrApprovalStatus'')  
   
  BEGIN  
    select @Approval1Name=Approval1Name,@Approval1Email=Approval1Email  
    ,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email  
    ,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email  
    ,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email  
    ,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email  
    from SD_User_SRApproval where UserID=@UserID  
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
      ,Approval1Name  
      ,Approval1Email  
      ,Approval1Status  
      ,Approval2Name  
      ,Approval2Email  
      ,Approval2Status  
      ,Approval3Name  
      ,Approval3Email  
      ,Approval3Status  
      ,Approval4Name  
      ,Approval4Email  
      ,Approval4Status  
      ,Approval5Name  
      ,Approval5Email  
      ,Approval5Status  
      )  
 values(@TicketRef  
      ,@UserID  
     
      ,@Approval1Name  
      ,@Approval1Email  
      ,''Pending''  
      ,@Approval2Name  
      ,@Approval2Email  
      ,''Pending''  
      ,@Approval3Name  
      ,@Approval3Email  
      ,''Pending''  
      ,@Approval4Name  
      ,@Approval4Email  
      ,''Pending''  
      ,@Approval5Name  
      ,@Approval5Email  
      ,''Pending''  
     )   
  END  
  
  if(@Option=''UpdateRequest'')  
   BEGIN  
     declare @DeskRef nvarchar(100);  
     set @DeskRef=(select ServiceDesk from vSDTicket where TicketNumber=@Ticketref );  
   if(@DeskRef=''Service Request'' or @DeskRef=''Service_Request'')  
     BEGIN  
        Exec SD_SRTicketApprovalStatus_SRFix @Ticketref=@Ticketref ,@Remarks=@Remarks,@ApproverLevel=@ApproverLevel,@Option=''UpdateRequest''  
     END  
           -- if(@DeskRef=''Cloud_Request'' or @DeskRef=''IAM_CloudRequest'' or @DeskRef=''Cloud Process'')  
    -- BEGIN  
       -- exec SD_SRTicketApprovalStatusForCloud @Ticketref=@Ticketref ,@Remarks=@Remarks,@ApproverLevel=@ApproverLevel,@Option=''UpdateRequest''  
     --END  
  
   END  
  
  if(@Option=''RejectRequest'')  
   BEGIN  
   
    
      select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active  
       ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
      from SD_User_SRApproval  
     if(@Approval1IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L1'')  
       BEGIN  
            set @StatusFk=(select Approval1RejectStatus from SD_User_SRApproval)  
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk  where Ticketref=@Ticketref  
  
            update SD_SRApprovalStatus set Approval1Status=''Rejected''   
         ,Approval1Remarks=@Remarks  
        where TicketRef=@Ticketref  
         
       END  
     END  
     if exists(select * from SD_SRApprovalStatus where Approval1Status!=''Rejected'')  
       BEGIN  
         if(@Approval2IsActive=''1'')  
           BEGIN  
              if(@ApproverLevel=''L2'')  
               BEGIN  
                set @StatusFk=(select Approval2RejectStatus from SD_User_SRApproval)  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''   
                   ,Approval2Remarks=@Remarks  
                   where TicketRef=@Ticketref  
   
               END  
           END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval2Status!=''Rejected'')  
       BEGIN  
         if(@Approval3IsActive=''1'')  
          BEGIN  
           if(@ApproverLevel=''L3'')  
             BEGIN  
              set @StatusFk=(select Approval3RejectStatus from SD_User_SRApproval)  
              update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
              update SD_SRApprovalStatus set Approval3Status=''Rejected''   
              ,Approval3Remarks=@Remarks  
             END  
    
          END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'')  
        BEGIN  
           if(@Approval4IsActive=''1'')  
            BEGIN  
             if(@ApproverLevel=''L4'')  
              BEGIN  
                set @StatusFk=(select Approval4RejectStatus from SD_User_SRApproval)  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
                update SD_SRApprovalStatus set Approval4Status=''Rejected''   
                ,Approval4Remarks=@Remarks  
              END  
            END  
        END  
     if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'')  
      BEGIN  
         if(@Approval5IsActive=''1'')  
          BEGIN  
                
           if(@ApproverLevel=''L5'')  
            BEGIN  
              set @StatusFk=(select Approval5RejectStatus from SD_User_SRApproval)  
              update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk where Ticketref=@Ticketref  
               update SD_SRApprovalStatus set Approval5Status=''Rejected''   
               ,Approval5Remarks=@Remarks  
     
             END  
          END  
      END  
   END  
  
  
  
  
 END  ----main end closes  
   
   '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_Change]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_Change]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_Change', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_Change
(
@userName varchar(100)=null,
@Subject nvarchar(1000)=NULL,
@EmailBody nvarchar(max)=NULL,
@To varchar(500)=null,
@MailBody  varchar (max) =NULL,
@UserEmail nvarchar(200)=NULL,
@User nvarchar(200)=NULL,
@cc nvarchar(200)=NULL,
@AssigneeEmail nvarchar(200)=NULL,
@UserID numeric(18,0) = NULL,
@Ticketref  varchar(100) = NULL,
@Approval1Name varchar(100)= NULL,
@Approval1Email varchar(100)= NULL,
@Approval1Status varchar(50)=NULL,
@Approval1Remarks varchar(max)=NULL,
@Approval1Grade varchar(20)=NULL,
@Approval2Name varchar(100)= NULL,
@Approval2Email varchar(100)= NULL,
@Approval2Status varchar(50)=NULL,
@Approval2Remarks varchar(max)=NULL,
@Approval2Grade varchar(20)=NULL,
@Approval3Name varchar (100) =NULL,
@Approval3Email  varchar (100) =NULL,
@Approval3Status varchar(50)=NULL,
@Approval3Remarks varchar(max)=NULL,
@Approval3Grade varchar(20)=NULL,
@Approval4Name varchar (100) =NULL,
@Approval4Email varchar(100)= NULL,
@Approval4Status varchar(50)=NULL,
@Approval4Remarks varchar(max)=NULL,
@Approval4Grade varchar(20)=NULL,
@Approval5Name varchar (100)= NULL,
@Approval5Email varchar (100) =NULL,
@Approval5Status varchar(50) =NULL,
@Approval5Grade varchar(20)=NULL,
@Remarks varchar(max)=NULL,
@ApproverLevel varchar(10)=NULL,
@StatusFk numeric(18,0)=NULL,
@Approval1IsActive bit=NULL,
@Approval2IsActive bit=NULL,
@Approval3IsActive bit=NULL,
@Approval4IsActive bit=NULL,
@Approval5IsActive bit=NULL,
@PrevStage numeric(18,0)=null,
@ToEmail nvarchar(100)=null,
@assigneeParticipantFK numeric(18,0) =null,
 @HODApproval nvarchar(10)=null,
 @EmpID nvarchar(100)=null,
 @OrgId numeric(18,0)=null,
@Option varchar(50)
	
	)
	AS
	BEGIN  ----main begin start


	
		if(@Option=''TicketAssigned'')
		BEGIN
	
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));
			SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
			
				select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a 
inner join  
SD_User_Master b 
on a.RefUserID=b.UserID
where 
REplace(CategoryFK,''||'','' - '') in
(select Category from vSDTicket where TicketNumber=@Ticketref)
										update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref
					if(@ToEmail is not null)
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')

						 
							END		
		END
		if(@Option=''AddSrApprovalStatus'')
	
		BEGIN
				select 
				 @Approval1Name=Approval1Name,@Approval1Email=Approval1Email
				,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email
				,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email
				,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email
				,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email
				from SD_User_SRApproval_SRDesk where EmpID=@EmpID 
				-------------------------Previous is on the basis of Userbased -------------now it is on the basis of Single Approval for all user---
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
				------------------ enteries will insert so that to monitor
				
				
				INSERT INTO	SD_SRApprovalStatus(TicketRef,UserID
     
				  ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status
				  ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status
				  ,Approval5Name,Approval5Email,Approval5Status,UATAccept,OrgId )
			     values(@TicketRef,@UserID 
				    ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''
					 ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''
					 ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'',@OrgId)	
		END
		

		if(@Option=''UpdateRequest'')
	BEGIN
		declare @location nvarchar(100);
		declare @M2Status nvarchar(100);
		declare @EmpCode nvarchar(40);
			declare @Severity nvarchar(40);
		declare @StatusFk1 numeric(18,0);
		declare @sdStageFk numeric(18,0);
		declare @FromEmail nvarchar(100);
		declare @PrevStatus numeric(18,0);
			SET @FromEmail=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
		set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);
		
	    select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,
	           @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,
	           @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name
	          ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active	
	         from SD_User_SRApproval_SRDesk where EmpID=@EmpCode
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
		   
		   set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)
	  		set @PrevStage=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)

					--if(@Approval1IsActive=''1'')
					--		BEGIN
							if(@ApproverLevel=''L1'')
									BEGIN
					--set status to Awaiting IT Manager Approval
												set @StatusFk1=(select  ID from SD_Status where DeskRef=''Change Request''and StatusCodeRef like ''%Approved By Reporting Manager%''  and OrgDeskRef=@OrgId)
												set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Change Request''and StatusCodeRef like ''%Approved By Reporting Manager%'' and OrgDeskRef=@OrgId)
												update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref   and organizationFK=@OrgId
												update SD_SRApprovalStatus set Approval1Status=''Approved'' 
														,Approval1Remarks=@Remarks
														where TicketRef=@Ticketref		  and orgid=@OrgId		
									
						
					      
		  set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);  
					
									set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));
							        set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));
									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	
									
						if(@ToEmail is not null)
						BEGIN
								insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)
								values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId)
						END
				
						
		             	 
                   					
					
					
					
				END
			--END
			----------- for IT manager Update
				
						if(@ApproverLevel=''L2'')
						BEGIN
						
						if(@HODApproval=''Yes'')
						BEGIN

						---------status will set to awaiting hod approval
							set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							set @sdStageFk=(select sd_stageFK from SD_Status where StatusCodeRef like ''%Awaiting HOD Approval%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
							update SD_SRApprovalStatus set Approval2Status=''Pending'' 
		                            ,Approval2Remarks=@Remarks
	                              where TicketRef=@Ticketref  and OrgId=@OrgId

									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

							--(SELECT userName FROM [dbo]. [SD_EmailConfig])
		
												
							set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L3'',@OrgId));
							set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
						END
							ELSE
								BEGIN
								  set @StatusFk1=(select  ID from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
										set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef like ''%Approved By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
								update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
								 update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks
	                              where TicketRef=@Ticketref  and orgid=@OrgId
									


				
			      
					
								END
						
						END
				
					if(@Approval3IsActive=''1'')
					BEGIN
							if(@ApproverLevel=''L3'')
							BEGIN

							-----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request 
							--------------than IT manager will take action on it
							set @StatusFk1=(select ID FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE StatusCodeRef like ''%Approved by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
							update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId
									update SD_SRApprovalStatus set Approval3Status=''Approved'' 
								,Approval3Remarks=@Remarks
			set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)
								set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);
								---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same				
						set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));
						insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
							
												if(@Approval4IsActive=''1'')
		BEGIN
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L4'',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L4'',@Approval4Name,@OrgId));
						SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
				set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
			--							insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
							
			
							
							
							END
		END
					END
					if(@Approval4IsActive=''1'')
					BEGIN
						if(@ApproverLevel=''L4'')
						BEGIN
						set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
						update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref
						update SD_SRApprovalStatus set Approval4Status=''Approved'' 
		,Approval4Remarks=@Remarks
			if(@Approval5IsActive=''1'')
			BEGIN
			set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));
						SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
				set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
			--								insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
						END
						END
					END
					if(@Approval5IsActive=''1'')
					BEGIN
				if(@ApproverLevel=''L5'')
			BEGIN
			set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
			update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref
			update SD_SRApprovalStatus set Approval5Status=''Approved'' 
		,Approval5Remarks=@Remarks
			END
			END
		END

		if(@Option=''RejectRequest'')
			BEGIN
	
		set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)

						select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active
							,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active	
						from SD_User_SRApproval_SRDesk where EmpID=@EmpCode
			--	set    @Approval1Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval1Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L1'')
			--	set    @Approval2Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')
			--	set    @Approval2Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L2'')

			--set    @Approval3Name= (select UserName from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
			--set    @Approval3Email=(select UserEmail from SD_SRApprovers where OrgRef=@OrgId and Approverlevel=''L3'')
							set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )
													set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )
					--if(@Approval1IsActive=''1'')
					--BEGIN
							if(@ApproverLevel=''L1'')
							BEGIN-- reject by manager
												set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)

									
												set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By Reporting Manager%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
												
												update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId

												update SD_SRApprovalStatus set Approval1Status=''Rejected'' 
									,Approval1Remarks=@Remarks
							where TicketRef=@Ticketref  and orgid=@OrgId
											 
							END
				--	END
			
									--if(@Approval2IsActive=''1'')
									--		BEGIN
														if(@ApproverLevel=''L2'')
															BEGIN
															--Rejected by IT manager 
																set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
																	set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected By HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
													update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId
																	update SD_SRApprovalStatus set Approval2Status=''Rejected'' 
																			,Approval2Remarks=@Remarks
																			where TicketRef=@Ticketref  and orgid=@OrgId
																					
									
			      
				
															END
										--	END
					
									if(@Approval3IsActive=''1'')
										BEGIN
											if(@ApproverLevel=''L3'')
													BEGIN
														set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
														set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef like ''%Rejected by HOD%'' and DeskRef=''Change Request'' and OrgDeskRef=@OrgId)
													update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId
														update SD_SRApprovalStatus set Approval3Status=''Rejected'' 
														,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId
	--															update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
												
													set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)
								set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);
								---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same				
						set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));
						insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)
						values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
												
												END
		
										END
								--END
					--if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)
					--			BEGIN
											if(@Approval4IsActive=''1'')
												BEGIN
													if(@ApproverLevel=''L4'')
														BEGIN
																set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
														update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref
																update SD_SRApprovalStatus set Approval4Status=''Rejected'' 
																,Approval4Remarks=@Remarks
																		update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
														END
												END
							--	END
					--if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)
					--	BEGIN
									if(@Approval5IsActive=''1'')
										BEGIN
														
											if(@ApproverLevel=''L5'')
												BEGIN
														set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
										update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref
															update SD_SRApprovalStatus set Approval5Status=''Rejected'' 
															,Approval5Remarks=@Remarks
																	update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref
			
													END
										END
						--END
			END




	END  ----main end closes
	
	
'
GO

--
-- Create or alter procedure [dbo].[SD_spEmailConfig]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spEmailConfig]')
GO
IF OBJECT_ID(N'dbo.SD_spEmailConfig', 'P') IS NULL
EXEC sp_executesql N'    
    
CREATE OR ALTER Proc dbo.SD_spEmailConfig    
(    
 @ID numeric(18,0)=null    
         
      ,@Hostname nvarchar(50)=null    
      ,@Port int=null    
      ,@UserName nvarchar(100)=null    
      ,@Email nvarchar(100)=null    
      ,@Password nvarchar(250)=null    
      ,@Retry int=null    
 ,@ClientID nvarchar(max)=null    
 ,@ClientSecretKey nvarchar(max)=null    
 ,@TenantID nvarchar(max)=null    
 ,@OrgRef numeric(18,0)=null    
 ,@Error varchar(50)=null output  
 ,@Option varchar(50)    
     
 )    
 AS    
 BEGIN    
     
 if(@Option=''AddEmailConfig'')    
     
 BEGIN    
  if not exists(select * from SD_EmailConfig where Hostname=@Hostname and Port= @Port and OrgRef=@OrgRef)   
 begin   
 INSERT INTO SD_EmailConfig(ID    
      ,Hostname    
      ,Port    
      ,UserName    
      ,Email    
      ,Password    
      ,Retry    
   ,ClientID,ClientSecretKey,TenantID,OrgRef)    
 values(@ID    
      ,@Hostname    
      ,@Port    
      ,@UserName    
      ,@Email    
      ,@Password    
      ,@Retry,@ClientID,@ClientSecretKey,@TenantID,@OrgRef)    
   end  
   else   
 begin  
 set @Error=''Organization already exists.''  
 end  
 END    
  if(@Option=''see'')    
     
 BEGIN    
select a.*,b.OrgName,b.Org_ID from SD_EmailConfig a left join sd_orgmaster b     
on a.OrgRef=b.Org_ID    
    
 END    
    
  if(@Option=''UpdateEmailConfig'')    
     
 BEGIN    
   
 update  SD_EmailConfig set     
    
    Hostname=@Hostname    
      ,Port=@Port    
      ,UserName=@UserName    
      ,Email=@Email    
      ,Password=@Password    
      ,Retry=@Retry    
   ,ClientID=@ClientID    
   ,ClientSecretKey=@ClientSecretKey    
   ,TenantID=@TenantID,OrgRef=@OrgRef    
  where ID=@ID   
 END    
  if(@Option=''DeleteEmailConfig'')    
     
 BEGIN    
 Delete  from  SD_EmailConfig    
 where ID=@ID    
 END    
 END    
    
    
    '
GO

--
-- Create or alter procedure [dbo].[SD_SendmailOnStatusChange]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SendmailOnStatusChange]')
GO
IF OBJECT_ID(N'dbo.SD_SendmailOnStatusChange', 'P') IS NULL
EXEC sp_executesql N'
  
CREATE OR ALTER Procedure dbo.SD_SendmailOnStatusChange  
  
(  
--@userName varchar(100)=null,  
@TicketNumber varchar(500)=null,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@Approval3Email nvarchar(200)=null,  
@Otp int =NULL,  
@DeskRef varchar(300)=NULL,  
@Esclevel nvarchar(200)=null, 
@OrgId varchar(100)=null, 
@Option varchar(50)=null  
)  
  
AS  
BEGIN  
  
   
     
   if(@Option=''SendMailOnStatusChangeForSR'')  
    BEGIN  
   
   --set @DeskRef  
     Declare @userName varchar(100);  
     declare @Subject nvarchar(1000);  
     declare @EmailBody nvarchar(max);  
     declare @sdStatusFK numeric(18,0);  
     declare @ToEmail nvarchar(100);  
      declare @Approval3Name nvarchar(100);  
  
      set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@TicketNumber)  
   
       if(@DeskRef  like ''%Service%'' or @DeskRef  like ''%cloud%'' or @DeskRef like ''%Change%'' )  
      --------------------this part if request is not of incident type  
        BEGIN  
          declare @EmpCode nvarchar(40);  
          declare @ApproverName nvarchar(100);  
          set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@TicketNumber);  
           if(@DeskRef = ''Service Request'')  
              BEGIN  
                 set @sdStatusFK=(select top 1 sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  
                 -----------------if IT manager  require HOD approval , than after change of status , mail will send to M3   
                   ----------------------- this status of Awaiting IT manager approval  
               
                 --select * from SD_Status  
               ----when IT manager require approval  
   
               if(@sdStatusFK=''1980641309'')  
                 BEGIN  
    
       SET @userName=''itsupport@hisysmc.com'';  
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
      set @ToEmail=(select top 1 EmailID from sd_hodapproval where EmailID=@Approval3Email);  
       set @Approval3Name=(select top 1 Name from sd_hodapproval where EmailID=@Approval3Email);    
          if(@ToEmail is not null)  
             BEGIN  
        
       
       
            set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L3'',@OrgId));  
             set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));  
           insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
           values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
           END    
                      
    END  
       
                 if(@sdStatusFK=''6543565'')  
                   BEGIN  
    
                         set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''UAT Accept'','''',@OrgId));  
                      set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''UAT Accept'','''',@OrgId));  
                       SET @userName=''itsupport@hisysmc.com'';  
                      --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
                       set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);  
                       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                     END  
  
               END  
  
           ELSE if(@DeskRef like ''%Cloud%'')  
              BEGIN  
                  set @ApproverName =(select  top 1 Approval1Name from SD_User_SRApproval where EmpID=@EmpCode)  
                set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval where Approval1Active=''1'' and EmpID=@EmpCode );  
                set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L1'',@OrgId));  
                set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L1'',@ApproverName,@OrgId));  
     
              END  
          else if(@DeskRef like ''%Change%'')  
            BEGIN   
              
               set @sdStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  
               -----------------if IT manager  require HOD approval , than after change of status , mail will send to M3   
               ----------------------- this status of Awaiting IT manager approval  
               if(@sdStatusFK=''59024056'')  
                   BEGIN  
   
                     SET @userName=''itsupport@hisysmc.com'';  
                     --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
                     set @ToEmail=(select top 1 Approval3Email from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);  
                     set @Approval3Name =(select top 1 Approval3Name from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);     
                     set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L3'',@OrgId));  
                     set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L3'',@Approval3Name,@OrgId));  
                     insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                    END  
                   ------------------------------- UAT when status set  -----------------  
                    if(@sdStatusFK=''883758708'')  
                   BEGIN  
    
                      set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''UAT Accept'','''',@OrgId));  
                      set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''UAT Accept'','''',@OrgId));  
                       SET @userName=''itsupport@hisysmc.com'';  
                      --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
                       set @ToEmail=(select  top 1  SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);  
                       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
                       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                     END  
  
  
            END  
    
               
              
       END  
        
  END  
   
 -----------------------last end ----------------------------------  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_SRStatusUpdate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRStatusUpdate]')
GO
IF OBJECT_ID(N'dbo.SD_SRStatusUpdate', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_SRStatusUpdate  
(  
 @PrevStageFK numeric(18,0) = NULL,  
  @PrevStatusFK numeric(18,0) = NULL,  
 @sdStatusFK numeric(18,0) = NULL,  
 @TicketNumber nvarchar(100) = NULL,  
  @userName varchar(100)=null,  
   @Subject nvarchar(1000)=NULL,  
 @EmailBody nvarchar(max)=NULL,  
  @ToEmail nvarchar(100)=null,  
  @Remarks nvarchar(max)=null,  
    @Approval3Email nvarchar(100)=null,  
	@OrgID nvarchar(100)=null,  
 @Option varchar(50)  
   
 )  
 AS  
 BEGIN  
 --------------------- send mail on update of status of sR  ::::::::::::  for HOD approval and UAT acceptance mai----------  
 if(@Option=''OnUpdateStatus'')  
   
 BEGIN  
     exec SD_SendmailOnStatusChange @TicketNumber=@TicketNumber,@Option=''SendMailOnStatusChangeForSR'',@Approval3Email=@Approval3Email,@OrgId=@OrgID  
   
  
  
  
 END  
   
----------------------------------------- UAT Acceptance Mail ----------------------------------------------  
 if(@Option=''UpdateUATStatus'')  
  
 BEGIN  
 update SD_SRApprovalStatus set UATAccept=''Accepted'',UATAcceptRemarks=@Remarks where TicketRef=@TicketNumber  
  
  
 set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@TicketNumber)  
 set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
-----------------------set stage to uat accepted  and status to UAT acceptance mail  
  
  
 update SDIncident set sdStatusFK=''1607683888'' ,sdStageFK=''1732939374'',  
 previousStageFK=@PrevStageFK,prevSDstatusFk=@PrevStatusFK  where Ticketref=@TicketNumber  
   
 END  
 if(@Option=''RejectRequest'')  
  
 BEGIN  
 update SD_SRApprovalStatus set UATAccept=''Rejected'',UATAcceptRemarks=@Remarks where TicketRef=@TicketNumber  
 set @PrevStageFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
  set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@TicketNumber)  
   
   ------------------set stage to UAT  and status to UAT rejected mail  
   update SDIncident set sdStatusFK=''1505236067'' ,sdStageFK=''1732939374'',  
   previousStageFK=@PrevStageFK,prevSDstatusFk=@PrevStatusFK where Ticketref=@TicketNumber  
   
  END  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_Sendmail]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_Sendmail]')
GO
IF OBJECT_ID(N'dbo.SD_Sendmail', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Procedure dbo.SD_Sendmail

(
--@userName varchar(100)=null,
@TicketNumber varchar(500)=null,
@To varchar(500)=null,
@MailBody  varchar (max) =NULL,
@UserEmail nvarchar(200)=NULL,
@User nvarchar(200)=NULL,
@cc nvarchar(200)=NULL,
@AssigneeEmail nvarchar(200)=NULL,
@Otp int =NULL,
@OrgId numeric(18,0)=null,
@DeskRef varchar(300)=NULL,
@Esclevel nvarchar(200)=null,
@OrgName nvarchar(100)= null,
@Option varchar(50)=null
)

AS
BEGIN

	
			if(@Option=''AllInOne'')
		BEGIN
			IF @MailBody IS NOT NULL
				BEGIN
				Declare @userNameee varchar(100)
				SET @userNameee=(SELECT userName FROM [dbo].[SD_EmailConfig])
			--	EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
				END
		END
			if(@Option=''ReminderonTicketCreaton'')
		BEGIN
	
			
				Declare @userName varchar(100);
				declare @Subject nvarchar(1000);
				declare @EmailBody nvarchar(max);
					set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Creation'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Creation'','''',@OrgId));
			SET @userName=(SELECT top 1 Email  FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
				declare @ToEmail nvarchar(100);
				set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
					set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
					if(@OrgName=''Hitachi'')
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
							values(@userName,@ToEmail,''it_help@hitachi-hirel.com'',@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
						END
					else 
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
						END
			--				insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)
			--values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')
				--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					if(@DeskRef  like ''%Service%'' or @DeskRef  like ''%cloud%'' )
				
			BEGIN
								declare @EmpCode nvarchar(40);
								declare @ApproverName nvarchar(100);
								set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId);
									if(@DeskRef = ''Service Request'')
											BEGIN
													--set @ApproverName	=(select  top 1 Approval1Name from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
												--	set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval1Active=''1'' and EmpID=@EmpCode );
													select   @ApproverName=UserName,@ToEmail=UserEmail from SD_SRApprovers
																where OrgRef=@OrgId and Approverlevel=''L1'';
												
												set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''SR_ForApproval'',''L1'',@OrgId));
													set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''SR_ForApproval'',''L1'',@ApproverName,@OrgId));
											END

				
								else if(@DeskRef like ''%Change%'')
										BEGIN 
												set @ApproverName	=(select  top 1 Approval1Name from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)
													set @ToEmail=(select  top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval1Active=''1'' and EmpID=@EmpCode );
												set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Change_ForApproval'',''L1'',@OrgId));
												set @EmailBody=(select dbo.SD_EmailBody_Cloud(@TicketNumber,''Change_ForApproval'',''L1'',@ApproverName,@OrgId));
										END
		
	     							
											SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)				
										if(@ToEmail is not null)
										BEGIN
										
										insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
											values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId,@DeskRef)
									END
							
							
							END
				else 
				BEGIN

				---- ticket will assign to asignee
							declare @location nvarchar(100);
							declare @category nvarchar(500);
			set	@location =(select location from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
			set @category =(select top 1 Category from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
				--	set @ToEmail=(select Engineer from SD_Pool where Location=@location);
			
			
						set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
					set @ToEmail=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID 
									inner join SDIncident sd 
									on sd.assigneeParticipantFK=a.TechID
									where Ticketref=@TicketNumber and  b.Org_ID=@OrgId
									--where @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%''
									
									)
					--	set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Created Reminder'',''''));
					--set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Created Reminder'',''''));
					set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Assigned'','''',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Assigned'','''',@OrgId));
	
				END 

				ELSE 

				BEGIN 
					declare @location4 nvarchar(100);
										set	@location4 =(select top 1 location from SDIncident where Ticketref=@TicketNumber and organizationFK=@OrgId)
										set @ToEmail=(select top 1 Engineer from SD_Pool where Location=@location4 and OrgId=@OrgId);
										set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Created Reminder'','''',@OrgId));
										set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Created Reminder'','''',@OrgId));
											

					END
								if(@ToEmail is not null)
						BEGIN
							insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID)
							values(@userName,@ToEmail,@Subject,@EmailBody,''1'',cast(getdate() as datetime),''0'',@OrgId)
						END

			END
		END
			if(@Option=''ForgotPassword'')
		BEGIN
								
		--	set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Creation''));
		  set @Subject=(select top 1 Summary from SD_EmailTemplate where TemplateName=''Password Reset''  and OrgRef=@OrgId)
			set @EmailBody=(select dbo.SD_EmailBodyOther(@User,@Otp,''Password Reset'',@OrgId));
						SET @userName=(SELECT top 1 Email  FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	

				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
			--	set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber);
				insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@UserEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId, @DeskRef)
							
				--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
				
		END
			if(@Option=''AssigneUpdate'')
		BEGIN
								
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Assigned'','''',@OrgId));
						set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Assigned'','''',@OrgId));
									SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
						set @ToEmail=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
							if(@ToEmail is not null)
								BEGIN
									insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
									values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
					END		
		END
			if(@Option=''TicketEsc'')
		BEGIN
	
						set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Escalated'',@Esclevel,@OrgId));
					set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Escalated'',@Esclevel,@OrgId));
		SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
					set @cc=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
					if(@AssigneeEmail is not null)
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
						values(@userName,@AssigneeEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
							--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					END		
		END
			if(@Option=''TicketResponseEsc'')
		BEGIN
	
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''ResponseMissed'',@Esclevel,@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''ResponseMissed'',@Esclevel,@OrgId));
			SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
			
				set @cc=( select top 1 b.EmailID from SD_Technician a 
									inner join SD_User_Master b 

									on a.RefUserID=b.UserID
									inner join vSDTicket c 
									on a.TechLoginName=c.TechLoginName
									where TicketNumber=@TicketNumber and OrgRef=@OrgId)
					if(@AssigneeEmail is not null)
						BEGIN
							insert into email([from],[to],cc,subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
						values(@userName,@AssigneeEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
							--EXEC  [dbo].[sp_AddEMail] @PARTITIONID = 1,@FROM = @userNameee,@TO = @To,@SUBJECT =@MailSubject,@BODYCONTENT = @MailBody,@BODYFILENAME = NULL,@BODYTYPE = N''Y''  
					END		
		END

			if(@Option=''ResolvedTicket'')
		BEGIN
	
			
			
		set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Closed'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Closed'','''',@OrgId));
					SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
				set @cc=(select top 1 b.EmailID from vSDTicket a 
					inner join SD_User_Master b on
					a.TechLoginName=b.LoginName
					where TicketNumber=@TicketNumber and a.OrgId=@OrgId)
		set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
			set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
				set @cc =Concat(@cc,'','',''it_help@hitachi-hirel.com'');
				END
				
		
		if (@cc is not null)
			BEGIN
				insert into email([from],[to],[cc],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
			else 
			BEGIN
			insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
				
			--			
				
		END
		    
			if(@Option=''StatusChange'')
		BEGIN
	
			
			
			set @Subject=(select dbo.SD_EmailSubject(@TicketNumber,''Ticket Status Change'','''',@OrgId));
			set @EmailBody=(select dbo.SD_EmailBody(@TicketNumber,''Ticket Status Change'','''',@OrgId));
SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'' and DeskRef=@DeskRef)	
				--(SELECT userName FROM [dbo].[SD_EmailConfig])
			
					set @cc=(select top 1 b.EmailID from vSDTicket a 
					inner join SD_User_Master b on
					a.TechLoginName=b.LoginName
					where TicketNumber=@TicketNumber and a.OrgId=@OrgId)
		set @ToEmail=(select SubmitterEmail from vSDTicket where TicketNumber=@TicketNumber and OrgId=@OrgId);
		--set @ToEmail=''anuj.dogra.fz@hitachi-systems.com''	;	

			set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@OrgId)
				if(@OrgName=''Hitachi'')
				BEGIN
		set @cc=CONCAT(@cc,'','',''it_help@hitachi-hirel.com'');

		END
		
		if (@cc is not null)
			BEGIN
				insert into email([from],[to],[cc],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@cc,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
			else 
			BEGIN
			insert into email([from],[to],subject,bodyContent,priority,created,sendStatus,OrgID,DeskRef)
			values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'',@OrgId,@DeskRef)
			END
				
		END
	END

	
'
GO

--
-- Create or alter procedure [dbo].[sp_ResponseEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_ResponseEsclation]')
GO
IF OBJECT_ID(N'dbo.sp_ResponseEsclation', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER PROCEDURE dbo.sp_ResponseEsclation
(
@TicketID numeric(18,0)=NULL,
@OrgID numeric(18,0)
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
DECLARE @TicketNumber varchar(50);

Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,DueDate,GETDATE()) as ''EscMin'',OrgId--,@Summary=Summary
		


					from vSDTicket where (Status=''Open'' ) and ServiceDesk =''Incident'' and OrgId=@OrgID
					and DATEDIFF(MINUTE,DueDate,GETDATE())>1    

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLA where TicketID= @TicketID and OrgID=@OrgID)
	  BEGIN
	   Declare @L1Min int;
	   Declare @L1Email nvarchar(500);
	   Declare @L2Min int;
	   Declare @L2Email nvarchar(500);
	   Declare @L3Min int;
	   Declare @L3Email nvarchar(500);
	   Declare @L4Min int;
	   Declare @L4Email nvarchar(500);
	   Declare @L5Min int;
	   Declare @L5Email nvarchar(500);
		set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1'' and OrgRef=@OrgID)
		set @L1Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgID)
		set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
		set @L2Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
		set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		set @L3Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
		set @L4Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
		set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
		set @L5Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
		
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
		BEGIN
						IF @EscMin>@L2Min and @EscMin<=@L3Min
							 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
					  BEGIN
						if not exists(select * from SD_SLA where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
										BEGIN
							  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
							  where  TicketID=@TicketID and OrgID=@OrgID
					
							exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
		END
					END
							 END
		END
		ELSE 
			BEGIN
					if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgID)
						  BEGIN
								 if(@EscMin >@L2Min)
									 BEGIN
												if not exists(select * from SD_SLA where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
											BEGIN
													  update SD_SLA set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
														where  TicketID=@TicketID and  OrgID=@OrgID
					
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
											END
									 END
						  END
			END

		---- above condition is to check if level is restricted to only l2 than l3 condition will not check
		-- same we will do for other 
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
			BEGIN
				 IF (@EscMin>@L3Min and @EscMin<=@L4Min)
						BEGIN
							if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
									BEGIN
											if not exists(select * from SD_SLA where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
												BEGIN
													update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
													where  TicketID=@TicketID and OrgID=@OrgID
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												END
									END
						 END
			END
		 ELSE 
		 BEGIN 
		 if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgID)
					BEGIN
											if(@EscMin >@L3Min)
												BEGIN
														if not exists(select * from SD_SLA where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
															BEGIN
																update SD_SLA set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
																where  TicketID=@TicketID and  OrgID=@OrgID
																exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												            END
												END
						END
		END

		if exists( select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
			BEGIN
					IF (@EscMin>@L4Min and @EscMin<=@L5Min)
						 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgID)
									  BEGIN
										  if not exists(select * from SD_SLA where EsclationLevel=''L4'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
											BEGIN
													update SD_SLA set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
													where  TicketID=@TicketID and OrgID=@OrgID
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L4Email,@Esclevel=''L4'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
											END
										END
						END
						else IF (@EscMin>@L5Min)
							 BEGIN
									  if exists(select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgID)
										 BEGIN
												if not exists(select * from SD_SLA where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
								BEGIN
									  update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
									  where  TicketID=@TicketID
									 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
								END
										END
							END
			END
			else

				 BEGIN
							 if(@EscMin>@L5Min)
									 BEGIN
											if not exists(select * from SD_SLA where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
												BEGIN
														update SD_SLA set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
														 where  TicketID=@TicketID and OrgID=@OrgID
														 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
												END
									END
				  END
			 END
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  ELSE
		 BEGIN
		  if exists(select * from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgID)
			  BEGIN
			    if not exists(select * from SD_SLA where EsclationLevel=''L1'' and TicketNumber=@TicketNumber and OrgID=@OrgID)
								BEGIN
			Insert into SD_SLA (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,OrgID) 
				values(@TicketID,@TicketNumber,''L1'',''1'',''L2'',@OrgID)--,@Summary=Summary	
				 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L1Email,@Esclevel=''L1'',@Option=''TicketResponseEsc'',@OrgId=@OrgId
				 END
				END
	      END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin,@OrgId
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[sp_ResolutionEsclation]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_ResolutionEsclation]')
GO
IF OBJECT_ID(N'dbo.sp_ResolutionEsclation', 'P') IS NULL
EXEC sp_executesql N'


CREATE OR ALTER PROCEDURE dbo.sp_ResolutionEsclation
(
@TicketID numeric(18,0)=NULL,
@OrgId numeric(18,0)
)
as 
BEGIN

DECLARE @MyCursor CURSOR;
 	declare @Subject nvarchar(1000);
			declare @EmailBody nvarchar(max);
			declare @CC nvarchar(200);
	
DECLARE @TicketNumber varchar(50);
Declare @EscMin int;
BEGIN
    SET @MyCursor = CURSOR FOR
  select id,TicketNumber,DATEDIFF(MINUTE,ExpectedResolutionDt,GETDATE()) as ''EscMin'',OrgId--,@Summary=Summary		
  from vSDTicket where (Status!=''Closed'' and Status !=''Resolved'' ) and ServiceDesk =''Incident''-- and OrgId=@OrgId
  and DATEDIFF(MINUTE,ExpectedResolutionDt,GETDATE())>1   

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @TicketID,@TicketNumber,@EscMin,@OrgId

    WHILE @@FETCH_STATUS = 0
    BEGIN
      /*if
         YOUR ALGORITHM GOES HERE   
      */
	  IF Exists(Select * from SD_SLAForResol where TicketID= @TicketID and OrgID=@OrgId)
	  BEGIN
	   Declare @L1Min int;
	   Declare @L1Email nvarchar(500);
	   Declare @L2Min int;
	   Declare @L2Email nvarchar(500);
	   Declare @L3Min int;
	   Declare @L3Email nvarchar(500);
	   Declare @L4Min int;
	   Declare @L4Email nvarchar(500);
	   Declare @L5Min int;
	   Declare @L5Email nvarchar(500);
		set @L1Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1'' and OrgRef=@OrgId)
		set @L1Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgId)
		set @L2Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
		set @L2Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
		set @L3Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		set @L3Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		set @L4Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
		set @L4Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
		set @L5Min =(select TimeForEsclatn from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
		set @L5Email =(select UserEmail from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
		
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
		BEGIN
						IF @EscMin>@L2Min and @EscMin<=@L3Min
							 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
					  BEGIN
						if not exists(select * from SD_SLAForResol where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
										BEGIN
							  update SD_SLAForResol set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
							  where  TicketID=@TicketID and OrgID=@OrgId
					
							exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketEsc'',@OrgId=@OrgId
		END
					END
							 END
		END
		ELSE 
			BEGIN
					if exists(select * from SD_EsclateMaster where EsclationLevel=''L2'' and status=''1''and OrgRef=@OrgId)
						  BEGIN
								 if(@EscMin >@L2Min)
									 BEGIN
												if not exists(select * from SD_SLAForResol where EsclationLevel=''L2'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
											BEGIN
													  update SD_SLAForResol set EsclationLevel=''L2'',EsclationFlag=''2'',NextEsclationLevel=''L3''
														where  TicketID=@TicketID and OrgID=@OrgId
					
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L2Email,@Esclevel=''L2'',@Option=''TicketEsc'',@OrgId=@OrgId
											END
									 END
						  END
			END

		---- above condition is to check if level is restricted to only l2 than l3 condition will not check
		-- same we will do for other 
		if exists( select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
			BEGIN
				 IF (@EscMin>@L3Min and @EscMin<=@L4Min)
						BEGIN
							if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
									BEGIN
											if not  exists(select * from SD_SLAForResol where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
												BEGIN
													update SD_SLAForResol set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
													where  TicketID=@TicketID and OrgID=@OrgId
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketEsc'',@OrgId=@OrgId
												END
									END
						 END
			END
		 ELSE 
		 BEGIN 
		 if exists(select * from SD_EsclateMaster where EsclationLevel=''L3'' and status=''1''and OrgRef=@OrgId)
					BEGIN
											if(@EscMin >@L3Min)
												BEGIN
														if not  exists(select * from SD_SLAForResol where EsclationLevel=''L3'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
															BEGIN
																update SD_SLAForResol set EsclationLevel=''L3'',EsclationFlag=''3'',NextEsclationLevel=''L4''
																where  TicketID=@TicketID and OrgID=@OrgId
																exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L3Email,@Esclevel=''L3'',@Option=''TicketEsc'',@OrgId=@OrgId
												            END
												END
						END
		END

		if exists( select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
			BEGIN
					IF (@EscMin>@L4Min and @EscMin<=@L5Min)
						 BEGIN
								  if exists(select * from SD_EsclateMaster where EsclationLevel=''L4'' and status=''1''and OrgRef=@OrgId)
									  BEGIN
										  if not exists(select * from SD_SLAForResol where EsclationLevel=''L4'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
											BEGIN
													update SD_SLAForResol set EsclationLevel=''L4'',EsclationFlag=''4'',NextEsclationLevel=''L5''
													where  TicketID=@TicketID and OrgID=@OrgId
													exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L4Email,@Esclevel=''L4'',@Option=''TicketEsc'',@OrgId=@OrgId
											END
										END
						END
						else IF (@EscMin>@L5Min)
							 BEGIN
									  if exists(select * from SD_EsclateMaster where EsclationLevel=''L5'' and status=''1''and OrgRef=@OrgId)
										 BEGIN
												if not exists(select * from SD_SLAForResol where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
								BEGIN
									  update SD_SLAForResol set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
									  where  TicketID=@TicketID and OrgID=@OrgId
									 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketEsc'',@OrgId=@OrgId
								END
										END
							END
			END
			else

				 BEGIN
							 if(@EscMin>@L5Min)
									 BEGIN
											if not exists(select * from SD_SLAForResol where EsclationLevel=''L5'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
												BEGIN
														update SD_SLAForResol set EsclationLevel=''L5'',EsclationFlag=''5'',NextEsclationLevel=''''
														 where  TicketID=@TicketID and OrgID=@OrgId
														 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L5Email,@Esclevel=''L5'',@Option=''TicketEsc'',@OrgId=@OrgId
												END
									END
				  END
			 END
-------------- if record doesn''t exist , this will make esclation upto 1st level
	  ELSE
		 BEGIN
		  if exists(select * from SD_EsclateMaster where EsclationLevel=''L1'' and status=''1''and OrgRef=@OrgId)
			  BEGIN
			    if not exists(select * from SD_SLAForResol where EsclationLevel=''L1'' and TicketNumber=@TicketNumber and OrgID=@OrgId)
								BEGIN
			Insert into SD_SLAForResol (TicketID,TicketNumber,EsclationLevel,EsclationFlag,NextEsclationLevel,OrgID) 
				values(@TicketID,@TicketNumber,''L1'',''1'',''L2'',@OrgId)--,@Summary=Summary	
				 exec SD_Sendmail @TicketNumber=@TicketNumber,@AssigneeEmail=@L1Email,@Esclevel=''L1'',@Option=''TicketEsc'',@OrgId=@OrgId
				 END
				END
	      END
			  FETCH NEXT FROM @MyCursor 
			  INTO @TicketID ,@TicketNumber,@EscMin,@OrgId
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

END
'
GO

--
-- Create or alter procedure [dbo].[sp_AllSDProc]
--
GO
PRINT (N'Create or alter procedure [dbo].[sp_AllSDProc]')
GO
IF OBJECT_ID(N'dbo.sp_AllSDProc', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER PROCEDURE dbo.sp_AllSDProc
(
@Option nvarchar(100)=NULL
)
as 
BEGIN
print (''Rahul chamanlal'');
--update email set sendStatus=''0'' where sendStatus=''4'';
--- For HIREL Response Esclation 
Declare @currnTime Time ;
Declare @beginHour Time ;
Declare @EndHour Time ;
Declare @beginHourIMSPL Time ;
Declare @EndHourIMSPL Time ;
set @currnTime=GETDATE();
  select @beginHour=BeginHour,@EndHour=EndHour from vSDOrgDeskDef  where OrgFk=''523843837''
  if(@currnTime>=@beginHour  and @currnTime<@EndHour)
  BEGIN
exec sp_ResponseEsclation @OrgID=''523843837'';----this will send mail if response miss
exec sp_ResolutionEsclation @OrgID=''523843837'';-- this will send mail if resolution miss
END

------------------- response and resolution esclation according to IMSPL

  select @beginHourIMSPL=BeginHour,@EndHourIMSPL=EndHour from vSDOrgDeskDef  where OrgFk=''680624893''
    if(@currnTime>=@beginHourIMSPL  and @currnTime<@EndHourIMSPL)
  BEGIN
exec sp_ResponseEsclation @OrgID=''680624893'';----this will send mail if response miss
exec sp_ResolutionEsclation @OrgID=''680624893'';-- this will send mail if resolution miss
END

exec sp_TicketAutoClosedStatus;----------this will closed ticket automatically
--exec SP_AssignAndEscalation; ------------- this will auto Assign to Tech Level L2 after 30 min and Esclate after 2hr

--exec sp_TicketEscReminderForEng;-- this will send mail if ticket not acknowledge by assigne
END



'
GO

--
-- Create or alter procedure [dbo].[SP_AutoAssignTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_AutoAssignTicket]')
GO
IF OBJECT_ID(N'dbo.SP_AutoAssignTicket', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SP_AutoAssignTicket    
(    
@TicketID nvarchar(50),    
@orgid varchar(50)    
)    
AS    
BEGIN    
DECLARE @count int, @Newcount int, @TechID varchar(50) ,@TechName nvarchar(200) ,@Notes nvarchar(max)   
    
 select top 1 @TechID=t.TechID ,@TechName=t.TechLoginName from SD_Technician t    
 left join TechLeave l on t.TechID=l.TechId where t.TechLevel = ''L1'' 
 And  OrgRef =@orgid and t.TechID not in (''533394'',''533395'')
 AND(l.TechId IS NULL or CAST(GETDATE() AS DATE) NOT BETWEEN CAST(LeaveFromdate AS DATE) AND CAST(LeaveTodate AS DATE) )     
 order by TicketCount asc    
    
 update SDIncident set assigneeParticipantFK=@TechID where Ticketref= @TicketID and organizationFK=@orgid;    
 select @count=TicketCount from SD_Technician where TechID=@TechID;    
 set @Newcount = @count+1;    
    
 update SD_Technician set TicketCount =@Newcount where TechID=@TechID and OrgRef =@orgid;    
    set @Notes= Concat(''Engineer Auto Assigned:'',@TechName);
exec  SD_spAddTicketNotes @Ticketref=@TicketID,@sdStatusFK=null,@NoteDesc=@Notes,@EdityBy=''System'',@Option=''EngineerNotes'',@organizationFK=@orgid;    


 exec SD_Sendmail @TicketNumber=@TicketID,@OrgID=@orgid,@Option=''AssigneUpdate'' 
 
    
 END


 '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_IMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_IMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_IMSPL', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident_IMSPL        
(        
   @id numeric(26,0)= null        
   ,@DeskRef varchar(50) =NULL        
   ,@UserIDForAppro numeric(18,0)=null        
   ,@ticketout varchar(50)=Null        
      ,@Ticketref varchar(20)= null output        
      ,@partitionid numeric(26,0)= null        
      ,@orgServDeskDefnFK numeric(26,0)= null        
      ,@sdStageFK numeric(26,0)= null        
      ,@sdStatusFK numeric(26,0)= null        
      ,@sdPriorityFK numeric(26,0)= null        
      ,@sdSeverityFK numeric(26,0)= null        
      ,@sdSolutionTypeFK numeric(26,0)= null        
      ,@sdCategoryFK numeric(26,0)= null        
      ,@creationDateTime datetime= null        
      ,@closedDateTime datetime= null        
      ,@TicketSummary varchar(max)= null        
      ,@TicketDesc varchar(max)= null        
   ,@TickNotes nvarchar(max)=null        
      ,@submitterType varchar(50)= null        
      ,@submitterName varchar(50)= null        
      ,@submitterEmailAddr varchar(50)= null        
      ,@submitterPhone varchar(50)= null        
      ,@assigneeType varchar(50)= null        
      ,@assigneePoolFK numeric(26,0)= null        
      ,@assigneeParticipantFK numeric(26,0)= null        
      ,@actualCompletedDate datetime= null        
      ,@expectedDueDate datetime= null        
      ,@actualResolutionDate datetime= null        
      ,@organizationFK numeric(26,0)= null        
      ,@orgStaffFK numeric(26,0)= null        
      ,@sdErrorMessage varchar(max)= null        
      ,@solutionNote varchar(max)= null        
      ,@sourceType varchar(50)= null        
      ,@previousStageFK numeric(26,0)= null        
      ,@categoryFullText varchar(max)= null        
   ,@sdCategoryRef  varchar(200)=null        
   ,@UserName nvarchar(100)=null        
   ,@SubmitterID varchar(50)=null        
      ,@AssigneName varchar(100)=null        
   ,@TechID numeric(18,0)=null        
   ,@UserID numeric(18,0)=null        
  ,@InsertBy int =NULL        
  ,@InsertDt datetime =NULL        
  ,@UpdateBy int =NULL        
  ,@UpdateDt datetime =NULl        
  ,@Status nvarchar(10) = NULL        
  ,@TicketAttachMent nvarchar(max)=null        
  ,@Filename nvarchar(100)=null        
  ,@location nvarchar(100)=null        
  ,@Department nvarchar(100)=null        
  , @Note nvarchar(1000)=null    
  ,@EmpID nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null        
  ,@Option varchar(50)=null,    
  @Error varchar(100)= null output     
         
 )        
 AS        
 BEGIN        
   BEGIN TRY    
  set  @creationDateTime=GETDATE();  
 if(@Option=''AddTicket'')        
 BEGIN        
 declare @ParentCategoryRef nvarchar(500);        
 declare @SLA nvarchar(300);        
   --declare @OrgName nvarchar(100);        
   declare @sdSeverityFK1 numeric(26,0);        
         
    -- set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)        
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)        
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK)        
     set @sdSeverityFK1=@sdSeverityFK  
	 

  --       set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*       
  --         FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where      
  --                Row_Num=''1'')      
  --    set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID       
  --        where Deskref=@DeskRef and OrgFk=@organizationFK );      
      
  --     if(@SLA=''Severity'')      
  --      BEGIN       
  --       set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --      END      
  --else if(@SLA=''Category'')      
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_klCat(@creationDateTime, @DeskRef,@organizationFK,@ParentCategoryRef))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_klCatresol(@creationDateTime, @DeskRef,@organizationFK,@ParentCategoryRef))      
  --      END      
		-- else if(@SLA=''Priority'')      
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_Priority(@creationDateTime, @DeskRef,@sdPriorityFK ,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_PriorityResol( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))      
  --      END 
  --     else       
  --      BEGIN      
  --       set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --       set @actualResolutionDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))      
  --      END     
             
     set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*         
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where        
                  Row_Num=''1'')        
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
          where Deskref=@DeskRef and OrgFk=@organizationFK );        
        
       if(@SLA=''Severity'')        
        BEGIN         
         set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
  else if(@SLA=''Category'')        
        BEGIN        
         --set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory_New(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
         --set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
		set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
    
        END        
       else         
        BEGIN        
         set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
           
     if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)        
       BEGIN        
        declare @TicketIDforNotes numeric(26,0)=null;        
        declare @NoteDesc nvarchar(max)=null;        
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))        
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK         
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)        
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)         
    set @Error=''Exists''    
       END        
       else         
       BEGIN       
    DECLARE @InsertedTickets TABLE (SID numeric(26,0),    Ticketref varchar(20));      
  
  
EXEC GetUniqueTicketRef  @TicketNo = @Ticketref, @organizationFK = @organizationFK,  @NewTicketref = @Ticketref OUTPUT;
  
       insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK          
          ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone          
           ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,        
        actualResolutionDate,location,Department,CurrentEscalationLevel)           
  OUTPUT INSERTED.SID, INSERTED.Ticketref INTO @InsertedTickets(SID, Ticketref)      
         Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()          
         ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone          
         ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,  
   @expectedDueDate,  
   @categoryFullText,@SubmitterID,        
         @actualResolutionDate,  
   ISNULL(@location,0),ISNULL(@Department,0),''0'')          
            
        --SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())        
  SET @Ticketref = (SELECT TOP 1 Ticketref FROM @InsertedTickets ORDER BY SID DESC);      
         if(@Ticketref is not null)        
           BEGIN    
		    exec SP_AutoAssignTicket @TicketID=@Ticketref,@orgid=@organizationFK   

              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)         
              where ReqRef=@DeskRef and OrgRef=@organizationFK        
          END        
          ---------------custom field creation-------------        
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK        
        
       if(@TicketAttachMent is not null)        
        BEGIN        
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
        END        
      END        
        
      ------------------else khtm        
         
 END        
        
 if(@Option=''DeleteTicket'')        
 BEGIN        
 Delete from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK        
 END        
 if(@Option=''AssignTechnician'')        
 BEGIN        
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
  BEGIN         
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
  END        
 END        
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------        
  if(@Option=''ChangeTechnician'')        
  BEGIN        
  declare @Reason nvarchar(1000);        
          
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);        
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
    BEGIN         
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK        
        
    END        
  END        
-----------------------------Update Ticket  ---------------------------------------------------        
 if(@Option=''UpdateTicket'')        
 BEGIN  
 set @DeskRef =(select top 1 r.ReqTypeRef from SDIncident s inner join SD_RequestType r on s.orgServDeskDefnFK=r.id  where Ticketref=@Ticketref and organizationFK=@organizationFK)
	 


 ---Stage,DeskrefID,select from bydefaultvalue        
 Declare @PrevStageFK numeric(18,0)=null;        
  Declare @PrevStatusFK numeric(18,0)=null;        
  Declare @StatusFKAsPerStage numeric(18,0)=null;        
  Declare @TicketID numeric(18,0)=null;        
  Declare @EditedBy nvarchar(max)=null;        
  set @EditedBy=@UserName;        
  ------------this is prevstatus status        
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
	if not exists (select * from SD_StatusRestriction where OrgId=@organizationFK and Reqtype=@DeskRef and StageId=@PrevStageFK)  
begin  

 if(@sdStatusFK!=@PrevStageFK)        
 BEGIN        
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK        
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''        
         
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''        
         
 END        
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)        
 if(@sdStatusFK is null)        
 BEGIN        
  set @sdStatusFK=@StatusFKAsPerStage        
            
 END        
 else         
 BEGIN        
  set @sdStatusFK= @sdStatusFK        
 END        
        
         
 update  SDIncident        
        
  set    sdStageFK=@sdStageFK        
    ,sdStatusFK=@StatusFKAsPerStage        
      ,sdPriorityFK=@sdPriorityFK        
      ,sdSeverityFK=@sdSeverityFK        
             
      ,sdCategoryFK=@sdCategoryFK        
   ,SubmitterID=@SubmitterID        
   ,submitterPhone=@submitterPhone        
    ,closedDateTime=@closedDateTime        
      ,assigneeType =@assigneeType        
     ,assigneeParticipantFK=@assigneeParticipantFK        
   ,sdSolutionTypeFK=@sdSolutionTypeFK        
   ,solutionNote=@solutionNote        
           
      ,categoryFullText=@categoryFullText        
   ,location=@location        
   ,Department=@Department        
   ,EditedBy=@UserName        
      where ticketref=@Ticketref and organizationFK =@organizationFK        
    if(@TicketAttachMent is not null)        
  BEGIN        
  exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
  END        
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK        
 declare @Assignee nvarchar(500);  
  Declare @IssueSummary nvarchar(max);  
 set @IssueSummary =(select top 1  Summary from  vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
  
 set @Assignee =(select top 1  TechLoginName from  vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
exec SD_spAddKnowledgeBase @Issue=@IssueSummary,@ResolutionDetail=@solutionNote,@Option=''AddKB'',@OrgDeskRef=@organizationFK,@KBSubmiitedBy=@Assignee  
         
 declare @NewStatus nvarchar(100);        
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)        
 if(@NewStatus=''resolved'')        
 BEGIN        
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK         
 END        
 declare  @PrevStageForMail numeric(18,0);        
  declare  @SDStageForMail numeric(18,0);        
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
  if( @NewStatus!=''resolved'')        
 BEGIN        
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK         
         
         
 END        
         
 END  
 else
 begin
 set @Error=''You are not Authorize to change the Stage !''
 end
 END
        
 if(@Option=''AddSR_ApproverStatus'')        
 BEGIN        
 declare @desk nvarchar(100);        
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)        
   if(@desk=''Service Request'')      
 BEGIN        
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK ,@EmpID=@EmpID  
        
 END     
  else  if(@desk=''Change Request'')      
 BEGIN        
   exec SD_SRTicketApprovalStatus_Change @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK    ,@EmpID=@EmpID     
        
 END  
        
 END        
 END TRY      
    BEGIN CATCH      
        SET @Ticketref = ERROR_MESSAGE();      
    END CATCH     
 if(@Error='''' or @Error = null)    
 begin    
 if exists(select * from SDIncident where Ticketref=@Ticketref AND organizationFK=@organizationFK AND (TicketSummary IS NULL OR TicketSummary = '''') )      
  begin      
  set @Error=''yes''      
  end      
  end    
 END   
  
  
  
  
  
  
   --select dbo.GetResponseDueDtForCategory_New(@creationDateTime, @DeskRef,@ParentCategoryRef,''680624893'')    
   --select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK)  
  
 --  select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
 --         where Deskref=''Incident'' and OrgFk=680624893  
  
  
 --    select dbo.GetDueDate_New(GETDATE(), ''Incident'',''1541925503'',''680624893'')  
 --   select dbo.GetDueDateForResolution( GETDATE(), ''Incident'',''819216043'',''680624893'')  
  
 --select ISNULL(ResolutionTime,0) from SD_Severity where Deskref=''Incident'' and id=''1541925503'' and OrgDeskRef=''680624893''   
 --if exists(select * from vSDOrgDeskDef where DaysCovered like ''%''+''19:38:34.4866667''+''%'' and Deskref=''Incident'' and OrgFk=''680624893'' )  
  
  
 ----select * from SD_Mfa where UserId=1018149815  
  
  
 --select * from SD_Severity where OrgDeskRef=''680624893''



'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Hirel]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Hirel]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Hirel', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_Hirel        
(        
   @id numeric(26,0)= null        
   ,@DeskRef varchar(50) =NULL        
   ,@UserIDForAppro numeric(18,0)=null        
   ,@ticketout varchar(50)=Null        
   ,@Ticketref varchar(20)= null output       
   ,@partitionid numeric(26,0)= null        
   ,@orgServDeskDefnFK numeric(26,0)= null        
   ,@sdStageFK numeric(26,0)= null        
   ,@sdStatusFK numeric(26,0)= null        
   ,@sdPriorityFK numeric(26,0)= null        
   ,@sdSeverityFK numeric(26,0)= null        
   ,@sdSolutionTypeFK numeric(26,0)= null        
   ,@sdCategoryFK numeric(26,0)= null        
   ,@creationDateTime datetime= null        
   ,@closedDateTime datetime= null        
   ,@TicketSummary varchar(max)= null        
   ,@TicketDesc varchar(max)= null        
   ,@TickNotes nvarchar(max)=null        
   ,@submitterType varchar(50)= null        
   ,@submitterName varchar(50)= null        
   ,@submitterEmailAddr varchar(50)= null        
   ,@submitterPhone varchar(50)= null        
   ,@assigneeType varchar(50)= null        
   ,@assigneePoolFK numeric(26,0)= null        
   ,@assigneeParticipantFK numeric(26,0)= null        
   ,@actualCompletedDate datetime= null        
   ,@expectedDueDate datetime= null        
   ,@actualResolutionDate datetime= null        
   ,@organizationFK numeric(26,0)= null        
   ,@orgStaffFK numeric(26,0)= null        
   ,@sdErrorMessage varchar(max)= null        
   ,@solutionNote varchar(max)= null        
   ,@sourceType varchar(50)= null        
   ,@previousStageFK numeric(26,0)= null        
   ,@categoryFullText varchar(max)= null        
   ,@sdCategoryRef  varchar(200)=null        
   ,@UserName nvarchar(100)=null        
   ,@SubmitterID varchar(50)=null        
   ,@AssigneName varchar(100)=null        
   ,@TechID numeric(18,0)=null        
   ,@UserID numeric(18,0)=null        
   ,@InsertBy int =NULL        
   ,@InsertDt datetime =NULL        
   ,@UpdateBy int =NULL        
   ,@UpdateDt datetime =NULl        
   ,@Status nvarchar(10) = NULL        
   ,@TicketAttachMent nvarchar(max)=null        
   ,@Filename nvarchar(100)=null        
   ,@location nvarchar(100)=null        
   ,@Department nvarchar(100)=null        
   , @Note nvarchar(1000)=null        
   ,@SDRole nvarchar(100)=null        
   ,@Option varchar(50)  =null    
   ,@Error varchar(20)= null output   
   )        
 AS        
 BEGIN        
    BEGIN TRY  
	set @creationDateTime=GETDATE()
 if(@Option=''AddTicket'')        
 BEGIN        
   declare @ParentCategoryRef nvarchar(500);        
   declare @SLA nvarchar(300);        
   declare @OrgName nvarchar(100);        
   declare @sdSeverityFK1 numeric(18,0);        
         
 --    set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)       
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)        
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);        
 set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK )       
      
  set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*         
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  Row_Num=''1'')        
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID         
          where Deskref=@DeskRef and OrgFk=@organizationFK );        
        
       if(@SLA=''Severity'')        
        BEGIN         
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
       else if(@SLA=''Category'')        
        BEGIN        
         --set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
         --set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))        
		  set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
       else         
        BEGIN        
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))        
        END        
  if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)        
       BEGIN        
       -------------------------------- this will add notes , as ticket already exists -------------------------------        
        declare @TicketIDforNotes numeric(26,0)=null;        
        declare @NoteDesc nvarchar(max)=null;        
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))        
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK         
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)        
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)     
    set @Error=''Exists''  
       END        
  
       else         
         BEGIN        
    DECLARE @InsertedTickets TABLE (SID numeric(26,0),    Ticketref varchar(20));    
    
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK        
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone        
         ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,      
   actualResolutionDate,location,Department)       
   OUTPUT INSERTED.SID, INSERTED.Ticketref INTO @InsertedTickets(SID, Ticketref)    
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()        
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone        
       ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,      
    @actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))        
         
       SET @Ticketref = (SELECT TOP 1 Ticketref FROM @InsertedTickets ORDER BY SID DESC);    
         if(@Ticketref is not null)        
           BEGIN 

		     exec SP_AutoAssignTicket @TicketID=@Ticketref,@orgid=@organizationFK 

              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)         
              where ReqRef=@DeskRef and OrgRef=@organizationFK        
          END      
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK        
        
       if(@TicketAttachMent is not null)        
        BEGIN        
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
  END        
        
      END        
 ------------------------ assign ticket hirel on ticket creatio -----------------        
    declare @category nvarchar(500);        
  declare @location1 nvarchar(500);        
  declare @department1 nvarchar(500);        
   set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);        
   set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);        
   set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);        
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')        
    BEGIN        
        
     ------------------ assign hardware tickets only----------        
    if(@category like ''%Incident - Hardware%'')        
      BEGIN        
         if(@location1=''Sanand'')        
        BEGIN        
   --------------- Ticket will assign  to  Itamc.hhpe        
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
   END        
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')        
       BEGIN        
        
        --------ticket assign to chintan        
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
       END        
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')        
       BEGIN        
        
        --------ticket assign to itamc.gnr        
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
       END        
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')        
        BEGIN         
    ---------------- ticket assign to krunal        
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
   END        
     END        
        
     --------------------- asssign Software tickets only   --------------        
   if(@category like ''%Incident - Software%'')        
      BEGIN        
       if(@location1=''Sanand'')        
        BEGIN        
        --------------- Ticket will assign  to  Unati        
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
       END        
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')        
        BEGIN        
        
        --------ticket assign to chintan        
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        END        
        
         
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')        
        BEGIN         
          ---------------- ticket assign to krunal        
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
        END        
    END        
          
  END        
    else if(@category like ''%Incident - Business Application%'')        
     BEGIN        
      -----------  ticket assign to nalin        
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
    END        
      else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')        
       BEGIN        
   -------------- ticket assign to anand        
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK        
    END        
         
          
        
    -------------end of auto assignment for hirel        
 END        
        
 if(@Option=''DeleteTicket'')        
 BEGIN        
 Delete from SDIncident where Ticketref=@Ticketref        
 END        
 if(@Option=''AssignTechnician'')        
 BEGIN        
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
  BEGIN        
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
  --exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
  END        
 END        
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------        
  if(@Option=''ChangeTechnician'')        
  BEGIN        
  declare @Reason nvarchar(1000);        
          
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);        
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)        
    BEGIN         
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)        
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK        
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK         
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK        
        
    END        
  END        
-----------------------------Update Ticket  ---------------------------------------------------        
 if(@Option=''UpdateTicket'')        
 BEGIN        
 ---Stage,DeskrefID,select from bydefaultvalue        
 Declare @PrevStageFK numeric(18,0)=null;        
  Declare @PrevStatusFK numeric(18,0)=null;        
  Declare @StatusFKAsPerStage numeric(18,0)=null;        
  Declare @TicketID numeric(18,0)=null;        
  Declare @EditedBy nvarchar(max)=null;        
  set @EditedBy=@UserName;        
  ------------this is prevstatus status        
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
         
 if(@sdStatusFK!=@PrevStageFK)        
 BEGIN        
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK        
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''        
         
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''        
         
 END        
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)        
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)        
 if(@sdStatusFK is null)        
 BEGIN        
  set @sdStatusFK=@StatusFKAsPerStage        
            
 END        
 else         
 BEGIN        
  set @sdStatusFK= @sdStatusFK        
 END        
        
         
 update  SDIncident        
        
  set    sdStageFK=@sdStageFK ,sdStatusFK=@StatusFKAsPerStage  ,sdPriorityFK=@sdPriorityFK  ,sdSeverityFK=@sdSeverityFK        
      ,sdCategoryFK=@sdCategoryFK  ,SubmitterID=@SubmitterID  ,submitterPhone=@submitterPhone  ,closedDateTime=@closedDateTime        
      ,assigneeType =@assigneeType,assigneeParticipantFK=@assigneeParticipantFK ,sdSolutionTypeFK=@sdSolutionTypeFK        
   ,solutionNote=@solutionNote ,categoryFullText=@categoryFullText        
   ,location=@location  ,Department=@Department  ,EditedBy=@UserName        
        
      where ticketref=@Ticketref and organizationFK =@organizationFK        
  if(@TicketAttachMent is not null)        
   BEGIN        
   exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK        
   END        
  exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK        
         
 declare @NewStatus nvarchar(100);        
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)        
 if(@NewStatus=''resolved'')        
 BEGIN        
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK        
        
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK         
 END        
 declare  @PrevStageForMail numeric(18,0);        
  declare  @SDStageForMail numeric(18,0);        
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)        
        
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')        
 BEGIN        
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK       
         
 END        
         
 END        
        
 if(@Option=''AddSR_ApproverStatus'')        
 BEGIN        
 declare @desk nvarchar(100);        
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)        
 if(@desk=''CloudProcess'')        
 BEGIN        
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''        
 END        
 else        
 BEGIN        
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK        
        
 END        
        
 END      
 END TRY    
    BEGIN CATCH    
        SET @Ticketref = ERROR_MESSAGE();    
    END CATCH   
 if(@Error='''')  
 begin  
if exists(select * from SDIncident where Ticketref=@Ticketref AND organizationFK=@organizationFK AND (TicketSummary IS NULL OR TicketSummary = '''') )    
  begin    
  set @Error=''yes''    
  end    
  end  
 END        











'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_New]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_New]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_New', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_New    
(    
   @id numeric(26,0)= null    
     ,@DeskRef varchar(50) =NULL    
    ,@UserIDForAppro numeric(18,0)=null    
    ,@ticketout varchar(50)=Null    
    ,@Ticketref varchar(20)= null output    
    ,@Error varchar(20)= null output      
    ,@partitionid numeric(26,0)= null    
    ,@orgServDeskDefnFK numeric(26,0)= null    
    ,@sdStageFK numeric(26,0)= null    
    ,@sdStatusFK numeric(26,0)= null    
    ,@sdPriorityFK numeric(26,0)= null    
    ,@sdSeverityFK numeric(26,0)= null    
    ,@sdSolutionTypeFK numeric(26,0)= null    
    ,@sdCategoryFK numeric(26,0)= null    
    ,@creationDateTime datetime= null    
    ,@closedDateTime datetime= null    
    ,@TicketSummary varchar(max)= null    
    ,@TicketDesc varchar(max)= null    
 ,@TickNotes nvarchar(max)=null    
    ,@submitterType varchar(50)= null    
    ,@submitterName varchar(50)= null    
    ,@submitterEmailAddr varchar(50)= null    
    ,@submitterPhone varchar(50)= null    
    ,@assigneeType varchar(50)= null    
    ,@assigneePoolFK numeric(26,0)= null    
    ,@assigneeParticipantFK numeric(26,0)= null    
    ,@actualCompletedDate datetime= null    
    ,@expectedDueDate datetime= null    
    ,@actualResolutionDate datetime= null    
    ,@organizationFK numeric(26,0)= null    
    ,@orgStaffFK numeric(26,0)= null    
    ,@sdErrorMessage varchar(max)= null    
    ,@solutionNote varchar(max)= null    
    ,@sourceType varchar(50)= null    
    ,@previousStageFK numeric(26,0)= null    
    ,@categoryFullText varchar(max)= null    
   ,@sdCategoryRef  varchar(200)=null    
   ,@UserName nvarchar(100)=null    
   ,@SubmitterID varchar(50)=null    
   ,@AssigneName varchar(100)=null    
   ,@TechID numeric(18,0)=null    
   ,@UserID numeric(18,0)=null    
   ,@InsertBy int =NULL    
   ,@InsertDt datetime =NULL    
   ,@UpdateBy int =NULL    
   ,@UpdateDt datetime =NULl    
   ,@Status nvarchar(10) = NULL    
   ,@TicketAttachMent nvarchar(max)=null    
   ,@Filename nvarchar(100)=null    
   ,@location nvarchar(100)=null    
   ,@Department nvarchar(100)=null    
   ,@Note nvarchar(1000)=null    
   ,@SDRole nvarchar(100)=null    
   ,@Option varchar(50)=null,    
    @OrgName varchar(50)=null,    
    @TicketNumber VARCHAR(100)=null    
     
 )    
 AS    
 BEGIN    
 set @Ticketref = @TicketNumber    
 declare @Type varchar(50)    
 set @Type= @Option    
 if(@OrgName=''Hitachi'')    
  begin    
  EXEC SD_spSDIncident_Hirel     
        @id = @id,     
        @DeskRef = @DeskRef,     
        @UserIDForAppro = @UserIDForAppro,    
        @ticketout = @ticketout,     
        @Ticketref = @TicketNumber OUTPUT,     
        @partitionid = @partitionid,     
        @orgServDeskDefnFK = @orgServDeskDefnFK,     
        @sdStageFK = @sdStageFK,     
        @sdStatusFK = @sdStatusFK,     
        @sdPriorityFK = @sdPriorityFK,     
        @sdSeverityFK = @sdSeverityFK,     
        @sdSolutionTypeFK = @sdSolutionTypeFK,     
        @sdCategoryFK = @sdCategoryFK,    
        @creationDateTime = @creationDateTime,     
        @closedDateTime = @closedDateTime,     
        @TicketSummary = @TicketSummary,     
        @TicketDesc = @TicketDesc,     
        @TickNotes = @TickNotes,     
        @submitterType = @submitterType,     
        @submitterName = @submitterName,     
        @submitterEmailAddr = @submitterEmailAddr,     
        @submitterPhone = @submitterPhone,     
        @assigneeType = @assigneeType,     
        @assigneePoolFK = @assigneePoolFK,     
        @assigneeParticipantFK = @assigneeParticipantFK,     
        @actualCompletedDate = @actualCompletedDate,    
        @expectedDueDate = @expectedDueDate,     
        @actualResolutionDate = @actualResolutionDate,     
        @organizationFK = @organizationFK,     
        @orgStaffFK = @orgStaffFK,     
        @sdErrorMessage = @sdErrorMessage,     
        @solutionNote = @solutionNote,     
        @sourceType = @sourceType,    
        @previousStageFK = @previousStageFK,     
        @categoryFullText = @categoryFullText,   
        @sdCategoryRef = @sdCategoryRef,     
        @UserName = @UserName,     
        @SubmitterID = @SubmitterID,     
        @AssigneName = @AssigneName,     
        @TechID = @TechID,     
        @UserID = @UserID,     
        @InsertBy = @InsertBy,     
        @InsertDt = @InsertDt,     
        @UpdateBy = @UpdateBy,     
        @UpdateDt = @UpdateDt,     
        @Status = @Status,     
        @TicketAttachMent = @TicketAttachMent,     
        @Filename = @Filename,     
        @location = @location,     
        @Department = @Department,     
        @Note = @Note,    
        @SDRole = @SDRole,     
        @Option = @Type,  
  @Error=@Error OUTPUT;    
  end    
    
  else    
  begin    
  EXEC [dbo].[SD_spSDIncident_IMSPL]    
    @id = @id,    
    @DeskRef = @DeskRef,    
    @UserIDForAppro = @UserIDForAppro,    
    @ticketout = @ticketout,    
    @Ticketref = @TicketNumber OUTPUT,    
    @partitionid = @partitionid,    
    @orgServDeskDefnFK = @orgServDeskDefnFK,    
    @sdStageFK = @sdStageFK,    
    @sdStatusFK = @sdStatusFK,    
    @sdPriorityFK = @sdPriorityFK,    
    @sdSeverityFK = @sdSeverityFK,    
    @sdSolutionTypeFK = @sdSolutionTypeFK,    
    @sdCategoryFK = @sdCategoryFK,    
    @creationDateTime = @creationDateTime,    
    @closedDateTime = @closedDateTime,    
    @TicketSummary = @TicketSummary,    
    @TicketDesc = @TicketDesc,    
    @TickNotes = @TickNotes,    
    @submitterType = @submitterType,    
    @submitterName = @submitterName,    
    @submitterEmailAddr = @submitterEmailAddr,    
    @submitterPhone = @submitterPhone,    
    @assigneeType = @assigneeType,    
    @assigneePoolFK = @assigneePoolFK,    
    @assigneeParticipantFK = @assigneeParticipantFK,    
    @actualCompletedDate = @actualCompletedDate,    
    @expectedDueDate = @expectedDueDate,    
    @actualResolutionDate = @actualResolutionDate,    
    @organizationFK = @organizationFK,    
    @orgStaffFK = @orgStaffFK,    
    @sdErrorMessage = @sdErrorMessage,    
    @solutionNote = @solutionNote,    
    @sourceType = @sourceType,    
    @previousStageFK = @previousStageFK,    
    @categoryFullText = @categoryFullText,    
    @sdCategoryRef = @sdCategoryRef,    
    @UserName = @UserName,    
    @SubmitterID = @SubmitterID,    
    @AssigneName = @AssigneName,    
    @TechID = @TechID,    
    @UserID = @UserID,    
    @InsertBy = @InsertBy,    
    @InsertDt = @InsertDt,    
    @UpdateBy = @UpdateBy,    
    @UpdateDt = @UpdateDt,    
    @Status = @Status,    
    @TicketAttachMent = @TicketAttachMent,    
    @Filename = @Filename,    
    @location = @location,    
    @Department = @Department,    
    @Note = @Note,    
    @SDRole = @SDRole,    
    @Option = @Type,  
 @Error=@Error OUTPUT;    
 end    
  
 END    
    
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident    
(    
   @id numeric(26,0)= null    
     ,@DeskRef varchar(50) =NULL    
    ,@UserIDForAppro numeric(18,0)=null    
    ,@ticketout varchar(50)=Null    
    ,@Ticketref varchar(20)= null output    
    ,@Error varchar(100)= null output      
    ,@partitionid numeric(26,0)= null    
    ,@orgServDeskDefnFK numeric(26,0)= null    
    ,@sdStageFK numeric(26,0)= null    
    ,@sdStatusFK numeric(26,0)= null    
    ,@sdPriorityFK numeric(26,0)= null    
    ,@sdSeverityFK numeric(26,0)= null    
    ,@sdSolutionTypeFK numeric(26,0)= null    
    ,@sdCategoryFK numeric(26,0)= null    
    ,@creationDateTime datetime= null    
    ,@closedDateTime datetime= null    
    ,@TicketSummary varchar(max)= null    
    ,@TicketDesc varchar(max)= null    
 ,@TickNotes nvarchar(max)=null    
    ,@submitterType varchar(50)= null    
    ,@submitterName varchar(50)= null    
    ,@submitterEmailAddr varchar(50)= null    
    ,@submitterPhone varchar(50)= null    
    ,@assigneeType varchar(50)= null    
    ,@assigneePoolFK numeric(26,0)= null    
    ,@assigneeParticipantFK numeric(26,0)= null    
    ,@actualCompletedDate datetime= null    
    ,@expectedDueDate datetime= null    
    ,@actualResolutionDate datetime= null    
    ,@organizationFK numeric(26,0)= null    
    ,@orgStaffFK numeric(26,0)= null    
    ,@sdErrorMessage varchar(max)= null    
    ,@solutionNote varchar(max)= null    
    ,@sourceType varchar(50)= null    
    ,@previousStageFK numeric(26,0)= null    
    ,@categoryFullText varchar(max)= null    
   ,@sdCategoryRef  varchar(200)=null    
   ,@UserName nvarchar(100)=null    
   ,@SubmitterID varchar(50)=null    
   ,@AssigneName varchar(100)=null    
   ,@TechID numeric(18,0)=null    
   ,@UserID numeric(18,0)=null    
   ,@InsertBy int =NULL    
   ,@InsertDt datetime =NULL    
   ,@UpdateBy int =NULL    
   ,@UpdateDt datetime =NULl    
   ,@Status nvarchar(10) = NULL    
   ,@TicketAttachMent nvarchar(max)=null    
   ,@Filename nvarchar(100)=null    
   ,@location nvarchar(100)=null    
   ,@Department nvarchar(100)=null    
   ,@Note nvarchar(1000)=null    
   ,@SDRole nvarchar(100)=null    
   ,@Option varchar(50)=null,    
    @OrgName varchar(50)=null,    
    @TicketNumber VARCHAR(100)=null    
     
 )    
 AS    
 BEGIN    
 set @Ticketref = @TicketNumber    
 declare @Type varchar(50)    
 set @Type= @Option    
 if(@OrgName=''Hitachi'')    
  begin    
  EXEC SD_spSDIncident_Hirel     
        @id = @id,     
        @DeskRef = @DeskRef,     
        @UserIDForAppro = @UserIDForAppro,    
        @ticketout = @ticketout,     
        @Ticketref = @TicketNumber OUTPUT,     
        @partitionid = @partitionid,     
        @orgServDeskDefnFK = @orgServDeskDefnFK,     
        @sdStageFK = @sdStageFK,     
        @sdStatusFK = @sdStatusFK,     
        @sdPriorityFK = @sdPriorityFK,     
        @sdSeverityFK = @sdSeverityFK,     
        @sdSolutionTypeFK = @sdSolutionTypeFK,     
        @sdCategoryFK = @sdCategoryFK,    
        @creationDateTime = @creationDateTime,     
        @closedDateTime = @closedDateTime,     
        @TicketSummary = @TicketSummary,     
        @TicketDesc = @TicketDesc,     
        @TickNotes = @TickNotes,     
        @submitterType = @submitterType,     
        @submitterName = @submitterName,     
        @submitterEmailAddr = @submitterEmailAddr,     
        @submitterPhone = @submitterPhone,     
        @assigneeType = @assigneeType,     
        @assigneePoolFK = @assigneePoolFK,     
        @assigneeParticipantFK = @assigneeParticipantFK,     
        @actualCompletedDate = @actualCompletedDate,    
        @expectedDueDate = @expectedDueDate,     
        @actualResolutionDate = @actualResolutionDate,     
        @organizationFK = @organizationFK,     
        @orgStaffFK = @orgStaffFK,     
        @sdErrorMessage = @sdErrorMessage,     
        @solutionNote = @solutionNote,     
        @sourceType = @sourceType,    
        @previousStageFK = @previousStageFK,     
        @categoryFullText = @categoryFullText,   
        @sdCategoryRef = @sdCategoryRef,     
        @UserName = @UserName,     
        @SubmitterID = @SubmitterID,     
        @AssigneName = @AssigneName,     
        @TechID = @TechID,     
        @UserID = @UserID,     
        @InsertBy = @InsertBy,     
        @InsertDt = @InsertDt,     
        @UpdateBy = @UpdateBy,     
        @UpdateDt = @UpdateDt,     
        @Status = @Status,     
        @TicketAttachMent = @TicketAttachMent,     
        @Filename = @Filename,     
        @location = @location,     
        @Department = @Department,     
        @Note = @Note,    
        @SDRole = @SDRole,     
        @Option = @Type,  
  @Error=@Error OUTPUT;    
  end    
    
  else    
  begin    
  EXEC [dbo].[SD_spSDIncident_IMSPL]    
    @id = @id,    
    @DeskRef = @DeskRef,    
    @UserIDForAppro = @UserIDForAppro,    
    @ticketout = @ticketout,    
    @Ticketref = @TicketNumber OUTPUT,    
    @partitionid = @partitionid,    
    @orgServDeskDefnFK = @orgServDeskDefnFK,    
    @sdStageFK = @sdStageFK,    
    @sdStatusFK = @sdStatusFK,    
    @sdPriorityFK = @sdPriorityFK,    
    @sdSeverityFK = @sdSeverityFK,    
    @sdSolutionTypeFK = @sdSolutionTypeFK,    
    @sdCategoryFK = @sdCategoryFK,    
    @creationDateTime = @creationDateTime,    
    @closedDateTime = @closedDateTime,    
    @TicketSummary = @TicketSummary,    
    @TicketDesc = @TicketDesc,    
    @TickNotes = @TickNotes,    
    @submitterType = @submitterType,    
    @submitterName = @submitterName,    
    @submitterEmailAddr = @submitterEmailAddr,    
    @submitterPhone = @submitterPhone,    
    @assigneeType = @assigneeType,    
    @assigneePoolFK = @assigneePoolFK,    
    @assigneeParticipantFK = @assigneeParticipantFK,    
    @actualCompletedDate = @actualCompletedDate,    
    @expectedDueDate = @expectedDueDate,    
    @actualResolutionDate = @actualResolutionDate,    
    @organizationFK = @organizationFK,    
    @orgStaffFK = @orgStaffFK,    
    @sdErrorMessage = @sdErrorMessage,    
    @solutionNote = @solutionNote,    
    @sourceType = @sourceType,    
    @previousStageFK = @previousStageFK,    
    @categoryFullText = @categoryFullText,    
    @sdCategoryRef = @sdCategoryRef,    
    @UserName = @UserName,    
    @SubmitterID = @SubmitterID,    
    @AssigneName = @AssigneName,    
    @TechID = @TechID,    
    @UserID = @UserID,    
    @InsertBy = @InsertBy,    
    @InsertDt = @InsertDt,    
    @UpdateBy = @UpdateBy,    
    @UpdateDt = @UpdateDt,    
    @Status = @Status,    
    @TicketAttachMent = @TicketAttachMent,    
    @Filename = @Filename,    
    @location = @location,    
    @Department = @Department,    
    @Note = @Note,    
    @SDRole = @SDRole,    
    @Option = @Type,  
 @Error=@Error OUTPUT;    
 end    
  
 END    
    
'
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRGodrej]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_SRGodrej]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_SRGodrej', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_SRGodrej        
(            
@userName varchar(100)=null,            
@Subject nvarchar(1000)=NULL,            
@EmailBody nvarchar(max)=NULL,                  
@UserID nvarchar(100) = NULL,            
@Ticketref  varchar(100) = NULL,            
@Approval1Name varchar(100)= NULL,            
@Approval1Email varchar(100)= NULL,            
@Approval1Status varchar(50)=NULL,            
@Approval1Remarks varchar(max)=NULL,            
@Approval1Grade varchar(20)=NULL,               
@Approval2Remarks varchar(max)=NULL,           
@Approval3Name varchar (100) =NULL,             
@Approval3Remarks varchar(max)=NULL,           
@Approval5Name varchar (100)= NULL,            
@Approval5Email varchar (100) =NULL,           
@Remarks varchar(max)=NULL,            
@ApproverLevel varchar(10)=NULL,            
@StatusFk numeric(18,0)=NULL,             
@Approval4IsActive bit=NULL,            
@Approval5IsActive bit=NULL,            
@PrevStage numeric(18,0)=null,            
@ToEmail nvarchar(100)=null,            
@assigneeParticipantFK numeric(18,0) =null,            
 @HODApproval nvarchar(200)=null,            
 @OrgId numeric(18,0)=null,            
 @ApprovalBy varchar(50)=NULL,          
@Options varchar(50) 
             
 )            
 AS            
 BEGIN               
  if(@Options=''TicketAssigned'')            
  BEGIN            
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));            
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));            
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')          
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a             
inner join              
SD_User_Master b             
on a.RefUserID=b.UserID            
where             
REplace(CategoryFK,''||'','' - '') in            
(select Category from vSD_Tickets where TicketNumber=@Ticketref)            
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref            
     if(@ToEmail is not null)            
      BEGIN            
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')         
                   
       END              
  END            
  if(@Options=''AddSrApprovalStatus'')           
  BEGIN            
  set @Approval1Name=(select top 1 UserName from sd_srApprovers where UserEmail =@HODApproval)            
    set @Approval1Email=(select top 1 UserEmail from sd_srApprovers where UserEmail =@HODApproval)          
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID ,Approval1Name ,Approval1Email,Approval1Status,UATAccept,OrgId )            
          values(@TicketRef,@UserID ,@Approval1Name,@Approval1Email,''Pending'',''Pending'',@OrgId)             
  END            
              
            
  if(@Options=''UpdateRequest'')            
 BEGIN            
  declare @location nvarchar(100);            
  declare @M2Status nvarchar(100);            
  declare @EmpCode nvarchar(40);            
  declare @StatusFk1 numeric(18,0);            
  declare @PrevStatus numeric(18,0);            
  declare @sdStageFk numeric(18,0);            
  declare @FromEmail nvarchar(100);            
   SET @FromEmail=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);         
       set @PrevStage=(select top 1   sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)            
     set @PrevStatus=(select top 1 sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)            
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)            
     if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref and OrgId=@OrgId)            
       BEGIN            
                    
     --set status to Awaiting IT Manager Approval            
            set @StatusFk1=(select top 1  ID from SD_Status where DeskRef=''Service Request'' and StatusCodeRef=''Approved By Reporting Manager''  and OrgDeskRef=@OrgId)            
            set @sdStageFK=(select top 1  sd_stageFK from SD_Status where DeskRef=''Service Request'' and StatusCodeRef=''Approved By Reporting Manager'' and OrgDeskRef=@OrgId)            
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus             
            where Ticketref=@Ticketref   and organizationFK=@OrgId            
            update SD_SRApprovalStatus set Approval1Status=''Approved''             
              ,Approval1Remarks=@Remarks            
              where TicketRef=@Ticketref    and orgid=@OrgId             
     set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ApproverUpdate'',@OrgID=@OrgId            
            
  ---------Add Notes-------------          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
     END             
    if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
               
    BEGIN            
         set @StatusFk1=(select top 1 ID from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
      set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus where Ticketref=@Ticketref  and organizationFK=@OrgId            
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks            
                               where TicketRef=@Ticketref  and orgid=@OrgId            
              
      set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
      END            
    if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
            
       BEGIN            
       set @StatusFk1=(select top 1 ID FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       set @sdStageFk=(select top 1 sd_stageFK FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId            
         update SD_SRApprovalStatus set Approval3Status=''Approved''             
        ,Approval3Remarks=@Remarks            
      ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval3Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
  END            
                 
     if(@Approval4IsActive=''1'')            
     BEGIN            
      if(@ApproverLevel=''L4'')            
      BEGIN            
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref            
      update SD_SRApprovalStatus set Approval4Status=''Approved''             
  ,Approval4Remarks=@Remarks            
   if(@Approval5IsActive=''1'')            
   BEGIN            
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));            
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));            
      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')        
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );            
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')            
        ---------Add Notes-------------          
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
          
   END            
      END            
     END            
     if(@Approval5IsActive=''1'')            
     BEGIN            
    if(@ApproverLevel=''L5'')            
   BEGIN            
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref            
   update SD_SRApprovalStatus set Approval5Status=''Approved''             
  ,Approval5Remarks=@Remarks            
    ---------Add Notes-------------          
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
   END            
   END            
  END            
            
  if(@Options=''RejectRequest'')            
   BEGIN            
             
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
            
       set @PrevStage=(select top 1 sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
       set @PrevStatus=(select top 1 sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )            
    select * from SD_Status            
       if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)            
       BEGIN-- reject by manager            
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
            
                     
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                        
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId            
            
            update SD_SRApprovalStatus set Approval1Status=''Rejected''             
         ,Approval1Remarks=@Remarks            
       where TicketRef=@Ticketref  and orgid=@OrgId            
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
        SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
            
            
     -----------now ticket will visible to pool  according to location of ticket             
     set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)            
     set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and orgid=@OrgId)            
                     
           ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
 exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval1Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
             
     if(@ToEmail is not null)            
       BEGIN            
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
       END            
       END            
                    
              if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)            
               BEGIN            
               --Rejected by IT manager             
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId            
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''             
                   ,Approval2Remarks=@Remarks            
                   where TicketRef=@Ticketref  and orgid=@OrgId            
                    -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));            
       SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')             
    ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
   exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=@Approval2Remarks,@EdityBy=@ApprovalBy,@Option=''AddApprovNotes'',          
   @organizationFK=@OrgId          
            
     -----------now ticket will visible to pool  according to location of ticket             
     set @location=(select top 1 location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )            
     set @ToEmail=(select top 1 Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)            
                     
                     
     if(@ToEmail is not null)            
       BEGIN            
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)            
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')          
       END            
  END          
                  
          if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)            
             BEGIN            
              set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
       set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Service Request''  and OrgDeskRef=@OrgId)            
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId            
              update SD_SRApprovalStatus set Approval3Status=''Rejected''             
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId            
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
                    
                ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
            END           
           if(@Approval4IsActive=''1'')            
            BEGIN            
             if(@ApproverLevel=''L4'')            
              BEGIN            
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
                update SD_SRApprovalStatus set Approval4Status=''Rejected''             
                ,Approval4Remarks=@Remarks            
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref            
          
        ---------Add Notes-------------          
 set  @ApprovalBy =(select top 1 approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
              END            
            END          
         if(@Approval5IsActive=''1'')            
          BEGIN            
                          
           if(@ApproverLevel=''L5'')            
            BEGIN            
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)            
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref            
               update SD_SRApprovalStatus set Approval5Status=''Rejected''             
               ,Approval5Remarks=@Remarks            
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref          
 set  @ApprovalBy =(select top 1 approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )          
    exec  SD_spAddTicketNotes          
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',          
   @organizationFK=@OrgId          
             END            
          END            
   END            
 END '
GO

--
-- Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_CRGodrej]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_SRTicketApprovalStatus_CRGodrej]')
GO
IF OBJECT_ID(N'dbo.SD_SRTicketApprovalStatus_CRGodrej', 'P') IS NULL
EXEC sp_executesql N'  
  
CREATE OR ALTER Proc dbo.SD_SRTicketApprovalStatus_CRGodrej    
(    
@userName varchar(100)=null,    
@Subject nvarchar(1000)=NULL,    
@EmailBody nvarchar(max)=NULL,    
@To varchar(500)=null,    
@MailBody  varchar (max) =NULL,    
@UserEmail nvarchar(200)=NULL,    
@User nvarchar(200)=NULL,    
@cc nvarchar(200)=NULL,    
@AssigneeEmail nvarchar(200)=NULL,    
@UserID nvarchar(100) = NULL,    
@Ticketref  varchar(100) = NULL,    
@Approval1Name varchar(100)= NULL,    
@Approval1Email varchar(100)= NULL,    
@Approval1Status varchar(50)=NULL,    
@Approval1Remarks varchar(max)=NULL,    
@Approval1Grade varchar(20)=NULL,    
@Approval2Name varchar(100)= NULL,    
@Approval2Email varchar(100)= NULL,    
@Approval2Status varchar(50)=NULL,    
@Approval2Remarks varchar(max)=NULL,    
@Approval2Grade varchar(20)=NULL,    
@Approval3Name varchar (100) =NULL,    
@Approval3Email  varchar (100) =NULL,    
@Approval3Status varchar(50)=NULL,    
@Approval3Remarks varchar(max)=NULL,    
@Approval3Grade varchar(20)=NULL,    
@Approval4Name varchar (100) =NULL,    
@Approval4Email varchar(100)= NULL,    
@Approval4Status varchar(50)=NULL,    
@Approval4Remarks varchar(max)=NULL,    
@Approval4Grade varchar(20)=NULL,    
@Approval5Name varchar (100)= NULL,    
@Approval5Email varchar (100) =NULL,    
@Approval5Status varchar(50) =NULL,    
@Approval5Grade varchar(20)=NULL,    
@Remarks varchar(max)=NULL,    
@ApproverLevel varchar(10)=NULL,    
@StatusFk numeric(18,0)=NULL,    
@Approval1IsActive bit=NULL,    
@Approval2IsActive bit=NULL,    
@Approval3IsActive bit=NULL,    
@Approval4IsActive bit=NULL,    
@Approval5IsActive bit=NULL,    
@PrevStage numeric(18,0)=null,    
@ToEmail nvarchar(100)=null,    
@assigneeParticipantFK numeric(18,0) =null,    
 @HODApproval nvarchar(200)=null,    
 @OrgId numeric(18,0)=null,    
 @ApprovalBy varchar(50)=NULL,  
@Option varchar(50)    
     
 )    
 AS    
 BEGIN  ----main begin start    
    
    
     
  if(@Option=''TicketAssigned'')    
  BEGIN    
     
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@OrgId));    
   SET @userName=(SELECT top 1 userName FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
       
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a     
inner join      
SD_User_Master b     
on a.RefUserID=b.UserID    
where     
REplace(CategoryFK,''||'','' - '') in    
(select Category from vSDTicket where TicketNumber=@Ticketref)    
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref    
     if(@ToEmail is not null)    
      BEGIN    
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
    
           
       END      
  END    
  if(@Option=''AddSrApprovalStatus'')    
     
  BEGIN    
  set @Approval1Name=(select top 1 UserName from sd_srApprovers where UserEmail =@HODApproval)    
    set @Approval1Email=(select top 1 UserEmail from sd_srApprovers where UserEmail =@HODApproval)    
    
        
    ------------------ enteries will insert so that to monitor    
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID    
         
      ,Approval1Name ,Approval1Email,Approval1Status,UATAccept,OrgId )    
          values(@TicketRef,@UserID     
         ,@Approval1Name,@Approval1Email,''Pending'',''Pending'',@OrgId)     
  END    
      
    
  if(@Option=''UpdateRequest'')    
 BEGIN    
  declare @location nvarchar(100);    
  declare @M2Status nvarchar(100);    
  declare @EmpCode nvarchar(40);    
  declare @StatusFk1 numeric(18,0);    
  declare @PrevStatus numeric(18,0);    
  declare @sdStageFk numeric(18,0);    
  declare @FromEmail nvarchar(100);    
   SET @FromEmail=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
  set @EmpCode=(select top 1 SubmitterID from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId);    
      
     
       set @PrevStage=(select top 1   sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
     set @PrevStatus=(select top 1 sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId)    
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)    
     if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref and OrgId=@OrgId)    
       BEGIN    
            
     --set status to Awaiting IT Manager Approval    
            set @StatusFk1=(select top 1  ID from SD_Status where DeskRef=''Change Request'' and StatusCodeRef=''Approved By Reporting Manager''  and OrgDeskRef=@OrgId)    
            set @sdStageFK=(select top 1  sd_stageFK from SD_Status where DeskRef=''Change Request'' and StatusCodeRef=''Approved By Reporting Manager'' and OrgDeskRef=@OrgId)    
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus     
            where Ticketref=@Ticketref   and organizationFK=@OrgId    
            update SD_SRApprovalStatus set Approval1Status=''Approved''     
              ,Approval1Remarks=@Remarks    
              where TicketRef=@Ticketref    and orgid=@OrgId     
     set  @ApprovalBy =(select approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ApproverUpdate'',@OrgID=@OrgId    
    
  ---------Add Notes-------------  
 exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
                  
              ----------------- AS manual approval 2 will work here  ----------------    
       --set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L2'',@OrgId));    
       --set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L2'',@Approval2Name,@OrgId));    
       --  SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
            
       
       -- set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);    
       -- insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
       -- values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
                      
         
         
         
         
     END    
      
   ----------- for IT manager Update    
    if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)    
       
    BEGIN    
         set @StatusFk1=(select  ID from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
      set @sdStageFk=(select  sd_stageFK from SD_Status where StatusCodeRef=''Approved by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks    
                               where TicketRef=@Ticketref  and orgid=@OrgId    
      
      set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
     --  ELSE    
     -- BEGIN     
     --   update SDIncident set assigneeParticipantFK=''1435327746'' where Ticketref=@Ticketref    
     --set @ToEmail=( select b.EmailID from SD_Technician a     
     --    inner join SD_User_Master b     
    
     --    on a.RefUserID=b.UserID    
             
     --    where EmailID like ''%nikhil.kumar.fb@hitachi-systems.com%'')    
     --    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
     --   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
     -- END    
      END    
          
          
        
        
         ----------- for IT manager Update    
    if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)    
    
       BEGIN    
    
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request     
       --------------than IT manager will take action on it    
       set @StatusFk1=(select ID FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE id=''1912175189'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  and organizationFK=@OrgId    
         update SD_SRApprovalStatus set Approval3Status=''Approved''     
        ,Approval3Remarks=@Remarks    
   --set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
   --     set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);    
   --     ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same        
   --   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@OrgId));    
   --   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@OrgId));    
   --   insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   --   values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
      ---------Add Notes-------------  
 set  @ApprovalBy =(select approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  END    
         
     if(@Approval4IsActive=''1'')    
     BEGIN    
      if(@ApproverLevel=''L4'')    
      BEGIN    
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
      update SD_SRApprovalStatus set Approval4Status=''Approved''     
  ,Approval4Remarks=@Remarks    
   if(@Approval5IsActive=''1'')    
   BEGIN    
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''SR_ForApproval'',''L5'',@OrgId));    
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''SR_ForApproval'',''L5'',@Approval5Name,@OrgId));    
      SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    --(SELECT userName FROM [dbo].[SD_EmailConfig])    
       
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );    
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)    
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
        ---------Add Notes-------------  
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
   END    
      END    
     END    
     if(@Approval5IsActive=''1'')    
     BEGIN    
    if(@ApproverLevel=''L5'')    
   BEGIN    
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref    
   update SD_SRApprovalStatus set Approval5Status=''Approved''     
  ,Approval5Remarks=@Remarks    
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
   END    
   END    
  END    
    
  if(@Option=''RejectRequest'')    
   BEGIN    
     
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
    
       set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
       set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref  and organizationFK=@OrgId )    
    select * from SD_Status    
       if exists(select * from SD_SRApprovalStatus where Approval1Status=''Pending'' and TicketRef=@Ticketref)    
       BEGIN-- reject by manager    
            set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
    
             
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected By Reporting Manager'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
                
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  and organizationFK=@OrgId    
    
            update SD_SRApprovalStatus set Approval1Status=''Rejected''     
         ,Approval1Remarks=@Remarks    
       where TicketRef=@Ticketref  and orgid=@OrgId    
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
        SET @userName=(SELECT top 1 Email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    
    
     -----------now ticket will visible to pool  according to location of ticket     
     set @location=(select location from SDIncident where Ticketref=@Ticketref  and organizationFK=@OrgId)    
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location  and orgid=@OrgId)    
             
           ---------Add Notes-------------  
 set  @ApprovalBy =(select approval1name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
     
     if(@ToEmail is not null)    
       BEGIN    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       END    
           
       END    
         
        
            
              if exists(select * from SD_SRApprovalStatus where Approval2Status=''Pending'' and TicketRef=@Ticketref)    
               BEGIN    
               --Rejected by IT manager     
                set @StatusFk=(select top 1 ID from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where StatusCodeRef=''Rejected by HOD'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage  where Ticketref=@Ticketref  and organizationFK=@OrgId    
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''     
                   ,Approval2Remarks=@Remarks    
                   where TicketRef=@Ticketref  and orgid=@OrgId    
                    -- update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@OrgId));    
       SET @userName=(SELECT top 1 email FROM [dbo].[SD_EmailConfig] where OrgRef=@OrgId and MailType=''Outbound'')     
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval2name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
    
     -----------now ticket will visible to pool  according to location of ticket     
     set @location=(select location from SDIncident where Ticketref=@Ticketref and organizationFK=@OrgId )    
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location and OrgId=@OrgId)    
             
             
     if(@ToEmail is not null)    
       BEGIN    
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)    
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')    
           
       END    
               END    
              
          
          if exists(select * from SD_SRApprovalStatus where Approval3Status=''Pending'' and TicketRef=@Ticketref)    
             BEGIN    
              set @StatusFk=(select top 1 ID from SD_Status where id=''266268355'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''266268355'' and DeskRef=''Change Request''  and OrgDeskRef=@OrgId)    
             update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  and organizationFK=@OrgId    
              update SD_SRApprovalStatus set Approval3Status=''Rejected''     
              ,Approval3Remarks=@Remarks  where TicketRef=@Ticketref and OrgId=@OrgId    
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
            
                ---------Add Notes-------------  
 set  @ApprovalBy =(select approval3name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
            END    
      
             
        --END    
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)    
     --   BEGIN    
           if(@Approval4IsActive=''1'')    
            BEGIN    
             if(@ApproverLevel=''L4'')    
              BEGIN    
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
                update SD_SRApprovalStatus set Approval4Status=''Rejected''     
                ,Approval4Remarks=@Remarks    
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
  
        ---------Add Notes-------------  
 set  @ApprovalBy =(select approval4name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
              END    
            END    
       -- END    
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)    
     -- BEGIN    
         if(@Approval5IsActive=''1'')    
          BEGIN    
                  
           if(@ApproverLevel=''L5'')    
            BEGIN    
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)    
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref    
               update SD_SRApprovalStatus set Approval5Status=''Rejected''     
               ,Approval5Remarks=@Remarks    
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref    
       
    ---------Add Notes-------------  
 set  @ApprovalBy =(select approval5name  from SD_SRApprovalStatus where TicketRef=@Ticketref    and orgid=@OrgId )  
    exec  SD_spAddTicketNotes  
   @Ticketref=@Ticketref,@sdStatusFK=@StatusFk,@NoteDesc=''Notes'',@EdityBy=@ApprovalBy,@Option=''AddNotes'',  
   @organizationFK=@OrgId  
  
             END    
          END    
      --END    
   END    
    
    
    
    
 END  ----main end closes    
     
     '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncidentFromMail]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncidentFromMail]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncidentFromMail', 'P') IS NULL
EXEC sp_executesql N'

CREATE OR ALTER Proc dbo.SD_spSDIncidentFromMail
(
	


      @submitterEmailAddr varchar(50)= null
	  ,	 @submitterName varchar(50)= null
	     ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@OrgId numeric(18,0)=null
	--  ,@creationDateTime datetime =null
	 
		,@Option varchar(50)
		 	,@Email_FromInboxID varchar(50)=null
	
	)
	AS
	BEGIN
	
 if(@Option=''AddTicket'')
 BEGIN
 ---Stage,DeskrefID,select from bydefaultvalue
		declare @id numeric(26,0)= null;
			 declare @DeskRef varchar(50) =NULL;
		 declare  @Ticketref varchar(20) =NULL  ;
	  declare    @partitionid numeric(26,0)= null;
    declare   @orgServDeskDefnFK numeric(26,0)= null;
     declare  @sdStageFK numeric(26,0)= null;
    declare   @sdStatusFK numeric(26,0)= null;
     declare  @sdPriorityFK numeric(26,0)= null;
    declare  @sdSeverityFK numeric(26,0)= null;
    declare  @sdSolutionTypeFK numeric(26,0)= null;
   declare  @sdCategoryFK numeric(26,0)= null;
   -- declare  @creationDateTime datetime= null;
   declare  @closedDateTime datetime= null;
   
	declare  @TickNotes nvarchar(max)=null
   declare   @submitterType varchar(50)= null;
     
   declare   @submitterPhone varchar(50)= null;
   declare   @assigneeType varchar(50)= null;
   declare   @assigneePoolFK numeric(26,0)= null;
    declare  @assigneeParticipantFK numeric(26,0)= null;
    declare  @actualCompletedDate datetime= null;
   declare   @expectedDueDate datetime= null;
 declare   @actualResolutionDate datetime= null;
   declare   @organizationFK numeric(26,0)= null;
   declare   @orgStaffFK numeric(26,0)= null;
   declare   @sdErrorMessage varchar(max)= null;
   declare   @solutionNote varchar(max)= null;
   declare   @sourceType varchar(50)= null;
   declare   @previousStageFK numeric(26,0)= null;
   declare   @categoryFullText varchar(max)= null;
	declare  @sdCategoryRef  varchar(200)=null;
	declare  @UserName nvarchar(100)=null;
	declare  @SubmitterID varchar(50)=null;
	declare  	  @AssigneName varchar(100)=null;
declare	  @TechID numeric(18,0)=null;
	declare  @UserID numeric(18,0)=null;
		declare @createdof datetime=null;
	declare	@Status nvarchar(10) = NULL;
	declare	@TicketAttachMent nvarchar(max)=null;
	declare	@Filename nvarchar(100)=null;


   Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=''Incident'' and OrgRef=@OrgId)
   set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=''Incident'' and OrgRef=@OrgId)
   set @sdCategoryFK=(select sdCategoryFK from SD_ServDeskDefn where  Deskref=''Incident'' and OrgFk=@OrgId);
   set @categoryFullText=(select Replace(Categoryref,''||'','' - '') from SD_Category where id=@sdCategoryFK)
  set @createdof=getdate();
   set @sdSeverityFK=(select sdSeverityFK from vSDOrgDeskDef where Deskref=''Incident'' and OrgFk=@OrgId);
   set @sdStageFK=(select sdStageFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId);
   set @sdStatusFK=(select sdStatusFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId );
  -- set @expectedDueDate= ( select dbo.GetDueDate( GETDATE(), ''Incident'',@sdSeverityFK,@OrgId))
   set @sdPriorityFK=(select sdPriorityFK from SD_ServDeskDefn where Deskref=''Incident'' and OrgFk=@OrgId);

		set @expectedDueDate= ( select dbo.GetDueDate_kl(@createdof, @DeskRef,@sdSeverityFK,@organizationFK))
				set @actualResolutionDate= ( select dbo.GetDueDate_klres(@createdof, @DeskRef,@sdSeverityFK,@organizationFK))
		if(@TicketSummary like ''%RE:%'' or
	@TicketSummary like ''%FWD:%'' or
	@TicketSummary like ''%Microsoft 365 security: You have messages in quarantine%'' 
	or @TicketSummary like ''%Approaching SharePoint Site Storage Limit%'' 
	or @TicketSummary like ''%Tailored Tech at Your Fingertips: Customize Your Lenovo Laptop Now !%''
	or @submitterEmailAddr like ''%lenovo@ecomm.lenovo.com%'' or @TicketSummary like ''%Undeliverable:%'')
	BEGIN
	if exists(select top 1 * from vSDTicket  where (Status !=''Resolved'')  and ( (RTrim(LTRIM(@TicketSummary))) like ''%''+REPLACE(RTRIM(LTRIM(TicketNumber)), CHAR(160),'''')+''%'') )
		BEGIN
		declare @TicketIDforNotes numeric(26,0)=null;
		declare @NoteDesc nvarchar(max)=null;
		set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
		 select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber,@organizationFK=OrgId from vSDTicket where ( Status !=''Resolved'' or Status!=''Closed'')  and (@TicketSummary like ''%''+TicketNumber+''%'' ) order by CreationDate desc
		 
		
		 INSERT INTO	SD_TicketNotes(TicketID
      ,Ticketref
      ,EdityBy
      ,EditedDt
      ,NoteDesc,organizationFK)
	values(@TicketIDforNotes
      ,@Ticketref
      ,''System''
      ,getdate()
      ,@NoteDesc,@organizationFK)	
		END
		else 	if exists(select top 1 * from vSDTicket  where (Status !=''Resolved'')  and SubmitterEmail=@submitterEmailAddr and  ( (RTrim(LTRIM(@TicketSummary))) like ''%''+REPLACE(RTRIM(LTRIM(Summary)), CHAR(160),'''')+''%'') )
		BEGIN
	
		set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
		 select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber,@organizationFK=OrgId from vSDTicket where ( Status !=''Resolved'' or Status!=''Closed'') and SubmitterEmail=@submitterEmailAddr and (@TicketSummary like ''%''+Summary+''%'' ) order by CreationDate desc
		 
		
		 INSERT INTO	SD_TicketNotes(TicketID
      ,Ticketref
      ,EdityBy
      ,EditedDt
      ,NoteDesc,organizationFK)
	values(@TicketIDforNotes
      ,@Ticketref
      ,''System''
      ,getdate()
      ,@NoteDesc,@organizationFK)	
		END
	END

	
		
	else 
	BEGIN
 insert into SDIncident(
		id
      ,Ticketref
      ,partitionid
      ,orgServDeskDefnFK
      ,sdStageFK
      ,sdStatusFK
      ,sdPriorityFK
      ,sdSeverityFK     
      ,sdCategoryFK
      ,creationDateTime     
      ,TicketSummary
      ,TicketDesc
      ,submitterType
      ,submitterName
      ,submitterEmailAddr
      ,submitterPhone
      ,assigneeType
	  ,organizationFK
      ,sourceType
      ,expectedDueDate
      ,categoryFullText
	  
	  ,actualResolutionDate,Email_FromInboxID
 ) Values(ROUND(RAND() * (100000000000000), 0)
      ,@Ticketref
      ,''1''
      ,@orgServDeskDefnFK
	  ,@sdStageFK
	  ,@sdStatusFK
      ,@sdPriorityFK
      ,ISNULL(@sdSeverityFK ,0)
      ,isnull(@sdCategoryFK,0)
      ,GETDATE()
      ,Replace(@TicketSummary,''(Trial Version)'','''')
      ,@TicketDesc
      ,''''
      ,@submitterName
      ,@submitterEmailAddr
      ,''''
      ,''''
	  ,@OrgId
      ,''Email''
	  ,@expectedDueDate
      ,@categoryFullText
	  
	 , @actualResolutionDate,@Email_FromInboxID)
	 	  	SET @Ticketref=(select top 1 Ticketref from SDIncident where SID=SCOPE_IDENTITY())
				  update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7) where ReqRef=''Incident'' and OrgRef=@OrgId
	
				exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=''Incident'',@Option=''AddCustomField'',@OrgId=@OrgId

				exec SD_Sendmail @ticketnumber=@Ticketref ,@Option=''ReminderonTicketCreaton'',@OrgId=@OrgId
	 END
	    

		--	declare @category nvarchar(500);
		--	set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref);
		--	 Set  @TechID =(Select top 1 TechID  from SD_Technician a where 
		--	  @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')
	 --update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref
		if(@TicketAttachMent is not null)
		BEGIN
		exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@OrgId
		END
 END


	
	END

'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident1]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident1]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident1', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident1  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   ,@UserIDForAppro numeric(18,0)=null  
   ,@ticketout varchar(50)=Null  
   ,@Ticketref varchar(20)= null output  
   ,@partitionid numeric(26,0)= null  
   ,@orgServDeskDefnFK numeric(26,0)= null  
   ,@sdStageFK numeric(26,0)= null  
   ,@sdStatusFK numeric(26,0)= null  
   ,@sdPriorityFK numeric(26,0)= null  
   ,@sdSeverityFK numeric(26,0)= null  
   ,@sdSolutionTypeFK numeric(26,0)= null  
   ,@sdCategoryFK numeric(26,0)= null  
   ,@creationDateTime datetime= null  
   ,@closedDateTime datetime= null  
   ,@TicketSummary varchar(max)= null  
   ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
   ,@submitterType varchar(50)= null  
   ,@submitterName varchar(50)= null  
   ,@submitterEmailAddr varchar(50)= null  
   ,@submitterPhone varchar(50)= null  
   ,@assigneeType varchar(50)= null  
   ,@assigneePoolFK numeric(26,0)= null  
   ,@assigneeParticipantFK numeric(26,0)= null  
   ,@actualCompletedDate datetime= null  
   ,@expectedDueDate datetime= null  
   ,@actualResolutionDate datetime= null  
   ,@organizationFK numeric(26,0)= null  
   ,@orgStaffFK numeric(26,0)= null  
   ,@sdErrorMessage varchar(max)= null  
   ,@solutionNote varchar(max)= null  
   ,@sourceType varchar(50)= null  
   ,@previousStageFK numeric(26,0)= null  
   ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
   ,@UpdateBy int =NULL  
   ,@UpdateDt datetime =NULl  
   ,@Status nvarchar(10) = NULL  
   ,@TicketAttachMent nvarchar(max)=null  
   ,@Filename nvarchar(100)=null  
   ,@location nvarchar(100)=null  
   ,@Department nvarchar(100)=null  
   , @Note nvarchar(1000)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
 declare @ParentCategoryRef nvarchar(500);  
 declare @SLA nvarchar(300);  
   declare @OrgName nvarchar(100);  
   declare @sdSeverityFK1 numeric(18,0);  
   
     set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)  
     ---Stage,DeskrefID,select from bydefaultvalue  
     Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)  
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
    -- set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
    -- set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
    
	
	
	if(@OrgName=''Hitachi'')  
      BEGIN  
       set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK )  
      END  
      else   
       BEGIN  
        set @sdSeverityFK1=@sdSeverityFK  
       end   
       
     set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*   
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  
                   Row_Num=''1'')  
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID   
          where Deskref=@DeskRef and OrgFk=@organizationFK );  
  
       if(@SLA=''Severity'')  
        BEGIN   
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
       else if(@SLA=''Category'')  
        BEGIN  
         set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
        END  
       else   
        BEGIN  
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
     
     if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK   
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType  
        --,assigneePoolFK  
       --,assigneeParticipantFK   
       ,organizationFK  
       -- ,orgStaffFK  
       ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()  
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone  
       ,ISNULL(@assigneeType,0)  
     --  ,@assigneePoolFK  
     --  ,@assigneeParticipantFK     
     ,@organizationFK  
     -- ,@orgStaffFK  
       ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))  
  
     ------------------------to get ticket ID after successfull generation -----------------------  
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())  
          ---------------------------this will auto increment ticket ID, after ticket inseretion  
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END  
       --------------------------  this will create custom filed against ticket ID  
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK  
  
       if(@TicketAttachMent is not null)  
        BEGIN  
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
   
        END  
  
      END  
      
  --- this will assign ticket category according to category of enginner  
  if(@OrgName=''Hitachi'')  
  BEGIN  
  declare @category nvarchar(500);  
  
  declare @location1 nvarchar(500);  
  declare @department1 nvarchar(500);  
   set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
   set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
   set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);  
    --Set  @TechID =(Select top 1 TechID  from SD_Technician a where   
    -- @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')  
   
  
  
  ----------------------------Auto Assignment of ticket  --------------------------------------  
  
  
  
   if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')  
   BEGIN  
  
     ------------------ assign hardware tickets only----------  
    if(@category like ''%Incident - Hardware%'')  
      BEGIN  
         if(@location1=''Sanand'')  
        BEGIN  
   --------------- Ticket will assign  to  Itamc.hhpe  
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to chintan  
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to itamc.gnr  
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
    ---------------- ticket assign to krunal  
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
     END  
  
     --------------------- asssign Software tickets only   --------------  
   if(@category like ''%Incident - Software%'')  
      BEGIN  
       if(@location1=''Sanand'')  
        BEGIN  
        --------------- Ticket will assign  to  Unati  
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
       END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
        BEGIN  
  
        --------ticket assign to chintan  
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
  
   
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
          ---------------- ticket assign to krunal  
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
    END  
    
  END  
   else if(@category like ''%Incident - Business Application%'')  
    BEGIN  
      -----------  ticket assign to nalin  
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  
  
  else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')  
    BEGIN  
   -------------- ticket assign to anand  
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  END  
    
  
    -------------end of auto assignment for hirel  
 END  
  
 if(@Option=''DeleteTicket'')  
 BEGIN  
 Delete from SDIncident where Ticketref=@Ticketref  
 END  
 if(@Option=''AssignTechnician'')  
 BEGIN  
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
  END  
 END  
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------  
  if(@Option=''ChangeTechnician'')  
  BEGIN  
  declare @Reason nvarchar(1000);  
    
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);  
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
    BEGIN   
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
    END  
  END  
-----------------------------Update Ticket  ---------------------------------------------------  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
   
 if(@sdStatusFK!=@PrevStageFK)  
 BEGIN  
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  
   
 END  
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)  
 if(@sdStatusFK is null)  
 BEGIN  
  set @sdStatusFK=@StatusFKAsPerStage  
      
 END  
 else   
 BEGIN  
  set @sdStatusFK= @sdStatusFK  
 END  
  
   
 update  SDIncident  
  
  set    sdStageFK=@sdStageFK  
    ,sdStatusFK=@StatusFKAsPerStage  
      ,sdPriorityFK=@sdPriorityFK  
      ,sdSeverityFK=@sdSeverityFK  
       
      ,sdCategoryFK=@sdCategoryFK  
   ,SubmitterID=@SubmitterID  
   ,submitterPhone=@submitterPhone  
       
        
       
     -- ,TicketDesc=@TicketDesc  
    ,closedDateTime=@closedDateTime  
      ,assigneeType =@assigneeType  
  --    ,assigneePoolFK  
     ,assigneeParticipantFK=@assigneeParticipantFK  
   ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote  
   --   ,organizationFK  
  --    orgStaffFK  
     
     
      
      ,categoryFullText=@categoryFullText  
   ,location=@location  
   ,Department=@Department  
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
    if(@TicketAttachMent is not null)  
  BEGIN  
  exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
  END  
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
 declare @NewStatus nvarchar(100);  
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
 if(@NewStatus=''resolved'')  
 BEGIN  
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
 END  
 declare  @PrevStageForMail numeric(18,0);  
  declare  @SDStageForMail numeric(18,0);  
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')  
 BEGIN  
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK   
   
   
 END  
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
 BEGIN  
 declare @desk nvarchar(100);  
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
 if(@desk=''CloudProcess'')  
 BEGIN  
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
 END  
 else  
 BEGIN  
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK  
  
 END  
  
 END  
 END  
  


  
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_old]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_old', 'P') IS NULL
EXEC sp_executesql N'




CREATE OR ALTER Proc dbo.SD_spSDIncident_old
(
	  @id numeric(26,0)= null
	  ,@DeskRef varchar(50) =NULL
	  ,@UserIDForAppro numeric(18,0)=null
	  ,@ticketout varchar(50)=Null
      ,@Ticketref varchar(20)= null output
      ,@partitionid numeric(26,0)= null
      ,@orgServDeskDefnFK numeric(26,0)= null
      ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
      ,@sdPriorityFK numeric(26,0)= null
      ,@sdSeverityFK numeric(26,0)= null
      ,@sdSolutionTypeFK numeric(26,0)= null
      ,@sdCategoryFK numeric(26,0)= null
      ,@creationDateTime datetime= null
      ,@closedDateTime datetime= null
      ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@TickNotes nvarchar(max)=null
      ,@submitterType varchar(50)= null
      ,@submitterName varchar(50)= null
      ,@submitterEmailAddr varchar(50)= null
      ,@submitterPhone varchar(50)= null
      ,@assigneeType varchar(50)= null
      ,@assigneePoolFK numeric(26,0)= null
      ,@assigneeParticipantFK numeric(26,0)= null
      ,@actualCompletedDate datetime= null
      ,@expectedDueDate datetime= null
      ,@actualResolutionDate datetime= null
      ,@organizationFK numeric(26,0)= null
      ,@orgStaffFK numeric(26,0)= null
      ,@sdErrorMessage varchar(max)= null
      ,@solutionNote varchar(max)= null
      ,@sourceType varchar(50)= null
      ,@previousStageFK numeric(26,0)= null
      ,@categoryFullText varchar(max)= null
	  ,@sdCategoryRef  varchar(200)=null
	  ,@UserName nvarchar(100)=null
	  ,@SubmitterID varchar(50)=null
	  	  ,@AssigneName varchar(100)=null
	  ,@TechID numeric(18,0)=null
	  ,@UserID numeric(18,0)=null
		,@InsertBy int =NULL
		,@InsertDt datetime =NULL
		,@UpdateBy int =NULL
		,@UpdateDt datetime =NULl
		,@Status nvarchar(10) = NULL
		,@TicketAttachMent nvarchar(max)=null
		,@Filename nvarchar(100)=null
		,@location nvarchar(100)=null
		,@Department nvarchar(100)=null
		,@SDRole nvarchar(100)=null
		,@Option varchar(50)
	
	)
	AS
	BEGIN
	
 if(@Option=''AddTicket'')
 BEGIN
 declare @ParentCategoryRef nvarchar(500);
	declare @SLA nvarchar(300);
					---Stage,DeskrefID,select from bydefaultvalue
					Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)
					set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)
					set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)
					set @sdStageFK=(select top 1	 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);
					set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);
				--	set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
				--	set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))

					
				set	@ParentCategoryRef =(select top 1 ref from (	SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,* 
											FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where
																			Row_Num=''1'')
 set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID 
										where Deskref=@DeskRef and OrgFk=@organizationFK );

											if(@SLA=''Severity'')
				BEGIN 
						set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
							set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
				END
				else if(@SLA=''Category'')
				BEGIN
					set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))
					set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))
				END
					else 
					BEGIN
						set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
						set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))
					END
			
					if exists(select * from vSDTicket  where Status like ''%Open%'' and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)
							BEGIN
							-------------------------------- this will add notes , as ticket already exists -------------------------------
								declare @TicketIDforNotes numeric(26,0)=null;
								declare @NoteDesc nvarchar(max)=null;
								set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))
								 select top 1  @TicketIDforNotes=id,@Ticketref=Ticketref from SDIncident order by creationDateTime desc
		 						INSERT INTO	SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)
										values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)	
							END
							else 
									BEGIN
									---------------- new ticket ID will create --------------------------------
								insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK
								,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone
							  ,assigneeType
							 --,assigneePoolFK
							--,assigneeParticipantFK 
							,organizationFK
						 -- ,orgStaffFK
					  ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department) 
					  Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,GETDATE()
					  ,@TicketSummary,@TicketDesc,@submitterType,@submitterName,@submitterEmailAddr,@submitterPhone
					  ,@assigneeType
					--  ,@assigneePoolFK
					--  ,@assigneeParticipantFK   
					,@organizationFK
					-- ,@orgStaffFK
					  ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,@location,@Department)

					------------------------to get ticket ID after successfull generation -----------------------
							 SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())
							   ---------------------------this will auto increment ticket ID, after ticket inseretion
								 if(@Ticketref is not null)
										 BEGIN
												  update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7) 
												  where ReqRef=@DeskRef and OrgRef=@organizationFK
										END
						 --------------------------  this will create custom filed against ticket ID
							exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK

							if(@TicketAttachMent is not null)
								BEGIN
										exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK
	
								END

						END
						declare @OrgName nvarchar(100);
						set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK)
		--- this will assign ticket category according to category of enginner
		if(@OrgName=''Hitachi'')
		BEGIN
		declare @category nvarchar(500);

		declare @location1 nvarchar(500);
		declare @department1 nvarchar(500);
			set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);
			set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);
			set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);
			 --Set  @TechID =(Select top 1 TechID  from SD_Technician a where 
			 -- @category like ''%''+Replace(a.CategoryFK,''||'','' - '')+''%'')
	


	 ----------------------------Auto Assignment of ticket  --------------------------------------



	 if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')
	BEGIN
		if(@location1=''Gandhinagar'' or @department1=''Customer Support'')
			BEGIN

					--------ticket assign to chintan
				 update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref
			END

 
		if(@location1!=''gandhinagar'' and @department1!=''Customer Support'')
			BEGIN 
				---------------- ticket assign to krunal
				update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref
			END
 
 
		END
			else if(@category like ''%Incident - Business Application%'')
				BEGIN
						-----------  ticket assign to nalin
				update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref
				END
		else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')
				BEGIN
			-------------- ticket assign to anand
				update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref
				END
		END
		

		  -------------end of auto assignment for hirel
 END

 if(@Option=''DeleteTicket'')
 BEGIN
 Delete from SDIncident where Ticketref=@Ticketref
 END
 if(@Option=''AssignTechnician'')
	BEGIN
	 if Exists (select *from SD_Technician where TechLoginName=@AssigneName)
	 BEGIN 
	 Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)
	 update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK
	 END
	END
 if(@Option=''UpdateTicket'')
 BEGIN
 ---Stage,DeskrefID,select from bydefaultvalue
 Declare @PrevStageFK numeric(18,0)=null;
  Declare @PrevStatusFK numeric(18,0)=null;
  Declare @StatusFKAsPerStage numeric(18,0)=null;
  Declare @TicketID numeric(18,0)=null;
  Declare @EditedBy nvarchar(max)=null;
  set @EditedBy=@UserName;
  ------------this is prevstatus status
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)

 
 if(@sdStatusFK!=@PrevStageFK)
 BEGIN
	  update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK
--	  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''
 
	--  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''
 
 END
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)
 	set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)
	if(@sdStatusFK is null)
	BEGIN
	 set @sdStatusFK=@StatusFKAsPerStage
    
	END
	else 
	BEGIN
	 set @sdStatusFK= @sdStatusFK
	END

 
 update  SDIncident

  set    sdStageFK=@sdStageFK
    ,sdStatusFK=@StatusFKAsPerStage
      ,sdPriorityFK=@sdPriorityFK
      ,sdSeverityFK=@sdSeverityFK
     
      ,sdCategoryFK=@sdCategoryFK
	  ,SubmitterID=@SubmitterID
	  ,submitterPhone=@submitterPhone
     
      
     
     -- ,TicketDesc=@TicketDesc
    ,closedDateTime=@closedDateTime
      ,assigneeType =@assigneeType
  --    ,assigneePoolFK
     ,assigneeParticipantFK=@assigneeParticipantFK
   ,sdSolutionTypeFK=@sdSolutionTypeFK
   ,solutionNote=@solutionNote
   --   ,organizationFK
  --    orgStaffFK
   
   
    
      ,categoryFullText=@categoryFullText
	  ,location=@location
	  ,Department=@Department
	  ,EditedBy=@UserName

      where ticketref=@Ticketref and organizationFK =@organizationFK
    if(@TicketAttachMent is not null)
		BEGIN
		exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK
		END
	exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK
 
 declare @NewStatus nvarchar(100);
 set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)
 if(@NewStatus=''resolved'')
 BEGIN
 update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK

 	exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK	
 END
 declare  @PrevStageForMail numeric(18,0);
  declare  @SDStageForMail numeric(18,0);
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)

  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')
 BEGIN
	  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK	
 
 
 END
 
 END

	if(@Option=''AddSR_ApproverStatus'')
	BEGIN
	declare @desk nvarchar(100);
	set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)
	if(@desk=''CloudProcess'')
	BEGIN
	exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''
	END
	else
	BEGIN
			exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''

	END

	END
	END

'
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Hitachi]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Hitachi]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Hitachi', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDIncident_Hitachi  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   ,@UserIDForAppro numeric(18,0)=null  
   ,@ticketout varchar(50)=Null  
   ,@Ticketref varchar(20)= null output  
   ,@partitionid numeric(26,0)= null  
   ,@orgServDeskDefnFK numeric(26,0)= null  
   ,@sdStageFK numeric(26,0)= null  
   ,@sdStatusFK numeric(26,0)= null  
   ,@sdPriorityFK numeric(26,0)= null  
   ,@sdSeverityFK numeric(26,0)= null  
   ,@sdSolutionTypeFK numeric(26,0)= null  
   ,@sdCategoryFK numeric(26,0)= null  
   ,@creationDateTime datetime= null  
   ,@closedDateTime datetime= null  
   ,@TicketSummary varchar(max)= null  
   ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
   ,@submitterType varchar(50)= null  
   ,@submitterName varchar(50)= null  
   ,@submitterEmailAddr varchar(50)= null  
   ,@submitterPhone varchar(50)= null  
   ,@assigneeType varchar(50)= null  
   ,@assigneePoolFK numeric(26,0)= null  
   ,@assigneeParticipantFK numeric(26,0)= null  
   ,@actualCompletedDate datetime= null  
   ,@expectedDueDate datetime= null  
   ,@actualResolutionDate datetime= null  
   ,@organizationFK numeric(26,0)= null  
   ,@orgStaffFK numeric(26,0)= null  
   ,@sdErrorMessage varchar(max)= null  
   ,@solutionNote varchar(max)= null  
   ,@sourceType varchar(50)= null  
   ,@previousStageFK numeric(26,0)= null  
   ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
   ,@UpdateBy int =NULL  
   ,@UpdateDt datetime =NULl  
   ,@Status nvarchar(10) = NULL  
   ,@TicketAttachMent nvarchar(max)=null  
   ,@Filename nvarchar(100)=null  
   ,@location nvarchar(100)=null  
   ,@Department nvarchar(100)=null  
   , @Note nvarchar(1000)=null  
   ,@SDRole nvarchar(100)=null  
   ,@Option varchar(50)  
   )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
   declare @ParentCategoryRef nvarchar(500);  
   declare @SLA nvarchar(300);  
   declare @OrgName nvarchar(100);  
   declare @sdSeverityFK1 numeric(18,0);  
   
     set @OrgName=(select top 1 OrgName from SD_OrgMaster where Org_ID=@organizationFK) 
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select top 1  id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
	set @sdSeverityFK1=(select sdSeverityFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK ) 

	 set @ParentCategoryRef =(select top 1 ref from ( SELECT ROW_NUMBER() OVer(order by ref) as Row_Num,*   
           FROM [dbo].[fn_GetCategoryParents](@sdCategoryFK, 1)) tab where  Row_Num=''1'')  
      set @SLA =(select top 1 SlaName from SD_ServDeskDefn a  inner join  SD_SLAConfig b on a.SLA=b.ID   
          where Deskref=@DeskRef and OrgFk=@organizationFK );  
  
       if(@SLA=''Severity'')  
        BEGIN   
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
       else if(@SLA=''Category'')  
        BEGIN  
         set @expectedDueDate= ( select dbo.GetResponseDueDtForCategory(@creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolutionCategory( @creationDateTime, @DeskRef,@ParentCategoryRef,@organizationFK))  
        END  
       else   
        BEGIN  
         set @expectedDueDate= ( select dbo.GetDueDate(@creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
         set @actualResolutionDate= ( select dbo.GetDueDateForResolution( @creationDateTime, @DeskRef,@sdSeverityFK1,@organizationFK))  
        END  
		if exists(select * from vSDTicket  where (Status != ''Resolved'' and status !=''Closed'') and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per New TicketID :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=TicketNumber from vSDTicket where  SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef and OrgId=@organizationFK   
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType ,organizationFK ,sourceType,expectedDueDate,categoryFullText,SubmitterID,
		 actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,ISNULL(@sdStageFK,0),ISNULL(@sdStatusFK,0),ISNULL(@sdPriorityFK,0),ISNULL(@sdSeverityFK1 ,0) ,ISNULL(@sdCategoryFK,0),GETDATE()  
       ,@TicketSummary,@TicketDesc,ISNULL(@submitterType,0),@submitterName,@submitterEmailAddr,@submitterPhone  
       ,ISNULL(@assigneeType,0) ,@organizationFK ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,
	   @actualResolutionDate,ISNULL(@location,0),ISNULL(@Department,0))  
   
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())   
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END   
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField'',@OrgId=@organizationFK  
  
       if(@TicketAttachMent is not null)  
        BEGIN  
          exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
		END  
  
      END  
		if(@OrgName=''Hitachi'')  
		BEGIN  
		declare @category nvarchar(500);  
		declare @location1 nvarchar(500);  
		declare @department1 nvarchar(500);  
		 set @category =(select top 1 Category from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
		 set @location1 =(select top 1 location from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK);  
		 set @department1 =(select top 1 department from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK);  
		 if(@category like ''%Incident - Software%'' or @category like ''%Incident - Hardware%'')  
   BEGIN  
  
     ------------------ assign hardware tickets only----------  
    if(@category like ''%Incident - Hardware%'')  
      BEGIN  
         if(@location1=''Sanand'')  
        BEGIN  
   --------------- Ticket will assign  to  Itamc.hhpe  
    update SDIncident set assigneeParticipantFK=''529382'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to chintan  
       update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
         if(@location1=''Gandhinagar'' and  @department1!=''Customer Support'')  
       BEGIN  
  
        --------ticket assign to itamc.gnr  
       update SDIncident set assigneeParticipantFK=''530392'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
       END  
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
    ---------------- ticket assign to krunal  
    update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
   END  
     END  
  
     --------------------- asssign Software tickets only   --------------  
   if(@category like ''%Incident - Software%'')  
      BEGIN  
       if(@location1=''Sanand'')  
        BEGIN  
        --------------- Ticket will assign  to  Unati  
       update SDIncident set assigneeParticipantFK=''530391'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
  
       END  
       if(@location1=''Gandhinagar'' or @department1=''Customer Support'')  
        BEGIN  
  
        --------ticket assign to chintan  
        update SDIncident set assigneeParticipantFK=''529380'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
  
   
      if((@location1!=''gandhinagar'' and @location1!=''Sanand'') and @department1!=''Customer Support'')  
        BEGIN   
          ---------------- ticket assign to krunal  
         update SDIncident set assigneeParticipantFK=''529381'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
        END  
    END  
    
  END  
   else if(@category like ''%Incident - Business Application%'')  
    BEGIN  
      -----------  ticket assign to nalin  
    update SDIncident set assigneeParticipantFK=''529379'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  
  
  else if(@category like ''%Incident - Security%'' or @category like ''%Incident - infra%'')  
    BEGIN  
   -------------- ticket assign to anand  
    update SDIncident set assigneeParticipantFK=''529378'' where Ticketref=@Ticketref and organizationFK=@organizationFK  
    END  
  END  
    
  
    -------------end of auto assignment for hirel  
 END  
  
 if(@Option=''DeleteTicket'')  
 BEGIN  
 Delete from SDIncident where Ticketref=@Ticketref  
 END  
 if(@Option=''AssignTechnician'')  
 BEGIN  
  if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
  update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
  END  
 END  
 -------------------- Already Assigned Ticket (Engineer Update) By Own ---------------------------  
  if(@Option=''ChangeTechnician'')  
  BEGIN  
  declare @Reason nvarchar(1000);  
    
  set @Reason =Concat(''Assigne Change Manually : Reason For Change '',@Note);  
   if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
    BEGIN   
       Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@AssigneName)  
       update SDIncident set assigneeParticipantFK=@TechID where Ticketref=@Ticketref and organizationFK=@organizationFK  
       exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''AssigneUpdate'',@OrgId=@organizationFK   
       exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@Reason,@EdityBy=@AssigneName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
    END  
  END  
-----------------------------Update Ticket  ---------------------------------------------------  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
   
 if(@sdStatusFK!=@PrevStageFK)  
 BEGIN  
   update SDIncident set previousStageFK=@PrevStageFK,previousStatusFK=@PrevStatusFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
--   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
 --  exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  
   
 END  
 set @sdCategoryFK=(select id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
  set @StatusFKAsPerStage=(select id from SD_Status where sd_stageFK =@sdStageFK and OrgDeskRef=@organizationFK)  
 if(@sdStatusFK is null)  
 BEGIN  
  set @sdStatusFK=@StatusFKAsPerStage  
      
 END  
 else   
 BEGIN  
  set @sdStatusFK= @sdStatusFK  
 END  
  
   
 update  SDIncident  
  
  set    sdStageFK=@sdStageFK ,sdStatusFK=@StatusFKAsPerStage  ,sdPriorityFK=@sdPriorityFK  ,sdSeverityFK=@sdSeverityFK  
      ,sdCategoryFK=@sdCategoryFK  ,SubmitterID=@SubmitterID  ,submitterPhone=@submitterPhone  ,closedDateTime=@closedDateTime  
      ,assigneeType =@assigneeType,assigneeParticipantFK=@assigneeParticipantFK ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote ,categoryFullText=@categoryFullText  
   ,location=@location  ,Department=@Department  ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
		if(@TicketAttachMent is not null)  
		 BEGIN  
		 exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
		 END  
		exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
	declare @NewStatus nvarchar(100);  
	set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
	if(@NewStatus=''resolved'')  
	BEGIN  
	update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref and organizationFK=@organizationFK  
	 
	 exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
 END  
 declare  @PrevStageForMail numeric(18,0);  
  declare  @SDStageForMail numeric(18,0);  
    set @PrevStageForMail=(select previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    set @SDStageForMail=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  if(@SDStageForMail!=@PrevStageForMail and @NewStatus!=''resolved'')  
 BEGIN  
   exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange'',@OrgId=@organizationFK 
   
 END  
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
 BEGIN  
 declare @desk nvarchar(100);  
 set @desk=(select ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
 if(@desk=''CloudProcess'')  
 BEGIN  
 exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
 END  
 else  
 BEGIN  
   exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus'',@OrgID=@organizationFK  
  
 END  
  
 END  
 END  
	
'
GO

--
-- Create or alter procedure [dbo].[SD_ChangeCABApproval]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_ChangeCABApproval]')
GO
IF OBJECT_ID(N'dbo.SD_ChangeCABApproval', 'P') IS NULL
EXEC sp_executesql N'  
  
  
  
CREATE OR ALTER Proc dbo.SD_ChangeCABApproval  
(  
@userName varchar(100)=null,  
@Subject nvarchar(1000)=NULL,  
@EmailBody nvarchar(max)=NULL,  
@To varchar(500)=null,  
@MailBody  varchar (max) =NULL,  
@UserEmail nvarchar(200)=NULL,  
@User nvarchar(200)=NULL,  
@cc nvarchar(200)=NULL,  
@AssigneeEmail nvarchar(200)=NULL,  
@UserID numeric(18,0) = NULL,  
@Ticketref  varchar(100) = NULL,  
@Approval1Name varchar(100)= NULL,  
@Approval1Email varchar(100)= NULL,  
@Approval1Status varchar(50)=NULL,  
@Approval1Remarks varchar(max)=NULL,  
@Approval1Grade varchar(20)=NULL,  
@Approval2Name varchar(100)= NULL,  
@Approval2Email varchar(100)= NULL,  
@Approval2Status varchar(50)=NULL,  
@Approval2Remarks varchar(max)=NULL,  
@Approval2Grade varchar(20)=NULL,  
@Approval3Name varchar (100) =NULL,  
@Approval3Email  varchar (100) =NULL,  
@Approval3Status varchar(50)=NULL,  
@Approval3Remarks varchar(max)=NULL,  
@Approval3Grade varchar(20)=NULL,  
@Approval4Name varchar (100) =NULL,  
@Approval4Email varchar(100)= NULL,  
@Approval4Status varchar(50)=NULL,  
@Approval4Remarks varchar(max)=NULL,  
@Approval4Grade varchar(20)=NULL,  
@Approval5Name varchar (100)= NULL,  
@Approval5Email varchar (100) =NULL,  
@Approval5Status varchar(50) =NULL,  
@Approval5Grade varchar(20)=NULL,  
@Remarks varchar(max)=NULL,  
@ApproverLevel varchar(10)=NULL,  
@StatusFk numeric(18,0)=NULL,  
@Approval1IsActive bit=NULL,  
@Approval2IsActive bit=NULL,  
@Approval3IsActive bit=NULL,  
@Approval4IsActive bit=NULL,  
@Approval5IsActive bit=NULL,  
@PrevStage numeric(18,0)=null,  
@PrevStatus numeric(18,0)=null,  
@ToEmail nvarchar(100)=null,  
@assigneeParticipantFK numeric(18,0) =null,  
 @HODApproval nvarchar(10)=null,  
 @StageFK numeric(18,0)=null,  
 @Orgid numeric(18,0)=null,
@Option varchar(50)  
   
 )  
 AS  
 BEGIN  ----main begin start  
  
  
  
  if(@Option=''TicketAssigned'')  
  BEGIN  
   
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Assigned'','''',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Assigned'','''',@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
     
    select @assigneeParticipantFK=a.TechID,@ToEmail=b.EmailID from SD_Technician a   
inner join    
SD_User_Master b   
on a.RefUserID=b.UserID  
where   
REplace(CategoryFK,''||'','' - '') in  
(select Category from vSDTicket where TicketNumber=@Ticketref)  
          update SDIncident set assigneeParticipantFK=@assigneeParticipantFK where Ticketref=@Ticketref  
     if(@ToEmail is not null)  
      BEGIN  
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
  
         
       END    
  END  
  if(@Option=''AddCABApprovalStatus'')  
   
  BEGIN  
  select   
     @Approval1Name=Approval1Name,@Approval1Email=Approval1Email  
    ,@Approval2Name=Approval2Name,@Approval2Email=Approval2Email  
    ,@Approval3Name=Approval3Name,@Approval3Email=Approval3Email  
    ,@Approval4Name=Approval4Name,@Approval4Email=Approval4Email  
    ,@Approval5Name=Approval5Name,@Approval5Email=Approval5Email  
    from SD_User_SRApproval_SRDesk where UserID=@UserID  
    ------------------ enteries will insert so that to monitor  
    INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
      ,Approval1Name ,Approval1Email,Approval1Status,Approval2Name,Approval2Email,Approval2Status  
      ,Approval3Name,Approval3Email,Approval3Status,Approval4Name,Approval4Email,Approval4Status  
      ,Approval5Name,Approval5Email,Approval5Status,UATAccept )  
   values(@TicketRef,@UserID   
        ,@Approval1Name,@Approval1Email,''Pending'',@Approval2Name,@Approval2Email,''Pending''  
      ,@Approval3Name,@Approval3Email,''Pending'',@Approval4Name,@Approval4Email,''Pending''  
      ,@Approval5Name,@Approval5Email ,''Pending'',''Pending'')   
  
 -- -----------get approval name from master table  
 --   select @Approval1Name=username,@Approval1Email=userEmail from SD_CABApproval where CABLevel=''L1''  
 --   select @Approval2Name=username,@Approval2Email=userEmail from SD_CABApproval where CABLevel=''L2''  
 --  select @Approval3Name=username,@Approval3Email=userEmail from SD_CABApproval where CABLevel=''L3''  
 -- select @Approval4Name=username,@Approval4Email=userEmail from SD_CABApproval where CABLevel=''L4''  
 -- select @Approval5Name=username,@Approval5Email=userEmail from SD_CABApproval where CABLevel=''L5''  
    
 -- -----------------table common for sr and change to check approval status  
 --   INSERT INTO SD_SRApprovalStatus(TicketRef,UserID  
       
 --     ,Approval1Name  
 --     ,Approval1Email  
 --     ,Approval1Status  
 --     ,Approval2Name  
 --     ,Approval2Email  
 --     ,Approval2Status  
 --     ,Approval3Name  
 --     ,Approval3Email  
 --     ,Approval3Status  
 --     ,Approval4Name  
 --     ,Approval4Email  
 --     ,Approval4Status  
 --     ,Approval5Name  
 --     ,Approval5Email  
 --     ,Approval5Status  
 --     )  
 --values(@TicketRef  
 --     ,@UserID  
     
 --     ,@Approval1Name  
 --     ,@Approval1Email  
 --     ,''Pending''  
 --     ,@Approval2Name  
 --     ,@Approval2Email  
 --     ,''Pending''  
 --     ,@Approval3Name  
 --     ,@Approval3Email  
 --     ,''Pending''  
 --     ,@Approval4Name  
 --     ,@Approval4Email  
 --     ,''Pending''  
 --     ,@Approval5Name  
 --     ,@Approval5Email  
 --     ,''Pending''  
 --    )   
  END  
    
   if(@Option=''UpdateRequest'')  
 BEGIN  
  declare @location nvarchar(100);  
  declare @M2Status nvarchar(100);  
  declare @EmpCode nvarchar(40);  
  declare @StatusFk1 numeric(18,0);  
  declare @sdStageFk numeric(18,0);  
  declare @FromEmail nvarchar(100);  
  set @FromEmail=''itsupport@hisysmc.com''  
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref);  
    
     select top 1  @Approval1Name=Approval1Name, @Approval1IsActive=Approval1Active,  
            @Approval1Grade=Approval1Level,@Approval2IsActive=Approval2Active,@Approval2Name=Approval2Name,  
            @Approval3Name=Approval3Name,@Approval4Name=Approval4Name,@Approval5Name=Approval5Name  
           ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
          from SD_User_SRApproval_SRDesk where EmpID=@EmpCode  
       set @PrevStage=(select sdStageFK from SDIncident where Ticketref=@Ticketref)  
    --      set @M2Status =(select top 1 M2Approval from SR_Cloud where Grade=@Approval1Grade)  
     if(@Approval1IsActive=''1'')  
       BEGIN  
         if(@ApproverLevel=''L1'')  
          BEGIN  
     --set status to Awaiting IT Manager Approval  
            set @StatusFk1=(select  ID from SD_Status where DeskRef=''Change Request'' and id=''1392406111'' )  
            set @sdStageFK=(select  sd_stageFK from SD_Status where DeskRef=''Change Request'' and id=''1392406111'' )  
            update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFK,previousStageFK=@PrevStage  where Ticketref=@Ticketref  
            update SD_SRApprovalStatus set Approval1Status=''Approved''   
              ,Approval1Remarks=@Remarks  
              where TicketRef=@Ticketref       
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L2'',@Orgid));  
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L2'',@Approval2Name,@Orgid));  
       SET @userName=''itsupport@hisysmc.com'';  
         --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1'' and  EmpID =@EmpCode);  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
                    -- insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
       --  values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
       
       
       
       
     END  
   END  
   ----------- for IT manager Update  
    if(@Approval2IsActive=''1'')  
    BEGIN  
      if(@ApproverLevel=''L2'')  
      BEGIN  
        
      if(@HODApproval=''Yes'')  
      BEGIN  
  
      ---------status will set to awaiting hod approval  
       set @StatusFk1=(select  ID from SD_Status where id=''59024056'' and DeskRef=''Change Request'')  
       set @sdStageFk=(select sd_stageFK from SD_Status where id=''59024056'' and DeskRef=''Change Request'')  
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
       update SD_SRApprovalStatus set Approval2Status=''Pending''   
                              ,Approval2Remarks=@Remarks  
                               where TicketRef=@Ticketref  
  
       SET @userName=''itsupport@hisysmc.com'';  
       --(SELECT userName FROM [dbo]. [SD_EmailConfig])  
    
       set @ToEmail=(select top 1 Approval3Email from SD_User_SRApproval_SRDesk where Approval3Active=''1''  and  EmpID =@EmpCode);  
              
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L3'',@Orgid));  
       set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L3'',@Approval3Name,@Orgid));  
       insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
       values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
      END  
      ELSE  
      BEGIN  
      -----------Approved BY IT Manager  
         set @StatusFk1=(select  ID from SD_Status where id=''688050162'' and DeskRef=''Change Request'')  
      set @sdStageFk=(select  sd_stageFK from SD_Status where id=''688050162'' and DeskRef=''Change Request'')  
      update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
         update SD_SRApprovalStatus set Approval2Status=''Approved''  ,Approval2Remarks=@Remarks  
                               where TicketRef=@Ticketref  
          set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     SET @userName=''itsupport@hisysmc.com'';  
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
     --  ELSE  
     -- BEGIN   
     --   update SDIncident set assigneeParticipantFK=''1435327746'' where Ticketref=@Ticketref  
     --set @ToEmail=( select b.EmailID from SD_Technician a   
     --    inner join SD_User_Master b   
  
     --    on a.RefUserID=b.UserID  
           
     --    where EmailID like ''%nikhil.kumar.fb@hitachi-systems.com%'')  
     --    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
     --   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
     -- END  
      END  
        
      END  
    END  
     if(@Approval3IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L3'')  
       BEGIN  
  
       -----------------once L3 /HOD approved it , than It manager will get mail that HOD has approved the request   
       --------------than IT manager will take action on it  
       set @StatusFk1=(select ID FROM SD_Status  WHERE id=''476231700'' and DeskRef=''Change Request'')  
       set @sdStageFk=(select sd_stageFK FROM SD_Status  WHERE id=''476231700'' and DeskRef=''Change Request'')  
       update SDIncident set sdStatusFK=@StatusFk1,sdStageFK=@sdStageFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
         update SD_SRApprovalStatus set Approval3Status=''Approved''   
        ,Approval3Remarks=@Remarks  
   set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);  
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same      
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''HODStatus'',''L2'',@Orgid));  
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''HODStatus'',''L2'',@Approval2Name,@Orgid));  
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
            if(@Approval4IsActive=''1'')  
  BEGIN  
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L4'',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L4'',@Approval4Name,@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
    --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
    set @ToEmail=(select top 1  Approval1Email from SD_User_SRApproval_SRDesk where Approval4Active=''1'' and  EmpID =@EmpCode );  
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
   --       insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
     
         
         
       END  
  END  
     END  
     if(@Approval4IsActive=''1'')  
     BEGIN  
      if(@ApproverLevel=''L4'')  
      BEGIN  
      set @StatusFk=(select top 1 Approval4Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
      update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
      update SD_SRApprovalStatus set Approval4Status=''Approved''   
  ,Approval4Remarks=@Remarks  
   if(@Approval5IsActive=''1'')  
   BEGIN  
   set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L5'',@Orgid));  
   set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L5'',@Approval5Name,@Orgid));  
    SET @userName=''itsupport@hisysmc.com'';  
    --(SELECT userName FROM [dbo].[SD_EmailConfig])  
     
    set @ToEmail=(select top 1 Approval1Email from SD_User_SRApproval_SRDesk where Approval5Active=''1'' and  EmpID =@EmpCode );  
    insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
   values(@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
   --        insert into ksubscribers.dbo.email([ID] ,[from],[to],subject,bodyContent,priority,created,sendStatus)  
   --values(ksubscribers.dbo.fn_GenerateKid(),@userName,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
      END  
      END  
     END  
     if(@Approval5IsActive=''1'')  
     BEGIN  
    if(@ApproverLevel=''L5'')  
   BEGIN  
   set @StatusFk=(select top 1 Approval5Status from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
   update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@StatusFk,previousStageFK=@PrevStage where Ticketref=@Ticketref  
   update SD_SRApprovalStatus set Approval5Status=''Approved''   
  ,Approval5Remarks=@Remarks  
   END  
   END  
  END  
  
  if(@Option=''RejectRequest'')  
   BEGIN  
 set @FromEmail=''itsupport@hisysmc.com''  
  set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
      select  @Approval1IsActive=Approval1Active,@Approval2IsActive=Approval2Active  
       ,@Approval3IsActive=Approval3Active,@Approval4IsActive=Approval4Active,@Approval5IsActive=Approval5Active   
      from SD_User_SRApproval_SRDesk where EmpID=@EmpCode  
       set @PrevStage=(select sdStageFK from SDIncident where  Ticketref=@Ticketref )  
        set @PrevStatus=(select sdStatusFK from SDIncident where  Ticketref=@Ticketref )  
     if(@Approval1IsActive=''1'')  
     BEGIN  
       if(@ApproverLevel=''L1'')  
       BEGIN-- reject by manager  
            set @StatusFk=(select top 1 ID from SD_Status where id=''441242598'' and DeskRef=''Change Request'')  
  
           
            set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''441242598'' and DeskRef=''Change Request'')  
              
            update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
  
            update SD_SRApprovalStatus set Approval1Status=''Rejected''   
         ,Approval1Remarks=@Remarks  
       where TicketRef=@Ticketref  
             set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
    
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
         
       END  
     END  
     --if exists(select * from SD_SRApprovalStatus where Approval1Status!=''Rejected'' and TicketRef=@Ticketref)  
     --  BEGIN  
         if(@Approval2IsActive=''1'')  
           BEGIN  
              if(@ApproverLevel=''L2'')  
               BEGIN  
               --Rejected by IT manager   
                set @StatusFk=(select top 1 ID from SD_Status where id=''934234849'' and DeskRef=''Change Request'')  
                 set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''934234849'' and DeskRef=''Change Request'')  
                 update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
                 update SD_SRApprovalStatus set Approval2Status=''Rejected''   
                   ,Approval2Remarks=@Remarks  
                   where TicketRef=@Ticketref  
       set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
     set @EmailBody=(select dbo.SD_EmailBody(@Ticketref,''Ticket Created Reminder'','''',@Orgid));  
       
  
     -----------now ticket will visible to pool  according to location of ticket   
     set @location=(select location from SDIncident where Ticketref=@Ticketref)  
     set @ToEmail=(select Engineer from  SD_Pool where Location=@location)  
           
           
     if(@ToEmail is not null)  
       BEGIN  
        insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
        values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
         
       END  
               END  
           END  
       -- END  
     --if exists(select * from SD_SRApprovalStatus where Approval2Status!=''Rejected'' and TicketRef=@Ticketref)  
     --  BEGIN  
         if(@Approval3IsActive=''1'')  
          BEGIN  
           if(@ApproverLevel=''L3'')  
             BEGIN  
              set @StatusFk=(select top 1 ID from SD_Status where id=''2125451219'' and DeskRef=''Change Request'')  
              set @sdStageFk=(select top 1 sd_stageFK from SD_Status where id=''2125451219'' and DeskRef=''Change Request'')  
                update SDIncident set sdStatusFK=@StatusFk,sdStageFK=@sdStageFk,previousStageFK=@PrevStage,prevSDstatusFK=@PrevStatus  where Ticketref=@Ticketref  
              update SD_SRApprovalStatus set Approval3Status=''Rejected''   
              ,Approval3Remarks=@Remarks  
 --               update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
              
             set @EmpCode=(select SubmitterID from SDIncident where Ticketref=@Ticketref)  
        set @ToEmail=(select top 1 Approval2Email from SD_User_SRApproval_SRDesk where Approval2Active=''1''  and  EmpID =@EmpCode);  
        ---------------now status change prompt will send to L2 that HOD has approved ........Kindly approved the same      
      set @Subject=(select dbo.SD_EmailSubject(@Ticketref,''Change_ForApproval'',''L2'',@Orgid));  
      set @EmailBody=(select dbo.SD_EmailBody_Cloud(@Ticketref,''Change_ForApproval'',''L2'',@Approval2Name,@Orgid));  
      insert into email([from],[to],subject,bodyContent,priority,created,sendStatus)  
      values(@FromEmail,@ToEmail,@Subject,@EmailBody,''1'',GETDATE(),''0'')  
              
            END  
    
          END  
        --END  
     --if exists(select * from SD_SRApprovalStatus where Approval3Status!=''Rejected'' and TicketRef=@Ticketref)  
     --   BEGIN  
           if(@Approval4IsActive=''1'')  
            BEGIN  
             if(@ApproverLevel=''L4'')  
              BEGIN  
                set @StatusFk=(select top 1 Approval4RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
              update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  
                update SD_SRApprovalStatus set Approval4Status=''Rejected''   
                ,Approval4Remarks=@Remarks  
                  update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
              END  
            END  
       -- END  
     --if exists(select * from SD_SRApprovalStatus where Approval4Status!=''Rejected'' and TicketRef=@Ticketref)  
     -- BEGIN  
         if(@Approval5IsActive=''1'')  
          BEGIN  
                
           if(@ApproverLevel=''L5'')  
            BEGIN  
              set @StatusFk=(select top 1 Approval5RejectStatus from SD_User_SRApproval_SRDesk where EmpID=@EmpCode)  
          update SDIncident set sdStatusFK=@PrevStage,sdStageFK=@PrevStage,previousStageFK=@StatusFk  where Ticketref=@Ticketref  
               update SD_SRApprovalStatus set Approval5Status=''Rejected''   
               ,Approval5Remarks=@Remarks  
                 update SDIncident set assigneeParticipantFK=''529373'' where Ticketref=@Ticketref  
     
             END  
          END  
      --END  
   END  
  
   
  
  
  
  
 END  ----main end closes  
   
   '
GO

--
-- Create or alter procedure [dbo].[SD_spSDMergeNupate]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDMergeNupate]')
GO
IF OBJECT_ID(N'dbo.SD_spSDMergeNupate', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER Proc dbo.SD_spSDMergeNupate  
(  
 @id numeric(26,0)= null  
 ,@DeskRef varchar(50) =NULL  
 ,@UserIDForAppro numeric(18,0)=null  
 ,@ticketout varchar(50)=Null  
    , @Ticketref varchar(20)= null   
    ,@partitionid numeric(26,0)= null  
    ,@orgServDeskDefnFK numeric(26,0)= null  
    ,@sdStageFK numeric(26,0)= null  
     ,@sdStatusFK numeric(26,0)= null  
      ,@sdPriorityFK numeric(26,0)= null  
      ,@sdSeverityFK numeric(26,0)= null  
      ,@sdSolutionTypeFK numeric(26,0)= null  
      ,@sdCategoryFK numeric(26,0)= null  
      ,@creationDateTime datetime= null  
      ,@closedDateTime datetime= null  
      ,@TicketSummary varchar(max)= null  
      ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
      ,@submitterType varchar(50)= null  
      ,@submitterName varchar(50)= null  
      ,@submitterEmailAddr varchar(50)= null  
      ,@submitterPhone varchar(50)= null  
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      ,@actualCompletedDate datetime= null  
      ,@expectedDueDate datetime= null  
      ,@actualResolutionDate datetime= null  
      ,@organizationFK numeric(26,0)= null  
      ,@orgStaffFK numeric(26,0)= null  
      ,@sdErrorMessage varchar(max)= null  
      ,@solutionNote varchar(max)= null  
      ,@sourceType varchar(50)= null  
      ,@previousStageFK numeric(26,0)= null  
      ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
 ,@InsertBy int =NULL  
  ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
  ,@Status nvarchar(10) = NULL  
  ,@TicketAttachMent nvarchar(max)=null  
  ,@Filename nvarchar(100)=null  
  ,@location nvarchar(100)=null  
  ,@Department nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null  
  ,@StageFKAsPerStatus numeric(18,0)=null  
  ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
  
    
         BEGIN  
              set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
 set @StageFKAsPerStatus=(select top 1 sd_stageFK from SD_Status where id=@sdStatusFK)  
   
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncidentBulkUpdate(Ticketref,partitionid,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,submitterType  
        ,sdCategoryFK,assigneeType  
          
       ,assigneeParticipantFK   
       ,organizationFK  
       -- ,orgStaffFK  
   ,location,Department,categoryFullText)   
       Values(@Ticketref,''1'',isnull(@sdStageFK,0),ISNULL(@StageFKAsPerStatus,0),ISNULL(@sdPriorityFK,0),  
       ISNULL(@sdSeverityFK ,0) ,''1'',ISNULL(@sdCategoryFK,0),@assigneeType  
        
      
       ,ISNULL(@assigneeParticipantFK  ,0)   
     ,ISNULL(@organizationFK,0)  
     -- ,@orgStaffFK  
      ,@location,@Department,@categoryFullText)  
  
             
      END  
   
 --select * from SD_ErrorLog order by eventTime desc  
  
 if(@Option=''UpdateTicket'')  
 BEGIN  
 ---------update status  
 update SDIncident set sdStatusFK=b.sdStatusFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdStatusFK<>b.sdStatusFK and b.sdStatusFK is not null and b.sdStatusFK=''0''  
  
 update SDIncident set sdStageFK=b.sdStageFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdStageFK<>b.sdStageFK and b.sdStageFK is not null and b.sdStageFK=''0''  
  
 update SDIncident set sdCategoryFK=b.sdCategoryFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdCategoryFK<>b.sdCategoryFK and b.sdStatusFK is not null and b.sdCategoryFK=''0''  
  
  update SDIncident set sdPriorityFK=b.sdPriorityFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdPriorityFK<>b.sdPriorityFK and b.sdPriorityFK is not null and b.sdPriorityFK=''0''  
  
  update SDIncident set sdSeverityFK=b.sdSeverityFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdSeverityFK<>b.sdSeverityFK and b.sdSeverityFK is not null and b.sdSeverityFK=''0''  
  
 update SDIncident set assigneeParticipantFK=b.assigneeParticipantFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.assigneeParticipantFK<>b.assigneeParticipantFK and b.assigneeParticipantFK is not null and b.assigneeParticipantFK=''0''  
  
  
  update SDIncident set sdSolutionTypeFK=b.sdSolutionTypeFK from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.sdSolutionTypeFK<>b.sdSolutionTypeFK and b.sdSolutionTypeFK is not null and b.sdSolutionTypeFK=''0''  
  
  update SDIncident set location=b.location from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.location<>b.location and b.location is not null and b.location=''0''  
  
  update SDIncident set Department=b.Department from SDIncident a inner join SDIncidentBulkUpdate b   
 on a.Ticketref=b.Ticketref  
 where a.Department<>b.Department and b.Department is not null and b.Department=''0''  
  ---Stage,DeskrefID,select from bydefaultvalue  
  
   
 --END  
   
   
 END  
  if(@Option=''UpdateTicketMerge'')  
 BEGIN  
  ---Stage,DeskrefID,select from bydefaultvalue  
   Declare @PrevStageFK numeric(18,0)=null;  
  
   Declare @TicketID numeric(18,0)=null;  
   Declare @EditedBy nvarchar(max)=null;  
   set @EditedBy=@UserName;  
   -------------------- to check previouse stage  
   set @PrevStageFK=(select top 1 sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
   if(@sdStageFK!=@PrevStageFK)  
     BEGIN  
      update SDIncident set previousStageFK=@PrevStageFK where Ticketref=@Ticketref and organizationFK=@organizationFK --and sdStatusFK!=previousStageFK  
      -------------this will update status of ticket and send mail for  HOD approval and UAT acceptance mail  
        
      exec SD_SRStatusUpdate @PrevStageFK=@PrevStageFK,@sdStatusFK=@sdStatusFK,@TicketNumber=@Ticketref,@Option=''OnUpdateStatus''  ,@OrgID=@organizationFK 
   
    END  
    set @sdCategoryFK=(select top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
    set @StageFKAsPerStatus=(select top 1 sd_stageFK from SD_Status where id=@sdStatusFK)  
   
       update  SDIncident  set  
  
           sdStageFK=ISNULL(@StageFKAsPerStatus,sdStageFK)  
          ,sdStatusFK=ISNULL(@sdStatusFK,sdStatusFK)  
          ,sdPriorityFK=ISNULL(@sdPriorityFK,sdPriorityFK)  
          ,sdSeverityFK=ISNULL(@sdSeverityFK  ,sdSeverityFK)  
          ,sdCategoryFK=ISNULL(@sdCategoryFK,sdCategoryFK)  
          ,TicketDesc=ISNULL(@TicketDesc,TicketDesc)  
          ,closedDateTime=ISNULL(@closedDateTime,closedDateTime)  
          ,assigneeType =ISNULL(@assigneeType,assigneeType)  
          --    ,assigneePoolFK  
          ,assigneeParticipantFK=ISNULL(@assigneeParticipantFK,assigneeParticipantFK)  
          ,sdSolutionTypeFK=ISNULL(@sdSolutionTypeFK,sdSolutionTypeFK)  
          ,solutionNote=ISNULL(@solutionNote,solutionNote)  
  --   ,organizationFK  
  --    orgStaffFK        
          ,categoryFullText=ISNULL(@categoryFullText,categoryFullText)  
            where ticketref=@Ticketref and organizationFK =@organizationFK  
   declare @sdStatus nvarchar(100);  
   set @sdStatus=(select top 1 Status from vSDTicket where TicketNumber=@Ticketref)  
  
     if(@sdStatus=''Closed'')  
     BEGIN  
      update SDIncident set closedDateTime=GETDATE() where Ticketref=@Ticketref  
     END  
    -- if(@TicketAttachMent is not null)  
    --BEGIN  
    -- exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
    --END  
    -- is procedure mei dikkt hei  
     exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@EditedBy,@Option=''AddNotes'',@organizationFK=@organizationFK  
    declare @NewStatus nvarchar(100);  
    set @NewStatus=(select top 1 status  from vSDTicket where TicketNumber=@Ticketref)  
   if(@NewStatus=''resolved'')  
    BEGIN  
     update SDIncident set TickResolvedDt=GETDATE() where Ticketref=@Ticketref  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket''  
            exec SD_spAddKnowledgeBase @Issue=@TicketSummary,@ResolutionDetail=@solutionNote,@Option=''AddKB''  
    END  
    set @PrevStageFK=(select top 1 previousStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
    
   
   
 ------------------------        mail on status change  
 -- if(@sdStageFK!=@PrevStageFK and @NewStatus!=''resolved'')  
 --BEGIN  
 --  exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''StatusChange''  
   
   
 --END  
   
   
 END  
 if(@Option=''AddSR_ApproverStatus'')  
  BEGIN  
    declare @desk nvarchar(100);  
    set @desk=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
    if(@desk=''CloudProcess'')  
     BEGIN  
      exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
     END  
    else if(@desk=''Service Request'')  
     BEGIN  
      exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
  
     END  
     else if(@desk=''Change Request'')  
     BEGIN  
  
     exec SD_ChangeCABApproval @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddCABApprovalStatus''  
     END  
  
  END  
  
  
  
  
 END  
  '
GO

--
-- Create or alter procedure [dbo].[SD_spSDIncident_Conversion]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDIncident_Conversion]')
GO
IF OBJECT_ID(N'dbo.SD_spSDIncident_Conversion', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Proc dbo.SD_spSDIncident_Conversion  
(  
 @id numeric(26,0)= null  
 ,@DeskRef varchar(50) =NULL  
 ,@desk nvarchar(100)=null  
 ,@UserIDForAppro numeric(18,0)=null  
 ,@ticketout varchar(50)=Null  
 ,@ticketConvert varchar(50)=Null  
    , @Ticketref varchar(20)= null output  
    ,@partitionid numeric(26,0)= null  
    ,@orgServDeskDefnFK numeric(26,0)= null  
    ,@sdStageFK numeric(26,0)= null  
     ,@sdStatusFK numeric(26,0)= null  
      ,@sdPriorityFK numeric(26,0)= null  
      ,@sdSeverityFK numeric(26,0)= null  
      ,@sdSolutionTypeFK numeric(26,0)= null  
      ,@sdCategoryFK numeric(26,0)= null  
      ,@creationDateTime datetime= null  
      ,@closedDateTime datetime= null  
      ,@TicketSummary varchar(max)= null  
      ,@TicketDesc varchar(max)= null  
   ,@TickNotes nvarchar(max)=null  
      ,@submitterType varchar(50)= null  
      ,@submitterName varchar(50)= null  
      ,@submitterEmailAddr varchar(50)= null  
      ,@submitterPhone varchar(50)= null  
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      ,@actualCompletedDate datetime= null  
      ,@expectedDueDate datetime= null  
      ,@actualResolutionDate datetime= null  
      ,@organizationFK numeric(26,0)= null  
      ,@orgStaffFK numeric(26,0)= null  
      ,@sdErrorMessage varchar(max)= null  
      ,@solutionNote varchar(max)= null  
      ,@sourceType varchar(50)= null  
      ,@previousStageFK numeric(26,0)= null  
      ,@categoryFullText varchar(max)= null  
   ,@sdCategoryRef  varchar(200)=null  
   ,@UserName nvarchar(100)=null  
   ,@SubmitterID varchar(50)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
 ,@InsertBy int =NULL  
  ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
  ,@Status nvarchar(10) = NULL  
  ,@TicketAttachMent nvarchar(max)=null  
  ,@Filename nvarchar(100)=null  
  ,@location nvarchar(100)=null  
  ,@Department nvarchar(100)=null  
  ,@SDRole nvarchar(100)=null  
  ,@ViewToUser bit =null  
  ,@Option varchar(50)  
 )  
 AS  
 BEGIN  
   
 if(@Option=''AddTicket'')  
 BEGIN  
     ---Stage,DeskrefID,select from bydefaultvalue  
     Set @Ticketref=(Select concat(ReqPrefix,right(''0000000''+cast((LastUpdatedID+1) as varchar(7)),7))  from SD_TicketIncrementRef where ReqRef=@DeskRef and OrgRef=@organizationFK)  
     set @orgServDeskDefnFK=(select top 1 id from SD_RequestType where ReqTypeRef=@DeskRef and OrgRef=@organizationFK)  
     set @sdCategoryFK=(select  top 1 id from SD_Category where Categoryref=@sdCategoryRef and OrgDeskRef=@organizationFK)  
     set @sdStageFK=(select  top 1 sdStageFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @sdStatusFK=(select  top 1 sdStatusFK from SD_ServDeskDefn where Deskref=@DeskRef and OrgFk=@organizationFK);  
     set @expectedDueDate= ( select dbo.GetDueDate_New(@creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
     set @actualResolutionDate= ( select dbo.GetDueDateForResolution_New( @creationDateTime, @DeskRef,@sdSeverityFK,@organizationFK))  
  
     if exists(select * from vSDTicket  where Status like ''%Open%'' and SubmitterEmail=@submitterEmailAddr and Summary like ''%''+@TicketSummary+''%''  and ServiceDesk =@DeskRef)  
       BEGIN  
       -------------------------------- this will add notes , as ticket already exists -------------------------------  
        declare @TicketIDforNotes numeric(26,0)=null;  
        declare @NoteDesc nvarchar(max)=null;  
        set @NoteDesc=Cast(Concat(''Auto Generated: Ticket with same summary found in system'',''Summary As Per Mail :'',@TicketSummary,''description :'',@TicketDesc) as varchar(max))  
         select top 1  @TicketIDforNotes=id,@Ticketref=Ticketref from SDIncident order by creationDateTime desc  
         INSERT INTO SD_TicketNotes(TicketID ,Ticketref,EdityBy,EditedDt,NoteDesc,organizationFK)  
          values(@TicketIDforNotes,@Ticketref,''System'' ,getdate(),@NoteDesc,@organizationFK)   
       END  
       else   
         BEGIN  
         ---------------- new ticket ID will create --------------------------------  
        insert into SDIncident(id,Ticketref,partitionid,orgServDeskDefnFK,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK  
        ,sdCategoryFK,creationDateTime,TicketSummary,TicketDesc,submitterType,submitterName,submitterEmailAddr,submitterPhone  
         ,assigneeType   ,organizationFK  
       -- ,orgStaffFK  
       ,sourceType,expectedDueDate,categoryFullText,SubmitterID,actualResolutionDate,location,Department)   
       Values(@id,@Ticketref,''1'',@orgServDeskDefnFK,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@creationDateTime  
       ,@TicketSummary,@TicketDesc,@submitterType,@submitterName,@submitterEmailAddr,@submitterPhone  
       ,@assigneeType  
     --  ,@assigneePoolFK  
     --  ,@assigneeParticipantFK     
     ,@organizationFK  
     -- ,@orgStaffFK  
       ,@sourceType,@expectedDueDate,@categoryFullText,@SubmitterID,@actualResolutionDate,@location,@Department)  
  
     ------------------------to get ticket ID after successfull generation -----------------------  
        SET @Ticketref=(select Ticketref from SDIncident where SID=SCOPE_IDENTITY())  
          ---------------------------this will auto increment ticket ID, after ticket inseretion  
         if(@Ticketref is not null)  
           BEGIN  
              update SD_TicketIncrementRef set LastUpdatedID=RIGHT(@Ticketref, 7)   
              where ReqRef=@DeskRef and OrgRef=@organizationFK  
          END  
       --------------------------  this will create custom filed against ticket ID  
       exec SD_spCreateCustomField @Ticketref=@Ticketref,@Desk=@DeskRef,@Option=''AddCustomField''  
  
       --if(@TicketAttachMent is not null)  
       -- BEGIN  
       --   exec SD_spTicketFileupload @Ticketref=@Ticketref, @Option=''AddTicketAttach'',@Filepath=@TicketAttachMent,@Filename=@Filename,@OrgRef=@organizationFK  
   
       -- END  
  
      END  
 END  
  
 if(@Option=''CloseTicket'')  
 BEGIN  
  ---Stage,DeskrefID,select from bydefaultvalue  
   Declare @PrevStageFK numeric(18,0)=null;  
   Declare @PrevStatusFK numeric(18,0)=null;  
   Declare @StageFk numeric(18,0)=null;  
     Declare @StatusFk numeric(18,0)=null;  
   Declare @TicketID numeric(18,0)=null;  
   Declare @TickNotesFinal nvarchar(max)=null;  
   
  set @desk=(select  top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketConvert);  
     set @PrevStageFK=(select  top 1 sdStageFK from SDIncident where Ticketref=@ticketConvert);  
  set @PrevStatusFK=(select  top 1 sdStatusFK from SDIncident where Ticketref=@ticketConvert);    
  set @TickNotesFinal=CONCAT(@TickNotes,'' <br/>Auto Generated :Ticket closed by Engineer and status was marked as Resolved<br/>'',''New Request has been raised on the basis of this summary'');  
     
      set @StatusFk=(select  top 1 ID from SD_Status where DeskRef=@desk and StatusRef like ''%resolv%'')  
      set @StageFk=(select  top 1 sd_stageFK from SD_Status where  DeskRef=@desk and StatusRef like ''%resolv%'')  
      
     update SDIncident set TickResolvedDt=GETDATE(),sdStatusFK=@StatusFk,sdStageFK=@StageFk, sdSolutionTypeFK=@sdSolutionTypeFK,solutionNote=@solutionNote,prevSDstatusFK=@PrevStatusFK,previousStageFK=@previousStageFK  
     where Ticketref=@ticketConvert;  
     exec SD_Sendmail @TicketNumber=@ticketConvert,@Option=''ResolvedTicket'',@OrgId=@organizationFK;  
     exec SD_spAddKnowledgeBase @Issue=@TicketSummary,@ResolutionDetail=@solutionNote,@ViewToUser=@ViewToUser,@Option=''AddKB'',@OrgDeskRef=@organizationFK;  
     exec  SD_spAddTicketNotes @Ticketref=@ticketConvert,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotesFinal,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK;  
  
    
     
   
 END  
  
 if(@Option=''AddSR_ApproverStatus'')  
  BEGIN  
    
    
    set @desk=(select  top 1 ServiceDesk from vSDTicket where TicketNumber=@ticketout)  
     set @SubmitterID=(select  top 1 SubmitterID from vSDTicket where TicketNumber=@ticketConvert)  
    if(@desk=''CloudProcess'')  
     BEGIN  
     set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval where EmpID=@SubmitterID)  
      exec SD_SRTicketApprovalStatus @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
       
     END  
    else if(@desk=''Service Request'')  
     BEGIN  
     set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval_SRDesk where EmpID=@SubmitterID)  
      exec SD_SRTicketApprovalStatus_SRFix @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddSrApprovalStatus''  
        
     END  
     else if(@desk=''Change Request'')  
     BEGIN  
      set @UserIDForAppro=(select  top 1 UserID from SD_User_SRApproval_SRDesk where EmpID=@SubmitterID)  
     exec SD_ChangeCABApproval @UserID=@UserIDForAppro,@Ticketref=@ticketout,@Option=''AddCABApprovalStatus'',@Orgid=@organizationFK  
         
    END  
  
  END  
 END  
  '
GO

--
-- Create table [dbo].[DynamicFLow]
--
PRINT (N'Create table [dbo].[DynamicFLow]')
GO
IF OBJECT_ID(N'dbo.DynamicFLow', 'U') IS NULL
CREATE TABLE dbo.DynamicFLow (
  id int IDENTITY,
  Org_Id varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  flowDesc nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  imagepath varchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  inserttime datetime NULL DEFAULT (getdate()),
  ReqType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertDynamicFlow]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertDynamicFlow]')
GO
IF OBJECT_ID(N'dbo.SP_InsertDynamicFlow', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_InsertDynamicFlow(
    @Org_Id VARCHAR(100)=null,
    @flowDesc NVARCHAR(500)=null,
    @imagepath VARCHAR(1000)=null,
	@ReqType VARCHAR(50)=null
	)
AS
BEGIN
    INSERT INTO DynamicFlow (Org_Id, flowDesc, imagepath,ReqType)
    VALUES (@Org_Id, @flowDesc, @imagepath,@ReqType);
END;
'
GO

--
-- Create table [dbo].[CommonLog]
--
PRINT (N'Create table [dbo].[CommonLog]')
GO
IF OBJECT_ID(N'dbo.CommonLog', 'U') IS NULL
CREATE TABLE dbo.CommonLog (
  ID numeric IDENTITY,
  TableId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgId varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  UserID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PageName varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReqType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ReqDef varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StageDesc varchar(2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SLAName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SLADesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryRef varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CategoryCodeRef varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TemplateName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDPrefix varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  DeskDesc varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SDCategory varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Status varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityName varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PriorityDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SeverityName varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SeverityDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ArchiveTime varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  CoverageSch varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  HostName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Port varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderUserName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderEmail varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  SenderPWD varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  Retry varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ClientSecretKey varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  TenantID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgName varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  OrgDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonMob varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonEmail varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonNameII varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonMobII varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ContPersonEmailII varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldID varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldName varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldMode varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  IsFieldReq varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldScope varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResponseTimeMin varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ResolutionTimeMin varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  StatusDesc varchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  ColorCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertTime datetime NULL DEFAULT (getdate()),
  FieldValue varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FieldType varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  PRIMARY KEY CLUSTERED (ID)
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter procedure [dbo].[SP_InsertCommonLog]
--
GO
PRINT (N'Create or alter procedure [dbo].[SP_InsertCommonLog]')
GO
IF OBJECT_ID(N'dbo.SP_InsertCommonLog', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SP_InsertCommonLog  
(  
	@TableId varchar(50) = NULL,  
    @OrgId varchar(50) = NULL,  
    @UserID varchar(100) = NULL,  
    @PageName varchar(max) = NULL,  
    @ReqType varchar(50) = NULL,  
    @ReqDef varchar(50) = NULL,  
    @StageName varchar(50) = NULL,  
    @StageDesc varchar(2000) = NULL,  
    @SLAName varchar(50) = NULL,  
    @SLADesc varchar(max) = NULL,  
	@CategoryRef varchar(50) = NULL,  
	@CategoryCodeRef varchar(100) = NULL,  
    @TemplateName varchar(50) = NULL,  
    @SDPrefix varchar(20) = NULL,  
    @DeskDesc varchar(max) = NULL,  
    @SDCategory varchar(50) = NULL,  
    @Status varchar(20) = NULL,  
    @PriorityName varchar(20) = NULL,  
    @PriorityDesc varchar(500) = NULL,  
    @SeverityName varchar(20) = NULL,  
    @SeverityDesc varchar(500) = NULL,  
    @ResolutionName varchar(50) = NULL,  
    @ResolutionDesc varchar(500) = NULL,  
    @ArchiveTime varchar(20) = NULL,  
    @CoverageSch varchar(50) = NULL,  
    @HostName varchar(500) = NULL,  
    @Port varchar(20) = NULL,  
    @SenderUserName varchar(500) = NULL,  
    @SenderEmail varchar(500) = NULL,  
    @SenderPWD varchar(100) = NULL,  
    @Retry varchar(20) = NULL,  
    @ClientID varchar(100) = NULL,  
    @ClientSecretKey varchar(100) = NULL,  
    @TenantID varchar(100) = NULL,  
	@OrgName varchar(500) = NULL,  
    @OrgDesc varchar(500) = NULL,  
	@ContPersonName varchar(50) = NULL,  
    @ContPersonMob varchar(20) = NULL,  
    @ContPersonEmail varchar(500) = NULL,  
    @ContPersonNameII varchar(50) = NULL,  
    @ContPersonMobII varchar(20) = NULL,  
	@ContPersonEmailII varchar(500) = NULL,  
    @FieldID varchar(100) = NULL,  
    @FieldName varchar(100) = NULL,  
    @FieldMode varchar(100) = NULL,  
	@FieldValue varchar(100) = NULL,
	@FieldType varchar(100) = NULL,
    @IsFieldReq varchar(20) = NULL,  
    @FieldScope varchar(50) = NULL,  
    @ResponseTimeMin varchar(20) = NULL,  
    @ResolutionTimeMin varchar(20) = NULL,  
    @StatusName varchar(50) = NULL,  
    @StatusDesc varchar(500) = NULL,  
    @ColorCode varchar(50) = NULL  
)  
AS  
BEGIN  
    INSERT INTO CommonLog (TableId,  
        OrgId,  UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc,CategoryRef,  
		CategoryCodeRef,TemplateName, SDPrefix, DeskDesc,  
        SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName,  
        ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD,  
        Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc,ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII,  
        ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode,FieldValue,FieldType, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin,  
        StatusName, StatusDesc, ColorCode) 
		VALUES 
		(@TableId, @OrgId, @UserID, @PageName, @ReqType, @ReqDef, @StageName, @StageDesc, @SLAName, @SLADesc,  
        @CategoryRef,@CategoryCodeRef, @TemplateName, @SDPrefix, @DeskDesc,  
        @SDCategory, @Status, @PriorityName, @PriorityDesc, @SeverityName, @SeverityDesc, @ResolutionName,  
        @ResolutionDesc, @ArchiveTime, @CoverageSch, @HostName, @Port, @SenderUserName, @SenderEmail, @SenderPWD,  
        @Retry, @ClientID, @ClientSecretKey, @TenantID, @OrgName, @OrgDesc, @ContPersonName, @ContPersonMob, @ContPersonEmail, @ContPersonNameII,  
        @ContPersonMobII, @ContPersonEmailII, @FieldID, @FieldName, @FieldMode,@FieldValue,@FieldType, @IsFieldReq, @FieldScope, @ResponseTimeMin, @ResolutionTimeMin,  
        @StatusName, @StatusDesc, @ColorCode);  
END;  
'
GO

--
-- Create table [dbo].[AMS_Asset_Dep_Master]
--
PRINT (N'Create table [dbo].[AMS_Asset_Dep_Master]')
GO
IF OBJECT_ID(N'dbo.AMS_Asset_Dep_Master', 'U') IS NULL
CREATE TABLE dbo.AMS_Asset_Dep_Master (
  ID int IDENTITY (17654567, 1),
  DepCode varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  DepName varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  InsertBy int NULL,
  InsertDt datetime NULL,
  UpdateBy int NULL,
  UpdateDt datetime NULL,
  IsActive bit NOT NULL,
  PRIMARY KEY CLUSTERED (DepCode)
)
ON [PRIMARY]
GO

--
-- Create table [dbo].[ALM_OrgLogo]
--
PRINT (N'Create table [dbo].[ALM_OrgLogo]')
GO
IF OBJECT_ID(N'dbo.ALM_OrgLogo', 'U') IS NULL
CREATE TABLE dbo.ALM_OrgLogo (
  ID int IDENTITY,
  FileName nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileType nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
  FileData varbinary(max) NULL,
  Org_ID varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
ON [PRIMARY]
TEXTIMAGE_ON [PRIMARY]
GO

--
-- Create or alter function [dbo].[GetDateDifference]
--
GO
PRINT (N'Create or alter function [dbo].[GetDateDifference]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetDateDifference') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'CREATE OR ALTER FUNCTION dbo.GetDateDifference (
    @StartDate DATETIME,
    @EndDate DATETIME
)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @Duration NVARCHAR(100)

    DECLARE @Days INT, @Hours INT, @Minutes INT, @Seconds INT

    -- Calculate the difference in seconds
    DECLARE @DiffSeconds INT = DATEDIFF(SECOND, @StartDate, @EndDate)

    -- Calculate days, hours, minutes, and remaining seconds
    SET @Days = @DiffSeconds / (60 * 60 * 24)
    SET @DiffSeconds = @DiffSeconds % (60 * 60 * 24)

    SET @Hours = @DiffSeconds / (60 * 60)
    SET @DiffSeconds = @DiffSeconds % (60 * 60)

    SET @Minutes = @DiffSeconds / 60
    SET @Seconds = @DiffSeconds % 60

    -- Format the duration
    SET @Duration = CONCAT(
        CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '''' END,
        CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '''' END,
        CASE WHEN @Minutes > 0 THEN CAST(@Minutes AS NVARCHAR(10)) + '' minutes '' ELSE '''' END,
        CAST(@Seconds AS NVARCHAR(10)) + '' seconds''
    )

    RETURN @Duration
END
'
GO

--
-- Create or alter function [dbo].[SplitString]
--
GO
PRINT (N'Create or alter function [dbo].[SplitString]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.SplitString') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.SplitString
(    
    @Input NVARCHAR(MAX),
    @Character CHAR(1)
)
RETURNS @Output TABLE (
    Item NVARCHAR(1000)
)
AS
BEGIN
    DECLARE @StartIndex INT, @EndIndex INT
 
    SET @StartIndex = 1
    IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
    BEGIN
        SET @Input = @Input + @Character
    END
 
    WHILE CHARINDEX(@Character, @Input) > 0
    BEGIN
        SET @EndIndex = CHARINDEX(@Character, @Input)
         
        INSERT INTO @Output(Item)
        SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)
         
        SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
    END
 
    RETURN
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spSDMergeTicket]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spSDMergeTicket]')
GO
IF OBJECT_ID(N'dbo.SD_spSDMergeTicket', 'P') IS NULL
EXEC sp_executesql N'create OR ALTER  Proc dbo.SD_spSDMergeTicket  
(  
   @id numeric(26,0)= null  
   ,@DeskRef varchar(50) =NULL  
   
      ,@Ticketref varchar(20)= null output  
    
      ,@sdStageFK numeric(26,0)= null  
      ,@sdStatusFK numeric(26,0)= null  
      
      ,@sdSolutionTypeFK numeric(26,0)= null  
     
      ,@TicketSummary varchar(max)= null  
     ,@AllTicketMerge nvarchar(max)=null  
   ,@TickNotes nvarchar(max)=null  
       
      ,@assigneeType varchar(50)= null  
      ,@assigneePoolFK numeric(26,0)= null  
      ,@assigneeParticipantFK numeric(26,0)= null  
      
      ,@organizationFK numeric(26,0)= null  
     
      ,@solutionNote varchar(max)= null  
     
      ,@previousStageFK numeric(26,0)= null  
     
   ,@UserName nvarchar(100)=null  
   ,@PrimaryTicketref nvarchar(100)=null  
   ,@AssigneName varchar(100)=null  
   ,@TechID numeric(18,0)=null  
   ,@UserID numeric(18,0)=null  
   ,@InsertBy int =NULL  
   ,@InsertDt datetime =NULL  
  ,@UpdateBy int =NULL  
  ,@UpdateDt datetime =NULl  
 ,@MergeNotes  nvarchar(10)=null  
  ,@Option varchar(50)  
   
 )  
 AS  
 BEGIN  
   
 if(@Option=''MergeTicket'')  
 BEGIN  
 ---Stage,DeskrefID,select from bydefaultvalue  
 Declare @PrevStageFK numeric(18,0)=null;  
  Declare @PrevStatusFK numeric(18,0)=null;  
  Declare @StatusFKAsPerStage numeric(18,0)=null;  
  Declare @TicketID numeric(18,0)=null;  
  Declare @EditedBy nvarchar(max)=null;  
  declare @MergeSummary nvarchar(max)=null;  
  declare @MergeDesc nvarchar(max)=null;  
    declare @MergeFinalNote nvarchar(max)=null;  
  set @EditedBy=@UserName;  
  ------------this is prevstatus status  
    set @PrevStageFK=(select sdStageFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
     set @PrevStatusFK=(select sdStatusFK from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  set @DeskRef=(select top 1 ServiceDesk from vSDTicket where TicketNumber=@Ticketref and OrgId=@organizationFK)  
  set @sdStageFK=(select top 1 sd_stageFK from SD_Status where DeskRef=@DeskRef and StatusCodeRef =''Resolved'')  
  set @StatusFKAsPerStage=(select top 1 ID from SD_Status where DeskRef=@DeskRef and StatusCodeRef =''Resolved'')  
  if Exists (select *from SD_Technician where TechLoginName=@UserName)  
  BEGIN   
  Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@UserName)  
  
  END  
   set @MergeDesc=(select top 1 TicketDesc from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  
  set @MergeSummary=(select top 1 TicketSummary from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
  set @MergeFinalNote=Concat(''Summary of Merge Ticket :'','''',@MergeSummary,'''',''Description of Ticket:'',@MergeDesc,''Reason For merging:'',@TickNotes);  
  exec  SD_spAddTicketNotes @Ticketref=@PrimaryTicketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
  
 update  SDIncident  
  
  set    sdStageFK=ISNULL(@sdStageFK,0)  
    ,sdStatusFK=ISNULL(@StatusFKAsPerStage,0)  
       
    ,TickResolvedDt=GETDATE()  
   ,assigneeParticipantFK=@TechID  
  
   ,sdSolutionTypeFK=@sdSolutionTypeFK  
   ,solutionNote=@solutionNote  
     
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
  
  exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
   
   declare @NewStatus nvarchar(100);  
  set @NewStatus=(select status  from vSDTicket where TicketNumber=@Ticketref and OrgID=@organizationFK)  
   if(@NewStatus=''resolved'')  
  BEGIN  
  
     exec SD_Sendmail @TicketNumber=@Ticketref,@Option=''ResolvedTicket'',@OrgId=@organizationFK   
  END  
  update  SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''OpenEnd'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  update SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''WIPStart'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  update SD_CustomFieldTicketValues set FieldValue=getdate() where FieldName =''WIPEnd'' and FieldValue is null and TicketNo=@Ticketref and OrgId=@organizationFK  
  
  
  
   
 END  
 if(@Option=''UpdatePrimaryTicket'')  
 BEGIN  
  
  
  --if Exists (select *from SD_Technician where TechLoginName=@AssigneName)  
  --BEGIN   
  --Set  @TechID =(Select top 1 TechID  from SD_Technician where RefUserID=@UserID and TechLoginName=@UserName)  
  
  --END  
 update  SDIncident  
  
set TicketSummary=@TicketSummary  
--,assigneeParticipantFK=@TechID  
     
   ,EditedBy=@UserName  
  
      where ticketref=@Ticketref and organizationFK =@organizationFK  
  
 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@TickNotes,@EdityBy=@UserName,@Option=''AddNotes'',@organizationFK=@organizationFK  
 if(@MergeNotes=''Yes'')  
 set @TicketID=(select top 1 id from SDIncident where Ticketref=@Ticketref and organizationFK=@organizationFK)  
 insert into SD_TicketNotes (TicketID,Ticketref,EdityBy,EditedDt,NoteDesc,EngineerNote,organizationFK)  
 select @TicketID,@Ticketref,@EditedBy,GETDATE(),NoteDesc,EngineerNote,organizationFK from SD_TicketNotes   where organizationFK=@organizationFK and  Ticketref in (SELECT Item FROM dbo.SplitString(@AllTicketMerge, '',''))  
and  Ticketref!=@Ticketref  
  
  
   
 END  
END   
  '
GO

--
-- Create or alter function [dbo].[udf_StripHTML]
--
GO
PRINT (N'Create or alter function [dbo].[udf_StripHTML]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.udf_StripHTML') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'create OR ALTER FUNCTION dbo.udf_StripHTML

(
@HTMLText varchar(MAX)
)
RETURNS varchar(MAX)
AS
BEGIN
DECLARE @Start  int
DECLARE @End    int
DECLARE @Length int

set @HTMLText = replace(@htmlText, ''<br>'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<br/>'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<br />'',CHAR(13) + CHAR(10))
set @HTMLText = replace(@htmlText, ''<li>'',''- '')
set @HTMLText = replace(@htmlText, ''</li>'',CHAR(13) + CHAR(10))

set @HTMLText = replace(@htmlText, ''&rsquo;'' collate Latin1_General_CS_AS, ''''''''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&quot;'' collate Latin1_General_CS_AS, ''"''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&amp;'' collate Latin1_General_CS_AS, ''&''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&euro;'' collate Latin1_General_CS_AS, ''â¬''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&lt;'' collate Latin1_General_CS_AS, ''<''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&gt;'' collate Latin1_General_CS_AS, ''>''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&oelig;'' collate Latin1_General_CS_AS, ''oe''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&nbsp;'' collate Latin1_General_CS_AS, '' ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&copy;'' collate Latin1_General_CS_AS, ''Â©''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&laquo;'' collate Latin1_General_CS_AS, ''Â«''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&reg;'' collate Latin1_General_CS_AS, ''Â®''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&plusmn;'' collate Latin1_General_CS_AS, ''Â±''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&sup2;'' collate Latin1_General_CS_AS, ''Â²''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&sup3;'' collate Latin1_General_CS_AS, ''Â³''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&micro;'' collate Latin1_General_CS_AS, ''Âµ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&middot;'' collate Latin1_General_CS_AS, ''Â·''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ordm;'' collate Latin1_General_CS_AS, ''Âº''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&raquo;'' collate Latin1_General_CS_AS, ''Â»''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac14;'' collate Latin1_General_CS_AS, ''Â¼''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac12;'' collate Latin1_General_CS_AS, ''Â½''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&frac34;'' collate Latin1_General_CS_AS, ''Â¾''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Aelig'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ccedil;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Egrave;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Eacute;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ecirc;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&Ouml;'' collate Latin1_General_CS_AS, ''Ã''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&agrave;'' collate Latin1_General_CS_AS, ''Ã ''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&acirc;'' collate Latin1_General_CS_AS, ''Ã¢''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&auml;'' collate Latin1_General_CS_AS, ''Ã¤''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&aelig;'' collate Latin1_General_CS_AS, ''Ã¦''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ccedil;'' collate Latin1_General_CS_AS, ''Ã§''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&egrave;'' collate Latin1_General_CS_AS, ''Ã¨''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&eacute;'' collate Latin1_General_CS_AS, ''Ã©''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ecirc;'' collate Latin1_General_CS_AS, ''Ãª''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&euml;'' collate Latin1_General_CS_AS, ''Ã«''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&icirc;'' collate Latin1_General_CS_AS, ''Ã®''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ocirc;'' collate Latin1_General_CS_AS, ''Ã´''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ouml;'' collate Latin1_General_CS_AS, ''Ã¶''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&divide;'' collate Latin1_General_CS_AS, ''Ã·''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&oslash;'' collate Latin1_General_CS_AS, ''Ã¸''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ugrave;'' collate Latin1_General_CS_AS, ''Ã¹''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&uacute;'' collate Latin1_General_CS_AS, ''Ãº''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&ucirc;'' collate Latin1_General_CS_AS, ''Ã»''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&uuml;'' collate Latin1_General_CS_AS, ''Ã¼''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&quot;'' collate Latin1_General_CS_AS, ''"''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&amp;'' collate Latin1_General_CS_AS, ''&''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&lsaquo;'' collate Latin1_General_CS_AS, ''<''  collate Latin1_General_CS_AS)
set @HTMLText = replace(@htmlText, ''&rsaquo;'' collate Latin1_General_CS_AS, ''>''  collate Latin1_General_CS_AS)


-- Remove anything between <STYLE> tags
SET @Start = CHARINDEX(''<STYLE'', @HTMLText)
SET @End = CHARINDEX(''</STYLE>'', @HTMLText, CHARINDEX(''<'', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '''')
SET @Start = CHARINDEX(''<STYLE'', @HTMLText)
SET @End = CHARINDEX(''</STYLE>'', @HTMLText, CHARINDEX(''</STYLE>'', @HTMLText)) + 7
SET @Length = (@End - @Start) + 1
END

-- Remove anything between <whatever> tags
SET @Start = CHARINDEX(''<'', @HTMLText)
SET @End = CHARINDEX(''>'', @HTMLText, CHARINDEX(''<'', @HTMLText))
SET @Length = (@End - @Start) + 1

WHILE (@Start > 0 AND @End > 0 AND @Length > 0) BEGIN
SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '''')
SET @Start = CHARINDEX(''<'', @HTMLText)
SET @End = CHARINDEX(''>'', @HTMLText, CHARINDEX(''<'', @HTMLText))
SET @Length = (@End - @Start) + 1
END

RETURN LTRIM(RTRIM(@HTMLText))

END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsDataIMSPL]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsDataIMSPL]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsDataIMSPL', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsDataIMSPL          
  (          
  @From datetime ,          
  @To datetime,          
  @OrgID numeric(18,0),      
  @Deskref varchar(50)      
  )          
            
  AS          
  BEGIN          
          
           
select  ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,max(a.Status) Status,max(a.Priority) Priority,  
max(a.Severity) Severity,max(Location) ''Location (Call registered by Team from Location)'',          
max(CONVERT(VARCHAR(19), CreationDate, 120))  ''Call Registration Date Time (A)'',          
max((CONVERT(VARCHAR(10), CreationDate, 23))) ''Call Registration Date  (A>a)'',          
          
max(SubmitterName) ''Complaint By (User Name)'',          
max(Department) ''Complaint By Dept.'',max(Summary) ''Problem Desc.'',          
max(a.Category) ''Problem Type'',          
max(a.Resolution) ''Solution Type''          
,max(dbo.udf_StripHTML(solutionNote)) ''Solution Description'',          
max(a.Category) ''Problem'', max(SourceType) ''Call Registration Flag (With / Without Mail)'',          
    max(CONVERT(VARCHAR(19), FieldValue, 120)) ''Call Attend time ("B")'',          
 max(CONVERT(VARCHAR(19), ResolutionDt, 120)) ''Solution Given Time ("C")'',          
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',          
max(dbo.GetDateDifference(CreationDate,ResolutionDt)) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',          
          
max(dbo.GetTicketResolutionTime_new(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID)) ''Time Taken to Resolve The Problem ("C" - "A") With SLA'',          
max(a.TechLoginName) as ''Engineer'',          
max(ResolutionSLA ) ResolutionSLA,        
max(a.SubmitterEmail )   SubmitterEmail    
from vSDTicket a          
left join SD_CustomFieldTicketValues b          
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId          
left join SD_vResolutionSLA c          
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId          
left join  vSDOrgDeskDef dd          
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk          
where            
--FieldName=''WIPStart''and       
(CreationDate >=@From and CreationDate <= @To)          
and a.OrgId=@OrgID   
and a. ServiceDesk = case when isnull(@Deskref,''----All----'')=''----All----'' then a. ServiceDesk else @Deskref end      
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)          
 group by a.TicketNumber         
          
  END         
          
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
          
          '
GO

--
-- Create or alter view [dbo].[SD_MonthlyDataReport]
--
GO
PRINT (N'Create or alter view [dbo].[SD_MonthlyDataReport]')
GO
IF OBJECT_ID(N'dbo.SD_MonthlyDataReport', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.SD_MonthlyDataReport as
(
select ROW_NUMBER() over (order by TicketNumber desc) ''S No.'',TicketNumber,Location ''Location (Call registered by Team from Location)'',
CreationDate ''Call Registration Date Time (A)'',SubmitterName ''Complaint By (User Name)'',
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',
Category ''Problem Type'',
Resolution ''Solution Type''
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',
Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',
FieldValue ''Call Attend time ("B")'',
ResolutionDt ''Solution Given Time ("C")'',
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',
dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A")'',
a.TechLoginName as ''Engineer''



from vSDTicket a inner join SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
where (Status=''Resolved'' or Status=''Closed'') and FieldName=''WIPStart''
and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)

)

'
GO

--
-- Create or alter procedure [dbo].[SD_DepartmentwiseCall]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_DepartmentwiseCall]')
GO
IF OBJECT_ID(N'dbo.SD_DepartmentwiseCall', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo.SD_DepartmentwiseCall

(
@PageIndex Int =1,
@PageSize int =5,
@FieldName varchar(50)=null,
@FieldValue nvarchar(100)=null,
@ID nvarchar(100)=null,
@Option varchar(50)=null

)
AS 
SET NOCOUNT ON
BEGIN

select * from SD_MonthlyDataReport order by TicketNumber desc

DECLARE 
			@ColumnsList1 AS NVARCHAR(MAX),
			@ColumnsList2 AS NVARCHAR(MAX),
			@ColumnsList3 AS NVARCHAR(MAX),
			@query AS NVARCHAR(MAX);

		SET @ColumnsList1 = STUFF(
			(SELECT distinct '','' + QUOTENAME([Problem Type]) FROM SD_MonthlyDataReport FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)'') 
			,1,1,'''')
		PRINT @ColumnsList1
		SET @ColumnsList2 = REPLACE (@ColumnsList1, '','',''+'')
		PRINT @ColumnsList2
		SET @ColumnsList3 = (SELECT distinct '',SUM(ISNULL('' + QUOTENAME([Problem Type]) + '', 0)) as '' + QUOTENAME([Problem Type]) FROM SD_MonthlyDataReport FOR XML PATH(''''), TYPE).value(''.'', ''NVARCHAR(MAX)'')
		PRINT @ColumnsList3

		SET @query = ''
		;With MyCTE as(
		select [Complaint By Dept.],''+@ColumnsList1+'',''+@ColumnsList2+'' AS Grand_Total
		from (
			 SELECT Count(TicketNumber) as Total,[Complaint By Dept.],[Problem Type] from [dbo].[SD_MonthlyDataReport] w 
			 where [Complaint By Dept.]!=''''0''''
			 group by [Complaint By Dept.],[Problem Type]
		) src
		pivot
		(
		  MAX(Total)
		  for [Problem Type] in (''+@ColumnsList1+'')
		) piv
		)
		select ISNULL([Complaint By Dept.],''''Total'''') as Name ''+@ColumnsList3+''
		from MyCTE
		GROUP BY ROLLUP ([Complaint By Dept.])''
		execute(@query)
END
'
GO

--
-- Create or alter view [dbo].[SD_CustomizedAllTicketsData]
--
GO
PRINT (N'Create or alter view [dbo].[SD_CustomizedAllTicketsData]')
GO
IF OBJECT_ID(N'dbo.SD_CustomizedAllTicketsData', 'V') IS NULL
EXEC sp_executesql N'CREATE OR ALTER view dbo.SD_CustomizedAllTicketsData as
(
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,Status,Priority,Severity,Location ''Location (Call registered by Team from Location)'',
CreationDate ''Call Registration Date Time (A)'',SubmitterName ''Complaint By (User Name)'',
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',
Category ''Problem Type'',
Resolution ''Solution Type''
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',
Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',
FieldValue ''Call Attend time ("B")'',
ResolutionDt ''Solution Given Time ("C")'',
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',
dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A")'',


a.TechLoginName as ''Engineer'',
ResolutionSLA



from vSDTicket a inner join SD_CustomFieldTicketValues b
on a.TicketNumber=b.TicketNo
inner join SD_vResolutionSLA c
on a.TicketNumber=c.TicketNumber
and b.OrgId=c.OrgID
where 
FieldName=''WIPStart''
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)

)'
GO

--
-- Create or alter function [dbo].[ConvertMintoDayHourMinSec]
--
GO
PRINT (N'Create or alter function [dbo].[ConvertMintoDayHourMinSec]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.ConvertMintoDayHourMinSec') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'
CREATE OR ALTER FUNCTION dbo.ConvertMintoDayHourMinSec (
   @TotalResolutionMinutes int
)
RETURNS NVARCHAR(100)
AS
BEGIN
 declare @ResolutionTime  nvarchar(100);

--DECLARE @Days INT = @TotalResolutionMinutes / (60 * 24)
DECLARE @Hours INT = (@TotalResolutionMinutes % (60 * 24)) / 60
DECLARE @Minutes INT = @TotalResolutionMinutes % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
 --   CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE '' 0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE '' 0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)

return @ResolutionTime
END
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData_Old]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData_Old]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsData_Old', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsData_Old    
  (    
  @From datetime ,    
  @To datetime,    
  @OrgID numeric(18,0)    
  )    
      
  AS    
  BEGIN    
    
     
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,a.Status,a.Priority,a.Severity,Location ''Location (Call registered by Team from Location)'',    
CONVERT(VARCHAR(19), CreationDate, 120)  ''Call Registration Date Time (A)'',    
CONVERT(VARCHAR(10), CreationDate, 23) ''Call Registration Date  (A>a)'',    
    
SubmitterName ''Complaint By (User Name)'',    
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',    
a.Category ''Problem Type'',    
a.Resolution ''Solution Type''    
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',    
a.Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',    
    CONVERT(VARCHAR(19), FieldValue, 120) ''Call Attend time ("B")'',    
 CONVERT(VARCHAR(19), ResolutionDt, 120) ''Solution Given Time ("C")'',    
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',    
--dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',    
dbo.ResolTimeBuisne(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) ''Time Taken to Resolve The Problem (C - A) With SLA'',    
dbo.ResolTimeBuisne(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) ''Total Hold Time With SLA'',    
    
    
[dbo].[ConvertMintoDayHourMinSec](    
cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) as int)    
- Cast(dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) as int)     
 )''Time Taken to Resolve The Problem (C - A) With SLA - HoldTime'',    
a.TechLoginName as ''Engineer'',    
ResolutionSLA  ,  
a.SubmitterEmail  
from vSDTicket a    
inner join SD_CustomFieldTicketValues b    
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId    
inner join SD_vResolutionSLA c    
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId    
inner join  vSDOrgDeskDef dd    
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk    
left join  SD_vGetTotalHoldDuration ho    
on ho.TicketNo=a.TicketNumber and ho.OrgId=a.OrgId    
    
    
where     
FieldName=''WIPStart''    
and  (CreationDate >=@From and CreationDate <= @To) and a.OrgId=@OrgID    
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)    
    
    
  END    
    
      
       
'
GO

--
-- Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spCustomizedAllTicketsData]')
GO
IF OBJECT_ID(N'dbo.SD_spCustomizedAllTicketsData', 'P') IS NULL
EXEC sp_executesql N'--exec SD_spCustomizedAllTicketsData @From=''2024-08-01'',@To=''2024-08-30'',@OrgID=''680624893''  ,@Deskref=''----All----''



 CREATE OR ALTER PROC dbo.SD_spCustomizedAllTicketsData        
  (        
  @From datetime ,        
  @To datetime,        
  @OrgID numeric(18,0) ,  
  @Deskref varchar(50)       
  )        
          
  AS        
  BEGIN        
        
         
select ROW_NUMBER() over (order by a.TicketNumber desc) ''S No.'',a.TicketNumber,a.Status,a.Priority,a.Severity,Location ''Location (Call registered by Team from Location)'',        
CONVERT(VARCHAR(19), CreationDate, 120)  ''Call Registration Date Time (A)'',        
CONVERT(VARCHAR(10), CreationDate, 23) ''Call Registration Date  (A>a)'',        
        
SubmitterName ''Complaint By (User Name)'',        
Department ''Complaint By Dept.'',Summary ''Problem Desc.'',        
a.Category ''Problem Type'',        
a.Resolution ''Solution Type''        
,dbo.udf_StripHTML(solutionNote) ''Solution Description'',        
a.Category ''Problem'',SourceType ''Call Registration Flag (With / Without Mail)'',        
    CONVERT(VARCHAR(19), FieldValue, 120) ''Call Attend time ("B")'',        
 CONVERT(VARCHAR(19), ResolutionDt, 120) ''Solution Given Time ("C")'',        
--CONVERT(varchar(12), DATEADD(minute, DATEDIFF(minute, CreationDate, ResolutionDt), 0), 114) ''Time Taken to Resolve The Problem ("C" - "A")'',        
--dbo.GetDateDifference(CreationDate,ResolutionDt) ''Time Taken to Resolve The Problem ("C" - "A") Without SLA'',        
dbo.ResolTimeBuisne(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) ''Time Taken to Resolve The Problem (C - A) With SLA'',        
dbo.ResolTimeBuisne(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) ''Total Hold Time With SLA'',        
        
        
[dbo].[ConvertMintoDayHourMinSec](        
cast(dbo.ResolTimeBuisneInMin(CreationDate,ResolutionDt,BeginHour,EndHour,DaysCovered,@OrgID) as int)        
- Cast(dbo.ResolTimeBuisneInMin(HoldStart,HoldEnd,BeginHour,EndHour,DaysCovered,@OrgID) as int)         
 )''Time Taken to Resolve The Problem (C - A) With SLA - HoldTime'',        
a.TechLoginName as ''Engineer'',        
ResolutionSLA  ,      
a.SubmitterEmail      
from vSDTicket a        
left join SD_CustomFieldTicketValues b        
on a.TicketNumber=b.TicketNo and a.OrgId=b.OrgId        
left join SD_vResolutionSLA c        
on a.TicketNumber=c.TicketNumber and c.OrgId=a.OrgId        
left join  vSDOrgDeskDef dd        
on a.ServiceDesk=dd.Deskref and a.OrgId=dd.OrgFk        
left join  SD_vGetTotalHoldDuration ho        
on ho.TicketNo=a.TicketNumber and ho.OrgId=a.OrgId        
        
        
where         
--FieldName=''WIPStart''   and   
(CreationDate >=@From and CreationDate <= @To) and a.OrgId=@OrgID    
and a.ServiceDesk=CASE WHEN ISNULL(@Deskref,''----All----'')=''----All----'' then a.ServiceDesk else @Deskref end  
--and month(DATEADD(MONTH,-1,GETDATE()))=MONTH(CreationDate)        
        
        
  END 

  '
GO

--
-- Create or alter procedure [dbo].[SDsp_TicketDetails]
--
GO
PRINT (N'Create or alter procedure [dbo].[SDsp_TicketDetails]')
GO
IF OBJECT_ID(N'dbo.SDsp_TicketDetails', 'P') IS NULL
EXEC sp_executesql N'    
    
  CREATE OR ALTER PROC dbo.SDsp_TicketDetails    
  (    @Scope varchar(50)=null,    
   @From datetime=null,    
   @ServiceDesk nvarchar(200)=null,    
   @To datetime=null,    
   @Category varchar(100)=null,    
   @Organization varchar(100)=null,    
     @OrgId numeric(18,0)=null,    
   @Option varchar(50)    
  )    
  AS    
  BEGIN    
     --if(@Option=''OrgSLA'')    
     --BEGIN    
    
     --select CustomerName ''Customer Name'',ContractType ''Contract Type'',    
     --DBCategory ''DB Category'',CustomerEmail ''Customer Email'',ResponseS1,ResponseS2,ResponseS3,ResponseS4,    
     --ResolutionS1,ResolutionS2,ResolutionS3,ResolutionS4    
     --from pcv_SLA a      
     --    WHERE   (o.ScopeName =@Scope)     
    
     --END    
    
         
     --if(@Option=''OrgCategoryDetails'')    
     --BEGIN    
    
     --SELECT distinct   v.ServiceDesk as ''Service Desk'',    
     --   v.TicketNumber as ''Ticket Number'',    
     --   v.Summary,     
     --   v.Status,    
     --   v.Severity,    
     --   v.Category,    
     --   v.SubmitterName ''Submitter Name'',    
     --   v.SubmitterEmail ''Submitter Email'',    
     --   v.Assignee,     
     --   v.Organization,    
     --    v.Created,    
     --   v.Closed,    
     --   String2 as [Sub Status], String9 as [Contract Type], String1 as [Engineer Name], String8 as [System Serial Number],    
     --   String19 as [User Name], String11 as [Customer Email], String24 as [Request Type],String40 as [GSD Agent],String3 as [Hold Reason]    
     --   FROM ksd.CustomFieldsValues AS c     
     --   INNER JOIN kasadmin.vSDTicket AS v ON c.Id = v.Id          
     --   INNER JOIN kasadmin.org o ON v.Organization=o.orgName    
     --   INNER JOIN [CP_UserScope] s ON o.id=s.Org_id    
     --   where ServiceDesk=''Incident'' and s.ScopeName=@Scope    
     --   and Category like @Category+''%''     
     --      order by TicketNumber asc    
     --END    
    
     if(@Option=''OrgTicketsDateWise'')    
     BEGIN    
     --select * from SD_CustomizedAllTicketsData      
    
     --where CONVERT(varchar(10),[Call Registration Date Time (A)],120)>=@From and CONVERT(varchar(10),[Call Registration Date Time (A)],120)<=@To     
         
     if(@OrgId=''523843837'')    
     BEGIN    
     exec SD_spCustomizedAllTicketsData @From=@From,@To=@To,@OrgID=@OrgId  ,@Deskref=@ServiceDesk  
            END    
      else     
      BEGIN     
      exec SD_spCustomizedAllTicketsDataIMSPL @From=@From,@To=@To,@OrgID=@OrgId ,@Deskref=@ServiceDesk  
      END    
    
     END    
        
--     if(@Option=''OrgSurvey'')    
--     BEGIN    
    
--      SELECT *    
--    FROM    
--    (    
--                    SELECT        [Ticket ID], Summary, Organization, Submitter, Assignee,String1 as [Engineer Name],[GSD Agent], Question, Answer,[Date Time]    
--FROM            (         
--                                   SELECT DISTINCT     
--                                                    String1,String40 as [GSD Agent],pcv_FeedAnswers.TicketID AS ''Ticket ID'', a.Summary, a.Organization, a.SubmitterName AS ''Submitter'',a.Assignee,     
--                                                    q.QuestionId, q.Question, pcv_FeedAnswers.Answer, FORMAT(pcv_FeedAnswers.Date_Time, ''yyyy-MM-dd'') AS ''Date Time''    
--                          FROM            pcv_FeedAnswers INNER JOIN    
          
--                                                    pcv_FeedQuestions q ON pcv_FeedAnswers.QuestionId = q.QuestionId INNER JOIN    
--                                                    kasadmin.vSDTicket a ON pcv_FeedAnswers.TicketID = a.TicketNumber    
--               INNER JOIN ksd.CustomFieldsValues v on a.id=v.Id     
--               INNER JOIN kasadmin.org o ON a.Organization=o.orgName    
--               INNER JOIN [CP_UserScope] s ON o.id=s.Org_id    
--              where ServiceDesk=''Incident'' and s.ScopeName=@Scope    
--                          AND (q.Status = ''Active'')      
            
--        AND pcv_FeedAnswers.Date_Time >= @From and pcv_FeedAnswers.Date_Time <=@To ) AS DASHBOARD    
                       
    
--      ) AS SourceTable    
--    PIVOT    
--    (    
--     Max(Answer)    
--     FOR Question IN (    
--      [How do you rate our responsiveness over Phone/E-mail dealing with you?]    
--     ,[How do you rate our technical competence of engineer and their interaction with you?]    
--     ,[How do you rate our products and services, and did they meet your needs and delivery expectations?]    
--     )    
--    ) AS PivotTable   order by [Date Time] desc    
    
--     END    
  END    
    
    '
GO

--
-- Create or alter procedure [dbo].[_sp_GetCustomFieldValue]
--
GO
PRINT (N'Create or alter procedure [dbo].[_sp_GetCustomFieldValue]')
GO
IF OBJECT_ID(N'dbo._sp_GetCustomFieldValue', 'P') IS NULL
EXEC sp_executesql N'
CREATE OR ALTER Procedure dbo._sp_GetCustomFieldValue

(
@PageIndex Int =1,
@PageSize int =5,
@FieldName varchar(50)=null,
@FieldValue nvarchar(100)=null,
@ID nvarchar(100)=null,
@Option varchar(50)=null

)
AS 
SET NOCOUNT ON
BEGIN
if(@Option=''GetCustomFieldValue'')


BEGIN
Declare @ColumnName varchar(100);
Declare @str nvarchar(max);
set @ColumnName=@FieldName;
set @str=''select ID, ''+@ColumnName+'' as ''''FieldValue'''' from SD_CustomFieldValues where ''+@ColumnName+'' is not null  '';
exec(@str);
END
if(@Option=''DeleteCustomFieldValue'')


BEGIN
Declare @ColumnNamedel varchar(100);
Declare @ColumnNamedelval varchar(100);
Declare @strdel nvarchar(max);
set @ColumnNamedel=@FieldName;
set @ColumnNamedelval=@FieldValue;
set @strdel=''update  SD_CustomFieldValues set ''+@ColumnNamedel+''=null where ''+@ColumnNamedel+''=''''''+@ColumnNamedelval+'''''' and id=''''''+@ID+'''''' '';
exec(@strdel);
END

if(@Option=''updateCustomFieldValue'')


BEGIN
Declare @ColumnNameupdt varchar(100);
Declare @ColumnNameupdtval varchar(100);
Declare @strUpdt nvarchar(max);
set @ColumnNameupdt=@FieldName;
set @ColumnNameupdtval=@FieldValue;
set @strUpdt=''update  SD_CustomFieldValues set ''+@ColumnNameupdt+''=''''''+@ColumnNameupdtval+'''''' where  id=''''''+@ID+'''''' '';
exec(@strUpdt);
END

END
'
GO

--
-- Create or alter procedure [dbo].[VSA_spSelfServiceProcedures]
--
GO
PRINT (N'Create or alter procedure [dbo].[VSA_spSelfServiceProcedures]')
GO
IF OBJECT_ID(N'dbo.VSA_spSelfServiceProcedures', 'P') IS NULL
EXEC sp_executesql N'
 

CREATE OR ALTER PROC dbo.VSA_spSelfServiceProcedures
        (
                @ID int =null ,
                @scriptId int = NULL,
                @scriptName varchar(260)= NULL,
                @departmentName varchar(260)= NULL,
                @agentGuid numeric(26,0)= NULL,
                @UserName varchar(500) = NULL,
                @FirstSchool varchar(500) = NULL,
                @BornCity varchar(500) = NULL,
                @ChildhoodPet varchar(500) = NULL,
                @ChildhoodBestFriend varchar(500) = NULL,
                @FirstEmployer varchar(500) = NULL,
                @FirstCarMake varchar(500) = NULL,
                @GrandmothersFirstname varchar(500) = NULL,
                @ChildStreet varchar(500) = NULL,
                @Password varchar(100)=null,
                @ChangedBy varchar(100)=null,
                @EncryptedPassword varchar(100)=null,
                @InsertedBy int= NULL,
                @UpdateBy int= NULL,
                @SerialNo varchar(100)=null,
                @UpdatedSerialNo varchar(100)=null,
                @Remarks varchar(max)=null,
                @ActionType varchar(20)=null,
                @InsertBy varchar(500)= NULL,
                @tempStr  varchar(500)= NULL,
				@Category  varchar(100)= NULL,
                @Option varchar(50) 
        )
        AS
        BEGIN
                if(@Option=''MachineDetails'')
                BEGIN
                        select ComputerName,SysSerialNumber,IpAddress,groupName,''IT'' as Department,a.agentGuid from ksubscribers.dbo.vmachine a-- join VMachCustFields b on a.agentGuid=b.agentGuid
                        where a.agentGuid=@agentGuid
                END
        END
        BEGIN
                if(@Option=''MyProcedures'')
                BEGIN
                        select distinct scriptName,scriptId from ksubscribers.dbo.pcv_SelfServiceProcedures where Category=@Category
						and OrgID=(select OrgID from ksubscribers.dbo.DenormalizedOrgToMach where AgentGuid=@agentGuid)  order by scriptName asc
                END
				 if(@Option=''AllProcedures'')
                BEGIN
                        select distinct Category from ksubscribers.dbo.pcv_SelfServiceProcedures where  OrgID=(select OrgID from ksubscribers.dbo.DenormalizedOrgToMach where AgentGuid=@AgentGuid)  
                END
 

                if(@Option=''MatchAnswers'')
                BEGIN
                        select * from pcv_SelfServiceUserDetails where UserName=@UserName  
                END

 

                if(@Option=''RegisterSecurityAns'')
                BEGIN
                IF EXISTS(SELECT * FROM pcv_SelfServiceUserDetails WHERE UserName = @UserName)
                    BEGIN
                        SET @tempStr=''Error:  There is already an Emp with an id of: '' + @UserName
                        RAISERROR (@tempStr, 11, 1)
                    END
                    ELSE
                    BEGIN
                        INSERT INTO pcv_SelfServiceUserDetails
                         (UserName, FirstSchool, BornCity, ChildhoodPet, ChildhoodBestFriend, FirstEmployer, FirstCarMake, GrandmothersFirstname, ChildStreet, InsertDt, InsertBy) 
                  VALUES (@UserName, @FirstSchool, @BornCity, @ChildhoodPet, @ChildhoodBestFriend, @FirstEmployer, @FirstCarMake, @GrandmothersFirstname, @ChildStreet, GETDATE(), @InsertBy)

 

                  INSERT INTO pcv_SelfServiceUserDetailsback
                         (UserName, FirstSchool, BornCity, ChildhoodPet, ChildhoodBestFriend, FirstEmployer, FirstCarMake, GrandmothersFirstname, ChildStreet, InsertDt, InsertBy) 
                  VALUES (@UserName, @FirstSchool, @BornCity, @ChildhoodPet, @ChildhoodBestFriend, @FirstEmployer, @FirstCarMake, @GrandmothersFirstname, @ChildStreet, GETDATE(), @InsertBy)
                   END

 

                END
        END

 

        BEGIN
                if(@Option=''RegisteredUserDetails'')
                BEGIN
                        SELECT ID,[UserName]     
      ,[InsertDt]
      ,[InsertBy]
  FROM [ksubscribers].[dbo].[pcv_SelfServiceUserDetails] order by InsertDt desc
                END

 

                if(@Option=''ChangePasswordLogs'')
                begin
                   INSERT INTO pcv_changepasswordlogs(UserName,ChangedBy,ChangeDate) values (@UserName,@ChangedBy,GETDATE())
                end

 

                if(@Option=''AssetUpdateDeleteLogs'')
                begin
                   INSERT INTO AMS_UpdateDeleteLogs(SerialNo,Remarks,ActionType,ActionDoneBy,ActionDateTime,UpdatedSerialNo) 
                   values (@SerialNo,@Remarks,@ActionType,@ChangedBy,GETDATE(),@UpdatedSerialNo)
                end

 

                if(@Option=''PasswordLogs'')
                begin
                  select * from pcv_changepasswordlogs order by ChangeDate desc 
                end

 

                if(@Option=''InsertPassword'')
                begin
                   INSERT INTO AMS_password([Password],EncryptedPassword,Insertby,Insertdt) values (@Password,@EncryptedPassword,@InsertedBy,GETDATE())
                end

 

                if(@Option=''UpdatePassword'')
                begin
                   update AMS_password set [Password]=@Password,EncryptedPassword=@EncryptedPassword,Updateby=@Updateby,Updatedt=GETDATE()
                   where ID=@ID
                end
        END

'
GO

--
-- Create or alter procedure [dbo].[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]
--
GO
PRINT (N'Create or alter procedure [dbo].[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]')
GO
IF OBJECT_ID(N'dbo.[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.[SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9] AS BEGIN BEGIN TRANSACTION; RECEIVE TOP(0) conversation_handle FROM [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; IF (SELECT COUNT(*) FROM [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9] WHERE message_type_name = ''http://schemas.microsoft.com/SQL/ServiceBroker/DialogTimer'') > 0 BEGIN if ((SELECT COUNT(*) FROM sys.services WHERE name = ''SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9'') > 0)   DROP SERVICE [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; if (OBJECT_ID(''SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9'', ''SQ'') IS NOT NULL)   DROP QUEUE [SqlQueryNotificationService-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; DROP PROCEDURE [SqlQueryNotificationStoredProcedure-e5dd07d8-1e09-4369-a7fe-719d7d7d25d9]; END COMMIT TRANSACTION; END
'
GO

--
-- Create or alter procedure [dbo].[SD_spOrgTicketFilter]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_spOrgTicketFilter]')
GO
IF OBJECT_ID(N'dbo.SD_spOrgTicketFilter', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_spOrgTicketFilter
(
    @From DATETIME = NULL,
    @To DATETIME = NULL,
    @OrgID NVARCHAR(200) = NULL,
    @Scope NVARCHAR(200) = NULL,
    @ServiceDesk NVARCHAR(200) = NULL,
    @query NVARCHAR(MAX) = NULL,
    @ColumnName NVARCHAR(300) = NULL,
    @SearchItem NVARCHAR(300) = NULL,
    @Option NVARCHAR(200)
)
AS
BEGIN
    IF (@Option = ''OrgTicketsFilter'')
    BEGIN
        SET @query = ''
        SELECT 
            ROW_NUMBER() OVER (ORDER BY MAX(a.TicketNumber) DESC) AS [S No.],
            MAX(a.ServiceDesk) AS [ServiceDesk],
            MAX(a.TicketNumber) AS [TicketNumber],
            MAX(a.Status) AS [Status],
            MAX(a.Priority) AS [Priority],
            MAX(a.Severity) AS [Severity],
            MAX(a.Location) AS [Location (Call registered by Team from Location)],
            MAX(CONVERT(VARCHAR(19), a.CreationDate, 120)) AS [Call Registration Date Time (A)],
            MAX(CONVERT(VARCHAR(10), a.CreationDate, 23)) AS [Call Registration Date (A>a)],
            MAX(a.SubmitterName) AS [Complaint By (User Name)],
            MAX(a.Department) AS [Complaint By Dept.],
            a.Summary AS [Problem Desc.],
            MAX(a.Category) AS [Problem Type],
            MAX(a.Resolution) AS [Solution Type],
            MAX(dbo.udf_StripHTML(a.solutionNote)) AS [Solution Description],
            MAX(a.Category) AS [Problem],
            MAX(a.SourceType) AS [Call Registration Flag (With / Without Mail)],
            MAX(CONVERT(VARCHAR(19), b.FieldValue, 120)) AS [Call Attend time (B)],
            MAX(CONVERT(VARCHAR(19), a.ResolutionDt, 120)) AS [Solution Given Time (C)],
            MAX(dbo.GetDateDifference(a.CreationDate, a.ResolutionDt)) AS [Time Taken to Resolve The Problem (C - A) Without SLA],
            MAX(dbo.GetTicketResolutionTime_HIREL(
                ho.HoldStart, ho.HoldEnd, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + ''''''
            )) AS [Total Hold Time With SLA],
            MAX(dbo.GetTicketResolutionTime_HIREL(
                a.CreationDate, a.ResolutionDt, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + ''''''
            )) AS [Time Taken to Resolve The Problem (C - A) With SLA],
            MAX([dbo].[ConvertMintoDayHourMinSec](
                CAST(dbo.GetTicketResolutionTime_HIREL_IN_Min(a.CreationDate, a.ResolutionDt, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + '''''') AS INT) -
                CAST(dbo.GetTicketResolutionTime_HIREL_IN_Min(ho.HoldStart, ho.HoldEnd, dd.BeginHour, dd.EndHour, dd.DaysCovered, '''''' + @OrgID + '''''') AS INT)
            )) AS [Time Taken to Resolve The Problem (C - A) With SLA - HoldTime],
            MAX(a.TechLoginName) AS [Engineer],
            MAX(c.ResolutionSLA) AS [Resolution SLA]
        FROM vSD_Tickets a WITH(NOLOCK)
        LEFT JOIN SD_CustomFieldTicketValues b  WITH(NOLOCK)
            ON a.TicketNumber = b.TicketNo AND a.OrgId = b.OrgId
        LEFT JOIN SD_vResolutionSLA c  WITH(NOLOCK)
            ON a.TicketNumber = c.TicketNumber AND c.OrgId = b.OrgId
        LEFT JOIN vSDOrgDeskDef dd  WITH(NOLOCK)
            ON a.ServiceDesk = dd.Deskref AND a.OrgId = dd.OrgFk
        LEFT JOIN SD_vGetTotalHoldDuration ho  WITH(NOLOCK)
            ON ho.TicketNo = a.TicketNumber AND ho.OrgId = a.OrgId
        WHERE 
            b.FieldName = ''''WIPStart''''
            AND a.ServiceDesk = '''''' + @ServiceDesk + ''''''
            AND a.OrgId = '''''' + @OrgID + ''''''
            AND a.'' + @ColumnName + '' LIKE ''''%'' + @SearchItem + ''%''''
        GROUP BY 
            a.TicketNumber,a.Summary;
        ''

        EXEC sp_executesql @query;
    END
END


'
GO

--
-- Create or alter procedure [dbo].[SD_FilterDataInc]
--
GO
PRINT (N'Create or alter procedure [dbo].[SD_FilterDataInc]')
GO
IF OBJECT_ID(N'dbo.SD_FilterDataInc', 'P') IS NULL
EXEC sp_executesql N'CREATE OR ALTER PROCEDURE dbo.SD_FilterDataInc  
(  
    @ColumnName VARCHAR(100) = NULL,  
    @SearchItem VARCHAR(100) = NULL,  
    @DeskRef VARCHAR(100) = NULL,  
    @OrgID NVARCHAR(100) = NULL,  
    @query NVARCHAR(MAX) = NULL,  
    @serialno NVARCHAR(50) = NULL,  
    @Status NVARCHAR(100) = NULL,  
    @Option VARCHAR(50)  
)  
AS  
BEGIN  
    DECLARE @baseQuery NVARCHAR(MAX) = ''SELECT distinct * FROM vSD_Tickets
        WHERE (DATEDIFF(day, ClosedDate, GETDATE()) <= 20 OR ClosedDate IS NULL)
        AND OrgID = @OrgID AND ServiceDesk = @DeskRef '';

    -- Determine the query based on @Option value
    IF (@Option = ''Inventory'')  
    BEGIN  
        SET @query = @baseQuery + '' AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''Inventoryex'')  
    BEGIN  
        SET @query = @baseQuery + '' AND Status = @Status AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''TechOverDue'')  
    BEGIN  
        SET @query = @baseQuery + '' AND DATEDIFF(MINUTE, DueDate, GETDATE()) > 0 AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''TechDueSoon'')  
    BEGIN  
        SET @query = @baseQuery + '' AND DATEDIFF(MINUTE, DueDate, GETDATE()) < 5 AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END  
    ELSE IF (@Option = ''NoTech'')  
    BEGIN  
        SET @query = @baseQuery + '' AND TechLoginName IS NULL AND '' +
        CASE   
            WHEN @ColumnName IN (''ClosedDate'', ''CreationDate'')   
                THEN ''CAST('' + QUOTENAME(@ColumnName) + '' AS DATE) = CAST(@SearchItem AS DATE)''   
            ELSE QUOTENAME(@ColumnName) + '' LIKE ''''%'''' + @SearchItem + ''''%''''''  
        END + '' ORDER BY CreationDate DESC'';
    END 

    IF (@query IS NOT NULL AND @query != '''')  
    BEGIN  
        EXEC sp_executesql @query, 
            N''@OrgID NVARCHAR(100), @DeskRef VARCHAR(100), @SearchItem VARCHAR(100), @Status NVARCHAR(100)'', 
            @OrgID = @OrgID, 
            @DeskRef = @DeskRef, 
            @SearchItem = @SearchItem, 
            @Status = @Status;
    END  
    ELSE  
    BEGIN  
        RAISERROR(''Invalid Search'', 16, 1);  
        RETURN;  
    END  
END;
'
GO

--
-- Create or alter function [dbo].[GetMinINWords]
--
GO
PRINT (N'Create or alter function [dbo].[GetMinINWords]')
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects WITH (NOLOCK) WHERE object_id = OBJECT_ID(N'dbo.GetMinINWords') AND type IN ('IF', 'FN', 'TF'))
EXEC sp_executesql N'


CREATE OR ALTER FUNCTION dbo.GetMinINWords (
    @TicketResolutionInMin int
   
)
RETURNS NVARCHAR(100)
AS
BEGIN

 declare @ResolutionTime  nvarchar(100)
-- Calculate days, hours, and minutes
DECLARE @Days INT = @TicketResolutionInMin / (60 * 24)
DECLARE @Hours INT = (@TicketResolutionInMin % (60 * 24)) / 60
DECLARE @Minutes INT = @TicketResolutionInMin % 60

-- Format the resolution time
SET @ResolutionTime = CONCAT(
    CASE WHEN @Days > 0 THEN CAST(@Days AS NVARCHAR(10)) + '' days '' ELSE ''0 days'' END,
    CASE WHEN @Hours > 0 THEN CAST(@Hours AS NVARCHAR(10)) + '' hours '' ELSE ''0 hours'' END,
    CAST(@Minutes AS NVARCHAR(10)) + '' minutes''
)
	return @ResolutionTime
END



'
GO

-- Table ServiceDesk30_3.dbo.VSA_MonitorSerialNumber does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.TechLeave does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SR_Cloud does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SelfService does not contain any data (it is empty)

-- 
-- Dumping data for table SD_User_SRApproval_SRDesk_New
--
PRINT (N'Dumping data for table SD_User_SRApproval_SRDesk_New')
SET IDENTITY_INSERT dbo.SD_User_SRApproval_SRDesk_New ON
GO
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284305, 637016966, 'IM8001', 'amit.singh', 'Shishir', 'jhv', CONVERT(bit, 'True'), 'ugtv', 'uyv', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 16:06:46.070', NULL, NULL)
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284306, 637016966, 'IM8001', 'amit.singh', 'Anuj', 'efww', CONVERT(bit, 'True'), 'x', 'e', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 18:48:30.717', NULL, NULL)
INSERT dbo.SD_User_SRApproval_SRDesk_New(ID, UserID, EmpID, LoginName, Approval1Name, Approval1Email, Approval1Active, Approval2Name, Approval2Email, Approval2Active, Approval3Name, Approval3Email, Approval3Active, Approval4Name, Approval4Email, Approval4Active, Approval4Status, Approval4Level, Approval4RejectStatus, Approval5Name, Approval5Email, Approval5Active, Approval5Status, Approval5Level, Approval5RejectStatus, InsertBy, InsertDt, UpdateBy, UpdateDt) VALUES (284307, 637016966, 'IM8001', 'amit.singh', 'Anuj', 'efww', CONVERT(bit, 'True'), 'x', 'e', NULL, '', '', NULL, '', '', NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, '430313502384', '2024-08-20 18:50:19.743', NULL, NULL)
GO
SET IDENTITY_INSERT dbo.SD_User_SRApproval_SRDesk_New OFF
GO

-- Table ServiceDesk30_3.dbo.SD_User_SRApproval_SRDesk does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_User_SRApproval does not contain any data (it is empty)

-- 
-- Dumping data for table SD_User_Master
--
PRINT (N'Dumping data for table SD_User_Master')
SET IDENTITY_INSERT dbo.SD_User_Master ON
GO
EXEC(N'INSERT dbo.SD_User_Master(SD_UID, UserID, EmpID, UserName, FirstName, LastName, EmailID, LoginName, Pass, UserScope, UserRole, LocCode, DepCode, Manager_UserID, Designation, ContactNo, UserRemarks, AccountCreatnDt, LastLoginDt, LastPassChngDt, LoginAttempts, Accontlock, InsertBy, InsertDt, UpdateBy, UpdateDt, Status, DomainType, Org_ID, FileName, FileType, FileData, ISMfa, UserType, SDRole, LoginStatus, LoginSessionID, RememberISMfa, RememberISMfaTime, Serialno, Theme, ThemeModify) VALUES (284306, 430313502384, ''9999'', ''Hitachi Admin'', ''Hitachi'', ''Admin'', ''pcvsupport@hitachi-systems.com'', ''hitachi_admin'', ''Hitachi@1234'', ''896976904'', ''Master'', ''Agartala'', ''Administration'', NULL, ''eng'', ''9871694195'', NULL, NULL, NULL, ''2024-11-24 17:07:09.807'', NULL, NULL, NULL, NULL, ''hitachi_admin'', ''2024-05-22 19:53:42.290'', NULL, ''Non-Domain'', ''680624893'', N''download.jpg'', NULL, 0x89504E470D0A1A0A0000000D4948445200000078000000780806000000396436D2000000017352474200AECE1CE90000000467414D410000B18F0BFC6105000000097048597300000EC300000EC301C76FA8640000581C49444154785EED9D757C54E7BA7039A5C583258104F71628506829D096E294E2B4B8148720210412DCDDDDDDDDDD259084B8BB7B32719F89ADEFD9A19CC3A11B5A7AE9ED77EF3D7FACDF448699BDDFF53EB6673214718C2DE07DB08F852789703F3D9F27495AEC2275B844816D623EDE09053C4CCAE1516C368E31F95825E41317750A420CC94CFE08CFE40BF84567E3169BC0B58C3CEC13B50C8A8AE7A3D0084AF8A750D421884FA263A8E8104D69DF043E4ECDA6484A2A152293F84E9EDB4B1ED3312A1D074D3676F1601327CF1BAF7E9CFFE125EF2DD8271CBC42F37117B1DEB1B978CBA23B4516F05CBE0F0A2BC025320FAF883C02A2E1A188760F774793D01D6D545182FD06E329327DE3D3700B4BC55936C3DE602DD5FDA328E31D4B71CF084A798751C659047BC5514A93C13F9252291593C4A7715AACA20B70D2C886D2680B37DA0B45706C9EEA71FE8797BCB760C7D87CDC34E0210BEB109DC9D3982C1E27E4621D9F436054018F44F863B99FAB44F9B3E45C5CC2B37148DC41727013325D2A1112B6152F4D32613E99B8C4EB700F82913E89E8790651CA238CD22E2114738D90DB082A8424535C934A514D12A565531C8992A84F91488ED3612F1BC95E043B44E5AA1CE37F78C57B0BBE9BA8E3494A9E444F2E4F62B2799890838DC8B593C87AA6C9C35CE40D8B4D64754236579372098C28C026360CBFB0FDE0FE159AA09AD887B8E11921911FADC52FA680E312C5D5BCBD296DE34D31DF188ABA8650C63E988A9E31948C4CA6485C124544B2455416F7D3C02F568763784EA160A7C81CD5E3FC0F2F796FC1B6F179B888147749D32E12A57E79102591E51796C50D89C8B60931948A0CA145449C0849C1362A137B4D8EA4D20CD2BCD710E75A067B8F9DD825C9E3891C6BD9048EF2EF3B074A043F75E5A3C0248A3A0550CAD61F3DA7503E098CA348B4488E4EA1ABC83E9E28CF159B8373742EB622D8F53F11FC4EDE3F454B1DF49706C73A2A9F1D21A96C8DCBC02A46A9B93A9CA5A9FA253517C3C874CA0768A81B188259503817E2D20A9B21CFE040C2EC4D0877ED8B57B01BAE71D288C9EF5C64136C0D4EA5A28B3FA59D62F9C4CE879236BE7CFCC29F22DE917C1C96825E442675A234AC8F4AC54752B4AB6C342B41790CD5E3FC0F85BC5D709C343485C802C6491A94146C2F3F7FA049C7352D979B1245FD5D826860EFC468FF58CE8667111499CF5E89E2AFC2D229E195C4479E813470F163BA5F084F24D2EC627208F6B526D96D00218E5B7197A87E1E9D2A1D77028FC3F2682DFFA6F4531F8ADBF853C6CA8522B69E7CE41C49998074CA4666601091C0D488789C95141D9F2B293AAF30A3A81EFF7F28E4ED82254A9DA59952043BC567611F9F819D087F2C1DACBBA447BB8874A6F88750F2B935659F3AD0D1C687A36119384569F925208E12D2467F641F86BE7530F5EC4299E61ECBDD882C89BE08027C4E1162BB150FFF186CA2F3E4F1D3447E16163E5ACA3DB7A1B87528151FBDA0888D33C59E8660E89EC83FA2E3A82819A37D44344F14B192317CA4537F24F55FF5F8FF43216F15EC5428F7258EAFA2581A2B8F886CBC8262708BD3B0272A83168F83F8C72D07CA3EB441FFC20DF6B9A4713838599A2657CAF96AD07B2AA3CF33574A3FB4C2D2295E1AB37C5C2362F076BE8FB797A34463BE648644BC527D39191B49773B4F3E791244D90712C9CF5D2875D71123A9C7454324AA7D34D40E0CE6A264027B290B0ED2C9DB47FEA706BF8BB70A76FE3545DB2BC4886869AC9C639364EE8DC4454993321A3D929A3BDB554395EBE114B9EC48B18BCF2873E43E73EC025826D15DEC991B1F392453F289D4D46BB618DF7263B947069ECA3C1BEC877BA01576D2855B4B447AC7A5632FF3F30E571D651FB9F2C9DD584A5AF9A277E339068F7C28E5E34709CF304AFA05B338281BD7E402AC259B7885FFA706BF8BB70A7651A44AC4DAC9E2DB492A749254EAAEF191E6E6A94477380E1239CED2D95ED7F8D24F44EA9DB5C6F0A233A58F3DA1DEA98B4C'

+ N'C21C176B1B268B1B9D8CACC192873F083141D931335340A8CA1745826A5FC53A8E01A8351403C639DA3786E3383D417524B6F344377BA11B997EB9279A6067157BFE0D2F69F68DB6E24E51BCCA6E6675BA8577A0215E62EA1FAF3703E7EECC82F47AE117FB219A9675AA2DDD79898235DD0EEFF9EE0FD5F5073D7498AEEBF4189F53730DE7419C36BCA95AE00AA5FB56153641A0EF139384B04DB4983A8BC18A27E5E6FC7415968150A6BE47BF03F42B0527B0B050B769A7C890A497DF1F90405E5E22E51FC4CEADDCFD1F17C94184731115DCE3F8AE29E7194B00FA1FD33378EDF9A4FC8AD2F48BAD591AC2B8D49BEF229E9A79A917EA9157737FE4C976603A9663C1A236353AAB531A3C6592B8ADDD450F7D2638E9C184FE2C1EFC8DFDE9ED8FDDF92BCB71B059B1B60B6451AB4CD8728B55566E2B597A870EC1EFAD7FD287EC38EF1CEC1527BF37093B9F845949CC39FE8A415996A8BFFBE8215DEDC24BF875A7AFD10FCBE60A9C376F1B26889C80C0C8F9295775148DA4E90A80ECD67BC8F8E4F94B7BCDAC6A267EF4D199FE714F709C3E04138CBCF2E27F2724DD2AE7C49F6C94EE41F6B04C79A90BCBB058E2B5BD3ADE9008AD537A182E1400CB63EA7D6C3208A5FBD4FAF13B788D9DC0EB67445BBED6BD2B7B7A260592FAC5758D26AF1262AED784685D59729B64BA2F8AA271FDD73A1DB03A7C2F76829826D2272646C523FAF77A12CF4FF19C1AF52F49BD88617609D9A844392061F117C2F0AFA86C450D231987FB8C451C62994E2CF9DF8D8DE8D9A370231D97B08DB0B9D48BBDC84DCBD55C838DD80B4735FA0DDFC1D4E73BEA371B51F285AB107D5FB6EA2CC191FAA9F7644FFEC53B6EF5F40FE86AF885DD39ECCCD2D4858F90DC90B5A6372701346736554DAF490122B0F52E39213152F0552EF861347A427F00ECA94CD97CB53254DAB9E97FA02BF0BB585FBF028CFF35B94B74EA9A1CCFE6AD82780DD6BBCB7604799839DA3650C09772626F01C31E18E5C8C8F63A0BF863AF742297B3B9062CF43287FCD89D2D79FA3F7E011C30FADC0636F5F32CE7C43D2DE6F49DCD14E6A6C5DB2F70DE492C5285A57AD8D7E8BF1E89DF043EFF8334A9D7C4197239BF058F70B992BBB12B5AE0DDA155DC958F4235796995371DD71AAAC7882C1E2E3E8EF9791E97A2086979EB1DC2B160F49CD2F34BA77469D9AC477A12EE443F35BB90A6A7215D4E42A38885445F22BDE5BB05B4C365E3273FA856D26D6A706D9EE4D89F35C889DDF35CC9C5D653E8DA0F8FD408A3FB2A6C4555B2A5CF4A4C23957BEDF7C96EB1B279274E01B120F372475773B32B7B623715757AC2C3BD1FD8BF6545A76814FAE7852FC880D258F9E66D6BAF5642EE949F4E22EE42DEB866EEE10122CFAD069DD26F416DFA7DABCD394597551369337C52F3E66B095074F64516C927478CA713AA99ED74B696AA9F86DA8352F1F1C29836A28C2D45093ABE0F8C6FDDE5BB07D542E2ED251FB85DA11ED36922CBBE2E43FA94AEAF3D604BC98C1061B77EA3E8EE71F577DD03FEF8CF199104A9DB5A1C8F9137CB1F53CC7979BA1DDD889BCDDDF91B9FA0B1277B62675CD773C99DC8936234CF8C7E5404AEFBB47B1FD77A8B6E928CE0B06916DD18F8C25DF933D7D28A90B3B70CE620EC5979FA6E2BCB3949C7B14BDC34FF9E4EA339A5EB66247503AF733F3708F4DFDB58FF8EDB9FDAF16FC46A4BFB7609B48795269B87C9292098DBC80C6FB0B32EF9721EFD41770AA05BADB5D39FF6033CD4F5951E4A433A52F596174D083D2576E52E4DA516ACF776597D91CB2363443BBA78F44722F22CD3E9586AA3387660CA1DEBE0754DC790DC36D8FF968F319E6CF9F4382E92812E7B5216B4A1F2225A27346FFC2778BD65076FE79CA591EA4FCD21394B9FC1C83938F19FE3C8CFDA9F93C8D57DE08A01CF36FCFEDF5F4FB47504FA91F9A9729F94DDE14F60A35B90A6FDEEFBD053B25C5E098988893FC63F7D83402FC8E116FF53519D229A75DFC86DC9355C938DE88EB57A7F0F3E973D4DBF388F2A72E6178C81AFD7D1E143B7285BAAB8F3167C6126CD68E94DADA05DDC2AEC46F684FDCEA41CC5DBB928A5BEF62BCE1311F6FBC46BD7927B93CCD94B419DD48366B4FB289640D93EE9C9C3C9D6A73AF6064BE0FE3499B2977EC81D46E6B9A5E71C32C34994B89D9FF279BAC3779876085DF0A768ECBC251E64CBB18E5A0F2F1088D23C4E334E18FDB1177BE11A9A77A91BEA72505FB24651F99CC9C9DABF97CFB29AAECB84DF1BD0F2871E42EA5775FC378C1654C4C176067D697BC25ED085FD18184D53FF07CCE58EAAD7A4AE5353728B3EE26C517DE67F4E4CD44CDE843FCD436A40E194DEAA42E048E1A4557B31318581CA382E95AF4375EA1F4315B8C64230DF68E626F7246E165469728396EB955AE6E2928D7D5DFF722BE22C0F13DB117096AA8DD57412D3D2B2881A486B382FCBBDFE37704FF16A758898C189981A593B68D969A1C93884B8C27FE61074938DF13DDFEE6684E7F45D29636E46EEE8EEFF6019C5CBB808E0BF75172F34DCAADBF4E9D2D0F29B5F20AFA7377D366E2186E9A0F236C4E67528E36970EBB2F9D975EC470F123CAAD3A48E959C7A96B7E914323A4A31EDF8DB43123C81ED787D8E183593D6A1DE5E69C446FE62E89E4E35410C125D65E60807F0C2BA3E37194E3738B545E692AE0794201CFE2F3712F7C3BF09BD1F36E1C7F7D03813AB2266FE0281BE9F551E575D42428A8DD57C14544FE57786FC10ED172F0121536513982223B0D774D320EF11A3C3D2F937DAA37399B1B10B5'
+ N'AF0D515BBB91B5A01B49163D085C3689F126CB319C739B8F57DDA2E6D67394D97E9C7F2CDBCF97BD6761B3AE2B050E2D88BA5F95E99BE7F091A527D5576CA2F694E5D2319FA2ED0FDB0815C9299387A3193D809C5E43783ED092C616BBF86CEC292A8FDC4FCDC3CF29BA741FFD4313B0F08BE3996C44E52F215D4584AD2C9622D955E663458C9AC8B7F1BE829D94F42ACFA7869A5C05B5FB2AA8497B1FDE3F8295939245B28BD5499A4EC72E3A0BBBC83C9C03753CCFCAC533D09A9CAD6360ED97A4ACEF40CAC221C42DEC418E6963C2670E63F8E899545874980A8BCF6330E72EE5673A326AF5725C6FB720EE4663321C2BF2F86067EACC3F86E1DC33D434DD4EC5E9C729697299ADBD4D881E3E0CCD801164FD3894C49FC63063C22AAA8E3B83DEC48352938FF3E98E2BF4088E63845F3C37645452AEC2B9C9892AE9D9464979720E0E720EAA9DEC5BF83F2558F9E804E5DD1ECE9A3C391145722ECF23A5E18A00EB847CAEA5A7E0E1FF8284634B489927B3EBA27624CFE84892E918D2CD44F6E81E6CE93786E64356A33F7E3715E6DFA6E7EAD5785CEB82F6560BC21E9425E54C53E6EE1A458949226EF269AA8F3D4389993B69D7672E76BD2790DC7B3C097D46922E3CE86749D5C907296121CDD690B50CB913C0D7EE21F40E4CE458740A4F13254DCB89DA2B1740E45669BCFE72C1825A63A4A0265741EDBE0A6AD2DE87F716FC42A9BF8293D432E59D1ECA02584B647848E3E5EAA2C1D5CE1F778F389CFC8389BAB21BDDACBEA44FED4CFA1449DDC38790326A3CB1BF8CE77ED721FC3CD08C52631652419AA8ED0B269079BE25B177EBA13BD7828013DF326CE64C2A4D3880D1D873E8FFB20CC3A15B58D7C582809E2349EA3B8E94CE9388EA309689A324CAC7AFA0D9E403F4734EC6D8C18BDE3EB16C0D8FE56E624EE1022A2F232A1FDC6257F83AB748567EF607F933820BFF784F8537C5BE42EDBE0A6AD2DE87F7AFC1F13A59A05CE9A4E5C425725F48343F4FD1F2384E83DDB45344575F8D63EFCD3C5BBD8FA0C77604DFBE8166E65062877D41C2940EC48D1948C2D04944F49B885FAB054CFA7A29A5879BD1BCEF781C36CA26B8D48A9853EDC93ED48CF8AD6DE938651595C69EA446FFBD7C3CE2105DBFB7E476B7BE64779F4062EB3924B51D8243EF2DD4ED36997EDB6DF8CC3D9E72762E0C7608657548383712B4850BEE109153B8195FFC37095693F8675093F63E14513FE8F747F9C015E74D0FD0949F495C590B1E5730E1AA8109F6837713BEF102DAB9AB891E3988D8813F932D2936BBC30CF2BB8C9048346753BD25B4ADD997761DA6907AB00BE9FBBE24EA681BD8D2149BB9DDF972DC148C87EEC468C02ACAF75CC6B0765B48F9662409DF8E26B3E354622A0D66DC98C574738BE21FB79C29F3C089967E412C916E7A534A061EB21195141D18928F558C3487CA1FD4C988A7601F9F27B52E5750FE4EF9C389795FD4E428B8CA31A9E126F5F98FF0C1047B4B24FB876671D9EC14D76BCCC0BAE1726E56B5E07205530EB6B0E4CED855048FB024ADDF04327A8C24B5F37032BFEB4F7EEB71847499C7DDE6B3E951662813077C45F09106A46E6845E6869E84AFEBC956D3D954FB7E15063FADA162B72DD4FFD292F36D2793F1ED64429B8CC4AACD342C8FDEA1C1532FFE71DB93720FDCF9D2D98FA57EB1AC8F57FE34E6E56776F949D67190452B9C31A5117A396B2A92F3E5E7324EC9CFD416FFBF0335B90A6A7215D464AAF1C1042BEF86B08B4CC5E79906E7018771283B094FFD393CAAB5986B551771ACFA4C0E379DCCA3F65389EC3A91D8CE6388E93087B8C66604353525A3E152CED6198659837E9C37ED48DEC656842E6F45EAB28E44CEEAC28C814BA8D67E3E7A1D7750B3C7527E6C3A09FF9626847E368E83F38E32D4DA13BDBB2E7CF2388C52D724829FFB32DF2386156109580564723F2D178F4281924265811C8557578B5E5ED0C89754FC37A65619E1D45093A6E09EF8C7F86082AD5372F0CED4492464F0C22582E7D2D95E28318467C6663C369CC9C50AB3D8653083E5F5A770A4A9091E2D2693FEBD19D92D8691D1622A6903BB91626B4CD4ADEFB834A70F3E0BBA92BEB516B973BF21DFD48490550DE8DFCE9C8A1D5650ADC35C6A7FB9984D8D7F21AEF54216DD70A1D67D3B3EBEEB41B17B2194BAE2C217F73D30738B65A14F345672A60F3373704D1289D1CAFBBAA59CC4E788E85C895AE5AF139577AEFCCDB5534A841A6F0A7B8547D21FE38309B68FCEE06668388EC99978A7E6CA416763BBEB3E67AA8DE492DE108E1A4E6567A3E51C335ACC4689EE09D587B0A7FE00C2BFB1405B79036112D169514D490DAC81C6BD1AD6BB9A90386B00056623C99CD29702D3565C19664EDB6F4651ABD1140C5A2CA743E3F1D87559C390E70114BFA2BCA2E4C93F4EBB62F0C0973A77EC19E51ECB1CC750ECAD22B14BD3E191F2B2C172D664C8E265C86DA6908D739CC88E9559FE030A7695287B1FD4E42AA8C9555093A9C60713EC2151E02D27E691A2E344402CFBA363799490CEADED4FD8F7E332D6369CCE093D5376959CC8D22A5358D1682E33AB2F628144F7B9CF66E0FCD9047C36342327A21819019589756848DCE62F4999FE1371263D65BC1A4898C9208E761B4AC3CFA651B6D91C2AD7336561070BBA3DF2A3CC155B2A9CF7A4C46937F46E3B51F3913DBD5D2399FAC0831767DD700E4BC443990064711CE393247AA59424244924A78B902CD9903AB9FD3B05E7A8A22657C133F98F5144EDE0FE0C5E22D83FB280C301C9347F6245A59B7769F'
+ N'FD0039327816C3BE3C2D1D12739DA6C39BB0D4CD9546122EBAA4F6791C16CC657306348B52EACA86EC2B1011389F33320F3794D327D8D897F5195F8F55F91613204CDF881448E1A4EECD0A1CC6C3A11A3C633295F6F32DFB61EC9378F7D297FC1968A173C282394BC644DEDA7CE7CFBC20FB32BCED8AE7C80AB5F3CFE513938CAE2384765E09BF0089F042B39F644EC53E2A5AE690BFF1AC2B970BE1764D32AE7F532854A34C90670916EDB2551223D5169CA24B54B63F69B54FB2B6A7553414D9682AB44AB1A6A51F90A35A16FF2C1043BCA09BB2B63871CD474B750CA9FBB4DD18377D0DB7B97AAFB6FF0CDC1070C5D719D99FDF7B0B2EE3CD6963563BA8C520B6A2DC1C4682C83CB8F634C03131E1D6F4CB6C7D784DB5627D3BA0CBA9BB5C95CFD03DAC1A388EF3399C47E0388ED349E9F4472C9EA43F9BCDD649A3EF1A2DC996794BEE842D1330E94B96C47AD87AE347BEAC6B4A3CF709A701E77A758826413BACBF1F94486119B3285A8A4E5B8C5C5629D192D3F97264CF9A80A0511ED2275DA456AB4B3A07CEDA69C9F74E2EE894AE323BF17B9CEAF75B56FA22657414D94829B3CB61A6AF77D1F3E98609B4C64C6CC223C2657EA700E26B65E543B768F125B6EF3D1BA5B14DD7483926B2E5279D6519A8CD9C50F3DD631A9EA582C8D2D312D3D0F53E9B87F2E3D19936FFBF0EC5A73B4768670A12D69E75B9071D298C8699D48F9E12734DD4CC9EF389C6B5DC7D1C6680CF53B59D2E89E3B654F3EA5F439078A9EB2A5FC453BEADE77A389B53F23979FC177C0413C2F38E398A5C52B4E434CDC22D2338D484A1E8C4F6C2C2F32D30A3F3CD55D64BA2A91FC2B4A1FE1122FE9BB50B64810DC4592BB9CAFA7A0DCAAC955508B520535090ACAC65143EDBEEFC307136C2B0F6613A1C5372489C0E42CAC7405ACF04EA4F5713BF4B63DA6ECB25B18CFBC48F5C927309E78849A2377D1FA3B73BA7E369D4195D630B6E60C7E2C3794AE468BE8D2AF367627BF22E5F667245FF89AFCEB9D89B8F605A9B3BB90D4650CB1D28187B7B7E0767D739A7630A3C17517CA1C7B4CA933B6143D6E85C1457BEADF76A7E9F320A64CD983A6FB764256DEC43A2319DF680FB2625A939F54846C4D5782236370C8D0E29CA4A444B955D2B04467A14CC143A2C8295127E797855D52260E49E9F27D2A4E49A992AE3355E52AA8C97D27F2FC7F051F4CB08BD45FF7883C3C13B37991988C7DBA74A7A9055CF14865D6256F1AAE3ACB47B376F3C9EC8394373D84FEE8BD9419B1915A3D17F3F557EB695D6F345FD5E848DF6F4F537FDE6DBEDB7A8223375BA2B95F15DDD9D6141CF88C8C436D081DD385A8AF171153C74266E80998B49F49ED4B4E9439FA885227ADF8F8C8432A9FB3A3C15537EA9E7766F390EDA4755C4FF29853D268C5E09FE4445E6813082D8A36AC25A12141386688B464E5E311B585972695A6517989D143BEF62EAC852FAF7439886CE5D651EAB053B2D462594035B94A0A578B260555B98247B2FC1B15DC65B4FBAFF0C104FB48EA7289D262A3BCC294A0C329261D1FE950DD13E278A289628FB73F038E5FA1FA8CCD9419BD018309FBD01B7D94D23DE753A5FD22EA7FB590BA4D7AD2A8D51A2A1EF5A1C22E376AADBFCB923D63893BF629EC6A49E2DEC6A46CFA91B89F47E2F5E920A23F3361439B39D43CEF84DE9147943CFE884F0EDCC15822B9C105572AAEB8C283DEBB48FE6E29B95D0F127C3F00EF34477202BE941C5B86CCC0DA0405394804474B448A38E95AED252D2AEFB050FE5CD65DBA6B4FE9B6FDE222098C8EC42F3A069F180DDE71C978C984A06CE6B709566B7814D4A42BA8DD5741EDBEEFC307136C27F3E4A3E8B4C24B803E51E01B2AE92C260CA7700722FDADF0F171C22E3092BDCF4369B7EC2CC57B2EA2FA0F7BA9D17D19953BCCC5E8CB3DE87F3E8A9275C7526BE3112AEEBDCE3FD63CA3C2AC874C5DB196847DED49D8DD8A82E59D48DAD8066F937EB8EB4D604397D5D438A7087E4CC9630FF9789F948293363490CEBDB8C93E427B1E22AECD7CF25AEE266AB713F6C9B664F8B720DF558FD48072F805DFC03E33B0F06D304EC95A1C53B5225B4626D99C2E7111B8C4BA1312758DF8F0FDC4841F253CF22C21B157098ABF8B5F82C7FF5CC16FBE2AF2FA08A086BB8C16AE12B92F3234B8A4E4131C1D414CC458923DF4C8BB5B93821B5F9173EF1B626D7EC6E9DE128EEE39409709DBA9D4DE9CB2DFCFC6F0BB4554693C8BDA0D64FC19B395EA3B6DD09F77994AABAE52D27C1BDDA66F2376517BE236F541BBB03F398B87E0D7A5371B3BAEA0FA111F4A1EBE47A5BDD7A4D17A469DA30EE8EFB9CF96FEEB086DB589B43ACB88EEB8199FF9E709894E25D26534B92EDF9069AF2FC7BC9800598820D9A0363922373D93C0C847C478CAA672184E924B4BD25D1A92E3D4841C9716685D5B92EBD116FCBB92173482F4F01D6834AE04A4664A4992CC95948D47A25636401EFED29CF94A3DF74D2AC04B462B0FF9DA2345165E50FE4A53C14B52BD829A1C054F49B36A7889FC3FC287132C23926B4236B6D26029B3A68FA4E8D090D3C4F90C26FD595DB22E1BA23BD514DDE1EEE46CFF91DC8D5DD1AC1ECFB969A68CE86141932F676154D78C8AC6E3A8F99D0515365DA0E4B20B94597495E21647D09BB88FEFC6CDE3DA82EEA4CDE84EE682C168C67667F188699439E04489FD7731DC71850A12C9654E88E49597B8D2670BFE4D571251733E49ED3613260D9E977B38C1616BC8B5A949BA731D9CA2ACA4AC1448AD4D2628329E10BF3B44394E27C5A62BDA67'
+ N'DF91F5AC3559D62DD0D93547E720821DBE44E7DC9202CFEFC80BE84246886C82B05544C75D2638D94D163F45A23F1FC7B46C1C52652DE4D6459A38977469E05245BE225716FE75BC947AAB2257C1F32DA8C954E3C30916B92ED2852A7F7CAD7CBCA08BD42FEFB00802039E12ED3A97D45B2DC93C529DD4DD0D49DED9848C4D4DC89BDB892CCB9E444C18C8FD01E399DFCE84EF1B8CA46495B194F96909D5CC2F6030F32C7A93F6516DE8798C069FA3F94F969C1CFC3309B37A923D691067074FE0A303D694DD7F1FE36DD7A9B6E7111F9DBA4FEFA9C7F06ABF156F99B9BD6B5A92D166230903F6E32C23954B9C1DBA679F48740E96B93781C7A9B978C604926C7F88948713E458BF4077AB06DC6D4C8EF259210FBE4667F52539CF5B906DDD0CAD6D13729D9A49243723CBBB39D9DE1DC90E1E434ADC6E42E37DF18CCBC34D36B9D2897B08BEF2B5BFF428BEB2365E8A1C45922CBE82C7AFA88D480A1ECAECAC82B229FE081F4CB0722548192F943700D82AEF494E8995EFD30BFFAED8293E9170EF9B845E1B4AC291E6E46E6A836E6187C23F264B19D98694517D891A3B9888817D08EAD983256D7B32F0AB9F583DA82FC3662FA6FC9C33941DB688F27D8E633870239FFEB899E9BDC610FEF3CFDC1AB9898F76DFA7ECCEDB186EB88AD1C63B14DF758E397D3713DE64057E5567E259C792E42FD790DA79071E879E63139B22E9B92731BE27704BCEC6292D191FB743245D9588BDF439B9171B5170F12BF2AE7C4BD6AD1664DD95CC73BF05398F9AA17BDC88EC270DD03DAF87CEB6213A7BE5B3499A892D3927919C107B9688C46091972EA95A1A3119AD7CA443F749CE91349D838FA46BEF5FE52AB80B6ECAED6BA3CDEBA8C9555093A9C60713EC222384722D5779CBA8839C9822D8312585E7CAA7BAC76AF1CE94DD989E4C40C425626FCE277EF568E2E7F726747677743306913F7000D97D86923D751AB9BBBF25FDEC97649F1D4CD8D649EC9A67C61743E75172E01CF4FA4DA3F8379B28F1D53AFAB636C1D27419C5763EA0ECD65B186EBC55F8297BB5171EE660FB95F8D4B524D4C89C80DAB3086DBA84F8F65B085C741DE7A828347E7E84C479E122736D90D773C2AE744173D498CCD3B5C83FD78AFCB33FA2BDF00319373F17C9F5D1DD10F177847B9F896C91FBA80EBA279F926BD54276F457E0281BD7AB3359611624C79D974E3B1AF7B8045CA56173C990593A5BD625AB40EAB1223BB770F1DD255DBBA60A4A5D4E96FAAC825AFD55504BC76A7C30C1CA1F3D394A73E1223BD6459A2D6769321C9272F08BCF24F47110CE2B1EE23EF711F68BEEF06CF5711C37EDC377DE4622C799103FB817B13FF724AACF2F687A9911397E102ECA35E8E56DC959F63DF14BBB9262328BF9A3A7D1B2C724AAB55E4E89F66B31AC3F8A264316506DC723F4365FC760F35D8A6EBB45F7B17BB8D96631B675A7135D690621D52C706E3297C8CEDB08FAE5083EBEFE121DB91239A9D8C5C410767E36593BEA9371B8B594912FC83A2E4DD5E916E49E6F8DF65263E91FEAA2BBDA80FC5B0DC9BB2D526FD727F77E7DF21ED726E76975B44F25925F485A77FF169DDF4F64794E24E1E14C629E2E25D2613FE1BE77080E75C62FC21F7F896CDFE44CBC52B4B8A7E6E19226EB2B788874353C25FAD55093A9461117459E0A2F5F59516AA972DD55E9909534FCF2560D67A9BBCE893ADCA48B749354AD5C2850AED5FA046510B1F3091E752710546C1C4E652DB95D6D0E0F9ACEE36A730B0E7F6DCEFE5653B9F9FD34BCDA9912FAD578348D96E2D06C3A4F3B762260742FD2A70E81C9ED081F3392873F8DC0ACCD34AAB79B8141DDC118F6DF41F9ADB7A92833B3FEB29B7CB4E72C167D37F1ACE9421CAB9B1352D902FF2A16B8359A4758FB4D0474DD82F76D579CB3640195F774DF3841F2AE1EE4ED9006EA6007B20EB421EB5063B4C71B937B4A1AABD39296CF3692B4FD99A4EC46E45D6B48EE75112DB2F3EFD525F74925D29E1893F4AC165A97C692B25B49AAFF86F4A3F5C8BAD094EC1B6DC8BCDD818CBBDD497FF033516EF389F0DC48A8FF3982421D08888AC62F5649E392E524257B4AD4BA0BCA24E2AC7CB04C625E61C4FBA6E824FAB3F091F2E72BA95E49F3DED2857BCBFD5EF232F57B4B6678F9F397147155E4A9E0225DB1C2CBB9EEA55CE58ACBABAFDFE4F5FBBDFABEF031E400FD4332F05C7B1BCF1E9BB0AA3A954765266255C1945BD52DB8683C87FDFA966CAB62CE9A5A262CAC399C235F4CC7597EFEACC274F67F3E9A535D87E2DE7D208123C79135715CE1FBA1F7B699CCC02A13A9D67F391F6DB88CD1AA47E8CFBFCEC7ABF670A8C35A5CEA2CC4BD92055EC6B371AF3A0BDF4F1712F2CD3A02DBAEC363D703225265016D65BC593A89FCED5D48DB251963F7D764EF6D43F68156641F92AF8F7E25A2A56B3ED98C9C33D2709D152E489A963A9D734536C1E546722B8DE2ADDE445EA94CE2957AE45D1844F631991C4E7E43F29916C49FFB94C44BF5447443B8D7949CBB86643F3626CDAE36499E8D880F6A415C782B62627612157B92B0B84704C6FB89CC149125C2354ADDCEC7476429A9D95D19B7943A2E69FDDF052BDF2BBCFAFE25455E97F23AAF86F63705BF8D37EFA37CAD08B69703B2CACAC7362B8FC8C074420E3AE030E312875ACFE77A79534EEA4DE780E16CF63658CC8646162CAE399647C622A4E62A3C2AADE046C579ECAA34938586266C6D63C18D2EC349E9338C847E53B9DB7E26DF0D9F49B16567315C728B324BAFF0E590D53C6ABA020F11EB28629DABCDC'
+ N'6A59A255EF51610FCF51A42DA6DC2CDF22409EE69DC5E7F8020F321146CEB48C206A9B53B5A93BDF31BB2F688E47DBF4A3EDC52447F21A23F4777A28944B4DC9E154474FAB5263202D624EF7C5D82468CC4A1ED549CFBF4C3776437F22CA42E6FE908977A4B37DE8BDCAB6D493CF939DA3B0668EF5526E74155721ED792145F971C2B49F91E1F4B475E8EE4C08668C225D2631612A939885F920D7EA99E78A747E19A9E807D560C76396192E2F37E8DE2D7795DF8EF087E1BAF4B7D17CA7D95CDE12D23834F8C4E3AEB0C9EA565E195964B984F361B476D65638BF96CA9398B6D1566B2B1A2394B8DA761596D126B0CA670AAF65CAE4894DF2D3F8BEB35D7B2BBDA2A4E979ACACC5A03D8D4AC3FCF3E1B4DD0E7B3593662099F2C3943B92557F878C94966B65F8DB3CCBD8EC69658D79C8D6D8DD938549B856B9DB9F87CB182A0F69B71E8BF05F7CD0FB839610131D306A05BDB9A8C8D2272735BB2B6B6257BBB74CF223A7B8F0817D1DA8312C98745F25119918E4BAD9588D69DFE429AC0A652A3259A254253763626D17238D103A712D26D20516366E16F6A82FBD211781F1949C4A32924B959C8C8389F38B71924B98F26C3B3175AAF6FC9F56E419E572374BE55C8082A4B5A44495263CB93165F93146D4B527493894FBB42584228FEF1A9855DB9B72258115A98965F09FE77B98582D566AF97FC56D82BC16A03F9ABFBBDFEBD22D83E311767191102A58EBC90E642B90CE871D61B8B12BD59A03706F36A53185B6F3A43AB4F6174A5494CAA644AEFEA131951F91776D532E58174C1D7CB4CE2A4C134B6198F6551D519CC379ACB840AE35858653CBF0C5DCAC7CBCE147E726D69CBFD1C68B30E07A3993CAD69C1A35A92E645B09D44B1638D3938355E848744B04DB70DDC1CB913AB517349960E5EB3B009D9EBDAA25DD381CC0DEDC9DCF4FDAFA2656CDAF92DDA3DADD0ED6F89EEC057E41C168EB524E7F85712D192BA4F3797DADC85EC3B22FF7E55324FB6277E936CA6CBC78971B622313654C6A634FC249379C99A7825E4E2272365605C2CA1315E4444D9101DF99084E80B24C4EC2029D692B4B8D16835C3C98FFF05E256529066498E6E0A69BA0524A45D4493E8816F5A12DE12308522DF2958C9EB2A28C377E120FE9A3C45B0F2FDAB19EE755E897DC5ABFB2B2F5A7BC998E41B267538494B90A46ADF67B12CFECA9C65152663567122A3AB4FA5BFC8EC516D2ADDAB98F2BDDE681AD59F48C745A7E973F42183E71D66DEB06DACFFCC929565E7B1E393252C36B06098C158AA0C584EA985A72931FF148DC7EFE64CD365BCA83C8D07B566F04022D84AE4DA579BCB0B89E2270DE660DD762D8FBB6FE7EAB0DDD8FC329F547389B685CDC858D601ED52197356772273AD345B8AE8CDED0A4567ED6883769744B2227ADFD712D1727BF86BD24E7F89461A2FDD1963A9D1D548B93F9690803BF8C5059014A523362E9FA038997FA3B20BFF97567F6944ED5232704CCD92EE394BBA68F9795A8EC85266E454BC13E309D044121A1744943C466C9C3FA949E7494B3F499A761F49391BD0E4AD1496E39BED8377461CDECA63BC8A64B514AD367B29BC2EEE7D04BFFAFED5FD3DA561F39027B6CDCC95314A5274483A89E9053C7914C9A681879922513BE1A3C14CFC640C03CB4DA56BA569B469308B4F8F3A6218AAA5B2551495CE3B52E2FC632A1CBA43F945C7E934702593BE9FC24F0683A93C741F15679DA482F931FA0CDECDF1DA16D8194DE361B5E9DC17A956552445579F87B5D4E13B752D78F0DD4A6EF4D8C1FDA9677838C882B8A9FD885FF50D290B3AA35DDC8DCC955D5E4A5EF7ABE44D22798B74C2DB5A8A68A9C9BB94464CEAF3FEAFD1EDF98AFC03CD49BAF593949D93042587C9DAA56313A594A374ACB33270C891C92247D63343D642D62458B25A8088F61394FF6FD9439A50B7C22C9729E4E2225DB0B3AC9763AA0E873449C7F1B904CA4817245D74808C5681A9F104A587E1A3F5C03B2B586AB36C8C7F0AFE6D14177925E68FF27A1A7FFDE7AFC47AC99328BCBAAF97B4FE5ECAAE951D6A2791EC1C97266D7E08A1494F09F63983D5992D9C9C35853D8386B0B5E308D6B59CC0946F07D0DD722A5FD93EE593A79194BE1B82FEA9EB9490EEB7E89A2B145B718162738E527CC47AEA4E3E4C65B3B39435DDCDD0EEABB95B7B110F0C6672B3CA2C2ED59DC13DC3E9D8555FC4C57AF3D8D77221577A6DE64EFFFDDC1DB29DFBFD261065D28F02F3CEE4CDEA41D6BC1E642EEC4AE6E22E642E93685ED95164B727674D17F2367E4BDA964624EC684BE6BE9FC897884EDD5697981B53D104BEC0232E035739DF0891181DA35C45FAD72CFA3A6F0A78C5AB171DDEC4434A9AA7943805AF94DC42BC657EF693DFA9E19B5A2019817FF24104BF92AB26D855042BAFB57A24E51096E24942FC1612FC7B116FF739190FA5B1B9DA89EC539D483BF82DB1DBBF21784D3BA2A7F6217C4A7FAEAD58CB4049D31D965FE77BF35D34323F4AAD6907A8396A3BF57BAFA346FBC5341AB28372B32E51DE6C3F233AADE05ED5B93C35B2E0762D115C733AF7A41E3FAA369F23D567B2E7AB055C10C1D77AEFE4FED09D3CEC6F4AF0E87EE4987525CFB21719B3BA9331B72BE9F3BB90B1A833E94B657E5DD61EED4A89E4D532DB6E6C45CE66A9C9EBBF2371576762AE9911E3FD8CA8F814296B32F7CBE8E5972663A1D45935B90A6A7215D4E42AA8C97D97603F11EC27625FF1D61AFC7B7828483A79F5B2D73F5FFE4A951351042B97E2E43EAEE9193867A4E219974264EC69B222BA8A'
+ N'F9B268ADF588B66D42F25DA96D67BF266F6F0B72D7CBE2ADE846D4F216C42C6C4FE0B0113CAC6DCA956A4BD9577B16AB44D658A9D303EB4CE707A34954A9320AFDC16B296A799E4AA60730F97E858C58B3792433F5F92A93B95A6326D725359FAF62C9F62AD3D8DF7A19677A6DE15CD78DDC1FBC8B470367E331E867B226F720D7BC2FE9337A9066F123E9B37E205D112D693B63916CC0A5EDC85CD549C4FE08CB5B9227C7177DC11C7FBF67F827EAF097F355E653F754ADD445D9CC85C2FE753DF875D4E42AA8C92DE435B13E69320FFF8A9FFC1B35FC45B0BF38788508FEED05EE77F16F75FA35A9FF2658507E5FF86FA4C678C54BB3119F4754E20334B13D49F2AD2883BE1EBA877A645FAC47F6F13624EF6D4BECB6AEC46D1B44DAAA09A48E1D85DD37C3D95F671CC7A596DE2B67C9866AA658D699C6F8AA5318547E3CAD8C27D2B4EF06CA5B5CA0FEC4FDCCFC66398FAACFE54ECD199CAF3A999B75E7C8BF35679BD154D6579BC6D1B66B38D56333673AACE4F6CFDB45F0521CFA0E26755C5F74A67DC930ED45DAF45E22BA67613467CE91889E277579610772D7F4A660E5CF68677F896E5B6F1975AEE3912A693955222C4152637CA6D4C92C026481BDA4F75093ABA026F79DFC1AB18A545FE95D5EE1A7640B1514A901AFF1DE29FA15AFA76385B7A5681F111C240B10243B3C383596B0D49BD221EE2729781579F69DC97E249172B73B0907BBE169D987274347B0A85E1F7AD5E84AAF6A3FB340227845DDD94CAE37939F8BF5A1BFFE70EA97EC8941B3F1541CB5818FCD76507BC43E3EEDB69429F5A771A1F274CE5437E572CD995CAE3B978D552631BF8A092B255D1F6FBD9A33DD3673BEE34AAEF4D8C483FE6BB1ED3506CD889FC99C20113C49244F15CC047349D9163DC994DA9C36E747F296F4256FFE8F442EE941F4EDAD44C46BF0CA9079549A1C1F89E2A0A46C42248203E59CBDE3640D7E4DC96FA22AF11DBC8AD87F8A95664D41D948EAFC1705BF12F9BA4C6F79A057927F23589A04BFC4645C34893226E516BE2EEA2E39CDC9D61FFB136E1C9E7093D5DF1E6256F5A54C2A61C69492E64C97081D21A3CEB04A660CD61F4B8BD23F51D568183FB49ACD779547514D7F10FA7D1763307E1BD5FAACA16A5333AAD61CCA58A3519CA861CE3E49E317ABCEE6687573E61A8DC5ACE62416D530E340E3855CE8B499AB9DD772B6A334643F6DC0A6D72462860C206D741FD226F4236DA23049BE9EDA9B34B39EA499F79094FDB3D4E81E423BC28FCDC133D44BC44A0A94CC14A05C7090C6CA53D6C0335D49A7522FA534A9C9555093A8E02372D47853AC7FE64BD4E5164816E1DF28A21CDCFBA076D08552DFF859E12610C94A93E598902D272D6D7E840EBBCBBE5C9F728ACBED5770D6D8922D15A6B0B4EC5856184C62B9F10CE657B66472A5114C3234654889890C915A3A7BD87656AFBBCAE99B5E6C5C75837973AFD0BAFF3A0C9A9B52B5D6042A551C4595AA23E95F730A476B2FE4B474D0476BCC629EC17866561ECF5CD930CB8DA7B2BBFE5CCEB6DFC4E51F3772F2DB65DCEFB9099B3E73F1EF3F82B46122F597BE648EE98F76DC4FA49BF421459ABD0C19A3B2CD7AA19BD881E4E563F1767F807D5A061EF15A026403FB4ADAF54C927E43CA93BB34581E92B2BD52A566CAF7EAA80BF6930DA286BF344AAF08904DF54FE4776A04BE4111E5DD06EF83B7487B53E6BBF090938E90C623D63A862BA37773A4D92C6ED599C7154373B6549FC6A63A166CAE3293F565A6B0A4F87866959980B98C36E6CDE7B377E135EE3DF4C72D5A46ABCC6C5E4444C95CADE3C44D7F0CEB0C41CF7818759A59A2FFA939468DA7D3A9E634F65659C409FD592CA86A8249A571CCA93A9595C6D3586B38856D756671A4D56A4E77D9C0C9D6CBB9D77903D67D96E3DA771C4903FA9232B437A992AED347FD4CD2849F489A2C72658C4A1FD789E4193F1373E9A8CCAC313848A47ACB71F829F55145D69F414DD687E0BD05FB88603594415B4D70B03C89EF1D0F6E7C3D8B279FFC82B774B98FABCEE260F1B11C2B65CEDEE293D92772D71B4C6459AB796C9C728C738702090C95262D3109E79C4C8EFB45D36BD5291EB9BB1394A663FCE24394FF621C55DB2DC6A8DD4AF47BADA5E27773695DC794353516B1D1D88211462331AB368905929A57559DCEEA4A53D824297BFF174B38D6762567BF5BCD0D69BA9EF55C85736F13627AF7236598344F23FA12FDCB20E2C70C257DFC007463BA9138A637A107D6111AEB2729395BCE552251A2C857BA5C35597F0635391F8222CA5B483E04DE825AD71896206DFB79671EB55B825BA3F958379CCBE52FE671A3CB26AE74DFCDAD1917B0DE678DC35D6F5E78C7F222592BCD8B325A6939159AC88407DE54DF7417BD2DCF718989C52D398B6E33B763D87D01867D376334601F957BADA3EC0F8BA9DA7C1AFDEBCF64AA74CD1324359B1B99480D9ECC0A89E075C2E61A3338D46C2947DB2CE3D2F71BB8D26A0D4F7E5C8B638FE944F4184CF6A001240DEA4FBC347A19C347A31B223F1BD69394F9B3F072B4C1AE404BA82C5A8872854EEAA1F2129E9A2C05B57AFA2E5E1F6D3E24457C25FADE0B95A856785BEA7693264479439EAF573CAED62138D905E2E61285877461CA7FA2619D95CDB38C6402B3B468D272098ACCE244403C23EF7BF1E9293BCAEFBA479D9D37996C1FC1EDB014669EB1A2E6C855541EB1994AC37653AAF746AA755A4EC51ECB28FDED741AD79FC8CFE54731ABC264E6184D616E25A9ED3203AFAB369D4D32321D6EBC88A3AD44F'
+ N'0B71BB9D2723D0F3AADC7BEFB1CC2BB8F45D76B04E9BD25727F1E4E4E9F6164F61A42FC241312CF5DC63D2E8987393904A415140AF690C5F316316A72155EBF9AF447508BBE0FC17BA7683F3939359434AD265879874280A4B24859980069F75D53B472DF5CC2E2F20889968848D21299A22358C6A93B4169ACB00DA3F6751FCA9C77A2D8817B74BA68CB3EC7706C9CC269B5F824C626DBF878F06AAA4C3A8CFEA02D18F7DF84719FB55495545BA3A5056D6A4F6648C58922D69CC5D5CC58506932CBAB9A15FEB9EA06117D401AADE32D9771B6C56AAE7EB5999BDFAEC5A6EB02C2BA4F25B5EB04927B8E26BD9F44EE8FFD88FB690C21BB8F1010182133BE729D385B1A299904E49CFCE47C956BEC6A7215D424BE0B35391F823F25581975DEE46D823D12654184084D1EBE5159926265949036DF553A4D9B8C7CDC343A7CE20AD8EF9748535B573EB6B6A1E815676AEFBBC60A1B1FEECA622D760DA1F4B4E5949D7A8492938E606079814F066DC468C816EAFCBC964F86AFC3A8E362BEAA3E95E132074FAA3C83C9352C582C42E7E99BB04C6ED7D79C2133B11987EACFE344CBE51C6BBC842B5F6EE6D257ABB0EAB880D01FCD89EB6A4A5C3F1352060E24B5672FC2C64E23D0D683173AAD4C103AE23539D241A78B582D61B2166E5282D4E42AA8497C176A723E046F15ACECD00F81BF10208FF726FEF13984C667E11495CB2CF70CEAD90650FAEE335ADAB9D3D7E9050F225264E3E462F6C41DFD65A7A86C799372E687A934E9101547EEA49C74E406A3F662D06F0B35466DA36E8B1974369EC868E99A271A4DC05430AF64C23C198F9414BDBAB2345992A6F77C368FFD4D9670A6F9122E09575AAEE669C7F5F8749A4B725B1392BA4F40D7632C69FDA6A0B9FE04393C197B44DAAF57945EC7477EAE264BB906ACB6D81F96DFCEC06AFC6D8283E5E756529FFB848651DAD31523376FBADBF9B3C63F91E7D2683D96B979E66337AAAC3E8CE1D27354363D87DE8C23E84F3984E1A403E88DDF43F95F76527DC82E6A765D42D3FA53E96538917152774D2A4DC4CCD8040BE3498582971999FE2A58BA76117CB8C932CE355DCCC5260B258257F0A8D3063C7E5C445887B164B51F4362A709C46C3A4244AC469A299DCCF98ACCDFE2AB5C1EFC55E8BFA12AE443A32EF44DDEDA45FB4A7AFD10289295BFFD791345FCF5D82C86FA07D02F389835B1E9DC97145878B5262607732B0F2A6C384AA955E7283FEF0C35965CA5F4CC23549C7E84F2D30E5266B244EFE81DD41DB88D468DCD6857C5846106939954692A268626D2414F6656D529CCAB3295A595A7B24A042B5DF4BE86F339F6F972CE355AC0C54673B9F8A5320F6FC4A5F74AA27E984C5AF3E1840F5F41A85B205E59CAA7E325E29BF5AF6BBDFFCE5FD7FDFE1E01B291FE087FBD60414DB05F0A856F0FF58CD112A2C9274A9AAC88F84C7C631299FBC20BC3BDA7F978D72DF457DCA2CAB2EB7CBCF00865669D40DFF204A5A6ECA5DC943DD41BBB9BFA1D96F05D35137E92397782A199D45F45F024CCE57676B5A98511AC085E636CCAD69A1685828F345ACE994FE771B9D11CAEB65CC19DCE9BB1EBBB8EA8B65388FE6E3251679E132452FD23B2A47FC8C4333B0F7FA9ABBF458912391F15D4A47C48FEEDAAD63BF8DB527440423E419A2CE225D5452B2FB349F3E29899C571FF20AA5EB8C727476E526CCB0DAAADBC8BD1AA9B7CBCE62CE5E79E11C127293B6D1F554472939F37D2EC5353BA559924CDD53426569AC65889E0F195278BE069FF14BC4CE46E90FABBBDF62CF67C3A977D8D96715C6EAF3699CB9D6FD672B7D356AC7B6EC4A3C32C42161D2329412B8B98475C74011A9D348269321EBD91FAFE859CCBDF4090C8FB23FC6D8203E3A571D16463ABD5E2949C895FBC8E4B42A787D6943B6C4DF9835694D870858A9BA4B95A79998AABAE62B0E002652545D798738AFA93F6D1B0F56CDA561A4F4F113C5452F02F06931826E979AC4835379A8E6595C922780A2BA47BDE5473263BEBCE667783396C6BB884839FCEE6468B053C6AB789FB9DB761F5C37A3CE69C21DC358A106D1E5E32BB7B64CA2694921196A85CC47F1BB2902AA849F990A8C954A3889A949714487A7D3FFCDF863CD69B28F7F7921AE19E9C838F448CB58C4B535E0452EED00D8C0F3B536ADF134AECBF47B1CD5728BBFA3265179EA7C2C273D249EFE1F395E768D27D2DAD8D26D1B9C218FA549EC41089D2E132F30E97F43CD1781AD3AB98BF142C51BCA2D60C36D79BC3AEBA73D955CB927DF5E773B08125D7DBAFE54ECF2D9C6CBB9817C3F6127A2FF0E5A55519E17C937270CB947225B2C285372FE2FF1EEAD1FE7BC8BF9535F923A8C954E3ED829561FE3D50EAD1DB50BBBF72994F59BC50A9C13E29B9EC8E48E4DBDBF6189E7A86F1011B8AEFBD4FB13DCA25CA5B945B7D85F22B8565D7305A7C82EA2337F04DBD597C536122FD0C27D0AF9244B08C42C38DA63252A2788A74CDD38DA74BF49A1646F0C22AA6AC943978DBA70B38D46C255B1BCEE2D2D72BB1FE6603D7BE5CC83999A93D6E78C9D89657B8C81F063581EF464DE0EB3F7B9DD725BE8B0F26D8EF0DA9AFA376FF00F97950420E9112CD2F52739864E74DBDAB3654BEE981FEFEFB94DB711BFDEDF730D87C878A6B6FBC64F97D6A2CBEC46775CD685976321DA4DEF6371A2F0DD6648688C411723B5A5F045736C54C6AF07C03539657B5605DEDB9AC91C85D55C39C95C2DE26B3B9DD66250F5B2EE3E9C0DDF8DF0EC4552BD9A4F075D60F85BAC477A222F075A9AFF3EAF7BF4711E5'
+ N'F54C7564887F0F14C1EF43A074A1E1093A42250D9E9171A9F323678CEEB852EA8607258EDFA59C44AFC1CE87E889E4929B6E505EA8B7F832DF0FDA4EC70A26342A3F91C1FA33E8586938832462874B048F944E7AACC1144C8D24458BE0992278919139AB8D67B0416AF2CE1A9632222DE6FAE773B9DC6139B7965CC4DD318A081DF8A4E5A1FC2DD09BDDEA9F264D36F77BF27AF71B28B55FE1F59FBDCEABDFFF1E4554DF9957C86FA3EE9D8834B5E82D44650194EBD3C129393849D42CF6D3D0FCB107951EFB50E49C1D45CF3FA4ECA14794DDFF94A2FBEE5362FB556A6CBACCF0C53BD9DEC2922F0CFAD0DA6002030D66F083D15849CF668C1014C1130CA7626664C67443532CABCF60A1CCBE2BA5835E5F752ADBEBCDE0D097F3B9316637F6FBADF0970ED027330F0FE9924313F309F9A0CDD11BD1F9477815A122F05504BE19B9FFE4B5FBBC8B0F265855ECAFA82D807F6A3E5EE9B95C8CD332CC3E984F9FFB52F1BE2725CFD908CFA878E839A50FD9F08F43CA676F5CA6C3FA8B5C983289E8561319D0A027CDAA8CA0B344657F198D864AC48E90B43C42DF8409FA5330AB2429BAE264916BCEECCA139969349AA5CD6770C4643F4FF73FC7D93B86B0141DD169CAA8A693A6EFE5BB167D25ABA81DEB9FE30D797F80D705BE12F4FACF5EE77589EFE2EF132C07E99851C0B68004BA3EF3A3D6733FCA5CB3C7E8B203FA275F60BCEF8544B00D1F1FBCCB67DB2F3166F54562BAB5859FC660D5C194A20D7BD3DED89C5E7AD31824513B441991CA8D674CB989988AE429652760F6F120D6D69FC1D5D1C7713BED4D407016DE39E0A293CC91A2FC294D1621720C21D9723C5283FD25A5A91DEB9FE3B7027F0F3581AFFFEC755E97F82E8AA80951503FE8F727281942E48002A4CE05A417102A5113982D7366760E4FA5C9FA25289C86AEFED47F1E4CE92B0E7CF2D08DE2A7EEA17FE43135775A6178F201FD966C24ECFBF1A49AF520795417A27B4CA447B591B42B6F42B74A431827A352CFAA3319F2E952E67D369D556D27B3D97233E7EE3AF0CC33027F791EE56495ACA11C83DA827D68DE5CE8BF8BBF5C70A0D435E589FC254A0294C64A08CA2AC02143C7114D2A43422369E11A4AC38741943FEF4899FB5E94BAF08C5217AD3038F2947E1B6E63F9C344BC064F20657157D2E774C3AF572F4ECFDDCFD18D0F3978E0A67085CB37ECB8FF2C0867C704C2A27309920D14A8FC3585080D2F8C4C69EE2433FDDF132C12FE4A0294C6459EC857E9EAA4918990B14869109EA6EB5811ABA18777205F3A87F1B97514156FFBF0F17D0F4A5EB4C6E092352DEF7961D67F2B87CA75C66DFC58D2D67526776917A24674C567FB7EA2431271C84EC3571E2F22259BF0E4B4C28B271ECA8B03994922385B328896E0D45C5974E5790545B6DCFFAF4439BF37BBD9BF8BBF5C7021B2E8CAFB8E0213F2099519DB43BEBF9E92C5ACA8387A7805F3954714D56C83F9F88E23FFB8FE84DAB79C1974C38FA68B4FF053E97E3897ED8FEFE05F485BD99E9CF9EDC99AD68320D329A47AFBE352A0BCEF1A62E2B34948CD24486AA9A76489C0A874E9D2B3446E36A1E979846541B09CB0D248BD3992FC15A82DF6DF4111B5F4A2A0966EFF0CCA653B45B0F24278A0C85522DA4A641F530447A7D0D72792E62EC15479E2C267361EB4B1F761F01537BA8FDFC5C7C55A33BFC6345C2A8C24B08F29395B3B92B7B623DAC53F9234A21FA1274FE319952C7849B3142F9D7008EE49AE4468A3084FCD22225B4B688644709A56D295A46D65E1155E3BCFBF8A3753E5DFC55F2F58EAB922D94F9E4C91EB25B737D272D99A98C61409E78132030F88C910D1310CBFE7C2D04DE7E9D47709356AF4A56AB91E6CAF3A17CF6A73B8DE7234DA432D49DDF91569BB3AA033E982DFFA65C447A410FAD00E0FF738BCA3DC898C584C42F814E2928F4A64C7C9BC9D2282B344AC92A6E5A4959DFDC6B9FE15A82DF6DF419120597C3594E6E8ED88B437507B0C8560E589242586654AEA946ED631338F4331D1ECD0A6312F3E93F9AE718C3967CF9753B751BFD5389A1AF5A165D9017431184D9BEABF70D8780641551770D06038A9A7EB93B1EF5B928F7D41FEBCCE844DFB99245B679E7BC610B9FC3CC98E7EC4A6DB10193294A4D836C4A58F4093F09498E41C4233B5B2E12475CBF1078B80BF8F0275A43F5023E8BD91E7904DFC8A226A2F75BD1B791015945761D40848C9C52F4516374947B0B680479A34AC753AB6476A1873FA2975DA4D454FBF2BA5ABF4A18EF1CF74ACF60BBD2A4D628CC10CBEAD349C23954CD0D458CCA1A2434817C1F9473B9272A6316CEC4EA2490792CF9DC7332387C84DC7D0581CC3292A9684ACEB24259A90AC2D45A2F627A233AFCB264B12C12F8F5319DBFE2E82654C542344E4A8A12EF1EDBC2EF7BF4570A83C899F343F31804B42324ED9B91C70D7F095C946AAD61F4335BDFE18E9FD4479FD3E542EDD95BEF52730B2BA39530D2CF9B6C220CE543525BDD672CE7C349CAC83CDC93DF72D89979B5070B00B49D3BE2661F97262A22482AD5C886C379E04111DA04D253AD59FC4B489680ABA109EBB51EA7F96A46B5934A9C9858BA7B2F8FF2D28CFAD82B24E6ABC29ECF708914CF93A7FBDE074D99D921E4374CAA7C127B0F59E3375FACCA3747353EA3630A7BEFE783E339E40BD6AA36854BA27636A9930A6D254A65598417BFDC1DCAC370B6D8D655CF9682829EBBF23FB4633E26F8AE02BDF93BAA41949937E21D0D58E4869B622972E22BFE300DCAE3E2638494B62A286B88C1784677A14C'

+ N'592BCA1FBD4FA5534F309E7A80F2DFCDA36AFBE5D4E9B10923F97A72F775EC15A1A76BCDE65095699C33B6E488483ED57D0D9AD874A24FDC27B68509494DC713D37106A98D2C0831DF49942691C4CC6BC4E54C25C7D59CDCF5CA079A7E4FEAC12F604F53D2CF8F223CE6A9084E7D87E03F4EB8FC9B37BBD33F8BDAE32B28CFF13EA83D861A6F15AC360FBE1369464275B20112754CF208E1E30BB67C7ADD8FE267243D1F7D4C895ECB31EE2A91FBC34A8CBBAFA261E785EC1B79901315A772BDEE024E56B3E0A2A105C72B99737EC21E52D27388DE75918836E3496D3A9AB81FCC496C319CF0D90B888ECF202A592BCD4F285A676BD23689D4E332261D6E0947BF20E3643BE2DDB7CB7125CBA27E880856047C18D41EFFCF10A9FD637C30C1E1F2606199B9DCD0C4D0E2990B25AE04617C3D9052979F5269F9794A775E4AD5BE9B29F3D36ACA769BC3902907B93EE608370DCDB859731EE7AACFE6BAE12C8E949FCC936D3749D6E511B5F60861ED2790FBE538127E9C8EE69B5EC4596E25212EB3B0EEFBCA89A604849274EA47D28E3526EF606B38F339C967EA927E6F026169491F48F08743EDF115D4E4BC8B28DD1FE383090E90278D894963459817E51FD860705DC347D77DA87CC381D2E37760DC5BD2F2C06D85FFAD7BD95EB3D8B4D7866BFDB7F2C8703A572ACDE05CD559DC359EC711BD89B85F7346939D4DF8D23D44749D48C1B79349EA368DB8F6BD4832BB415AB48EC0AC083C72B3D044F993F4680CE9471B92BFBF0DB9E71AA0395709ED85EE856352788612E92255163752E93EB35EA549F5857E1B6AB2FE0C6A8FADA026F15DA8C9544304BF59635F52B8DBDF83E02C2D099A7C5ABB8563F02C94620FBD29FBDC9F2AFB1E5261D01AAA8D961A3C7C0F7A0356F3FDD41D38DA26F0A0D36A1E5534E76EED255CAD32871B652671BEE6547C8213484AC9256CFE4E92DB0F23ED8791A4749B42FCF7934899B991F8942CFC52A28857AE79FB8413E771009DA4668ED727E5FA17645D6C40F6A54F49F5B420213E0BEF6CD910D9B9C42B72D3720A8F5789E837797D247A7DE15F17F1266A8FA31025BF53455BF04E64EFFE93989C7F7DFD6729A2168D0A6F0AFC3D8264117DA2F2A8E2E443C917A1947A1182C17D91BCE01495C66CA5D2C87D941EB295B2FD17B3E9963BFECED1DC69B590C7E5A771B3DA7CAE579BCBB5F29378D86E35619A8C428921F33693D56D04DADEA348FA611CF11DC792346B8D8C6159C4EAD270B38FE5E6FE3B68226EA2BBD001CE3621ED560BB4973F25E7CA67C4DAB623313A4046A65C2921D204662B912C82DF90F18AFF538295B4F63E289F6BF13C369FA21E5E14758EA4A46B0486179D29336E27C6A6FB283F6A0F06E3F6D074C64EBC4490EF23771E7F391F5B230BEED55AC0A33A4BB8696C86D7E4B3C44A83A549492764C17AB27B0E47DB6F0489DD4712FFC37012672F23524A4142663AE7B63D64C3903544A7B89075B32FF9179B937AA73939571B9277F573221F972639FC8148CA295C748D72AC3A9D882920528588C24648EEF39B2E5591F9FAF7FF42ED7114A29434AACA6FA5BECEEB72FEEB82E1FF01BBB0237FC99F0D5E0000000049454E44AE426082, CONVERT(bit, ''True''), N''mcadmin'', N''Master'', CONVERT(bit, ''True''), ''7a638ee2-c783-4769-90e4-558bae0f5bdb'', CONVERT(bit, ''True''), ''2024-11-20 02:02:56.447'', ''ec265d61-8be1-9c3d-c930-bcc0b2915a3b'', ''dark'', CONVERT(bit, ''False''))')
GO
SET IDENTITY_INSERT dbo.SD_User_Master OFF
GO

-- 
-- Dumping data for table SD_UserScope
--
PRINT (N'Dumping data for table SD_UserScope')
INSERT dbo.SD_UserScope VALUES (896976904, 'Master', 'Master Scope', CONVERT(bit, 'True'))
GO

-- Table ServiceDesk30_3.dbo.SD_UpdateGrade does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TrackEsclationTicketMailForResol does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TrackEsclationTicketMail does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketNotes does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketIncrementRef does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketFileUpload does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketColumnViewUserwise does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_TicketColumnView does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Technician does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_StatusRestriction does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_StatusRestrict does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Status does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Stage does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovers does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovalStatus_SRDesk does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SRApprovalStatus does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLAForResol does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLAConfig does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_SLA does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Severity does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ServDeskDefn does not contain any data (it is empty)

-- 
-- Dumping data for table SD_roles
--
PRINT (N'Dumping data for table SD_roles')
SET IDENTITY_INSERT dbo.SD_roles ON
GO
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2081, '804', 'My Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (13, '101', 'Roles', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (14, '102', 'Requesters', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (15, '103', 'Technicians', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (17, '104', 'User Scope', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (18, '200', 'Help Desk', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (26, '207', 'SD CustomFields', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (27, '207', 'SD Template', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (28, '208', 'CustomField Values', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (29, '300', 'Instance Configuration', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1061, '1', 'Home', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1062, '800', 'Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1063, '802', 'Create Ticket', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1064, '803', 'Ticket Details', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1067, '400', 'Admin', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1068, '403', 'My Profile', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1069, '500', 'Dashboard', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1070, '502', 'All tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2061, '800', 'Tickets', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2066, '804', 'My Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2063, '802', 'Create Ticket', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2065, '804', 'My Tickets', NULL, 'Active', 'SDUser')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2074, '801', 'Archive Ticket', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2076, '406', 'Change Password', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2079, '805', 'All Engineer Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (1101, '804', 'My Tickets', NULL, 'Active', 'Technician')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2082, '1', 'Dashboard', NULL, 'Active', 'end')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2083, '100', 'Home', NULL, 'Active', 'end')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2084, '1', 'Dashboard', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2085, '11', 'Home', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2086, '901', 'Add Article', NULL, 'Active', 'Viewer')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2088, '807', 'Manage Approvals', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2089, '900', 'Knowledge Base', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2090, '901', 'Add Article', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2091, '1', 'Dashboard', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2092, '11', 'Home', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2093, '13', 'Assignee Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2094, '14', 'SLA', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2095, '15', 'Category Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2096, '16', 'Department Wise', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2097, '17', 'Ticket Count', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2098, '18', 'Live Dashboard', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2099, '100', 'Users And Permissions', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2100, '107', 'SD Custom Role', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2101, '206', 'Desk Configure', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2102, '209', 'SD CustomFields', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2103, '214', 'Create Flow Chart', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2104, '215', 'View FLow', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2105, '303', 'Operational Hours', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2106, '304', 'Holidays', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2107, '305', 'Apply Leave', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2108, '400', 'Admin', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2109, '401', 'Add Department', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2110, '402', 'Email Logs', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2111, '403', 'My Profile', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2112, '404', 'Add Location', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2113, '406', 'Change Password', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2114, '500', 'Reports', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2115, '502', 'All tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2116, '506', 'Generate AI Report', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2117, '506', 'User Feedback', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2118, '510', 'Filter Any Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2119, '600', 'Change Management', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2120, '601', 'Change Type', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2121, '602', 'Reason For Change', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2122, '700', 'Templates', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2123, '701', 'Email Template', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2124, '800', 'Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2125, '801', 'Archive Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2126, '802', 'Create Ticket', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2127, '803', 'Ticket Details', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2128, '805', 'All Engineer Tickets', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2129, '806', '2FA Reset', NULL, 'Active', 'Master')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2130, '1', 'Dashboard', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2131, '11', 'Home', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2132, '13', 'Assignee Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2133, '14', 'SLA', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2134, '15', 'Category Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2135, '16', 'Department Wise', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2136, '17', 'Ticket Count', NULL, 'Active', 'admin')
INSERT dbo.SD_roles(ID, MenuID, MenuName, UserName, MenuStatus, UserRole) VALUES (2137, '18', 'Live Dashboard', NULL, 'Active', 'admin')
GO
SET IDENTITY_INSERT dbo.SD_roles OFF
GO

-- 
-- Dumping data for table SD_RolePreference
--
PRINT (N'Dumping data for table SD_RolePreference')
SET IDENTITY_INSERT dbo.SD_RolePreference ON
GO
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (1, 1939788858, 'ReportingManagerEmail', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (2, 1748906969, 'ITManagerEmail', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (3, 1714450183, 'ReportingManagerTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (4, 336000835, 'ITManagerTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (5, 1446576709, 'HODTracker', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (6, 1356817125, 'VOIP_Number', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (7, 1848393299, 'ERP_Tasks_Affected', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (8, 702282998, 'ERP_AdditionalEffort', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (9, 1204482688, 'ERP_AdditionalCost', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (10, 394626866, 'ERP_ImpactonCompletiondate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (11, 55775099, 'ERP_PlanStartDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (12, 143338415, 'ERP_PlanEndDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (13, 1354907257, 'ERP_ChangeacceptedtestedbyIT', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (14, 585456970, 'ERP_ChangesmovedtoUAT', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (15, 185743877, 'ERP_InternalITTesting', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (16, 2146865298, 'ERP_DevelopmentPhase', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (17, 1120074492, 'ERP_TestResults', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (18, 468618184, 'ReasonforChange', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (19, 1132178628, 'DevelopmentStartDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (20, 1407013698, 'DevelopmentEndDate', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (21, 2063483209, 'ERPComment', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (22, 1350450277, 'HoldStart', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (23, 901773105, 'HoldEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (24, 650489251, 'OpenEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (25, 1048944597, 'WIPStart', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (26, 1446357852, 'WIPEnd', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (27, 596049153, 'StoreCode', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (28, 523205334, 'ChangeExecuterName', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (29, 1896719031, 'ChangeVerifiedBy', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (30, 1398623016, 'MovetoProduction', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (31, 211965085, 'SRType', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (32, 1159270588, 'ERP_CRTypes', '1', 'Master')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (33, 1939788858, 'ReportingManagerEmail', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (34, 2063483209, 'ERPComment', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (35, 1398623016, 'MovetoProduction', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (36, 211965085, 'SRType', '1', 'ITEngineer')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (37, 1848393299, 'ERP_Tasks_Affected', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (38, 702282998, 'ERP_AdditionalEffort', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (39, 1204482688, 'ERP_AdditionalCost', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (40, 394626866, 'ERP_ImpactonCompletiondate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (41, 55775099, 'ERP_PlanStartDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (42, 143338415, 'ERP_PlanEndDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (43, 1354907257, 'ERP_ChangeacceptedtestedbyIT', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (44, 585456970, 'ERP_ChangesmovedtoUAT', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (45, 185743877, 'ERP_InternalITTesting', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (46, 2146865298, 'ERP_DevelopmentPhase', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (47, 1120074492, 'ERP_TestResults', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (48, 468618184, 'ReasonforChange', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (49, 1132178628, 'DevelopmentStartDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (50, 1407013698, 'DevelopmentEndDate', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (51, 2063483209, 'ERPComment', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (52, 523205334, 'ChangeExecuterName', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (53, 1896719031, 'ChangeVerifiedBy', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (54, 1398623016, 'MovetoProduction', '1', 'CRM')
INSERT dbo.SD_RolePreference(ID, FieldID, CustomFieldName, Status, SDRole) VALUES (55, 211965085, 'SRType', '1', 'CRM')
GO
SET IDENTITY_INSERT dbo.SD_RolePreference OFF
GO

-- 
-- Dumping data for table SD_Role
--
PRINT (N'Dumping data for table SD_Role')
SET IDENTITY_INSERT dbo.SD_Role ON
GO
INSERT dbo.SD_Role(RoleID, RoleName, InsertBy, InsertDt, UpdateBy, UpdateDt, IsActive) VALUES (21, 'Master', 'hitachi_admin', '2024-12-04 12:04:48.763', NULL, NULL, CONVERT(bit, 'True'))
GO
SET IDENTITY_INSERT dbo.SD_Role OFF
GO

-- Table ServiceDesk30_3.dbo.SD_ResponseReminder does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Resolution does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_RequestType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Priority does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Pool does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_PCVOrgMapping does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_OrgMaster does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_OrgLogo does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Options does not contain any data (it is empty)

-- 
-- Dumping data for table SD_Navigation
--
PRINT (N'Dumping data for table SD_Navigation')
SET IDENTITY_INSERT dbo.SD_Navigation ON
GO
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1, 1, 'Dashboard', '#', 0, 'hsadmin', 'Active', 1, 1, N'material-icons-outlined', 'dashboard')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (2, 100, 'Users And Permissions', '#', 0, 'hsadmin', 'Active', 6, NULL, N'material-icons-outlined', 'view_agenda')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (3, 101, 'Create & Modify Roles', '/frmAddUsersRoles.aspx', 100, 'hsadmin', 'Active', 6, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (4, 102, 'Create User', '/HelpDesk/frmAddRequester.aspx', 100, 'hsadmin', 'Active', 6, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (5, 103, 'User Details', '/HelpDesk/frmSDAccount.aspx', 100, 'hsadmin', 'Active', 6, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (6, 104, 'User Scope', '/HelpDesk/frmAddUserScope.aspx', 100, 'hsadmin', 'Active', 6, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1044, 1000, 'New Menu', '#', 1000, 'hsadmin', 'InActive', 1, NULL, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (9, 200, 'Administration', '#', 0, 'hsadmin', 'Active', 4, NULL, N'material-icons-outlined', 'engineering')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (17, 203, 'Add Custom Field Values', '/HelpDesk/frmAddCustomFieldValues.aspx', 200, 'hsadmin', 'Active', 4, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (18, 202, 'Add Custom Fields', '/HelpDesk/frmSDCustomFieldCnrtl.aspx', 200, 'hsadmin', 'Active', 4, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (22, 300, 'Coverage Schedules', '#', 0, 'hsadmin', 'Active', 5, NULL, N'material-icons-outlined', 'card_giftcard')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (25, 303, 'Operational Hours', '/HelpDesk/frmAddCoverageSch.aspx', 300, 'hsadmin', 'Active', 5, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (26, 304, 'Holidays', '/HelpDesk/frmAddHolidays.aspx', 300, 'hsadmin', 'Active', 5, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (27, 400, 'Admin', '#', 0, 'hsadmin', 'InActive', 7, NULL, N'material-icons-outlined', 'admin_panel_settings')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (28, 207, 'Add Department', '/Admin/frmAddDepartment.aspx', 200, 'hsadmin', 'Active', 7, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (29, 208, 'Email Logs', '/HelpDesk/frmEmailLogs.aspx', 200, 'hsadmin', 'Active', 7, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (30, 403, 'My Profile', '/Admin/frmMyProfile.aspx', 400, 'hsadmin', 'InActive', 7, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (31, 500, 'Reports', '#', 0, 'hsadmin', 'Active', 8, NULL, N'material-icons-outlined', 'description')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (33, 502, 'All tickets', '/Reports/frmOrgWiseTickets.aspx', 500, 'hsadmin', 'Active', 8, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (37, 700, 'Templates', '#', 0, 'hsadmin', 'InActive', 3, NULL, N'material-icons-outlined', 'apps')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (38, 701, 'Email Template', '/frmEmailTemplate.aspx', 700, 'hsadmin', 'Active', 3, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (40, 800, 'Tickets', '#', 0, 'hsadmin', 'Active', 2, NULL, N'material-icons-outlined', 'confirmation_number')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (41, 801, 'Archive Ticket', '/HelpDesk/frmAllArchiveTickets.aspx', 800, 'hsadmin', 'Active', 2, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (42, 802, 'Create Ticket', '/frmAddIncident.aspx', 800, 'hsadmin', 'Active', 2, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (43, 803, 'Ticket Details', '/frmAllTickets.aspx', 800, 'hsadmin', 'Active', 2, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (44, 204, 'Add Location', '/Admin/frmAddLocation.aspx', 200, 'hsadmin', 'Active', 7, 4, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (46, 804, 'My Tickets', '/HelpDesk/frmMyTickets.aspx', 800, 'hsadmin', 'Active', 2, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1001, 107, 'Assign Custom Role', '/frmAddSDRoleWiseCustomFlds.aspx', 100, 'hsadmin', 'Active', 6, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1003, 506, 'User Feedback', '/CSET/frmFeedbackreport.aspx', 500, 'hsadmin', 'Active', 8, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1006, 406, 'Change Password', '/frmChgPass.aspx', 400, 'hsadmin', 'InActive', 7, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1008, 805, 'All Tickets', '/frmAllTicketsEngTransf.aspx', 800, 'hsadmin', 'Active', 2, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1009, 806, 'Manage 2FA', '/HelpDesk/RemeberIIFAEnable.aspx', 100, 'hsadmin', 'Active', 7, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1014, 201, 'Desk Configuration', '/DeskConfiguration.aspx', 200, 'hasdmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1015, 600, 'Change Management', '#', 0, 'hsadmin', 'Active', 9, 1, N'material-icons-outlined', ' change_circle')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1016, 601, 'Change Type', '/ChangeManagement/frmAddChangeType.aspx', 600, 'hsadmin', 'Active', 9, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1017, 602, 'Reason For Change', '/ChangeManagement/frmReasonForChng.aspx', 600, 'hsadmin', 'Active', 9, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1018, 900, 'Knowledge Base', '#', 0, 'hsadmin', 'Active', 10, 1, N'material-icons-outlined', 'school')
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1019, 901, 'Add Article', '/frmAddKnowledgeBase.aspx', 900, 'hsadmin', 'Active', 10, 2, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1021, 506, 'Generate AI Report', '/frmGenAIReports.aspx', 500, 'hsadmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1022, 11, 'Home', '/frmDashboard.aspx', 1, 'hsadmin', 'Active', 1, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1023, 206, 'Create Flow Chart', '/frmFlowChart.aspx', 200, 'hsadmin', 'Active', 2, 14, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1024, 208, 'View FLow', '/frmViewFlow.aspx', 200, 'hsadmin', 'Active', 2, 15, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1025, 305, 'Add Leave', '/HelpDesk/frmTechLeaveApply.aspx', 300, 'hsadmin', 'Active', 5, 1, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1046, 209, 'Available Licence', '/frmComingSoon.aspx', 200, 'hsadmin', 'Active', 1, NULL, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1030, 13, 'Assignee Wise', '/Dashboard/SDAssigneeCallDetails.aspx', 1, 'hsadmin', 'Active', 1, 3, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1031, 14, 'SLA', '/Dashboard/DBSDSLAII.aspx', 1, 'hsadmin', 'Active', 1, 4, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1033, 15, 'Category Wise', '/Dashboard/SDDBCategoryWise.aspx', 1, 'hsadmin', 'Active', 1, 5, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1034, 16, 'Department Wise', '/Dashboard/SDDepartmentCallDetails.aspx', 1, 'hsadmin', 'Active', 1, 6, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1035, 17, 'Ticket Count', '/Dashboard/SDDBCategoryWise.aspx', 1, 'hsadmin', 'Active', 1, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1037, 18, 'Live Dashboard', '/Dashboard/frmLiveDashboard.aspx', 1, 'hsadmin', 'Active', 1, 8, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1038, 510, 'Filter Any Ticket', '/Reports/frmFilterTickets.aspx', 500, 'hsadmin', 'Active', 1, 10, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1039, 807, 'Pending Approvals', '/frmTicketApprover.aspx', 800, 'hsadmin', 'Active', 1, 7, N'nav-icon fas fa-copy', NULL)
INSERT dbo.SD_Navigation(ID, MenuID, MenuName, MenuLocation, ParentID, UserName, MenuStatus, ParentIDOrder, ChildIDOrder, MenuIcon, IconName) VALUES (1047, 210, 'FeedBack Configuration', '/frmComingSoon.aspx', 200, 'hsadmin', 'Active', 1, NULL, N'nav-icon fas fa-copy', NULL)
GO
SET IDENTITY_INSERT dbo.SD_Navigation OFF
GO

-- 
-- Dumping data for table SD_Mfa
--
PRINT (N'Dumping data for table SD_Mfa')
SET IDENTITY_INSERT dbo.SD_Mfa ON
GO
INSERT dbo.SD_Mfa(MFAID, UserID, MFAStatus, SecretKey, InsertDt) VALUES (139238, 430313502384, CONVERT(bit, 'True'), N'MCPIZRKBW2WPI6XYR3FHFQK4Z7VR6XSA', '2024-11-20 01:59:27.550')
GO
SET IDENTITY_INSERT dbo.SD_Mfa OFF
GO

-- Table ServiceDesk30_3.dbo.SD_Mapping_Check does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Location does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_KnowledgeBase does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Holidays does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_HODApproval does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_History does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_FeedQuestions does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Feedback does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_FeedAnswers does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_EsclateMaster does not contain any data (it is empty)

-- 
-- Dumping data for table SD_ErrorLog
--
PRINT (N'Dumping data for table SD_ErrorLog')
INSERT dbo.SD_ErrorLog VALUES (1878168838, 'hitachi_admin', '2024-12-04 12:40:26.513', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddUserScope.aspxGot ExceptionLine Number :111System.NullReferenceException: Object reference not set to an instance of an object.
   at HelpDesk_frmAddUserScope.GridFormat(DataTable dt) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddUserScope.aspx.cs:line 111
   at HelpDesk_frmAddUserScope.FillScopeDetails() in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddUserScope.aspx.cs:line 80')
INSERT dbo.SD_ErrorLog VALUES (760982562, 'hitachi_admin', '2024-12-04 12:46:45.200', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddRequester.aspxGot ExceptionLine Number :0System.OverflowException: Value was either too large or too small for an Int32.
   at System.Decimal.FCallToInt32(Decimal d)
   at System.Decimal.System.IConvertible.ToInt32(IFormatProvider provider)
   at HelpDesk_frmAddRequester.gvTechnician_RowCommand(Object sender, GridViewCommandEventArgs e) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddRequester.aspx.cs:line 904')
INSERT dbo.SD_ErrorLog VALUES (1810242346, 'hitachi_admin', '2024-12-04 12:46:48.673', ' https://itsm-demo.hitachi-systems-mc.com:5723/HelpDesk/frmAddRequester.aspxGot ExceptionLine Number :0System.OverflowException: Value was either too large or too small for an Int32.
   at System.Decimal.FCallToInt32(Decimal d)
   at System.Decimal.System.IConvertible.ToInt32(IFormatProvider provider)
   at HelpDesk_frmAddRequester.gvTechnician_RowCommand(Object sender, GridViewCommandEventArgs e) in D:\ServiceDesk30_3\ServiceDeskV2\HelpDesk\frmAddRequester.aspx.cs:line 904')
GO

-- Table ServiceDesk30_3.dbo.SD_EmailTemplate does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_EmailConfig does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Department does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_DeleteTicketLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_DeletedTechnician does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFldRole does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldValues does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldTicketValues does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CustomFieldControl does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CoverageSchedule does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CloudTickDetails does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ChangeType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_ChangeReasonType does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Category_FullPath does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_CategorySLA does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_Category does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SD_adminLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDTicketInsertHistory does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDTicketHistory does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncident_InsertLog does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncidentdeleted does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncidentBulkUpdate does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.SDIncident does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.EmployeeMaster does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.Email_FromInbox does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.email does not contain any data (it is empty)

-- 
-- Dumping data for table DynamicFLow
--
PRINT (N'Dumping data for table DynamicFLow')
SET IDENTITY_INSERT dbo.DynamicFLow ON
GO
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (1, '680624893', N'Test 1', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.773', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (2, '680624893', N'Test 2', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.777', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (3, '680624893', N'Test 3', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024112417.jpg', '2024-12-03 11:24:17.780', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (4, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.653', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (5, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.657', NULL)
INSERT dbo.DynamicFLow(id, Org_Id, flowDesc, imagepath, inserttime, ReqType) VALUES (6, '680624893', N'', 'D:\ServiceDesk30_3\ServiceDeskV2\Flowcharts\680624893_03122024115143.jpg', '2024-12-03 11:51:43.657', NULL)
GO
SET IDENTITY_INSERT dbo.DynamicFLow OFF
GO

-- 
-- Dumping data for table CommonLog
--
PRINT (N'Dumping data for table CommonLog')
SET IDENTITY_INSERT dbo.CommonLog ON
GO
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (1, '1368050342', '680624893', 'hitachi_admin', 'frmAddSLA', NULL, NULL, NULL, NULL, 'Category', 'expected response time and resolution time will be set here', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:21:21.400', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (2, NULL, '523843837', 'hitachi_admin', 'frmAddCategory', 'Incident', NULL, NULL, NULL, NULL, NULL, 'Incident||Password', 'Password', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:28:55.310', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (3, NULL, '523843837', 'hitachi_admin', 'frmAddCategory', 'Incident', NULL, NULL, NULL, NULL, NULL, 'Incident||Business Application', 'Business Application', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:30:35.300', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (4, '171055604', '523843837', 'hitachi_admin', 'frmAddServiceDeskName', 'Incident', NULL, '301941129', NULL, NULL, NULL, NULL, NULL, 'Hitachi Incident', 'INC', 'Incident', '1646581461', NULL, '704869537', NULL, '530499579', NULL, '0', NULL, '20', '1453192560', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '738442562', NULL, NULL, '2024-08-13 21:37:05.120', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (5, '749303833', '523843837', 'hitachi_admin', 'frmEmailConfigratn', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'smtp.office365.com', '587', 'msp@hisysmc.com', 'msp@hisysmc.com', 'Kus83888', '5', '', '', '', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:26.320', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (6, NULL, '523843837', 'hitachi_admin', 'frmAddOrganization', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Hitachi', 'Hitachi', 'Anuj Dogra', '0981893456', 'anuj.dogra.fz@hitachi-systems.com', '                                                  ', '                    ', '                                                                                                    ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:42.670', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (7, NULL, '680624893', 'hitachi_admin', 'frmAddOrganization', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'IMSPL', 'IMSPL', 'Madhav Choudhary', '9149499381', 'madhav.choudhary.wt@hitachi-systems.com', '                                                  ', '                    ', '                                                                                                    ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:37:55.280', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (8, NULL, '680624893', 'hitachi_admin', 'frmAddSDPriority', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'High', 'High', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:12.240', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (9, NULL, '680624893', 'hitachi_admin', 'frmAddSDPriority', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Low', 'Low in Priority', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:23.330', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (10, '1234252843', '680624893 ', 'hitachi_admin', 'frmAddRequestType', 'Service Request', 'Service Request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:36.550', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (11, '1234252843', '680624893 ', 'hitachi_admin', 'frmAddRequestType', 'Service Request', 'Service Request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:38:38.103', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (12, NULL, '523843837', 'hitachi_admin', 'frmResolutionType', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Others', 'Others', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:02.603', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (13, '319229559', '680624893', 'hitachi_admin', 'frmSDCustomFieldCnrtl', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'True', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'txt319229559', 'HoldEnd', 'DateTime', 'True', 'ForTechnician', NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:17.910', 'HoldEnd', 'TextBox')
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (14, '255835739', '680624893', 'hitachi_admin', 'frmSDCustomFieldCnrtl', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'True', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'txt255835739', 'WIPStart', 'DateTime', 'True', 'ForTechnician', NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:39:31.520', 'WIPStart', 'TextBox')
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (15, '1761258871', '523843837', 'hitachi_admin', 'frmAddSeverity', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'S1', 'Severity -1 (Moderate Business Impact)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '15', '210', NULL, NULL, NULL, '2024-08-13 21:39:54.680', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (16, '1761258871', '523843837', 'hitachi_admin', 'frmAddSeverity', 'Incident', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'S2', 'Severity -1 (Moderate Business Impact)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '15', '210', NULL, NULL, NULL, '2024-08-13 21:40:08.070', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (17, '2000292840', '523843837', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, 'WIP', 'WIP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:40:24.390', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (18, '2000292840', '523843837', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, 'WIP1', 'WIP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '2024-08-13 21:40:35.940', NULL, NULL)
INSERT dbo.CommonLog(ID, TableId, OrgId, UserID, PageName, ReqType, ReqDef, StageName, StageDesc, SLAName, SLADesc, CategoryRef, CategoryCodeRef, TemplateName, SDPrefix, DeskDesc, SDCategory, Status, PriorityName, PriorityDesc, SeverityName, SeverityDesc, ResolutionName, ResolutionDesc, ArchiveTime, CoverageSch, HostName, Port, SenderUserName, SenderEmail, SenderPWD, Retry, ClientID, ClientSecretKey, TenantID, OrgName, OrgDesc, ContPersonName, ContPersonMob, ContPersonEmail, ContPersonNameII, ContPersonMobII, ContPersonEmailII, FieldID, FieldName, FieldMode, IsFieldReq, FieldScope, ResponseTimeMin, ResolutionTimeMin, StatusName, StatusDesc, ColorCode, InsertTime, FieldValue, FieldType) VALUES (19, '318981433', '680624893', 'hitachi_admin', 'frmAddSDStage', 'Incident', NULL, '1790681711', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'WIP', 'WIP', '#000000', '2024-08-13 21:40:53.420', NULL, NULL)
GO
SET IDENTITY_INSERT dbo.CommonLog OFF
GO

-- Table ServiceDesk30_3.dbo.AMS_Asset_Dep_Master does not contain any data (it is empty)

-- Table ServiceDesk30_3.dbo.ALM_OrgLogo does not contain any data (it is empty)

USE ServiceDesk30_3
GO

IF DB_NAME() <> N'ServiceDesk30_3' SET NOEXEC ON
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter trigger [UpdateStatus] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [UpdateStatus] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.UpdateStatus', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.UpdateStatus
       ON dbo.SDIncident
AFTER  UPDATE
AS
BEGIN
       SET NOCOUNT ON;
 
  --      DECLARE @TicketID numeric(18,0)
		--DECLARE @EsclationLevel VARCHAR(3)
		--DECLARE @TicketNumber VARCHAR(50)
		--DECLARE @UserName VARCHAR(50)
		--DECLARE @UserEmail VARCHAR(100)
		--Declare @ActionType varchar(50)
  --     SELECT @TicketID = a.TicketID ,@TicketNumber=a.TicketNumber,@EsclationLevel=a.EsclationLevel  
	 --  ,@UserName=b.UserName,@UserEmail=b.UserEmail  
  --     FROM INSERTED a
	 --  inner join 
	 --  SD_EsclateMaster b 
	 --  on a.EsclationLevel=b.EsclationLevel
 
  --     IF  update(EsclationLevel)
  --     BEGIN
	 --  SET @ActionType=(select  i.EsclationLevel
  --          from    deleted d
  --                  inner join inserted i   on  d.TicketID = i.TicketID
  --          where   d.EsclationLevel <> i.EsclationLevel and i.EsclationLevel is not null)
		--	if(@ActionType is not null)
		--	BEGIN
  --            Insert into  SD_TrackEsclationTicketMail  (TicketID
  --    ,TicketNumber
  --    ,UserName
  --    ,UserEmail
  --    ,EscLevel
  --    ,Eventdt) values(@TicketID,@TicketNumber,@UserName,@UserEmail,@EsclationLevel,GETDATE())
	 -- END
  --     END
	 
 
    	DECLARE @UpdateCursor CURSOR;
		DECLARE @TicketID numeric(18,0)
		DECLARE @EsclationLevel VARCHAR(3)
		DECLARE @TicketNumber VARCHAR(50)
		DECLARE @Stage numeric(18,0)
		DECLARE @UserEmail VARCHAR(100)
		Declare @ActionType varchar(50)
		Declare @EscMin int;
BEGIN
    SET @UpdateCursor = CURSOR FOR
   SELECT  a.ID,a.Ticketref,a.sdstageFK
	    
       FROM INSERTED a
	  
    OPEN @UpdateCursor 
    FETCH NEXT FROM @UpdateCursor 
    INTO @TicketID,@TicketNumber,@Stage

    WHILE @@FETCH_STATUS = 0
    BEGIN
       IF  update(sdstageFK)
       BEGIN
	   SET @ActionType=(select  i.sdstageFK
            from    deleted d
                    inner join inserted i   on  d.id = i.id
            where   d.sdstageFK <> i.sdstageFK and i.sdstageFK is not null and i.id=@TicketID)
			if(@ActionType is not null)
			BEGIN
			if exists(select * from SD_Status where id=@ActionType)
			BEGIN
			print(@ActionType);
			END
			ELSE
			BEGIN
          update SDIncident set previousStageFK=@ActionType where id=@TicketID
	  END
	  END
       END
			  FETCH NEXT FROM @UpdateCursor 
			   INTO @TicketID,@TicketNumber,@Stage
    END; 

    CLOSE @UpdateCursor ;
    DEALLOCATE @UpdateCursor;
END;
 
END
'
GO

--
-- Create or alter trigger [trg_TicketUpdate] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [trg_TicketUpdate] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.trg_TicketUpdate', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.trg_TicketUpdate ON dbo.SDIncident
AFTER  UPDATE
AS BEGIN



DECLARE @id numeric(26,0)= null
		,@DeskRef varchar(50) =NULL
		,@UserIDForAppro numeric(18,0)=null
		,@Ticketref varchar(50)=Null   
      ,@partitionid numeric(26,0)= null
      ,@orgServDeskDefnFK numeric(26,0)= null
      ,@sdStageFK numeric(26,0)= null
      ,@sdStatusFK numeric(26,0)= null
      ,@sdPriorityFK numeric(26,0)= null
      ,@sdSeverityFK numeric(26,0)= null
      ,@sdSolutionTypeFK numeric(26,0)= null
      ,@sdCategoryFK numeric(26,0)= null
      ,@creationDateTime datetime= null
      ,@closedDateTime datetime= null
      ,@TicketSummary varchar(max)= null
      ,@TicketDesc varchar(max)= null
	  ,@TickNotes nvarchar(max)=null
      ,@submitterType varchar(50)= null
      ,@submitterName varchar(50)= null
      ,@submitterEmailAddr varchar(50)= null
      ,@submitterPhone varchar(50)= null
      ,@assigneeType varchar(50)= null
      ,@assigneePoolFK numeric(26,0)= null
      ,@assigneeParticipantFK numeric(26,0)= null
      ,@actualCompletedDate datetime= null
      ,@expectedDueDate datetime= null
      ,@actualResolutionDate datetime= null
      ,@organizationFK numeric(26,0)= null
        ,@orgStaffFK numeric(26,0)= null
       ,@sdErrorMessage varchar(max)= null
        ,@solutionNote varchar(max)= null
        ,@sourceType varchar(50)= null
        ,@previousStageFK numeric(26,0)= null
        ,@categoryFullText varchar(max)= null
	    ,@sdCategoryRef  varchar(200)=null
	    ,@UserName nvarchar(100)=null
	    ,@SubmitterID varchar(50)=null
	    ,@AssigneName varchar(100)=null
	    ,@TechID numeric(18,0)=null
	    ,@UserID numeric(18,0)=null
		,@InsertBy varchar(200) =NULL
		,@InsertDt datetime =NULL
		,@UpdateBy varchar(200) =NULL
		,@UpdateDt datetime =NULl
		,@Status nvarchar(10) = NULL
		,@TicketAttachMent nvarchar(max)=null
		,@Filename nvarchar(100)=null
		,@location nvarchar(100)=null
		,@Department nvarchar(100)=null
		,@SDRole nvarchar(100)=null
	    ,@Option varchar(100) =NULL
	    ,@ActionDateTime datetime =null
		,@EditedByUser nvarchar(max)=null
	    ,@result VARCHAR(8000) 
	    ,@ActionType varchar(max) 


---- Get data from inserted/ updated
   SELECT 
      @id=id
     , @sdStageFK=sdStageFK
      ,@sdStatusFK=sdStatusFK
      ,@sdPriorityFK=sdPriorityFK
      ,@sdSeverityFK=sdSeverityFK     
      ,@sdCategoryFK=sdCategoryFK               
      ,@TicketDesc=TicketDesc
      ,@TicketSummary=TicketSummary
      ,@submitterName=submitterName
      ,@submitterEmailAddr=submitterEmailAddr
     ,@submitterPhone=submitterPhone
      ,@assigneeType =assigneeType
  --    ,assigneePoolFK
     ,@assigneeParticipantFK=assigneeParticipantFK
     ,@sdSolutionTypeFK=sdSolutionTypeFK
     ,@solutionNote=solutionNote
   ,@organizationFK=organizationFK
     --orgStaffFK
      ,@categoryFullText=categoryFullText
	 ,@Ticketref=ticketref
	 ,@location=location
	 ,@Department=Department
	 ,@submitterType=submitterType
	 ,@EditedByUser=EditedBy
           FROM inserted

	      
	   IF UPDATE(sdStageFK)
       BEGIN
	   DECLARE @OldValue NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue = StageCodeRef 
        FROM deleted d
		inner join SD_Stage st
		on st.ID=d.sdStageFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Stage has been'' +
        '' changed from '' + CAST(@OldValue as varchar) + '' to '' + CAST(sd.StageCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Stage  sd
					on sd.ID=i.sdStageFK

            where  ( d.sdStageFK <> i.sdStageFK and i.sdStageFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	 
	 end
	   END
	   IF UPDATE(sdStatusFK)
       BEGIN
	   DECLARE @OldValue1 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue1 = StatusCodeRef 
        FROM deleted d
		inner join SD_Status st
		on st.ID=d.sdStatusFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Status has been'' +
        '' changed from '' + CAST(@OldValue1 as varchar) + '' to '' + CAST(sd.StatusCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Status  sd
					on sd.ID=i.sdStageFK

            where   (d.sdStatusFK <> i.sdStatusFK and i.sdStatusFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
				SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			    insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	 
	 end
	   END
	   IF UPDATE(sdPriorityFK)
       BEGIN
	   DECLARE @OldValue2 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue2 = PriorityCodeRef 
        FROM deleted d
		inner join SD_Priority st
		on st.ID=d.sdPriorityFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Priority has been'' +
        '' changed from '' + CAST(@OldValue2 as varchar) + '' to '' + CAST(sd.PriorityCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Priority  sd
					on sd.ID=i.sdPriorityFK

            where   (d.sdPriorityFK <> i.sdPriorityFK and i.sdPriorityFK is not null)
			 and i.Ticketref=@Ticketref and d.organizationFK=@organizationFK
			
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			             insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
      
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
	  
	  end
	   END
	   IF UPDATE(sdSeverityFK)
       BEGIN
	   DECLARE @OldValue3 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue3 = ServerityCodeRef 
        FROM deleted d
		inner join SD_Severity st
		on st.ID=d.sdSeverityFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select   ''Severity has been'' +
        '' changed from '' + CAST(@OldValue3 as varchar) + '' to '' + CAST(sd.ServerityCodeRef as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Severity  sd
					on sd.ID=i.sdSeverityFK

            where  ( d.sdSeverityFK <> i.sdSeverityFK and i.sdSeverityFK is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			        insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
      
	  
	  end
	   END
	   IF UPDATE(sdCategoryFK)
       BEGIN
	   DECLARE @OldValue4 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue4 = Replace (categoryref,''||'','' - '')
        FROM deleted d
		inner join SD_category st
		on st.ID=d.sdCategoryFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''category has been'' +
        '' changed from '' + CAST(@OldValue4 as varchar) + '' to '' + CAST(Replace (sd.categoryref,''||'','' - '') as varchar) +'' for Ticket '' +i.Ticketref
            from    deleted d
                    inner join inserted i  
						
					on  d.Ticketref = i.Ticketref
					and i.organizationFK=d.organizationFK
					inner join SD_category sd
					on sd.ID=i.sdCategoryFK

            where  ( d.sdCategoryFK <> i.sdCategoryFK and i.sdCategoryFK is not null)
			   and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     
		 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
	 end
	   END
	   IF UPDATE(TicketDesc)
       BEGIN
	   DECLARE @OldValue5 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue5 = TicketDesc
        FROM deleted d
		where d.Ticketref=@Ticketref  and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''description has been'' +
        '' changed from '' + CAST(@OldValue5 as varchar) + '' to '' + CAST(i.TicketDesc as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
					
						and d.organizationFK=i.organizationFK
            where  ( d.TicketDesc <> i.TicketDesc and i.TicketDesc is not null)
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)

			
		SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )

			if(@ActionType is not null)
			begin
	    insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
      
	  
	  end
	   END	
	   IF UPDATE(assigneeParticipantFK)
       BEGIN
	   DECLARE @OldValue6 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue6 = st.TechLoginName 
        FROM deleted d
		inner join SD_Technician st
		on st.TechID=d.assigneeParticipantFK
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		
		 
		SET @ActionType=(select  ''Assignee has been'' +
        '' changed from '' + CAST(@OldValue6 as varchar) + '' to '' + CAST(sd.TechLoginName as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK
					inner join SD_Technician  sd
					on sd.TechID=i.assigneeParticipantFK

            where  ( d.assigneeParticipantFK <> i.assigneeParticipantFK and i.assigneeParticipantFK is not null
			) and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK
			)
		
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
  	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
   
   end
	   END
	    IF UPDATE(location)
       BEGIN
	   DECLARE @OldValue7 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue7 = location 
        FROM deleted d
	
        WHERE d.Ticketref = @Ticketref 
		
		 
		SET @ActionType=(select  ''location has been'' +
        '' changed from '' + CAST(@OldValue7 as varchar) + '' to '' + CAST(i.location as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
						and d.organizationFK=i.organizationFK

            where   (d.location <> i.location and i.location is not null)
			
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@EditedByUser,''1'',@submitterType)
     	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
 
	  
	  end
	   END
        IF UPDATE(department)
       BEGIN
	   DECLARE @OldValue8 NVARCHAR(MAX)

	    SELECT TOP 1 @OldValue8 = Department 
        FROM deleted d
	
        WHERE d.Ticketref = @Ticketref 
		and d.organizationFK=@organizationFK
		 
		SET @ActionType=(select  ''department has been'' +
        '' changed from '' + CAST(@OldValue8 as varchar) + '' to '' + CAST(i.Department as varchar) +''for Ticket'' +i.Ticketref
            from    deleted d
                    inner join inserted i  
					
					on  d.Ticketref = i.Ticketref
					and d.organizationFK=i.organizationFK
					

            where  ( d.Department <> i.Department and i.Department is not null)
			
			 and i.Ticketref=@Ticketref and i.organizationFK=@organizationFK)

			
			SET @UpdateBy=(Select  top 1 EdityBy from SD_TicketNotes where Ticketref=@Ticketref order by EditedDt desc )


			if(@ActionType is not null)
			begin
			           insert into SDTicketHistory(
		id,Ticketref,sdStageFK,sdStatusFK,sdPriorityFK,sdSeverityFK,sdCategoryFK,TicketSummary,TicketDesc
 ,submitterName,submitterEmailAddr,submitterPhone,assigneeType,assigneeParticipantFK
    ,categoryFullText,location,Department,ActionDateTime,ActionType,UpdateBy,partitionid,submitterType
 ) Values(@id ,@Ticketref ,@sdStageFK,@sdStatusFK,@sdPriorityFK,@sdSeverityFK  ,@sdCategoryFK,@TicketSummary,@TicketDesc
     ,@submitterName ,@submitterEmailAddr,@submitterPhone,@assigneeType,@assigneeParticipantFK    
      ,@categoryFullText,@location,@Department,GETDATE(), @ActionType,@UpdateBy,''1'',@submitterType)
 	 exec  SD_spAddTicketNotes @Ticketref=@Ticketref,@sdStatusFK=@sdStatusFK,@NoteDesc=@ActionType,@EdityBy=@EditedByUser,@Option=''AddNotes'',@organizationFK=@organizationFK
   
	
	end
	   END  
    END
      

  
'
GO

--
-- Create or alter trigger [TicketDeleteDetails] on table [dbo].[SDIncident]
--
GO
PRINT (N'Create or alter trigger [TicketDeleteDetails] on table [dbo].[SDIncident]')
GO
IF OBJECT_ID(N'dbo.TicketDeleteDetails', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.TicketDeleteDetails
       ON dbo.SDIncident
For  delete
AS
BEGIN
       SET NOCOUNT ON;
 
  --  
	 
 
    	DECLARE @DeleteCursor CURSOR;
		DECLARE @TicketID numeric(18,0)
		DECLARE @EsclationLevel VARCHAR(3)
		DECLARE @TicketNumber VARCHAR(50)
		DECLARE @SDStatusFK numeric(18,0)
		DECLARE @SDCategoryFK numeric(18,0)
		DECLARE @AssigneFK numeric(18,0)
		DECLARE @CreationDate datetime
		DECLARE @SubmitterEmail varchar(200)	
		Declare @ActionType varchar(50)
		Declare @EscMin int;
BEGIN
    SET @DeleteCursor = CURSOR FOR
   SELECT  a.id ,a.Ticketref,a.sdStatusFK,sdCategoryFK,a.assigneeParticipantFK,a.creationDateTime,a.submitterEmailAddr 
	  
       FROM deleted a
	 

    OPEN @DeleteCursor 
    FETCH NEXT FROM @DeleteCursor 
    INTO @TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail

    WHILE @@FETCH_STATUS = 0
    BEGIN
	
   
			
			Delete from SD_SLA where TicketID=@TicketID
			delete from SD_TrackEsclationTicketMail where TicketID=@TicketID
              Insert into SD_DeleteTicketLog (TicketID
      ,TicketNumber
      ,SDStatusFK
      ,SDCategoryFK
      ,AssigneFK
      ,CreationDate
      ,SubmitterEmail,EventDt) values(@TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail,GETDATE())
	
       
			  FETCH NEXT FROM @DeleteCursor 
			  INTO @TicketID,@TicketNumber,@SDStatusFK,@SDCategoryFK,@AssigneFK,@CreationDate,@SubmitterEmail
    END; 

    CLOSE @DeleteCursor ;
    DEALLOCATE @DeleteCursor;
END;
 
END
'
GO

--
-- Create or alter trigger [MakeCustomField] on table [dbo].[SD_CustomFieldControl]
--
GO
PRINT (N'Create or alter trigger [MakeCustomField] on table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.MakeCustomField', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.MakeCustomField
       ON dbo.SD_CustomFieldControl
AFTER INSERT
AS
BEGIN
       SET NOCOUNT ON;
 
       DECLARE @FieldName nvarchar(500);
	   Declare @FieldMode    nvarchar(100);
 
       SELECT @FieldName = i.FieldValue     ,@FieldMode  =i.FieldMode  
       FROM INSERTED i
 
 Declare @ColumnName varchar(500);
 Declare @ColumnType varchar(100);
 Declare @str varchar(max);
 set @ColumnName=@FieldName;
 set @ColumnType=@FieldMode  ;
 if exists(
 --select @FieldName from SD_CustomFieldValues 
 SELECT * 
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = ''SD_CustomFieldValues'' 
    AND COLUMN_NAME = @FieldName)
 BEGIN
 print(''hee'');
 END
 ELSE
 BEGIN
 set @str=''alter table  SD_CustomFieldValues add  ''+@ColumnName+'' ''+@ColumnType+''''

     exec(@str);
	 END
END

'
GO

--
-- Create or alter trigger [DeleteCustomFldVal] on table [dbo].[SD_CustomFieldControl]
--
GO
PRINT (N'Create or alter trigger [DeleteCustomFldVal] on table [dbo].[SD_CustomFieldControl]')
GO
IF OBJECT_ID(N'dbo.DeleteCustomFldVal', 'TR') IS NULL
EXEC sp_executesql N'CREATE OR ALTER TRIGGER dbo.DeleteCustomFldVal
    ON  dbo.SD_CustomFieldControl
    FOR DELETE
AS

Declare @ColumnName varchar(500);
Declare @FieldName varchar(500);
  SELECT  @FieldName=d.FieldValue FROM deleted d

  Declare @str nvarchar(max);
  set @ColumnName=@FieldName
  if exists(select @ColumnName from SD_CustomFieldValues)
  BEGIN
  set @str=''alter table SD_CustomFieldValues drop column ''+@ColumnName+''''
  exec(@str);
  END
  
'
GO

SET NOEXEC OFF
>>>>>>> 756a97e87291978847dfcfffc27dd8f5a26b524c
GO